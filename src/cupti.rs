/* automatically generated by rust-bindgen 0.64.0 */

#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub const fn new() -> Self {
        __BindgenUnionField(::std::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        ::std::mem::transmute(self)
    }
}
impl<T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
impl<T> ::std::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::std::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> ::std::hash::Hash for __BindgenUnionField<T> {
    fn hash<H: ::std::hash::Hasher>(&self, _state: &mut H) {}
}
impl<T> ::std::cmp::PartialEq for __BindgenUnionField<T> {
    fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
        true
    }
}
impl<T> ::std::cmp::Eq for __BindgenUnionField<T> {}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUptiResult {
    CUPTI_SUCCESS = 0,
    CUPTI_ERROR_INVALID_PARAMETER = 1,
    CUPTI_ERROR_INVALID_DEVICE = 2,
    CUPTI_ERROR_INVALID_CONTEXT = 3,
    CUPTI_ERROR_INVALID_EVENT_DOMAIN_ID = 4,
    CUPTI_ERROR_INVALID_EVENT_ID = 5,
    CUPTI_ERROR_INVALID_EVENT_NAME = 6,
    CUPTI_ERROR_INVALID_OPERATION = 7,
    CUPTI_ERROR_OUT_OF_MEMORY = 8,
    CUPTI_ERROR_HARDWARE = 9,
    CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT = 10,
    CUPTI_ERROR_API_NOT_IMPLEMENTED = 11,
    CUPTI_ERROR_MAX_LIMIT_REACHED = 12,
    CUPTI_ERROR_NOT_READY = 13,
    CUPTI_ERROR_NOT_COMPATIBLE = 14,
    CUPTI_ERROR_NOT_INITIALIZED = 15,
    CUPTI_ERROR_INVALID_METRIC_ID = 16,
    CUPTI_ERROR_INVALID_METRIC_NAME = 17,
    CUPTI_ERROR_QUEUE_EMPTY = 18,
    CUPTI_ERROR_INVALID_HANDLE = 19,
    CUPTI_ERROR_INVALID_STREAM = 20,
    CUPTI_ERROR_INVALID_KIND = 21,
    CUPTI_ERROR_INVALID_EVENT_VALUE = 22,
    CUPTI_ERROR_DISABLED = 23,
    CUPTI_ERROR_INVALID_MODULE = 24,
    CUPTI_ERROR_INVALID_METRIC_VALUE = 25,
    CUPTI_ERROR_HARDWARE_BUSY = 26,
    CUPTI_ERROR_NOT_SUPPORTED = 27,
    CUPTI_ERROR_UM_PROFILING_NOT_SUPPORTED = 28,
    CUPTI_ERROR_UM_PROFILING_NOT_SUPPORTED_ON_DEVICE = 29,
    CUPTI_ERROR_UM_PROFILING_NOT_SUPPORTED_ON_NON_P2P_DEVICES = 30,
    CUPTI_ERROR_UM_PROFILING_NOT_SUPPORTED_WITH_MPS = 31,
    CUPTI_ERROR_CDP_TRACING_NOT_SUPPORTED = 32,
    CUPTI_ERROR_VIRTUALIZED_DEVICE_NOT_SUPPORTED = 33,
    CUPTI_ERROR_CUDA_COMPILER_NOT_COMPATIBLE = 34,
    CUPTI_ERROR_INSUFFICIENT_PRIVILEGES = 35,
    CUPTI_ERROR_OLD_PROFILER_API_INITIALIZED = 36,
    CUPTI_ERROR_OPENACC_UNDEFINED_ROUTINE = 37,
    CUPTI_ERROR_LEGACY_PROFILER_NOT_SUPPORTED = 38,
    CUPTI_ERROR_MULTIPLE_SUBSCRIBERS_NOT_SUPPORTED = 39,
    CUPTI_ERROR_VIRTUALIZED_DEVICE_INSUFFICIENT_PRIVILEGES = 40,
    CUPTI_ERROR_CONFIDENTIAL_COMPUTING_NOT_SUPPORTED = 41,
    CUPTI_ERROR_CMP_DEVICE_NOT_SUPPORTED = 42,
    CUPTI_ERROR_UNKNOWN = 999,
    CUPTI_ERROR_FORCE_INT = 2147483647,
}
extern "C" {
    pub fn cuptiGetResultString(
        result: CUptiResult,
        str_: *mut *const ::std::os::raw::c_char,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiGetVersion(version: *mut u32) -> CUptiResult;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_ApiCallbackSite {
    CUPTI_API_ENTER = 0,
    CUPTI_API_EXIT = 1,
    CUPTI_API_CBSITE_FORCE_INT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_CallbackDomain {
    CUPTI_CB_DOMAIN_INVALID = 0,
    CUPTI_CB_DOMAIN_DRIVER_API = 1,
    CUPTI_CB_DOMAIN_RUNTIME_API = 2,
    CUPTI_CB_DOMAIN_RESOURCE = 3,
    CUPTI_CB_DOMAIN_SYNCHRONIZE = 4,
    CUPTI_CB_DOMAIN_NVTX = 5,
    CUPTI_CB_DOMAIN_SIZE = 6,
    CUPTI_CB_DOMAIN_FORCE_INT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_CallbackIdResource {
    CUPTI_CBID_RESOURCE_INVALID = 0,
    CUPTI_CBID_RESOURCE_CONTEXT_CREATED = 1,
    CUPTI_CBID_RESOURCE_CONTEXT_DESTROY_STARTING = 2,
    CUPTI_CBID_RESOURCE_STREAM_CREATED = 3,
    CUPTI_CBID_RESOURCE_STREAM_DESTROY_STARTING = 4,
    CUPTI_CBID_RESOURCE_CU_INIT_FINISHED = 5,
    CUPTI_CBID_RESOURCE_MODULE_LOADED = 6,
    CUPTI_CBID_RESOURCE_MODULE_UNLOAD_STARTING = 7,
    CUPTI_CBID_RESOURCE_MODULE_PROFILED = 8,
    CUPTI_CBID_RESOURCE_GRAPH_CREATED = 9,
    CUPTI_CBID_RESOURCE_GRAPH_DESTROY_STARTING = 10,
    CUPTI_CBID_RESOURCE_GRAPH_CLONED = 11,
    CUPTI_CBID_RESOURCE_GRAPHNODE_CREATE_STARTING = 12,
    CUPTI_CBID_RESOURCE_GRAPHNODE_CREATED = 13,
    CUPTI_CBID_RESOURCE_GRAPHNODE_DESTROY_STARTING = 14,
    CUPTI_CBID_RESOURCE_GRAPHNODE_DEPENDENCY_CREATED = 15,
    CUPTI_CBID_RESOURCE_GRAPHNODE_DEPENDENCY_DESTROY_STARTING = 16,
    CUPTI_CBID_RESOURCE_GRAPHEXEC_CREATE_STARTING = 17,
    CUPTI_CBID_RESOURCE_GRAPHEXEC_CREATED = 18,
    CUPTI_CBID_RESOURCE_GRAPHEXEC_DESTROY_STARTING = 19,
    CUPTI_CBID_RESOURCE_GRAPHNODE_CLONED = 20,
    CUPTI_CBID_RESOURCE_SIZE = 21,
    CUPTI_CBID_RESOURCE_FORCE_INT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_CallbackIdSync {
    CUPTI_CBID_SYNCHRONIZE_INVALID = 0,
    CUPTI_CBID_SYNCHRONIZE_STREAM_SYNCHRONIZED = 1,
    CUPTI_CBID_SYNCHRONIZE_CONTEXT_SYNCHRONIZED = 2,
    CUPTI_CBID_SYNCHRONIZE_SIZE = 3,
    CUPTI_CBID_SYNCHRONIZE_FORCE_INT = 2147483647,
}
#[repr(C)]
pub struct CUpti_CallbackData {
    pub callbackSite: CUpti_ApiCallbackSite,
    pub functionName: *const ::std::os::raw::c_char,
    pub functionParams: *const ::std::os::raw::c_void,
    pub functionReturnValue: *mut ::std::os::raw::c_void,
    pub symbolName: *const ::std::os::raw::c_char,
    pub context: CUcontext,
    pub contextUid: u32,
    pub correlationData: *mut u64,
    pub correlationId: u32,
}
#[test]
fn bindgen_test_layout_CUpti_CallbackData() {
    const UNINIT: ::std::mem::MaybeUninit<CUpti_CallbackData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CUpti_CallbackData>(),
        72usize,
        concat!("Size of: ", stringify!(CUpti_CallbackData))
    );
    assert_eq!(
        ::std::mem::align_of::<CUpti_CallbackData>(),
        8usize,
        concat!("Alignment of ", stringify!(CUpti_CallbackData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).callbackSite) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_CallbackData),
            "::",
            stringify!(callbackSite)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).functionName) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_CallbackData),
            "::",
            stringify!(functionName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).functionParams) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_CallbackData),
            "::",
            stringify!(functionParams)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).functionReturnValue) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_CallbackData),
            "::",
            stringify!(functionReturnValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).symbolName) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_CallbackData),
            "::",
            stringify!(symbolName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_CallbackData),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).contextUid) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_CallbackData),
            "::",
            stringify!(contextUid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).correlationData) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_CallbackData),
            "::",
            stringify!(correlationData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).correlationId) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_CallbackData),
            "::",
            stringify!(correlationId)
        )
    );
}
impl Default for CUpti_CallbackData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct CUpti_ResourceData {
    pub context: CUcontext,
    pub resourceHandle: CUpti_ResourceData__bindgen_ty_1,
    pub resourceDescriptor: *mut ::std::os::raw::c_void,
}
#[repr(C)]
pub struct CUpti_ResourceData__bindgen_ty_1 {
    pub stream: __BindgenUnionField<CUstream>,
    pub bindgen_union_field: u64,
}
#[test]
fn bindgen_test_layout_CUpti_ResourceData__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<CUpti_ResourceData__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CUpti_ResourceData__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(CUpti_ResourceData__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<CUpti_ResourceData__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CUpti_ResourceData__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_ResourceData__bindgen_ty_1),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for CUpti_ResourceData__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_CUpti_ResourceData() {
    const UNINIT: ::std::mem::MaybeUninit<CUpti_ResourceData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CUpti_ResourceData>(),
        24usize,
        concat!("Size of: ", stringify!(CUpti_ResourceData))
    );
    assert_eq!(
        ::std::mem::align_of::<CUpti_ResourceData>(),
        8usize,
        concat!("Alignment of ", stringify!(CUpti_ResourceData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_ResourceData),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resourceHandle) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_ResourceData),
            "::",
            stringify!(resourceHandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resourceDescriptor) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_ResourceData),
            "::",
            stringify!(resourceDescriptor)
        )
    );
}
impl Default for CUpti_ResourceData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct CUpti_ModuleResourceData {
    pub moduleId: u32,
    pub cubinSize: usize,
    pub pCubin: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_CUpti_ModuleResourceData() {
    const UNINIT: ::std::mem::MaybeUninit<CUpti_ModuleResourceData> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CUpti_ModuleResourceData>(),
        24usize,
        concat!("Size of: ", stringify!(CUpti_ModuleResourceData))
    );
    assert_eq!(
        ::std::mem::align_of::<CUpti_ModuleResourceData>(),
        8usize,
        concat!("Alignment of ", stringify!(CUpti_ModuleResourceData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).moduleId) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_ModuleResourceData),
            "::",
            stringify!(moduleId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cubinSize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_ModuleResourceData),
            "::",
            stringify!(cubinSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCubin) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_ModuleResourceData),
            "::",
            stringify!(pCubin)
        )
    );
}
impl Default for CUpti_ModuleResourceData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct CUpti_GraphData {
    pub graph: CUgraph,
    pub originalGraph: CUgraph,
    pub node: CUgraphNode,
    pub originalNode: CUgraphNode,
    pub nodeType: CUgraphNodeType,
    pub dependency: CUgraphNode,
    pub graphExec: CUgraphExec,
}
#[test]
fn bindgen_test_layout_CUpti_GraphData() {
    const UNINIT: ::std::mem::MaybeUninit<CUpti_GraphData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CUpti_GraphData>(),
        56usize,
        concat!("Size of: ", stringify!(CUpti_GraphData))
    );
    assert_eq!(
        ::std::mem::align_of::<CUpti_GraphData>(),
        8usize,
        concat!("Alignment of ", stringify!(CUpti_GraphData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graph) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_GraphData),
            "::",
            stringify!(graph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).originalGraph) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_GraphData),
            "::",
            stringify!(originalGraph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_GraphData),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).originalNode) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_GraphData),
            "::",
            stringify!(originalNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeType) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_GraphData),
            "::",
            stringify!(nodeType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dependency) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_GraphData),
            "::",
            stringify!(dependency)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graphExec) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_GraphData),
            "::",
            stringify!(graphExec)
        )
    );
}
impl Default for CUpti_GraphData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct CUpti_SynchronizeData {
    pub context: CUcontext,
    pub stream: CUstream,
}
#[test]
fn bindgen_test_layout_CUpti_SynchronizeData() {
    const UNINIT: ::std::mem::MaybeUninit<CUpti_SynchronizeData> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CUpti_SynchronizeData>(),
        16usize,
        concat!("Size of: ", stringify!(CUpti_SynchronizeData))
    );
    assert_eq!(
        ::std::mem::align_of::<CUpti_SynchronizeData>(),
        8usize,
        concat!("Alignment of ", stringify!(CUpti_SynchronizeData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_SynchronizeData),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_SynchronizeData),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for CUpti_SynchronizeData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct CUpti_NvtxData {
    pub functionName: *const ::std::os::raw::c_char,
    pub functionParams: *const ::std::os::raw::c_void,
    pub functionReturnValue: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_CUpti_NvtxData() {
    const UNINIT: ::std::mem::MaybeUninit<CUpti_NvtxData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CUpti_NvtxData>(),
        24usize,
        concat!("Size of: ", stringify!(CUpti_NvtxData))
    );
    assert_eq!(
        ::std::mem::align_of::<CUpti_NvtxData>(),
        8usize,
        concat!("Alignment of ", stringify!(CUpti_NvtxData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).functionName) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_NvtxData),
            "::",
            stringify!(functionName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).functionParams) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_NvtxData),
            "::",
            stringify!(functionParams)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).functionReturnValue) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_NvtxData),
            "::",
            stringify!(functionReturnValue)
        )
    );
}
impl Default for CUpti_NvtxData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CUpti_CallbackId = u32;
pub type CUpti_CallbackFunc = ::std::option::Option<
    unsafe extern "C" fn(
        userdata: *mut ::std::os::raw::c_void,
        domain: CUpti_CallbackDomain,
        cbid: CUpti_CallbackId,
        cbdata: *const ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUpti_Subscriber_st {
    _unused: [u8; 0],
}
pub type CUpti_SubscriberHandle = *mut CUpti_Subscriber_st;
pub type CUpti_DomainTable = *mut CUpti_CallbackDomain;
extern "C" {
    pub fn cuptiSupportedDomains(
        domainCount: *mut usize,
        domainTable: *mut CUpti_DomainTable,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiSubscribe(
        subscriber: *mut CUpti_SubscriberHandle,
        callback: CUpti_CallbackFunc,
        userdata: *mut ::std::os::raw::c_void,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiUnsubscribe(subscriber: CUpti_SubscriberHandle) -> CUptiResult;
}
extern "C" {
    pub fn cuptiGetCallbackState(
        enable: *mut u32,
        subscriber: CUpti_SubscriberHandle,
        domain: CUpti_CallbackDomain,
        cbid: CUpti_CallbackId,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEnableCallback(
        enable: u32,
        subscriber: CUpti_SubscriberHandle,
        domain: CUpti_CallbackDomain,
        cbid: CUpti_CallbackId,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEnableDomain(
        enable: u32,
        subscriber: CUpti_SubscriberHandle,
        domain: CUpti_CallbackDomain,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEnableAllDomains(enable: u32, subscriber: CUpti_SubscriberHandle) -> CUptiResult;
}
extern "C" {
    pub fn cuptiGetCallbackName(
        domain: CUpti_CallbackDomain,
        cbid: u32,
        name: *mut *const ::std::os::raw::c_char,
    ) -> CUptiResult;
}
pub type CUpti_EventID = u32;
pub type CUpti_EventDomainID = u32;
pub type CUpti_EventGroup = *mut ::std::os::raw::c_void;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_DeviceAttributeDeviceClass {
    CUPTI_DEVICE_ATTR_DEVICE_CLASS_TESLA = 0,
    CUPTI_DEVICE_ATTR_DEVICE_CLASS_QUADRO = 1,
    CUPTI_DEVICE_ATTR_DEVICE_CLASS_GEFORCE = 2,
    CUPTI_DEVICE_ATTR_DEVICE_CLASS_TEGRA = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_DeviceAttribute {
    CUPTI_DEVICE_ATTR_MAX_EVENT_ID = 1,
    CUPTI_DEVICE_ATTR_MAX_EVENT_DOMAIN_ID = 2,
    CUPTI_DEVICE_ATTR_GLOBAL_MEMORY_BANDWIDTH = 3,
    CUPTI_DEVICE_ATTR_INSTRUCTION_PER_CYCLE = 4,
    CUPTI_DEVICE_ATTR_INSTRUCTION_THROUGHPUT_SINGLE_PRECISION = 5,
    CUPTI_DEVICE_ATTR_MAX_FRAME_BUFFERS = 6,
    CUPTI_DEVICE_ATTR_PCIE_LINK_RATE = 7,
    CUPTI_DEVICE_ATTR_PCIE_LINK_WIDTH = 8,
    CUPTI_DEVICE_ATTR_PCIE_GEN = 9,
    CUPTI_DEVICE_ATTR_DEVICE_CLASS = 10,
    CUPTI_DEVICE_ATTR_FLOP_SP_PER_CYCLE = 11,
    CUPTI_DEVICE_ATTR_FLOP_DP_PER_CYCLE = 12,
    CUPTI_DEVICE_ATTR_MAX_L2_UNITS = 13,
    CUPTI_DEVICE_ATTR_MAX_SHARED_MEMORY_CACHE_CONFIG_PREFER_SHARED = 14,
    CUPTI_DEVICE_ATTR_MAX_SHARED_MEMORY_CACHE_CONFIG_PREFER_L1 = 15,
    CUPTI_DEVICE_ATTR_MAX_SHARED_MEMORY_CACHE_CONFIG_PREFER_EQUAL = 16,
    CUPTI_DEVICE_ATTR_FLOP_HP_PER_CYCLE = 17,
    CUPTI_DEVICE_ATTR_NVLINK_PRESENT = 18,
    CUPTI_DEVICE_ATTR_GPU_CPU_NVLINK_BW = 19,
    CUPTI_DEVICE_ATTR_NVSWITCH_PRESENT = 20,
    CUPTI_DEVICE_ATTR_FORCE_INT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_EventDomainAttribute {
    CUPTI_EVENT_DOMAIN_ATTR_NAME = 0,
    CUPTI_EVENT_DOMAIN_ATTR_INSTANCE_COUNT = 1,
    CUPTI_EVENT_DOMAIN_ATTR_TOTAL_INSTANCE_COUNT = 3,
    CUPTI_EVENT_DOMAIN_ATTR_COLLECTION_METHOD = 4,
    CUPTI_EVENT_DOMAIN_ATTR_FORCE_INT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_EventCollectionMethod {
    CUPTI_EVENT_COLLECTION_METHOD_PM = 0,
    CUPTI_EVENT_COLLECTION_METHOD_SM = 1,
    CUPTI_EVENT_COLLECTION_METHOD_INSTRUMENTED = 2,
    CUPTI_EVENT_COLLECTION_METHOD_NVLINK_TC = 3,
    CUPTI_EVENT_COLLECTION_METHOD_FORCE_INT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_EventGroupAttribute {
    CUPTI_EVENT_GROUP_ATTR_EVENT_DOMAIN_ID = 0,
    CUPTI_EVENT_GROUP_ATTR_PROFILE_ALL_DOMAIN_INSTANCES = 1,
    CUPTI_EVENT_GROUP_ATTR_USER_DATA = 2,
    CUPTI_EVENT_GROUP_ATTR_NUM_EVENTS = 3,
    CUPTI_EVENT_GROUP_ATTR_EVENTS = 4,
    CUPTI_EVENT_GROUP_ATTR_INSTANCE_COUNT = 5,
    CUPTI_EVENT_GROUP_ATTR_PROFILING_SCOPE = 6,
    CUPTI_EVENT_GROUP_ATTR_FORCE_INT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_EventProfilingScope {
    CUPTI_EVENT_PROFILING_SCOPE_CONTEXT = 0,
    CUPTI_EVENT_PROFILING_SCOPE_DEVICE = 1,
    CUPTI_EVENT_PROFILING_SCOPE_BOTH = 2,
    CUPTI_EVENT_PROFILING_SCOPE_FORCE_INT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_EventAttribute {
    CUPTI_EVENT_ATTR_NAME = 0,
    CUPTI_EVENT_ATTR_SHORT_DESCRIPTION = 1,
    CUPTI_EVENT_ATTR_LONG_DESCRIPTION = 2,
    CUPTI_EVENT_ATTR_CATEGORY = 3,
    CUPTI_EVENT_ATTR_PROFILING_SCOPE = 5,
    CUPTI_EVENT_ATTR_FORCE_INT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_EventCollectionMode {
    CUPTI_EVENT_COLLECTION_MODE_CONTINUOUS = 0,
    CUPTI_EVENT_COLLECTION_MODE_KERNEL = 1,
    CUPTI_EVENT_COLLECTION_MODE_FORCE_INT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_EventCategory {
    CUPTI_EVENT_CATEGORY_INSTRUCTION = 0,
    CUPTI_EVENT_CATEGORY_MEMORY = 1,
    CUPTI_EVENT_CATEGORY_CACHE = 2,
    CUPTI_EVENT_CATEGORY_PROFILE_TRIGGER = 3,
    CUPTI_EVENT_CATEGORY_SYSTEM = 4,
    CUPTI_EVENT_CATEGORY_FORCE_INT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_ReadEventFlags {
    CUPTI_EVENT_READ_FLAG_NONE = 0,
    CUPTI_EVENT_READ_FLAG_FORCE_INT = 2147483647,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct CUpti_EventGroupSet {
    pub numEventGroups: u32,
    pub eventGroups: *mut CUpti_EventGroup,
}
#[test]
fn bindgen_test_layout_CUpti_EventGroupSet() {
    const UNINIT: ::std::mem::MaybeUninit<CUpti_EventGroupSet> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CUpti_EventGroupSet>(),
        16usize,
        concat!("Size of: ", stringify!(CUpti_EventGroupSet))
    );
    assert_eq!(
        ::std::mem::align_of::<CUpti_EventGroupSet>(),
        8usize,
        concat!("Alignment of ", stringify!(CUpti_EventGroupSet))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numEventGroups) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_EventGroupSet),
            "::",
            stringify!(numEventGroups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eventGroups) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_EventGroupSet),
            "::",
            stringify!(eventGroups)
        )
    );
}
impl Default for CUpti_EventGroupSet {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct CUpti_EventGroupSets {
    pub numSets: u32,
    pub sets: *mut CUpti_EventGroupSet,
}
#[test]
fn bindgen_test_layout_CUpti_EventGroupSets() {
    const UNINIT: ::std::mem::MaybeUninit<CUpti_EventGroupSets> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CUpti_EventGroupSets>(),
        16usize,
        concat!("Size of: ", stringify!(CUpti_EventGroupSets))
    );
    assert_eq!(
        ::std::mem::align_of::<CUpti_EventGroupSets>(),
        8usize,
        concat!("Alignment of ", stringify!(CUpti_EventGroupSets))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numSets) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_EventGroupSets),
            "::",
            stringify!(numSets)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sets) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_EventGroupSets),
            "::",
            stringify!(sets)
        )
    );
}
impl Default for CUpti_EventGroupSets {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn cuptiSetEventCollectionMode(
        context: CUcontext,
        mode: CUpti_EventCollectionMode,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiDeviceGetAttribute(
        device: CUdevice,
        attrib: CUpti_DeviceAttribute,
        valueSize: *mut usize,
        value: *mut ::std::os::raw::c_void,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiDeviceGetTimestamp(context: CUcontext, timestamp: *mut u64) -> CUptiResult;
}
extern "C" {
    pub fn cuptiDeviceGetNumEventDomains(device: CUdevice, numDomains: *mut u32) -> CUptiResult;
}
extern "C" {
    pub fn cuptiDeviceEnumEventDomains(
        device: CUdevice,
        arraySizeBytes: *mut usize,
        domainArray: *mut CUpti_EventDomainID,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiDeviceGetEventDomainAttribute(
        device: CUdevice,
        eventDomain: CUpti_EventDomainID,
        attrib: CUpti_EventDomainAttribute,
        valueSize: *mut usize,
        value: *mut ::std::os::raw::c_void,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiGetNumEventDomains(numDomains: *mut u32) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEnumEventDomains(
        arraySizeBytes: *mut usize,
        domainArray: *mut CUpti_EventDomainID,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEventDomainGetAttribute(
        eventDomain: CUpti_EventDomainID,
        attrib: CUpti_EventDomainAttribute,
        valueSize: *mut usize,
        value: *mut ::std::os::raw::c_void,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEventDomainGetNumEvents(
        eventDomain: CUpti_EventDomainID,
        numEvents: *mut u32,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEventDomainEnumEvents(
        eventDomain: CUpti_EventDomainID,
        arraySizeBytes: *mut usize,
        eventArray: *mut CUpti_EventID,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEventGetAttribute(
        event: CUpti_EventID,
        attrib: CUpti_EventAttribute,
        valueSize: *mut usize,
        value: *mut ::std::os::raw::c_void,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEventGetIdFromName(
        device: CUdevice,
        eventName: *const ::std::os::raw::c_char,
        event: *mut CUpti_EventID,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEventGroupCreate(
        context: CUcontext,
        eventGroup: *mut CUpti_EventGroup,
        flags: u32,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEventGroupDestroy(eventGroup: CUpti_EventGroup) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEventGroupGetAttribute(
        eventGroup: CUpti_EventGroup,
        attrib: CUpti_EventGroupAttribute,
        valueSize: *mut usize,
        value: *mut ::std::os::raw::c_void,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEventGroupSetAttribute(
        eventGroup: CUpti_EventGroup,
        attrib: CUpti_EventGroupAttribute,
        valueSize: usize,
        value: *mut ::std::os::raw::c_void,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEventGroupAddEvent(
        eventGroup: CUpti_EventGroup,
        event: CUpti_EventID,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEventGroupRemoveEvent(
        eventGroup: CUpti_EventGroup,
        event: CUpti_EventID,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEventGroupRemoveAllEvents(eventGroup: CUpti_EventGroup) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEventGroupResetAllEvents(eventGroup: CUpti_EventGroup) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEventGroupEnable(eventGroup: CUpti_EventGroup) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEventGroupDisable(eventGroup: CUpti_EventGroup) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEventGroupReadEvent(
        eventGroup: CUpti_EventGroup,
        flags: CUpti_ReadEventFlags,
        event: CUpti_EventID,
        eventValueBufferSizeBytes: *mut usize,
        eventValueBuffer: *mut u64,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEventGroupReadAllEvents(
        eventGroup: CUpti_EventGroup,
        flags: CUpti_ReadEventFlags,
        eventValueBufferSizeBytes: *mut usize,
        eventValueBuffer: *mut u64,
        eventIdArraySizeBytes: *mut usize,
        eventIdArray: *mut CUpti_EventID,
        numEventIdsRead: *mut usize,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEventGroupSetsCreate(
        context: CUcontext,
        eventIdArraySizeBytes: usize,
        eventIdArray: *mut CUpti_EventID,
        eventGroupPasses: *mut *mut CUpti_EventGroupSets,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEventGroupSetsDestroy(eventGroupSets: *mut CUpti_EventGroupSets) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEventGroupSetEnable(eventGroupSet: *mut CUpti_EventGroupSet) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEventGroupSetDisable(eventGroupSet: *mut CUpti_EventGroupSet) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEnableKernelReplayMode(context: CUcontext) -> CUptiResult;
}
extern "C" {
    pub fn cuptiDisableKernelReplayMode(context: CUcontext) -> CUptiResult;
}
pub type CUpti_KernelReplayUpdateFunc = ::std::option::Option<
    unsafe extern "C" fn(
        kernelName: *const ::std::os::raw::c_char,
        numReplaysDone: ::std::os::raw::c_int,
        customData: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn cuptiKernelReplaySubscribeUpdate(
        updateFunc: CUpti_KernelReplayUpdateFunc,
        customData: *mut ::std::os::raw::c_void,
    ) -> CUptiResult;
}
pub type CUpti_MetricID = u32;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_MetricCategory {
    CUPTI_METRIC_CATEGORY_MEMORY = 0,
    CUPTI_METRIC_CATEGORY_INSTRUCTION = 1,
    CUPTI_METRIC_CATEGORY_MULTIPROCESSOR = 2,
    CUPTI_METRIC_CATEGORY_CACHE = 3,
    CUPTI_METRIC_CATEGORY_TEXTURE = 4,
    CUPTI_METRIC_CATEGORY_NVLINK = 5,
    CUPTI_METRIC_CATEGORY_PCIE = 6,
    CUPTI_METRIC_CATEGORY_FORCE_INT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_MetricEvaluationMode {
    CUPTI_METRIC_EVALUATION_MODE_PER_INSTANCE = 1,
    CUPTI_METRIC_EVALUATION_MODE_AGGREGATE = 2,
    CUPTI_METRIC_EVALUATION_MODE_FORCE_INT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_MetricValueKind {
    CUPTI_METRIC_VALUE_KIND_DOUBLE = 0,
    CUPTI_METRIC_VALUE_KIND_UINT64 = 1,
    CUPTI_METRIC_VALUE_KIND_PERCENT = 2,
    CUPTI_METRIC_VALUE_KIND_THROUGHPUT = 3,
    CUPTI_METRIC_VALUE_KIND_INT64 = 4,
    CUPTI_METRIC_VALUE_KIND_UTILIZATION_LEVEL = 5,
    CUPTI_METRIC_VALUE_KIND_FORCE_INT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_MetricValueUtilizationLevel {
    CUPTI_METRIC_VALUE_UTILIZATION_IDLE = 0,
    CUPTI_METRIC_VALUE_UTILIZATION_LOW = 2,
    CUPTI_METRIC_VALUE_UTILIZATION_MID = 5,
    CUPTI_METRIC_VALUE_UTILIZATION_HIGH = 8,
    CUPTI_METRIC_VALUE_UTILIZATION_MAX = 10,
    CUPTI_METRIC_VALUE_UTILIZATION_FORCE_INT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_MetricAttribute {
    CUPTI_METRIC_ATTR_NAME = 0,
    CUPTI_METRIC_ATTR_SHORT_DESCRIPTION = 1,
    CUPTI_METRIC_ATTR_LONG_DESCRIPTION = 2,
    CUPTI_METRIC_ATTR_CATEGORY = 3,
    CUPTI_METRIC_ATTR_VALUE_KIND = 4,
    CUPTI_METRIC_ATTR_EVALUATION_MODE = 5,
    CUPTI_METRIC_ATTR_FORCE_INT = 2147483647,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union CUpti_MetricValue {
    pub metricValueDouble: f64,
    pub metricValueUint64: u64,
    pub metricValueInt64: i64,
    pub metricValuePercent: f64,
    pub metricValueThroughput: u64,
    pub metricValueUtilizationLevel: CUpti_MetricValueUtilizationLevel,
}
#[test]
fn bindgen_test_layout_CUpti_MetricValue() {
    const UNINIT: ::std::mem::MaybeUninit<CUpti_MetricValue> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CUpti_MetricValue>(),
        8usize,
        concat!("Size of: ", stringify!(CUpti_MetricValue))
    );
    assert_eq!(
        ::std::mem::align_of::<CUpti_MetricValue>(),
        8usize,
        concat!("Alignment of ", stringify!(CUpti_MetricValue))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).metricValueDouble) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_MetricValue),
            "::",
            stringify!(metricValueDouble)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).metricValueUint64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_MetricValue),
            "::",
            stringify!(metricValueUint64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).metricValueInt64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_MetricValue),
            "::",
            stringify!(metricValueInt64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).metricValuePercent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_MetricValue),
            "::",
            stringify!(metricValuePercent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).metricValueThroughput) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_MetricValue),
            "::",
            stringify!(metricValueThroughput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).metricValueUtilizationLevel) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_MetricValue),
            "::",
            stringify!(metricValueUtilizationLevel)
        )
    );
}
impl Default for CUpti_MetricValue {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_MetricPropertyDeviceClass {
    CUPTI_METRIC_PROPERTY_DEVICE_CLASS_TESLA = 0,
    CUPTI_METRIC_PROPERTY_DEVICE_CLASS_QUADRO = 1,
    CUPTI_METRIC_PROPERTY_DEVICE_CLASS_GEFORCE = 2,
    CUPTI_METRIC_PROPERTY_DEVICE_CLASS_TEGRA = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_MetricPropertyID {
    CUPTI_METRIC_PROPERTY_MULTIPROCESSOR_COUNT = 0,
    CUPTI_METRIC_PROPERTY_WARPS_PER_MULTIPROCESSOR = 1,
    CUPTI_METRIC_PROPERTY_KERNEL_GPU_TIME = 2,
    CUPTI_METRIC_PROPERTY_CLOCK_RATE = 3,
    CUPTI_METRIC_PROPERTY_FRAME_BUFFER_COUNT = 4,
    CUPTI_METRIC_PROPERTY_GLOBAL_MEMORY_BANDWIDTH = 5,
    CUPTI_METRIC_PROPERTY_PCIE_LINK_RATE = 6,
    CUPTI_METRIC_PROPERTY_PCIE_LINK_WIDTH = 7,
    CUPTI_METRIC_PROPERTY_PCIE_GEN = 8,
    CUPTI_METRIC_PROPERTY_DEVICE_CLASS = 9,
    CUPTI_METRIC_PROPERTY_FLOP_SP_PER_CYCLE = 10,
    CUPTI_METRIC_PROPERTY_FLOP_DP_PER_CYCLE = 11,
    CUPTI_METRIC_PROPERTY_L2_UNITS = 12,
    CUPTI_METRIC_PROPERTY_ECC_ENABLED = 13,
    CUPTI_METRIC_PROPERTY_FLOP_HP_PER_CYCLE = 14,
    CUPTI_METRIC_PROPERTY_GPU_CPU_NVLINK_BANDWIDTH = 15,
}
extern "C" {
    pub fn cuptiGetNumMetrics(numMetrics: *mut u32) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEnumMetrics(
        arraySizeBytes: *mut usize,
        metricArray: *mut CUpti_MetricID,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiDeviceGetNumMetrics(device: CUdevice, numMetrics: *mut u32) -> CUptiResult;
}
extern "C" {
    pub fn cuptiDeviceEnumMetrics(
        device: CUdevice,
        arraySizeBytes: *mut usize,
        metricArray: *mut CUpti_MetricID,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiMetricGetAttribute(
        metric: CUpti_MetricID,
        attrib: CUpti_MetricAttribute,
        valueSize: *mut usize,
        value: *mut ::std::os::raw::c_void,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiMetricGetIdFromName(
        device: CUdevice,
        metricName: *const ::std::os::raw::c_char,
        metric: *mut CUpti_MetricID,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiMetricGetNumEvents(metric: CUpti_MetricID, numEvents: *mut u32) -> CUptiResult;
}
extern "C" {
    pub fn cuptiMetricEnumEvents(
        metric: CUpti_MetricID,
        eventIdArraySizeBytes: *mut usize,
        eventIdArray: *mut CUpti_EventID,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiMetricGetNumProperties(metric: CUpti_MetricID, numProp: *mut u32) -> CUptiResult;
}
extern "C" {
    pub fn cuptiMetricEnumProperties(
        metric: CUpti_MetricID,
        propIdArraySizeBytes: *mut usize,
        propIdArray: *mut CUpti_MetricPropertyID,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiMetricGetRequiredEventGroupSets(
        context: CUcontext,
        metric: CUpti_MetricID,
        eventGroupSets: *mut *mut CUpti_EventGroupSets,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiMetricCreateEventGroupSets(
        context: CUcontext,
        metricIdArraySizeBytes: usize,
        metricIdArray: *mut CUpti_MetricID,
        eventGroupPasses: *mut *mut CUpti_EventGroupSets,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiMetricGetValue(
        device: CUdevice,
        metric: CUpti_MetricID,
        eventIdArraySizeBytes: usize,
        eventIdArray: *mut CUpti_EventID,
        eventValueArraySizeBytes: usize,
        eventValueArray: *mut u64,
        timeDuration: u64,
        metricValue: *mut CUpti_MetricValue,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiMetricGetValue2(
        metric: CUpti_MetricID,
        eventIdArraySizeBytes: usize,
        eventIdArray: *mut CUpti_EventID,
        eventValueArraySizeBytes: usize,
        eventValueArray: *mut u64,
        propIdArraySizeBytes: usize,
        propIdArray: *mut CUpti_MetricPropertyID,
        propValueArraySizeBytes: usize,
        propValueArray: *mut u64,
        metricValue: *mut CUpti_MetricValue,
    ) -> CUptiResult;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_EnvironmentClocksThrottleReason {
    CUPTI_CLOCKS_THROTTLE_REASON_GPU_IDLE = 1,
    CUPTI_CLOCKS_THROTTLE_REASON_USER_DEFINED_CLOCKS = 2,
    CUPTI_CLOCKS_THROTTLE_REASON_SW_POWER_CAP = 4,
    CUPTI_CLOCKS_THROTTLE_REASON_HW_SLOWDOWN = 8,
    CUPTI_CLOCKS_THROTTLE_REASON_UNKNOWN = 2147483648,
    CUPTI_CLOCKS_THROTTLE_REASON_UNSUPPORTED = 1073741824,
    CUPTI_CLOCKS_THROTTLE_REASON_NONE = 0,
    CUPTI_CLOCKS_THROTTLE_REASON_FORCE_INT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_LinkFlag {
    CUPTI_LINK_FLAG_INVALID = 0,
    CUPTI_LINK_FLAG_PEER_ACCESS = 2,
    CUPTI_LINK_FLAG_SYSMEM_ACCESS = 4,
    CUPTI_LINK_FLAG_PEER_ATOMICS = 8,
    CUPTI_LINK_FLAG_SYSMEM_ATOMICS = 16,
    CUPTI_LINK_FLAG_FORCE_INT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_ChannelType {
    CUPTI_CHANNEL_TYPE_INVALID = 0,
    CUPTI_CHANNEL_TYPE_COMPUTE = 1,
    CUPTI_CHANNEL_TYPE_ASYNC_MEMCPY = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_FuncShmemLimitConfig {
    CUPTI_FUNC_SHMEM_LIMIT_DEFAULT = 0,
    CUPTI_FUNC_SHMEM_LIMIT_OPTIN = 1,
    CUPTI_FUNC_SHMEM_LIMIT_FORCE_INT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_OpenAccEventKind {
    CUPTI_OPENACC_EVENT_KIND_INVALID = 0,
    CUPTI_OPENACC_EVENT_KIND_DEVICE_INIT = 1,
    CUPTI_OPENACC_EVENT_KIND_DEVICE_SHUTDOWN = 2,
    CUPTI_OPENACC_EVENT_KIND_RUNTIME_SHUTDOWN = 3,
    CUPTI_OPENACC_EVENT_KIND_ENQUEUE_LAUNCH = 4,
    CUPTI_OPENACC_EVENT_KIND_ENQUEUE_UPLOAD = 5,
    CUPTI_OPENACC_EVENT_KIND_ENQUEUE_DOWNLOAD = 6,
    CUPTI_OPENACC_EVENT_KIND_WAIT = 7,
    CUPTI_OPENACC_EVENT_KIND_IMPLICIT_WAIT = 8,
    CUPTI_OPENACC_EVENT_KIND_COMPUTE_CONSTRUCT = 9,
    CUPTI_OPENACC_EVENT_KIND_UPDATE = 10,
    CUPTI_OPENACC_EVENT_KIND_ENTER_DATA = 11,
    CUPTI_OPENACC_EVENT_KIND_EXIT_DATA = 12,
    CUPTI_OPENACC_EVENT_KIND_CREATE = 13,
    CUPTI_OPENACC_EVENT_KIND_DELETE = 14,
    CUPTI_OPENACC_EVENT_KIND_ALLOC = 15,
    CUPTI_OPENACC_EVENT_KIND_FREE = 16,
    CUPTI_OPENACC_EVENT_KIND_FORCE_INT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_OpenAccConstructKind {
    CUPTI_OPENACC_CONSTRUCT_KIND_UNKNOWN = 0,
    CUPTI_OPENACC_CONSTRUCT_KIND_PARALLEL = 1,
    CUPTI_OPENACC_CONSTRUCT_KIND_KERNELS = 2,
    CUPTI_OPENACC_CONSTRUCT_KIND_LOOP = 3,
    CUPTI_OPENACC_CONSTRUCT_KIND_DATA = 4,
    CUPTI_OPENACC_CONSTRUCT_KIND_ENTER_DATA = 5,
    CUPTI_OPENACC_CONSTRUCT_KIND_EXIT_DATA = 6,
    CUPTI_OPENACC_CONSTRUCT_KIND_HOST_DATA = 7,
    CUPTI_OPENACC_CONSTRUCT_KIND_ATOMIC = 8,
    CUPTI_OPENACC_CONSTRUCT_KIND_DECLARE = 9,
    CUPTI_OPENACC_CONSTRUCT_KIND_INIT = 10,
    CUPTI_OPENACC_CONSTRUCT_KIND_SHUTDOWN = 11,
    CUPTI_OPENACC_CONSTRUCT_KIND_SET = 12,
    CUPTI_OPENACC_CONSTRUCT_KIND_UPDATE = 13,
    CUPTI_OPENACC_CONSTRUCT_KIND_ROUTINE = 14,
    CUPTI_OPENACC_CONSTRUCT_KIND_WAIT = 15,
    CUPTI_OPENACC_CONSTRUCT_KIND_RUNTIME_API = 16,
    CUPTI_OPENACC_CONSTRUCT_KIND_FORCE_INT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_OpenMpEventKind {
    CUPTI_OPENMP_EVENT_KIND_INVALID = 0,
    CUPTI_OPENMP_EVENT_KIND_PARALLEL = 1,
    CUPTI_OPENMP_EVENT_KIND_TASK = 2,
    CUPTI_OPENMP_EVENT_KIND_THREAD = 3,
    CUPTI_OPENMP_EVENT_KIND_IDLE = 4,
    CUPTI_OPENMP_EVENT_KIND_WAIT_BARRIER = 5,
    CUPTI_OPENMP_EVENT_KIND_WAIT_TASKWAIT = 6,
    CUPTI_OPENMP_EVENT_KIND_FORCE_INT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_ExternalCorrelationKind {
    CUPTI_EXTERNAL_CORRELATION_KIND_INVALID = 0,
    CUPTI_EXTERNAL_CORRELATION_KIND_UNKNOWN = 1,
    CUPTI_EXTERNAL_CORRELATION_KIND_OPENACC = 2,
    CUPTI_EXTERNAL_CORRELATION_KIND_CUSTOM0 = 3,
    CUPTI_EXTERNAL_CORRELATION_KIND_CUSTOM1 = 4,
    CUPTI_EXTERNAL_CORRELATION_KIND_CUSTOM2 = 5,
    CUPTI_EXTERNAL_CORRELATION_KIND_SIZE = 6,
    CUPTI_EXTERNAL_CORRELATION_KIND_FORCE_INT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_DevType {
    CUPTI_DEV_TYPE_INVALID = 0,
    CUPTI_DEV_TYPE_GPU = 1,
    CUPTI_DEV_TYPE_NPU = 2,
    CUPTI_DEV_TYPE_FORCE_INT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_PcieDeviceType {
    CUPTI_PCIE_DEVICE_TYPE_GPU = 0,
    CUPTI_PCIE_DEVICE_TYPE_BRIDGE = 1,
    CUPTI_PCIE_DEVICE_TYPE_FORCE_INT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_PcieGen {
    CUPTI_PCIE_GEN_GEN1 = 1,
    CUPTI_PCIE_GEN_GEN2 = 2,
    CUPTI_PCIE_GEN_GEN3 = 3,
    CUPTI_PCIE_GEN_GEN4 = 4,
    CUPTI_PCIE_GEN_GEN5 = 5,
    CUPTI_PCIE_GEN_FORCE_INT = 2147483647,
}
extern "C" {
    pub fn cuptiGetTimestamp(timestamp: *mut u64) -> CUptiResult;
}
extern "C" {
    pub fn cuptiGetContextId(context: CUcontext, contextId: *mut u32) -> CUptiResult;
}
extern "C" {
    pub fn cuptiGetStreamId(
        context: CUcontext,
        stream: CUstream,
        streamId: *mut u32,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiGetStreamIdEx(
        context: CUcontext,
        stream: CUstream,
        perThreadStream: u8,
        streamId: *mut u32,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiGetDeviceId(context: CUcontext, deviceId: *mut u32) -> CUptiResult;
}
extern "C" {
    pub fn cuptiGetGraphNodeId(node: CUgraphNode, nodeId: *mut u64) -> CUptiResult;
}
extern "C" {
    pub fn cuptiGetGraphId(graph: CUgraph, pId: *mut u32) -> CUptiResult;
}
pub type CUpti_BuffersCallbackRequestFunc = ::std::option::Option<
    unsafe extern "C" fn(buffer: *mut *mut u8, size: *mut usize, maxNumRecords: *mut usize),
>;
pub type CUpti_BuffersCallbackCompleteFunc = ::std::option::Option<
    unsafe extern "C" fn(
        context: CUcontext,
        streamId: u32,
        buffer: *mut u8,
        size: usize,
        validSize: usize,
    ),
>;
extern "C" {
    pub fn cuptiGetLastError() -> CUptiResult;
}
extern "C" {
    pub fn cuptiComputeCapabilitySupported(
        major: ::std::os::raw::c_int,
        minor: ::std::os::raw::c_int,
        support: *mut ::std::os::raw::c_int,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiDeviceSupported(dev: CUdevice, support: *mut ::std::os::raw::c_int) -> CUptiResult;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_DeviceVirtualizationMode {
    CUPTI_DEVICE_VIRTUALIZATION_MODE_NONE = 0,
    CUPTI_DEVICE_VIRTUALIZATION_MODE_PASS_THROUGH = 1,
    CUPTI_DEVICE_VIRTUALIZATION_MODE_VIRTUAL_GPU = 2,
    CUPTI_DEVICE_VIRTUALIZATION_MODE_FORCE_INT = 2147483647,
}
extern "C" {
    pub fn cuptiDeviceVirtualizationMode(
        dev: CUdevice,
        mode: *mut CUpti_DeviceVirtualizationMode,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiFinalize() -> CUptiResult;
}
pub type CUpti_TimestampCallbackFunc = ::std::option::Option<unsafe extern "C" fn() -> u64>;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_driver_api_trace_cbid_enum {
    CUPTI_DRIVER_TRACE_CBID_INVALID = 0,
    CUPTI_DRIVER_TRACE_CBID_cuInit = 1,
    CUPTI_DRIVER_TRACE_CBID_cuDriverGetVersion = 2,
    CUPTI_DRIVER_TRACE_CBID_cuDeviceGet = 3,
    CUPTI_DRIVER_TRACE_CBID_cuDeviceGetCount = 4,
    CUPTI_DRIVER_TRACE_CBID_cuDeviceGetName = 5,
    CUPTI_DRIVER_TRACE_CBID_cuDeviceComputeCapability = 6,
    CUPTI_DRIVER_TRACE_CBID_cuDeviceTotalMem = 7,
    CUPTI_DRIVER_TRACE_CBID_cuDeviceGetProperties = 8,
    CUPTI_DRIVER_TRACE_CBID_cuDeviceGetAttribute = 9,
    CUPTI_DRIVER_TRACE_CBID_cuCtxCreate = 10,
    CUPTI_DRIVER_TRACE_CBID_cuCtxDestroy = 11,
    CUPTI_DRIVER_TRACE_CBID_cuCtxAttach = 12,
    CUPTI_DRIVER_TRACE_CBID_cuCtxDetach = 13,
    CUPTI_DRIVER_TRACE_CBID_cuCtxPushCurrent = 14,
    CUPTI_DRIVER_TRACE_CBID_cuCtxPopCurrent = 15,
    CUPTI_DRIVER_TRACE_CBID_cuCtxGetDevice = 16,
    CUPTI_DRIVER_TRACE_CBID_cuCtxSynchronize = 17,
    CUPTI_DRIVER_TRACE_CBID_cuModuleLoad = 18,
    CUPTI_DRIVER_TRACE_CBID_cuModuleLoadData = 19,
    CUPTI_DRIVER_TRACE_CBID_cuModuleLoadDataEx = 20,
    CUPTI_DRIVER_TRACE_CBID_cuModuleLoadFatBinary = 21,
    CUPTI_DRIVER_TRACE_CBID_cuModuleUnload = 22,
    CUPTI_DRIVER_TRACE_CBID_cuModuleGetFunction = 23,
    CUPTI_DRIVER_TRACE_CBID_cuModuleGetGlobal = 24,
    CUPTI_DRIVER_TRACE_CBID_cu64ModuleGetGlobal = 25,
    CUPTI_DRIVER_TRACE_CBID_cuModuleGetTexRef = 26,
    CUPTI_DRIVER_TRACE_CBID_cuMemGetInfo = 27,
    CUPTI_DRIVER_TRACE_CBID_cu64MemGetInfo = 28,
    CUPTI_DRIVER_TRACE_CBID_cuMemAlloc = 29,
    CUPTI_DRIVER_TRACE_CBID_cu64MemAlloc = 30,
    CUPTI_DRIVER_TRACE_CBID_cuMemAllocPitch = 31,
    CUPTI_DRIVER_TRACE_CBID_cu64MemAllocPitch = 32,
    CUPTI_DRIVER_TRACE_CBID_cuMemFree = 33,
    CUPTI_DRIVER_TRACE_CBID_cu64MemFree = 34,
    CUPTI_DRIVER_TRACE_CBID_cuMemGetAddressRange = 35,
    CUPTI_DRIVER_TRACE_CBID_cu64MemGetAddressRange = 36,
    CUPTI_DRIVER_TRACE_CBID_cuMemAllocHost = 37,
    CUPTI_DRIVER_TRACE_CBID_cuMemFreeHost = 38,
    CUPTI_DRIVER_TRACE_CBID_cuMemHostAlloc = 39,
    CUPTI_DRIVER_TRACE_CBID_cuMemHostGetDevicePointer = 40,
    CUPTI_DRIVER_TRACE_CBID_cu64MemHostGetDevicePointer = 41,
    CUPTI_DRIVER_TRACE_CBID_cuMemHostGetFlags = 42,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyHtoD = 43,
    CUPTI_DRIVER_TRACE_CBID_cu64MemcpyHtoD = 44,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyDtoH = 45,
    CUPTI_DRIVER_TRACE_CBID_cu64MemcpyDtoH = 46,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyDtoD = 47,
    CUPTI_DRIVER_TRACE_CBID_cu64MemcpyDtoD = 48,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyDtoA = 49,
    CUPTI_DRIVER_TRACE_CBID_cu64MemcpyDtoA = 50,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyAtoD = 51,
    CUPTI_DRIVER_TRACE_CBID_cu64MemcpyAtoD = 52,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyHtoA = 53,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyAtoH = 54,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyAtoA = 55,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpy2D = 56,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpy2DUnaligned = 57,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpy3D = 58,
    CUPTI_DRIVER_TRACE_CBID_cu64Memcpy3D = 59,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyHtoDAsync = 60,
    CUPTI_DRIVER_TRACE_CBID_cu64MemcpyHtoDAsync = 61,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyDtoHAsync = 62,
    CUPTI_DRIVER_TRACE_CBID_cu64MemcpyDtoHAsync = 63,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyDtoDAsync = 64,
    CUPTI_DRIVER_TRACE_CBID_cu64MemcpyDtoDAsync = 65,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyHtoAAsync = 66,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyAtoHAsync = 67,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpy2DAsync = 68,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpy3DAsync = 69,
    CUPTI_DRIVER_TRACE_CBID_cu64Memcpy3DAsync = 70,
    CUPTI_DRIVER_TRACE_CBID_cuMemsetD8 = 71,
    CUPTI_DRIVER_TRACE_CBID_cu64MemsetD8 = 72,
    CUPTI_DRIVER_TRACE_CBID_cuMemsetD16 = 73,
    CUPTI_DRIVER_TRACE_CBID_cu64MemsetD16 = 74,
    CUPTI_DRIVER_TRACE_CBID_cuMemsetD32 = 75,
    CUPTI_DRIVER_TRACE_CBID_cu64MemsetD32 = 76,
    CUPTI_DRIVER_TRACE_CBID_cuMemsetD2D8 = 77,
    CUPTI_DRIVER_TRACE_CBID_cu64MemsetD2D8 = 78,
    CUPTI_DRIVER_TRACE_CBID_cuMemsetD2D16 = 79,
    CUPTI_DRIVER_TRACE_CBID_cu64MemsetD2D16 = 80,
    CUPTI_DRIVER_TRACE_CBID_cuMemsetD2D32 = 81,
    CUPTI_DRIVER_TRACE_CBID_cu64MemsetD2D32 = 82,
    CUPTI_DRIVER_TRACE_CBID_cuFuncSetBlockShape = 83,
    CUPTI_DRIVER_TRACE_CBID_cuFuncSetSharedSize = 84,
    CUPTI_DRIVER_TRACE_CBID_cuFuncGetAttribute = 85,
    CUPTI_DRIVER_TRACE_CBID_cuFuncSetCacheConfig = 86,
    CUPTI_DRIVER_TRACE_CBID_cuArrayCreate = 87,
    CUPTI_DRIVER_TRACE_CBID_cuArrayGetDescriptor = 88,
    CUPTI_DRIVER_TRACE_CBID_cuArrayDestroy = 89,
    CUPTI_DRIVER_TRACE_CBID_cuArray3DCreate = 90,
    CUPTI_DRIVER_TRACE_CBID_cuArray3DGetDescriptor = 91,
    CUPTI_DRIVER_TRACE_CBID_cuTexRefCreate = 92,
    CUPTI_DRIVER_TRACE_CBID_cuTexRefDestroy = 93,
    CUPTI_DRIVER_TRACE_CBID_cuTexRefSetArray = 94,
    CUPTI_DRIVER_TRACE_CBID_cuTexRefSetAddress = 95,
    CUPTI_DRIVER_TRACE_CBID_cu64TexRefSetAddress = 96,
    CUPTI_DRIVER_TRACE_CBID_cuTexRefSetAddress2D = 97,
    CUPTI_DRIVER_TRACE_CBID_cu64TexRefSetAddress2D = 98,
    CUPTI_DRIVER_TRACE_CBID_cuTexRefSetFormat = 99,
    CUPTI_DRIVER_TRACE_CBID_cuTexRefSetAddressMode = 100,
    CUPTI_DRIVER_TRACE_CBID_cuTexRefSetFilterMode = 101,
    CUPTI_DRIVER_TRACE_CBID_cuTexRefSetFlags = 102,
    CUPTI_DRIVER_TRACE_CBID_cuTexRefGetAddress = 103,
    CUPTI_DRIVER_TRACE_CBID_cu64TexRefGetAddress = 104,
    CUPTI_DRIVER_TRACE_CBID_cuTexRefGetArray = 105,
    CUPTI_DRIVER_TRACE_CBID_cuTexRefGetAddressMode = 106,
    CUPTI_DRIVER_TRACE_CBID_cuTexRefGetFilterMode = 107,
    CUPTI_DRIVER_TRACE_CBID_cuTexRefGetFormat = 108,
    CUPTI_DRIVER_TRACE_CBID_cuTexRefGetFlags = 109,
    CUPTI_DRIVER_TRACE_CBID_cuParamSetSize = 110,
    CUPTI_DRIVER_TRACE_CBID_cuParamSeti = 111,
    CUPTI_DRIVER_TRACE_CBID_cuParamSetf = 112,
    CUPTI_DRIVER_TRACE_CBID_cuParamSetv = 113,
    CUPTI_DRIVER_TRACE_CBID_cuParamSetTexRef = 114,
    CUPTI_DRIVER_TRACE_CBID_cuLaunch = 115,
    CUPTI_DRIVER_TRACE_CBID_cuLaunchGrid = 116,
    CUPTI_DRIVER_TRACE_CBID_cuLaunchGridAsync = 117,
    CUPTI_DRIVER_TRACE_CBID_cuEventCreate = 118,
    CUPTI_DRIVER_TRACE_CBID_cuEventRecord = 119,
    CUPTI_DRIVER_TRACE_CBID_cuEventQuery = 120,
    CUPTI_DRIVER_TRACE_CBID_cuEventSynchronize = 121,
    CUPTI_DRIVER_TRACE_CBID_cuEventDestroy = 122,
    CUPTI_DRIVER_TRACE_CBID_cuEventElapsedTime = 123,
    CUPTI_DRIVER_TRACE_CBID_cuStreamCreate = 124,
    CUPTI_DRIVER_TRACE_CBID_cuStreamQuery = 125,
    CUPTI_DRIVER_TRACE_CBID_cuStreamSynchronize = 126,
    CUPTI_DRIVER_TRACE_CBID_cuStreamDestroy = 127,
    CUPTI_DRIVER_TRACE_CBID_cuGraphicsUnregisterResource = 128,
    CUPTI_DRIVER_TRACE_CBID_cuGraphicsSubResourceGetMappedArray = 129,
    CUPTI_DRIVER_TRACE_CBID_cuGraphicsResourceGetMappedPointer = 130,
    CUPTI_DRIVER_TRACE_CBID_cu64GraphicsResourceGetMappedPointer = 131,
    CUPTI_DRIVER_TRACE_CBID_cuGraphicsResourceSetMapFlags = 132,
    CUPTI_DRIVER_TRACE_CBID_cuGraphicsMapResources = 133,
    CUPTI_DRIVER_TRACE_CBID_cuGraphicsUnmapResources = 134,
    CUPTI_DRIVER_TRACE_CBID_cuGetExportTable = 135,
    CUPTI_DRIVER_TRACE_CBID_cuCtxSetLimit = 136,
    CUPTI_DRIVER_TRACE_CBID_cuCtxGetLimit = 137,
    CUPTI_DRIVER_TRACE_CBID_cuD3D10GetDevice = 138,
    CUPTI_DRIVER_TRACE_CBID_cuD3D10CtxCreate = 139,
    CUPTI_DRIVER_TRACE_CBID_cuGraphicsD3D10RegisterResource = 140,
    CUPTI_DRIVER_TRACE_CBID_cuD3D10RegisterResource = 141,
    CUPTI_DRIVER_TRACE_CBID_cuD3D10UnregisterResource = 142,
    CUPTI_DRIVER_TRACE_CBID_cuD3D10MapResources = 143,
    CUPTI_DRIVER_TRACE_CBID_cuD3D10UnmapResources = 144,
    CUPTI_DRIVER_TRACE_CBID_cuD3D10ResourceSetMapFlags = 145,
    CUPTI_DRIVER_TRACE_CBID_cuD3D10ResourceGetMappedArray = 146,
    CUPTI_DRIVER_TRACE_CBID_cuD3D10ResourceGetMappedPointer = 147,
    CUPTI_DRIVER_TRACE_CBID_cuD3D10ResourceGetMappedSize = 148,
    CUPTI_DRIVER_TRACE_CBID_cuD3D10ResourceGetMappedPitch = 149,
    CUPTI_DRIVER_TRACE_CBID_cuD3D10ResourceGetSurfaceDimensions = 150,
    CUPTI_DRIVER_TRACE_CBID_cuD3D11GetDevice = 151,
    CUPTI_DRIVER_TRACE_CBID_cuD3D11CtxCreate = 152,
    CUPTI_DRIVER_TRACE_CBID_cuGraphicsD3D11RegisterResource = 153,
    CUPTI_DRIVER_TRACE_CBID_cuD3D9GetDevice = 154,
    CUPTI_DRIVER_TRACE_CBID_cuD3D9CtxCreate = 155,
    CUPTI_DRIVER_TRACE_CBID_cuGraphicsD3D9RegisterResource = 156,
    CUPTI_DRIVER_TRACE_CBID_cuD3D9GetDirect3DDevice = 157,
    CUPTI_DRIVER_TRACE_CBID_cuD3D9RegisterResource = 158,
    CUPTI_DRIVER_TRACE_CBID_cuD3D9UnregisterResource = 159,
    CUPTI_DRIVER_TRACE_CBID_cuD3D9MapResources = 160,
    CUPTI_DRIVER_TRACE_CBID_cuD3D9UnmapResources = 161,
    CUPTI_DRIVER_TRACE_CBID_cuD3D9ResourceSetMapFlags = 162,
    CUPTI_DRIVER_TRACE_CBID_cuD3D9ResourceGetSurfaceDimensions = 163,
    CUPTI_DRIVER_TRACE_CBID_cuD3D9ResourceGetMappedArray = 164,
    CUPTI_DRIVER_TRACE_CBID_cuD3D9ResourceGetMappedPointer = 165,
    CUPTI_DRIVER_TRACE_CBID_cuD3D9ResourceGetMappedSize = 166,
    CUPTI_DRIVER_TRACE_CBID_cuD3D9ResourceGetMappedPitch = 167,
    CUPTI_DRIVER_TRACE_CBID_cuD3D9Begin = 168,
    CUPTI_DRIVER_TRACE_CBID_cuD3D9End = 169,
    CUPTI_DRIVER_TRACE_CBID_cuD3D9RegisterVertexBuffer = 170,
    CUPTI_DRIVER_TRACE_CBID_cuD3D9MapVertexBuffer = 171,
    CUPTI_DRIVER_TRACE_CBID_cuD3D9UnmapVertexBuffer = 172,
    CUPTI_DRIVER_TRACE_CBID_cuD3D9UnregisterVertexBuffer = 173,
    CUPTI_DRIVER_TRACE_CBID_cuGLCtxCreate = 174,
    CUPTI_DRIVER_TRACE_CBID_cuGraphicsGLRegisterBuffer = 175,
    CUPTI_DRIVER_TRACE_CBID_cuGraphicsGLRegisterImage = 176,
    CUPTI_DRIVER_TRACE_CBID_cuWGLGetDevice = 177,
    CUPTI_DRIVER_TRACE_CBID_cuGLInit = 178,
    CUPTI_DRIVER_TRACE_CBID_cuGLRegisterBufferObject = 179,
    CUPTI_DRIVER_TRACE_CBID_cuGLMapBufferObject = 180,
    CUPTI_DRIVER_TRACE_CBID_cuGLUnmapBufferObject = 181,
    CUPTI_DRIVER_TRACE_CBID_cuGLUnregisterBufferObject = 182,
    CUPTI_DRIVER_TRACE_CBID_cuGLSetBufferObjectMapFlags = 183,
    CUPTI_DRIVER_TRACE_CBID_cuGLMapBufferObjectAsync = 184,
    CUPTI_DRIVER_TRACE_CBID_cuGLUnmapBufferObjectAsync = 185,
    CUPTI_DRIVER_TRACE_CBID_cuVDPAUGetDevice = 186,
    CUPTI_DRIVER_TRACE_CBID_cuVDPAUCtxCreate = 187,
    CUPTI_DRIVER_TRACE_CBID_cuGraphicsVDPAURegisterVideoSurface = 188,
    CUPTI_DRIVER_TRACE_CBID_cuGraphicsVDPAURegisterOutputSurface = 189,
    CUPTI_DRIVER_TRACE_CBID_cuModuleGetSurfRef = 190,
    CUPTI_DRIVER_TRACE_CBID_cuSurfRefCreate = 191,
    CUPTI_DRIVER_TRACE_CBID_cuSurfRefDestroy = 192,
    CUPTI_DRIVER_TRACE_CBID_cuSurfRefSetFormat = 193,
    CUPTI_DRIVER_TRACE_CBID_cuSurfRefSetArray = 194,
    CUPTI_DRIVER_TRACE_CBID_cuSurfRefGetFormat = 195,
    CUPTI_DRIVER_TRACE_CBID_cuSurfRefGetArray = 196,
    CUPTI_DRIVER_TRACE_CBID_cu64DeviceTotalMem = 197,
    CUPTI_DRIVER_TRACE_CBID_cu64D3D10ResourceGetMappedPointer = 198,
    CUPTI_DRIVER_TRACE_CBID_cu64D3D10ResourceGetMappedSize = 199,
    CUPTI_DRIVER_TRACE_CBID_cu64D3D10ResourceGetMappedPitch = 200,
    CUPTI_DRIVER_TRACE_CBID_cu64D3D10ResourceGetSurfaceDimensions = 201,
    CUPTI_DRIVER_TRACE_CBID_cu64D3D9ResourceGetSurfaceDimensions = 202,
    CUPTI_DRIVER_TRACE_CBID_cu64D3D9ResourceGetMappedPointer = 203,
    CUPTI_DRIVER_TRACE_CBID_cu64D3D9ResourceGetMappedSize = 204,
    CUPTI_DRIVER_TRACE_CBID_cu64D3D9ResourceGetMappedPitch = 205,
    CUPTI_DRIVER_TRACE_CBID_cu64D3D9MapVertexBuffer = 206,
    CUPTI_DRIVER_TRACE_CBID_cu64GLMapBufferObject = 207,
    CUPTI_DRIVER_TRACE_CBID_cu64GLMapBufferObjectAsync = 208,
    CUPTI_DRIVER_TRACE_CBID_cuD3D11GetDevices = 209,
    CUPTI_DRIVER_TRACE_CBID_cuD3D11CtxCreateOnDevice = 210,
    CUPTI_DRIVER_TRACE_CBID_cuD3D10GetDevices = 211,
    CUPTI_DRIVER_TRACE_CBID_cuD3D10CtxCreateOnDevice = 212,
    CUPTI_DRIVER_TRACE_CBID_cuD3D9GetDevices = 213,
    CUPTI_DRIVER_TRACE_CBID_cuD3D9CtxCreateOnDevice = 214,
    CUPTI_DRIVER_TRACE_CBID_cu64MemHostAlloc = 215,
    CUPTI_DRIVER_TRACE_CBID_cuMemsetD8Async = 216,
    CUPTI_DRIVER_TRACE_CBID_cu64MemsetD8Async = 217,
    CUPTI_DRIVER_TRACE_CBID_cuMemsetD16Async = 218,
    CUPTI_DRIVER_TRACE_CBID_cu64MemsetD16Async = 219,
    CUPTI_DRIVER_TRACE_CBID_cuMemsetD32Async = 220,
    CUPTI_DRIVER_TRACE_CBID_cu64MemsetD32Async = 221,
    CUPTI_DRIVER_TRACE_CBID_cuMemsetD2D8Async = 222,
    CUPTI_DRIVER_TRACE_CBID_cu64MemsetD2D8Async = 223,
    CUPTI_DRIVER_TRACE_CBID_cuMemsetD2D16Async = 224,
    CUPTI_DRIVER_TRACE_CBID_cu64MemsetD2D16Async = 225,
    CUPTI_DRIVER_TRACE_CBID_cuMemsetD2D32Async = 226,
    CUPTI_DRIVER_TRACE_CBID_cu64MemsetD2D32Async = 227,
    CUPTI_DRIVER_TRACE_CBID_cu64ArrayCreate = 228,
    CUPTI_DRIVER_TRACE_CBID_cu64ArrayGetDescriptor = 229,
    CUPTI_DRIVER_TRACE_CBID_cu64Array3DCreate = 230,
    CUPTI_DRIVER_TRACE_CBID_cu64Array3DGetDescriptor = 231,
    CUPTI_DRIVER_TRACE_CBID_cu64Memcpy2D = 232,
    CUPTI_DRIVER_TRACE_CBID_cu64Memcpy2DUnaligned = 233,
    CUPTI_DRIVER_TRACE_CBID_cu64Memcpy2DAsync = 234,
    CUPTI_DRIVER_TRACE_CBID_cuCtxCreate_v2 = 235,
    CUPTI_DRIVER_TRACE_CBID_cuD3D10CtxCreate_v2 = 236,
    CUPTI_DRIVER_TRACE_CBID_cuD3D11CtxCreate_v2 = 237,
    CUPTI_DRIVER_TRACE_CBID_cuD3D9CtxCreate_v2 = 238,
    CUPTI_DRIVER_TRACE_CBID_cuGLCtxCreate_v2 = 239,
    CUPTI_DRIVER_TRACE_CBID_cuVDPAUCtxCreate_v2 = 240,
    CUPTI_DRIVER_TRACE_CBID_cuModuleGetGlobal_v2 = 241,
    CUPTI_DRIVER_TRACE_CBID_cuMemGetInfo_v2 = 242,
    CUPTI_DRIVER_TRACE_CBID_cuMemAlloc_v2 = 243,
    CUPTI_DRIVER_TRACE_CBID_cuMemAllocPitch_v2 = 244,
    CUPTI_DRIVER_TRACE_CBID_cuMemFree_v2 = 245,
    CUPTI_DRIVER_TRACE_CBID_cuMemGetAddressRange_v2 = 246,
    CUPTI_DRIVER_TRACE_CBID_cuMemHostGetDevicePointer_v2 = 247,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpy_v2 = 248,
    CUPTI_DRIVER_TRACE_CBID_cuMemsetD8_v2 = 249,
    CUPTI_DRIVER_TRACE_CBID_cuMemsetD16_v2 = 250,
    CUPTI_DRIVER_TRACE_CBID_cuMemsetD32_v2 = 251,
    CUPTI_DRIVER_TRACE_CBID_cuMemsetD2D8_v2 = 252,
    CUPTI_DRIVER_TRACE_CBID_cuMemsetD2D16_v2 = 253,
    CUPTI_DRIVER_TRACE_CBID_cuMemsetD2D32_v2 = 254,
    CUPTI_DRIVER_TRACE_CBID_cuTexRefSetAddress_v2 = 255,
    CUPTI_DRIVER_TRACE_CBID_cuTexRefSetAddress2D_v2 = 256,
    CUPTI_DRIVER_TRACE_CBID_cuTexRefGetAddress_v2 = 257,
    CUPTI_DRIVER_TRACE_CBID_cuGraphicsResourceGetMappedPointer_v2 = 258,
    CUPTI_DRIVER_TRACE_CBID_cuDeviceTotalMem_v2 = 259,
    CUPTI_DRIVER_TRACE_CBID_cuD3D10ResourceGetMappedPointer_v2 = 260,
    CUPTI_DRIVER_TRACE_CBID_cuD3D10ResourceGetMappedSize_v2 = 261,
    CUPTI_DRIVER_TRACE_CBID_cuD3D10ResourceGetMappedPitch_v2 = 262,
    CUPTI_DRIVER_TRACE_CBID_cuD3D10ResourceGetSurfaceDimensions_v2 = 263,
    CUPTI_DRIVER_TRACE_CBID_cuD3D9ResourceGetSurfaceDimensions_v2 = 264,
    CUPTI_DRIVER_TRACE_CBID_cuD3D9ResourceGetMappedPointer_v2 = 265,
    CUPTI_DRIVER_TRACE_CBID_cuD3D9ResourceGetMappedSize_v2 = 266,
    CUPTI_DRIVER_TRACE_CBID_cuD3D9ResourceGetMappedPitch_v2 = 267,
    CUPTI_DRIVER_TRACE_CBID_cuD3D9MapVertexBuffer_v2 = 268,
    CUPTI_DRIVER_TRACE_CBID_cuGLMapBufferObject_v2 = 269,
    CUPTI_DRIVER_TRACE_CBID_cuGLMapBufferObjectAsync_v2 = 270,
    CUPTI_DRIVER_TRACE_CBID_cuMemHostAlloc_v2 = 271,
    CUPTI_DRIVER_TRACE_CBID_cuArrayCreate_v2 = 272,
    CUPTI_DRIVER_TRACE_CBID_cuArrayGetDescriptor_v2 = 273,
    CUPTI_DRIVER_TRACE_CBID_cuArray3DCreate_v2 = 274,
    CUPTI_DRIVER_TRACE_CBID_cuArray3DGetDescriptor_v2 = 275,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyHtoD_v2 = 276,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyHtoDAsync_v2 = 277,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyDtoH_v2 = 278,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyDtoHAsync_v2 = 279,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyDtoD_v2 = 280,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyDtoDAsync_v2 = 281,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyAtoH_v2 = 282,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyAtoHAsync_v2 = 283,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyAtoD_v2 = 284,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyDtoA_v2 = 285,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyAtoA_v2 = 286,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpy2D_v2 = 287,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpy2DUnaligned_v2 = 288,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpy2DAsync_v2 = 289,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpy3D_v2 = 290,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpy3DAsync_v2 = 291,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyHtoA_v2 = 292,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyHtoAAsync_v2 = 293,
    CUPTI_DRIVER_TRACE_CBID_cuMemAllocHost_v2 = 294,
    CUPTI_DRIVER_TRACE_CBID_cuStreamWaitEvent = 295,
    CUPTI_DRIVER_TRACE_CBID_cuCtxGetApiVersion = 296,
    CUPTI_DRIVER_TRACE_CBID_cuD3D10GetDirect3DDevice = 297,
    CUPTI_DRIVER_TRACE_CBID_cuD3D11GetDirect3DDevice = 298,
    CUPTI_DRIVER_TRACE_CBID_cuCtxGetCacheConfig = 299,
    CUPTI_DRIVER_TRACE_CBID_cuCtxSetCacheConfig = 300,
    CUPTI_DRIVER_TRACE_CBID_cuMemHostRegister = 301,
    CUPTI_DRIVER_TRACE_CBID_cuMemHostUnregister = 302,
    CUPTI_DRIVER_TRACE_CBID_cuCtxSetCurrent = 303,
    CUPTI_DRIVER_TRACE_CBID_cuCtxGetCurrent = 304,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpy = 305,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyAsync = 306,
    CUPTI_DRIVER_TRACE_CBID_cuLaunchKernel = 307,
    CUPTI_DRIVER_TRACE_CBID_cuProfilerStart = 308,
    CUPTI_DRIVER_TRACE_CBID_cuProfilerStop = 309,
    CUPTI_DRIVER_TRACE_CBID_cuPointerGetAttribute = 310,
    CUPTI_DRIVER_TRACE_CBID_cuProfilerInitialize = 311,
    CUPTI_DRIVER_TRACE_CBID_cuDeviceCanAccessPeer = 312,
    CUPTI_DRIVER_TRACE_CBID_cuCtxEnablePeerAccess = 313,
    CUPTI_DRIVER_TRACE_CBID_cuCtxDisablePeerAccess = 314,
    CUPTI_DRIVER_TRACE_CBID_cuMemPeerRegister = 315,
    CUPTI_DRIVER_TRACE_CBID_cuMemPeerUnregister = 316,
    CUPTI_DRIVER_TRACE_CBID_cuMemPeerGetDevicePointer = 317,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyPeer = 318,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyPeerAsync = 319,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpy3DPeer = 320,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpy3DPeerAsync = 321,
    CUPTI_DRIVER_TRACE_CBID_cuCtxDestroy_v2 = 322,
    CUPTI_DRIVER_TRACE_CBID_cuCtxPushCurrent_v2 = 323,
    CUPTI_DRIVER_TRACE_CBID_cuCtxPopCurrent_v2 = 324,
    CUPTI_DRIVER_TRACE_CBID_cuEventDestroy_v2 = 325,
    CUPTI_DRIVER_TRACE_CBID_cuStreamDestroy_v2 = 326,
    CUPTI_DRIVER_TRACE_CBID_cuTexRefSetAddress2D_v3 = 327,
    CUPTI_DRIVER_TRACE_CBID_cuIpcGetMemHandle = 328,
    CUPTI_DRIVER_TRACE_CBID_cuIpcOpenMemHandle = 329,
    CUPTI_DRIVER_TRACE_CBID_cuIpcCloseMemHandle = 330,
    CUPTI_DRIVER_TRACE_CBID_cuDeviceGetByPCIBusId = 331,
    CUPTI_DRIVER_TRACE_CBID_cuDeviceGetPCIBusId = 332,
    CUPTI_DRIVER_TRACE_CBID_cuGLGetDevices = 333,
    CUPTI_DRIVER_TRACE_CBID_cuIpcGetEventHandle = 334,
    CUPTI_DRIVER_TRACE_CBID_cuIpcOpenEventHandle = 335,
    CUPTI_DRIVER_TRACE_CBID_cuCtxSetSharedMemConfig = 336,
    CUPTI_DRIVER_TRACE_CBID_cuCtxGetSharedMemConfig = 337,
    CUPTI_DRIVER_TRACE_CBID_cuFuncSetSharedMemConfig = 338,
    CUPTI_DRIVER_TRACE_CBID_cuTexObjectCreate = 339,
    CUPTI_DRIVER_TRACE_CBID_cuTexObjectDestroy = 340,
    CUPTI_DRIVER_TRACE_CBID_cuTexObjectGetResourceDesc = 341,
    CUPTI_DRIVER_TRACE_CBID_cuTexObjectGetTextureDesc = 342,
    CUPTI_DRIVER_TRACE_CBID_cuSurfObjectCreate = 343,
    CUPTI_DRIVER_TRACE_CBID_cuSurfObjectDestroy = 344,
    CUPTI_DRIVER_TRACE_CBID_cuSurfObjectGetResourceDesc = 345,
    CUPTI_DRIVER_TRACE_CBID_cuStreamAddCallback = 346,
    CUPTI_DRIVER_TRACE_CBID_cuMipmappedArrayCreate = 347,
    CUPTI_DRIVER_TRACE_CBID_cuMipmappedArrayGetLevel = 348,
    CUPTI_DRIVER_TRACE_CBID_cuMipmappedArrayDestroy = 349,
    CUPTI_DRIVER_TRACE_CBID_cuTexRefSetMipmappedArray = 350,
    CUPTI_DRIVER_TRACE_CBID_cuTexRefSetMipmapFilterMode = 351,
    CUPTI_DRIVER_TRACE_CBID_cuTexRefSetMipmapLevelBias = 352,
    CUPTI_DRIVER_TRACE_CBID_cuTexRefSetMipmapLevelClamp = 353,
    CUPTI_DRIVER_TRACE_CBID_cuTexRefSetMaxAnisotropy = 354,
    CUPTI_DRIVER_TRACE_CBID_cuTexRefGetMipmappedArray = 355,
    CUPTI_DRIVER_TRACE_CBID_cuTexRefGetMipmapFilterMode = 356,
    CUPTI_DRIVER_TRACE_CBID_cuTexRefGetMipmapLevelBias = 357,
    CUPTI_DRIVER_TRACE_CBID_cuTexRefGetMipmapLevelClamp = 358,
    CUPTI_DRIVER_TRACE_CBID_cuTexRefGetMaxAnisotropy = 359,
    CUPTI_DRIVER_TRACE_CBID_cuGraphicsResourceGetMappedMipmappedArray = 360,
    CUPTI_DRIVER_TRACE_CBID_cuTexObjectGetResourceViewDesc = 361,
    CUPTI_DRIVER_TRACE_CBID_cuLinkCreate = 362,
    CUPTI_DRIVER_TRACE_CBID_cuLinkAddData = 363,
    CUPTI_DRIVER_TRACE_CBID_cuLinkAddFile = 364,
    CUPTI_DRIVER_TRACE_CBID_cuLinkComplete = 365,
    CUPTI_DRIVER_TRACE_CBID_cuLinkDestroy = 366,
    CUPTI_DRIVER_TRACE_CBID_cuStreamCreateWithPriority = 367,
    CUPTI_DRIVER_TRACE_CBID_cuStreamGetPriority = 368,
    CUPTI_DRIVER_TRACE_CBID_cuStreamGetFlags = 369,
    CUPTI_DRIVER_TRACE_CBID_cuCtxGetStreamPriorityRange = 370,
    CUPTI_DRIVER_TRACE_CBID_cuMemAllocManaged = 371,
    CUPTI_DRIVER_TRACE_CBID_cuGetErrorString = 372,
    CUPTI_DRIVER_TRACE_CBID_cuGetErrorName = 373,
    CUPTI_DRIVER_TRACE_CBID_cuOccupancyMaxActiveBlocksPerMultiprocessor = 374,
    CUPTI_DRIVER_TRACE_CBID_cuCompilePtx = 375,
    CUPTI_DRIVER_TRACE_CBID_cuBinaryFree = 376,
    CUPTI_DRIVER_TRACE_CBID_cuStreamAttachMemAsync = 377,
    CUPTI_DRIVER_TRACE_CBID_cuPointerSetAttribute = 378,
    CUPTI_DRIVER_TRACE_CBID_cuMemHostRegister_v2 = 379,
    CUPTI_DRIVER_TRACE_CBID_cuGraphicsResourceSetMapFlags_v2 = 380,
    CUPTI_DRIVER_TRACE_CBID_cuLinkCreate_v2 = 381,
    CUPTI_DRIVER_TRACE_CBID_cuLinkAddData_v2 = 382,
    CUPTI_DRIVER_TRACE_CBID_cuLinkAddFile_v2 = 383,
    CUPTI_DRIVER_TRACE_CBID_cuOccupancyMaxPotentialBlockSize = 384,
    CUPTI_DRIVER_TRACE_CBID_cuGLGetDevices_v2 = 385,
    CUPTI_DRIVER_TRACE_CBID_cuDevicePrimaryCtxRetain = 386,
    CUPTI_DRIVER_TRACE_CBID_cuDevicePrimaryCtxRelease = 387,
    CUPTI_DRIVER_TRACE_CBID_cuDevicePrimaryCtxSetFlags = 388,
    CUPTI_DRIVER_TRACE_CBID_cuDevicePrimaryCtxReset = 389,
    CUPTI_DRIVER_TRACE_CBID_cuGraphicsEGLRegisterImage = 390,
    CUPTI_DRIVER_TRACE_CBID_cuCtxGetFlags = 391,
    CUPTI_DRIVER_TRACE_CBID_cuDevicePrimaryCtxGetState = 392,
    CUPTI_DRIVER_TRACE_CBID_cuEGLStreamConsumerConnect = 393,
    CUPTI_DRIVER_TRACE_CBID_cuEGLStreamConsumerDisconnect = 394,
    CUPTI_DRIVER_TRACE_CBID_cuEGLStreamConsumerAcquireFrame = 395,
    CUPTI_DRIVER_TRACE_CBID_cuEGLStreamConsumerReleaseFrame = 396,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyHtoD_v2_ptds = 397,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyDtoH_v2_ptds = 398,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyDtoD_v2_ptds = 399,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyDtoA_v2_ptds = 400,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyAtoD_v2_ptds = 401,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyHtoA_v2_ptds = 402,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyAtoH_v2_ptds = 403,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyAtoA_v2_ptds = 404,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpy2D_v2_ptds = 405,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpy2DUnaligned_v2_ptds = 406,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpy3D_v2_ptds = 407,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpy_ptds = 408,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyPeer_ptds = 409,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpy3DPeer_ptds = 410,
    CUPTI_DRIVER_TRACE_CBID_cuMemsetD8_v2_ptds = 411,
    CUPTI_DRIVER_TRACE_CBID_cuMemsetD16_v2_ptds = 412,
    CUPTI_DRIVER_TRACE_CBID_cuMemsetD32_v2_ptds = 413,
    CUPTI_DRIVER_TRACE_CBID_cuMemsetD2D8_v2_ptds = 414,
    CUPTI_DRIVER_TRACE_CBID_cuMemsetD2D16_v2_ptds = 415,
    CUPTI_DRIVER_TRACE_CBID_cuMemsetD2D32_v2_ptds = 416,
    CUPTI_DRIVER_TRACE_CBID_cuGLMapBufferObject_v2_ptds = 417,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyAsync_ptsz = 418,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyHtoAAsync_v2_ptsz = 419,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyAtoHAsync_v2_ptsz = 420,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyHtoDAsync_v2_ptsz = 421,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyDtoHAsync_v2_ptsz = 422,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyDtoDAsync_v2_ptsz = 423,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpy2DAsync_v2_ptsz = 424,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpy3DAsync_v2_ptsz = 425,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyPeerAsync_ptsz = 426,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpy3DPeerAsync_ptsz = 427,
    CUPTI_DRIVER_TRACE_CBID_cuMemsetD8Async_ptsz = 428,
    CUPTI_DRIVER_TRACE_CBID_cuMemsetD16Async_ptsz = 429,
    CUPTI_DRIVER_TRACE_CBID_cuMemsetD32Async_ptsz = 430,
    CUPTI_DRIVER_TRACE_CBID_cuMemsetD2D8Async_ptsz = 431,
    CUPTI_DRIVER_TRACE_CBID_cuMemsetD2D16Async_ptsz = 432,
    CUPTI_DRIVER_TRACE_CBID_cuMemsetD2D32Async_ptsz = 433,
    CUPTI_DRIVER_TRACE_CBID_cuStreamGetPriority_ptsz = 434,
    CUPTI_DRIVER_TRACE_CBID_cuStreamGetFlags_ptsz = 435,
    CUPTI_DRIVER_TRACE_CBID_cuStreamWaitEvent_ptsz = 436,
    CUPTI_DRIVER_TRACE_CBID_cuStreamAddCallback_ptsz = 437,
    CUPTI_DRIVER_TRACE_CBID_cuStreamAttachMemAsync_ptsz = 438,
    CUPTI_DRIVER_TRACE_CBID_cuStreamQuery_ptsz = 439,
    CUPTI_DRIVER_TRACE_CBID_cuStreamSynchronize_ptsz = 440,
    CUPTI_DRIVER_TRACE_CBID_cuEventRecord_ptsz = 441,
    CUPTI_DRIVER_TRACE_CBID_cuLaunchKernel_ptsz = 442,
    CUPTI_DRIVER_TRACE_CBID_cuGraphicsMapResources_ptsz = 443,
    CUPTI_DRIVER_TRACE_CBID_cuGraphicsUnmapResources_ptsz = 444,
    CUPTI_DRIVER_TRACE_CBID_cuGLMapBufferObjectAsync_v2_ptsz = 445,
    CUPTI_DRIVER_TRACE_CBID_cuEGLStreamProducerConnect = 446,
    CUPTI_DRIVER_TRACE_CBID_cuEGLStreamProducerDisconnect = 447,
    CUPTI_DRIVER_TRACE_CBID_cuEGLStreamProducerPresentFrame = 448,
    CUPTI_DRIVER_TRACE_CBID_cuGraphicsResourceGetMappedEglFrame = 449,
    CUPTI_DRIVER_TRACE_CBID_cuPointerGetAttributes = 450,
    CUPTI_DRIVER_TRACE_CBID_cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags = 451,
    CUPTI_DRIVER_TRACE_CBID_cuOccupancyMaxPotentialBlockSizeWithFlags = 452,
    CUPTI_DRIVER_TRACE_CBID_cuEGLStreamProducerReturnFrame = 453,
    CUPTI_DRIVER_TRACE_CBID_cuDeviceGetP2PAttribute = 454,
    CUPTI_DRIVER_TRACE_CBID_cuTexRefSetBorderColor = 455,
    CUPTI_DRIVER_TRACE_CBID_cuTexRefGetBorderColor = 456,
    CUPTI_DRIVER_TRACE_CBID_cuMemAdvise = 457,
    CUPTI_DRIVER_TRACE_CBID_cuStreamWaitValue32 = 458,
    CUPTI_DRIVER_TRACE_CBID_cuStreamWaitValue32_ptsz = 459,
    CUPTI_DRIVER_TRACE_CBID_cuStreamWriteValue32 = 460,
    CUPTI_DRIVER_TRACE_CBID_cuStreamWriteValue32_ptsz = 461,
    CUPTI_DRIVER_TRACE_CBID_cuStreamBatchMemOp = 462,
    CUPTI_DRIVER_TRACE_CBID_cuStreamBatchMemOp_ptsz = 463,
    CUPTI_DRIVER_TRACE_CBID_cuNVNbufferGetPointer = 464,
    CUPTI_DRIVER_TRACE_CBID_cuNVNtextureGetArray = 465,
    CUPTI_DRIVER_TRACE_CBID_cuNNSetAllocator = 466,
    CUPTI_DRIVER_TRACE_CBID_cuMemPrefetchAsync = 467,
    CUPTI_DRIVER_TRACE_CBID_cuMemPrefetchAsync_ptsz = 468,
    CUPTI_DRIVER_TRACE_CBID_cuEventCreateFromNVNSync = 469,
    CUPTI_DRIVER_TRACE_CBID_cuEGLStreamConsumerConnectWithFlags = 470,
    CUPTI_DRIVER_TRACE_CBID_cuMemRangeGetAttribute = 471,
    CUPTI_DRIVER_TRACE_CBID_cuMemRangeGetAttributes = 472,
    CUPTI_DRIVER_TRACE_CBID_cuStreamWaitValue64 = 473,
    CUPTI_DRIVER_TRACE_CBID_cuStreamWaitValue64_ptsz = 474,
    CUPTI_DRIVER_TRACE_CBID_cuStreamWriteValue64 = 475,
    CUPTI_DRIVER_TRACE_CBID_cuStreamWriteValue64_ptsz = 476,
    CUPTI_DRIVER_TRACE_CBID_cuLaunchCooperativeKernel = 477,
    CUPTI_DRIVER_TRACE_CBID_cuLaunchCooperativeKernel_ptsz = 478,
    CUPTI_DRIVER_TRACE_CBID_cuEventCreateFromEGLSync = 479,
    CUPTI_DRIVER_TRACE_CBID_cuLaunchCooperativeKernelMultiDevice = 480,
    CUPTI_DRIVER_TRACE_CBID_cuFuncSetAttribute = 481,
    CUPTI_DRIVER_TRACE_CBID_cuDeviceGetUuid = 482,
    CUPTI_DRIVER_TRACE_CBID_cuStreamGetCtx = 483,
    CUPTI_DRIVER_TRACE_CBID_cuStreamGetCtx_ptsz = 484,
    CUPTI_DRIVER_TRACE_CBID_cuImportExternalMemory = 485,
    CUPTI_DRIVER_TRACE_CBID_cuExternalMemoryGetMappedBuffer = 486,
    CUPTI_DRIVER_TRACE_CBID_cuExternalMemoryGetMappedMipmappedArray = 487,
    CUPTI_DRIVER_TRACE_CBID_cuDestroyExternalMemory = 488,
    CUPTI_DRIVER_TRACE_CBID_cuImportExternalSemaphore = 489,
    CUPTI_DRIVER_TRACE_CBID_cuSignalExternalSemaphoresAsync = 490,
    CUPTI_DRIVER_TRACE_CBID_cuSignalExternalSemaphoresAsync_ptsz = 491,
    CUPTI_DRIVER_TRACE_CBID_cuWaitExternalSemaphoresAsync = 492,
    CUPTI_DRIVER_TRACE_CBID_cuWaitExternalSemaphoresAsync_ptsz = 493,
    CUPTI_DRIVER_TRACE_CBID_cuDestroyExternalSemaphore = 494,
    CUPTI_DRIVER_TRACE_CBID_cuStreamBeginCapture = 495,
    CUPTI_DRIVER_TRACE_CBID_cuStreamBeginCapture_ptsz = 496,
    CUPTI_DRIVER_TRACE_CBID_cuStreamEndCapture = 497,
    CUPTI_DRIVER_TRACE_CBID_cuStreamEndCapture_ptsz = 498,
    CUPTI_DRIVER_TRACE_CBID_cuStreamIsCapturing = 499,
    CUPTI_DRIVER_TRACE_CBID_cuStreamIsCapturing_ptsz = 500,
    CUPTI_DRIVER_TRACE_CBID_cuGraphCreate = 501,
    CUPTI_DRIVER_TRACE_CBID_cuGraphAddKernelNode = 502,
    CUPTI_DRIVER_TRACE_CBID_cuGraphKernelNodeGetParams = 503,
    CUPTI_DRIVER_TRACE_CBID_cuGraphAddMemcpyNode = 504,
    CUPTI_DRIVER_TRACE_CBID_cuGraphMemcpyNodeGetParams = 505,
    CUPTI_DRIVER_TRACE_CBID_cuGraphAddMemsetNode = 506,
    CUPTI_DRIVER_TRACE_CBID_cuGraphMemsetNodeGetParams = 507,
    CUPTI_DRIVER_TRACE_CBID_cuGraphMemsetNodeSetParams = 508,
    CUPTI_DRIVER_TRACE_CBID_cuGraphNodeGetType = 509,
    CUPTI_DRIVER_TRACE_CBID_cuGraphGetRootNodes = 510,
    CUPTI_DRIVER_TRACE_CBID_cuGraphNodeGetDependencies = 511,
    CUPTI_DRIVER_TRACE_CBID_cuGraphNodeGetDependentNodes = 512,
    CUPTI_DRIVER_TRACE_CBID_cuGraphInstantiate = 513,
    CUPTI_DRIVER_TRACE_CBID_cuGraphLaunch = 514,
    CUPTI_DRIVER_TRACE_CBID_cuGraphLaunch_ptsz = 515,
    CUPTI_DRIVER_TRACE_CBID_cuGraphExecDestroy = 516,
    CUPTI_DRIVER_TRACE_CBID_cuGraphDestroy = 517,
    CUPTI_DRIVER_TRACE_CBID_cuGraphAddDependencies = 518,
    CUPTI_DRIVER_TRACE_CBID_cuGraphRemoveDependencies = 519,
    CUPTI_DRIVER_TRACE_CBID_cuGraphMemcpyNodeSetParams = 520,
    CUPTI_DRIVER_TRACE_CBID_cuGraphKernelNodeSetParams = 521,
    CUPTI_DRIVER_TRACE_CBID_cuGraphDestroyNode = 522,
    CUPTI_DRIVER_TRACE_CBID_cuGraphClone = 523,
    CUPTI_DRIVER_TRACE_CBID_cuGraphNodeFindInClone = 524,
    CUPTI_DRIVER_TRACE_CBID_cuGraphAddChildGraphNode = 525,
    CUPTI_DRIVER_TRACE_CBID_cuGraphAddEmptyNode = 526,
    CUPTI_DRIVER_TRACE_CBID_cuLaunchHostFunc = 527,
    CUPTI_DRIVER_TRACE_CBID_cuLaunchHostFunc_ptsz = 528,
    CUPTI_DRIVER_TRACE_CBID_cuGraphChildGraphNodeGetGraph = 529,
    CUPTI_DRIVER_TRACE_CBID_cuGraphAddHostNode = 530,
    CUPTI_DRIVER_TRACE_CBID_cuGraphHostNodeGetParams = 531,
    CUPTI_DRIVER_TRACE_CBID_cuDeviceGetLuid = 532,
    CUPTI_DRIVER_TRACE_CBID_cuGraphHostNodeSetParams = 533,
    CUPTI_DRIVER_TRACE_CBID_cuGraphGetNodes = 534,
    CUPTI_DRIVER_TRACE_CBID_cuGraphGetEdges = 535,
    CUPTI_DRIVER_TRACE_CBID_cuStreamGetCaptureInfo = 536,
    CUPTI_DRIVER_TRACE_CBID_cuStreamGetCaptureInfo_ptsz = 537,
    CUPTI_DRIVER_TRACE_CBID_cuGraphExecKernelNodeSetParams = 538,
    CUPTI_DRIVER_TRACE_CBID_cuStreamBeginCapture_v2 = 539,
    CUPTI_DRIVER_TRACE_CBID_cuStreamBeginCapture_v2_ptsz = 540,
    CUPTI_DRIVER_TRACE_CBID_cuThreadExchangeStreamCaptureMode = 541,
    CUPTI_DRIVER_TRACE_CBID_cuDeviceGetNvSciSyncAttributes = 542,
    CUPTI_DRIVER_TRACE_CBID_cuOccupancyAvailableDynamicSMemPerBlock = 543,
    CUPTI_DRIVER_TRACE_CBID_cuDevicePrimaryCtxRelease_v2 = 544,
    CUPTI_DRIVER_TRACE_CBID_cuDevicePrimaryCtxReset_v2 = 545,
    CUPTI_DRIVER_TRACE_CBID_cuDevicePrimaryCtxSetFlags_v2 = 546,
    CUPTI_DRIVER_TRACE_CBID_cuMemAddressReserve = 547,
    CUPTI_DRIVER_TRACE_CBID_cuMemAddressFree = 548,
    CUPTI_DRIVER_TRACE_CBID_cuMemCreate = 549,
    CUPTI_DRIVER_TRACE_CBID_cuMemRelease = 550,
    CUPTI_DRIVER_TRACE_CBID_cuMemMap = 551,
    CUPTI_DRIVER_TRACE_CBID_cuMemUnmap = 552,
    CUPTI_DRIVER_TRACE_CBID_cuMemSetAccess = 553,
    CUPTI_DRIVER_TRACE_CBID_cuMemExportToShareableHandle = 554,
    CUPTI_DRIVER_TRACE_CBID_cuMemImportFromShareableHandle = 555,
    CUPTI_DRIVER_TRACE_CBID_cuMemGetAllocationGranularity = 556,
    CUPTI_DRIVER_TRACE_CBID_cuMemGetAllocationPropertiesFromHandle = 557,
    CUPTI_DRIVER_TRACE_CBID_cuMemGetAccess = 558,
    CUPTI_DRIVER_TRACE_CBID_cuStreamSetFlags = 559,
    CUPTI_DRIVER_TRACE_CBID_cuStreamSetFlags_ptsz = 560,
    CUPTI_DRIVER_TRACE_CBID_cuGraphExecUpdate = 561,
    CUPTI_DRIVER_TRACE_CBID_cuGraphExecMemcpyNodeSetParams = 562,
    CUPTI_DRIVER_TRACE_CBID_cuGraphExecMemsetNodeSetParams = 563,
    CUPTI_DRIVER_TRACE_CBID_cuGraphExecHostNodeSetParams = 564,
    CUPTI_DRIVER_TRACE_CBID_cuMemRetainAllocationHandle = 565,
    CUPTI_DRIVER_TRACE_CBID_cuFuncGetModule = 566,
    CUPTI_DRIVER_TRACE_CBID_cuIpcOpenMemHandle_v2 = 567,
    CUPTI_DRIVER_TRACE_CBID_cuCtxResetPersistingL2Cache = 568,
    CUPTI_DRIVER_TRACE_CBID_cuGraphKernelNodeCopyAttributes = 569,
    CUPTI_DRIVER_TRACE_CBID_cuGraphKernelNodeGetAttribute = 570,
    CUPTI_DRIVER_TRACE_CBID_cuGraphKernelNodeSetAttribute = 571,
    CUPTI_DRIVER_TRACE_CBID_cuStreamCopyAttributes = 572,
    CUPTI_DRIVER_TRACE_CBID_cuStreamCopyAttributes_ptsz = 573,
    CUPTI_DRIVER_TRACE_CBID_cuStreamGetAttribute = 574,
    CUPTI_DRIVER_TRACE_CBID_cuStreamGetAttribute_ptsz = 575,
    CUPTI_DRIVER_TRACE_CBID_cuStreamSetAttribute = 576,
    CUPTI_DRIVER_TRACE_CBID_cuStreamSetAttribute_ptsz = 577,
    CUPTI_DRIVER_TRACE_CBID_cuGraphInstantiate_v2 = 578,
    CUPTI_DRIVER_TRACE_CBID_cuDeviceGetTexture1DLinearMaxWidth = 579,
    CUPTI_DRIVER_TRACE_CBID_cuGraphUpload = 580,
    CUPTI_DRIVER_TRACE_CBID_cuGraphUpload_ptsz = 581,
    CUPTI_DRIVER_TRACE_CBID_cuArrayGetSparseProperties = 582,
    CUPTI_DRIVER_TRACE_CBID_cuMipmappedArrayGetSparseProperties = 583,
    CUPTI_DRIVER_TRACE_CBID_cuMemMapArrayAsync = 584,
    CUPTI_DRIVER_TRACE_CBID_cuMemMapArrayAsync_ptsz = 585,
    CUPTI_DRIVER_TRACE_CBID_cuGraphExecChildGraphNodeSetParams = 586,
    CUPTI_DRIVER_TRACE_CBID_cuEventRecordWithFlags = 587,
    CUPTI_DRIVER_TRACE_CBID_cuEventRecordWithFlags_ptsz = 588,
    CUPTI_DRIVER_TRACE_CBID_cuGraphAddEventRecordNode = 589,
    CUPTI_DRIVER_TRACE_CBID_cuGraphAddEventWaitNode = 590,
    CUPTI_DRIVER_TRACE_CBID_cuGraphEventRecordNodeGetEvent = 591,
    CUPTI_DRIVER_TRACE_CBID_cuGraphEventWaitNodeGetEvent = 592,
    CUPTI_DRIVER_TRACE_CBID_cuGraphEventRecordNodeSetEvent = 593,
    CUPTI_DRIVER_TRACE_CBID_cuGraphEventWaitNodeSetEvent = 594,
    CUPTI_DRIVER_TRACE_CBID_cuGraphExecEventRecordNodeSetEvent = 595,
    CUPTI_DRIVER_TRACE_CBID_cuGraphExecEventWaitNodeSetEvent = 596,
    CUPTI_DRIVER_TRACE_CBID_cuArrayGetPlane = 597,
    CUPTI_DRIVER_TRACE_CBID_cuMemAllocAsync = 598,
    CUPTI_DRIVER_TRACE_CBID_cuMemAllocAsync_ptsz = 599,
    CUPTI_DRIVER_TRACE_CBID_cuMemFreeAsync = 600,
    CUPTI_DRIVER_TRACE_CBID_cuMemFreeAsync_ptsz = 601,
    CUPTI_DRIVER_TRACE_CBID_cuMemPoolTrimTo = 602,
    CUPTI_DRIVER_TRACE_CBID_cuMemPoolSetAttribute = 603,
    CUPTI_DRIVER_TRACE_CBID_cuMemPoolGetAttribute = 604,
    CUPTI_DRIVER_TRACE_CBID_cuMemPoolSetAccess = 605,
    CUPTI_DRIVER_TRACE_CBID_cuDeviceGetDefaultMemPool = 606,
    CUPTI_DRIVER_TRACE_CBID_cuMemPoolCreate = 607,
    CUPTI_DRIVER_TRACE_CBID_cuMemPoolDestroy = 608,
    CUPTI_DRIVER_TRACE_CBID_cuDeviceSetMemPool = 609,
    CUPTI_DRIVER_TRACE_CBID_cuDeviceGetMemPool = 610,
    CUPTI_DRIVER_TRACE_CBID_cuMemAllocFromPoolAsync = 611,
    CUPTI_DRIVER_TRACE_CBID_cuMemAllocFromPoolAsync_ptsz = 612,
    CUPTI_DRIVER_TRACE_CBID_cuMemPoolExportToShareableHandle = 613,
    CUPTI_DRIVER_TRACE_CBID_cuMemPoolImportFromShareableHandle = 614,
    CUPTI_DRIVER_TRACE_CBID_cuMemPoolExportPointer = 615,
    CUPTI_DRIVER_TRACE_CBID_cuMemPoolImportPointer = 616,
    CUPTI_DRIVER_TRACE_CBID_cuMemPoolGetAccess = 617,
    CUPTI_DRIVER_TRACE_CBID_cuGraphAddExternalSemaphoresSignalNode = 618,
    CUPTI_DRIVER_TRACE_CBID_cuGraphExternalSemaphoresSignalNodeGetParams = 619,
    CUPTI_DRIVER_TRACE_CBID_cuGraphExternalSemaphoresSignalNodeSetParams = 620,
    CUPTI_DRIVER_TRACE_CBID_cuGraphAddExternalSemaphoresWaitNode = 621,
    CUPTI_DRIVER_TRACE_CBID_cuGraphExternalSemaphoresWaitNodeGetParams = 622,
    CUPTI_DRIVER_TRACE_CBID_cuGraphExternalSemaphoresWaitNodeSetParams = 623,
    CUPTI_DRIVER_TRACE_CBID_cuGraphExecExternalSemaphoresSignalNodeSetParams = 624,
    CUPTI_DRIVER_TRACE_CBID_cuGraphExecExternalSemaphoresWaitNodeSetParams = 625,
    CUPTI_DRIVER_TRACE_CBID_cuGetProcAddress = 626,
    CUPTI_DRIVER_TRACE_CBID_cuFlushGPUDirectRDMAWrites = 627,
    CUPTI_DRIVER_TRACE_CBID_cuGraphDebugDotPrint = 628,
    CUPTI_DRIVER_TRACE_CBID_cuStreamGetCaptureInfo_v2 = 629,
    CUPTI_DRIVER_TRACE_CBID_cuStreamGetCaptureInfo_v2_ptsz = 630,
    CUPTI_DRIVER_TRACE_CBID_cuStreamUpdateCaptureDependencies = 631,
    CUPTI_DRIVER_TRACE_CBID_cuStreamUpdateCaptureDependencies_ptsz = 632,
    CUPTI_DRIVER_TRACE_CBID_cuUserObjectCreate = 633,
    CUPTI_DRIVER_TRACE_CBID_cuUserObjectRetain = 634,
    CUPTI_DRIVER_TRACE_CBID_cuUserObjectRelease = 635,
    CUPTI_DRIVER_TRACE_CBID_cuGraphRetainUserObject = 636,
    CUPTI_DRIVER_TRACE_CBID_cuGraphReleaseUserObject = 637,
    CUPTI_DRIVER_TRACE_CBID_cuGraphAddMemAllocNode = 638,
    CUPTI_DRIVER_TRACE_CBID_cuGraphAddMemFreeNode = 639,
    CUPTI_DRIVER_TRACE_CBID_cuDeviceGraphMemTrim = 640,
    CUPTI_DRIVER_TRACE_CBID_cuDeviceGetGraphMemAttribute = 641,
    CUPTI_DRIVER_TRACE_CBID_cuDeviceSetGraphMemAttribute = 642,
    CUPTI_DRIVER_TRACE_CBID_cuGraphInstantiateWithFlags = 643,
    CUPTI_DRIVER_TRACE_CBID_cuDeviceGetExecAffinitySupport = 644,
    CUPTI_DRIVER_TRACE_CBID_cuCtxCreate_v3 = 645,
    CUPTI_DRIVER_TRACE_CBID_cuCtxGetExecAffinity = 646,
    CUPTI_DRIVER_TRACE_CBID_cuDeviceGetUuid_v2 = 647,
    CUPTI_DRIVER_TRACE_CBID_cuGraphMemAllocNodeGetParams = 648,
    CUPTI_DRIVER_TRACE_CBID_cuGraphMemFreeNodeGetParams = 649,
    CUPTI_DRIVER_TRACE_CBID_cuGraphNodeSetEnabled = 650,
    CUPTI_DRIVER_TRACE_CBID_cuGraphNodeGetEnabled = 651,
    CUPTI_DRIVER_TRACE_CBID_cuLaunchKernelEx = 652,
    CUPTI_DRIVER_TRACE_CBID_cuLaunchKernelEx_ptsz = 653,
    CUPTI_DRIVER_TRACE_CBID_cuArrayGetMemoryRequirements = 654,
    CUPTI_DRIVER_TRACE_CBID_cuMipmappedArrayGetMemoryRequirements = 655,
    CUPTI_DRIVER_TRACE_CBID_cuGraphInstantiateWithParams = 656,
    CUPTI_DRIVER_TRACE_CBID_cuGraphInstantiateWithParams_ptsz = 657,
    CUPTI_DRIVER_TRACE_CBID_cuGraphExecGetFlags = 658,
    CUPTI_DRIVER_TRACE_CBID_cuStreamWaitValue32_v2 = 659,
    CUPTI_DRIVER_TRACE_CBID_cuStreamWaitValue32_v2_ptsz = 660,
    CUPTI_DRIVER_TRACE_CBID_cuStreamWaitValue64_v2 = 661,
    CUPTI_DRIVER_TRACE_CBID_cuStreamWaitValue64_v2_ptsz = 662,
    CUPTI_DRIVER_TRACE_CBID_cuStreamWriteValue32_v2 = 663,
    CUPTI_DRIVER_TRACE_CBID_cuStreamWriteValue32_v2_ptsz = 664,
    CUPTI_DRIVER_TRACE_CBID_cuStreamWriteValue64_v2 = 665,
    CUPTI_DRIVER_TRACE_CBID_cuStreamWriteValue64_v2_ptsz = 666,
    CUPTI_DRIVER_TRACE_CBID_cuStreamBatchMemOp_v2 = 667,
    CUPTI_DRIVER_TRACE_CBID_cuStreamBatchMemOp_v2_ptsz = 668,
    CUPTI_DRIVER_TRACE_CBID_cuGraphAddBatchMemOpNode = 669,
    CUPTI_DRIVER_TRACE_CBID_cuGraphBatchMemOpNodeGetParams = 670,
    CUPTI_DRIVER_TRACE_CBID_cuGraphBatchMemOpNodeSetParams = 671,
    CUPTI_DRIVER_TRACE_CBID_cuGraphExecBatchMemOpNodeSetParams = 672,
    CUPTI_DRIVER_TRACE_CBID_cuModuleGetLoadingMode = 673,
    CUPTI_DRIVER_TRACE_CBID_cuMemGetHandleForAddressRange = 674,
    CUPTI_DRIVER_TRACE_CBID_cuOccupancyMaxPotentialClusterSize = 675,
    CUPTI_DRIVER_TRACE_CBID_cuOccupancyMaxActiveClusters = 676,
    CUPTI_DRIVER_TRACE_CBID_cuGetProcAddress_v2 = 677,
    CUPTI_DRIVER_TRACE_CBID_cuLibraryLoadData = 678,
    CUPTI_DRIVER_TRACE_CBID_cuLibraryLoadFromFile = 679,
    CUPTI_DRIVER_TRACE_CBID_cuLibraryUnload = 680,
    CUPTI_DRIVER_TRACE_CBID_cuLibraryGetKernel = 681,
    CUPTI_DRIVER_TRACE_CBID_cuLibraryGetModule = 682,
    CUPTI_DRIVER_TRACE_CBID_cuKernelGetFunction = 683,
    CUPTI_DRIVER_TRACE_CBID_cuLibraryGetGlobal = 684,
    CUPTI_DRIVER_TRACE_CBID_cuLibraryGetManaged = 685,
    CUPTI_DRIVER_TRACE_CBID_cuKernelGetAttribute = 686,
    CUPTI_DRIVER_TRACE_CBID_cuKernelSetAttribute = 687,
    CUPTI_DRIVER_TRACE_CBID_cuKernelSetCacheConfig = 688,
    CUPTI_DRIVER_TRACE_CBID_cuGraphAddKernelNode_v2 = 689,
    CUPTI_DRIVER_TRACE_CBID_cuGraphKernelNodeGetParams_v2 = 690,
    CUPTI_DRIVER_TRACE_CBID_cuGraphKernelNodeSetParams_v2 = 691,
    CUPTI_DRIVER_TRACE_CBID_cuGraphExecKernelNodeSetParams_v2 = 692,
    CUPTI_DRIVER_TRACE_CBID_cuStreamGetId = 693,
    CUPTI_DRIVER_TRACE_CBID_cuStreamGetId_ptsz = 694,
    CUPTI_DRIVER_TRACE_CBID_cuCtxGetId = 695,
    CUPTI_DRIVER_TRACE_CBID_cuGraphExecUpdate_v2 = 696,
    CUPTI_DRIVER_TRACE_CBID_cuTensorMapEncodeTiled = 697,
    CUPTI_DRIVER_TRACE_CBID_cuTensorMapEncodeIm2col = 698,
    CUPTI_DRIVER_TRACE_CBID_cuTensorMapReplaceAddress = 699,
    CUPTI_DRIVER_TRACE_CBID_cuLibraryGetUnifiedFunction = 700,
    CUPTI_DRIVER_TRACE_CBID_SIZE = 701,
    CUPTI_DRIVER_TRACE_CBID_FORCE_INT = 2147483647,
}
pub use self::CUpti_driver_api_trace_cbid_enum as CUpti_driver_api_trace_cbid;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_runtime_api_trace_cbid_enum {
    CUPTI_RUNTIME_TRACE_CBID_INVALID = 0,
    CUPTI_RUNTIME_TRACE_CBID_cudaDriverGetVersion_v3020 = 1,
    CUPTI_RUNTIME_TRACE_CBID_cudaRuntimeGetVersion_v3020 = 2,
    CUPTI_RUNTIME_TRACE_CBID_cudaGetDeviceCount_v3020 = 3,
    CUPTI_RUNTIME_TRACE_CBID_cudaGetDeviceProperties_v3020 = 4,
    CUPTI_RUNTIME_TRACE_CBID_cudaChooseDevice_v3020 = 5,
    CUPTI_RUNTIME_TRACE_CBID_cudaGetChannelDesc_v3020 = 6,
    CUPTI_RUNTIME_TRACE_CBID_cudaCreateChannelDesc_v3020 = 7,
    CUPTI_RUNTIME_TRACE_CBID_cudaConfigureCall_v3020 = 8,
    CUPTI_RUNTIME_TRACE_CBID_cudaSetupArgument_v3020 = 9,
    CUPTI_RUNTIME_TRACE_CBID_cudaGetLastError_v3020 = 10,
    CUPTI_RUNTIME_TRACE_CBID_cudaPeekAtLastError_v3020 = 11,
    CUPTI_RUNTIME_TRACE_CBID_cudaGetErrorString_v3020 = 12,
    CUPTI_RUNTIME_TRACE_CBID_cudaLaunch_v3020 = 13,
    CUPTI_RUNTIME_TRACE_CBID_cudaFuncSetCacheConfig_v3020 = 14,
    CUPTI_RUNTIME_TRACE_CBID_cudaFuncGetAttributes_v3020 = 15,
    CUPTI_RUNTIME_TRACE_CBID_cudaSetDevice_v3020 = 16,
    CUPTI_RUNTIME_TRACE_CBID_cudaGetDevice_v3020 = 17,
    CUPTI_RUNTIME_TRACE_CBID_cudaSetValidDevices_v3020 = 18,
    CUPTI_RUNTIME_TRACE_CBID_cudaSetDeviceFlags_v3020 = 19,
    CUPTI_RUNTIME_TRACE_CBID_cudaMalloc_v3020 = 20,
    CUPTI_RUNTIME_TRACE_CBID_cudaMallocPitch_v3020 = 21,
    CUPTI_RUNTIME_TRACE_CBID_cudaFree_v3020 = 22,
    CUPTI_RUNTIME_TRACE_CBID_cudaMallocArray_v3020 = 23,
    CUPTI_RUNTIME_TRACE_CBID_cudaFreeArray_v3020 = 24,
    CUPTI_RUNTIME_TRACE_CBID_cudaMallocHost_v3020 = 25,
    CUPTI_RUNTIME_TRACE_CBID_cudaFreeHost_v3020 = 26,
    CUPTI_RUNTIME_TRACE_CBID_cudaHostAlloc_v3020 = 27,
    CUPTI_RUNTIME_TRACE_CBID_cudaHostGetDevicePointer_v3020 = 28,
    CUPTI_RUNTIME_TRACE_CBID_cudaHostGetFlags_v3020 = 29,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemGetInfo_v3020 = 30,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpy_v3020 = 31,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpy2D_v3020 = 32,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpyToArray_v3020 = 33,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpy2DToArray_v3020 = 34,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpyFromArray_v3020 = 35,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpy2DFromArray_v3020 = 36,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpyArrayToArray_v3020 = 37,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpy2DArrayToArray_v3020 = 38,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpyToSymbol_v3020 = 39,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpyFromSymbol_v3020 = 40,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpyAsync_v3020 = 41,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpyToArrayAsync_v3020 = 42,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpyFromArrayAsync_v3020 = 43,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpy2DAsync_v3020 = 44,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpy2DToArrayAsync_v3020 = 45,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpy2DFromArrayAsync_v3020 = 46,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpyToSymbolAsync_v3020 = 47,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpyFromSymbolAsync_v3020 = 48,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemset_v3020 = 49,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemset2D_v3020 = 50,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemsetAsync_v3020 = 51,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemset2DAsync_v3020 = 52,
    CUPTI_RUNTIME_TRACE_CBID_cudaGetSymbolAddress_v3020 = 53,
    CUPTI_RUNTIME_TRACE_CBID_cudaGetSymbolSize_v3020 = 54,
    CUPTI_RUNTIME_TRACE_CBID_cudaBindTexture_v3020 = 55,
    CUPTI_RUNTIME_TRACE_CBID_cudaBindTexture2D_v3020 = 56,
    CUPTI_RUNTIME_TRACE_CBID_cudaBindTextureToArray_v3020 = 57,
    CUPTI_RUNTIME_TRACE_CBID_cudaUnbindTexture_v3020 = 58,
    CUPTI_RUNTIME_TRACE_CBID_cudaGetTextureAlignmentOffset_v3020 = 59,
    CUPTI_RUNTIME_TRACE_CBID_cudaGetTextureReference_v3020 = 60,
    CUPTI_RUNTIME_TRACE_CBID_cudaBindSurfaceToArray_v3020 = 61,
    CUPTI_RUNTIME_TRACE_CBID_cudaGetSurfaceReference_v3020 = 62,
    CUPTI_RUNTIME_TRACE_CBID_cudaGLSetGLDevice_v3020 = 63,
    CUPTI_RUNTIME_TRACE_CBID_cudaGLRegisterBufferObject_v3020 = 64,
    CUPTI_RUNTIME_TRACE_CBID_cudaGLMapBufferObject_v3020 = 65,
    CUPTI_RUNTIME_TRACE_CBID_cudaGLUnmapBufferObject_v3020 = 66,
    CUPTI_RUNTIME_TRACE_CBID_cudaGLUnregisterBufferObject_v3020 = 67,
    CUPTI_RUNTIME_TRACE_CBID_cudaGLSetBufferObjectMapFlags_v3020 = 68,
    CUPTI_RUNTIME_TRACE_CBID_cudaGLMapBufferObjectAsync_v3020 = 69,
    CUPTI_RUNTIME_TRACE_CBID_cudaGLUnmapBufferObjectAsync_v3020 = 70,
    CUPTI_RUNTIME_TRACE_CBID_cudaWGLGetDevice_v3020 = 71,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphicsGLRegisterImage_v3020 = 72,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphicsGLRegisterBuffer_v3020 = 73,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphicsUnregisterResource_v3020 = 74,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphicsResourceSetMapFlags_v3020 = 75,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphicsMapResources_v3020 = 76,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphicsUnmapResources_v3020 = 77,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphicsResourceGetMappedPointer_v3020 = 78,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphicsSubResourceGetMappedArray_v3020 = 79,
    CUPTI_RUNTIME_TRACE_CBID_cudaVDPAUGetDevice_v3020 = 80,
    CUPTI_RUNTIME_TRACE_CBID_cudaVDPAUSetVDPAUDevice_v3020 = 81,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphicsVDPAURegisterVideoSurface_v3020 = 82,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphicsVDPAURegisterOutputSurface_v3020 = 83,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D11GetDevice_v3020 = 84,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D11GetDevices_v3020 = 85,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D11SetDirect3DDevice_v3020 = 86,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphicsD3D11RegisterResource_v3020 = 87,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D10GetDevice_v3020 = 88,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D10GetDevices_v3020 = 89,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D10SetDirect3DDevice_v3020 = 90,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphicsD3D10RegisterResource_v3020 = 91,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D10RegisterResource_v3020 = 92,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D10UnregisterResource_v3020 = 93,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D10MapResources_v3020 = 94,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D10UnmapResources_v3020 = 95,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D10ResourceSetMapFlags_v3020 = 96,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D10ResourceGetSurfaceDimensions_v3020 = 97,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D10ResourceGetMappedArray_v3020 = 98,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D10ResourceGetMappedPointer_v3020 = 99,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D10ResourceGetMappedSize_v3020 = 100,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D10ResourceGetMappedPitch_v3020 = 101,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D9GetDevice_v3020 = 102,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D9GetDevices_v3020 = 103,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D9SetDirect3DDevice_v3020 = 104,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D9GetDirect3DDevice_v3020 = 105,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphicsD3D9RegisterResource_v3020 = 106,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D9RegisterResource_v3020 = 107,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D9UnregisterResource_v3020 = 108,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D9MapResources_v3020 = 109,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D9UnmapResources_v3020 = 110,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D9ResourceSetMapFlags_v3020 = 111,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D9ResourceGetSurfaceDimensions_v3020 = 112,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D9ResourceGetMappedArray_v3020 = 113,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D9ResourceGetMappedPointer_v3020 = 114,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D9ResourceGetMappedSize_v3020 = 115,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D9ResourceGetMappedPitch_v3020 = 116,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D9Begin_v3020 = 117,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D9End_v3020 = 118,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D9RegisterVertexBuffer_v3020 = 119,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D9UnregisterVertexBuffer_v3020 = 120,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D9MapVertexBuffer_v3020 = 121,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D9UnmapVertexBuffer_v3020 = 122,
    CUPTI_RUNTIME_TRACE_CBID_cudaThreadExit_v3020 = 123,
    CUPTI_RUNTIME_TRACE_CBID_cudaSetDoubleForDevice_v3020 = 124,
    CUPTI_RUNTIME_TRACE_CBID_cudaSetDoubleForHost_v3020 = 125,
    CUPTI_RUNTIME_TRACE_CBID_cudaThreadSynchronize_v3020 = 126,
    CUPTI_RUNTIME_TRACE_CBID_cudaThreadGetLimit_v3020 = 127,
    CUPTI_RUNTIME_TRACE_CBID_cudaThreadSetLimit_v3020 = 128,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamCreate_v3020 = 129,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamDestroy_v3020 = 130,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamSynchronize_v3020 = 131,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamQuery_v3020 = 132,
    CUPTI_RUNTIME_TRACE_CBID_cudaEventCreate_v3020 = 133,
    CUPTI_RUNTIME_TRACE_CBID_cudaEventCreateWithFlags_v3020 = 134,
    CUPTI_RUNTIME_TRACE_CBID_cudaEventRecord_v3020 = 135,
    CUPTI_RUNTIME_TRACE_CBID_cudaEventDestroy_v3020 = 136,
    CUPTI_RUNTIME_TRACE_CBID_cudaEventSynchronize_v3020 = 137,
    CUPTI_RUNTIME_TRACE_CBID_cudaEventQuery_v3020 = 138,
    CUPTI_RUNTIME_TRACE_CBID_cudaEventElapsedTime_v3020 = 139,
    CUPTI_RUNTIME_TRACE_CBID_cudaMalloc3D_v3020 = 140,
    CUPTI_RUNTIME_TRACE_CBID_cudaMalloc3DArray_v3020 = 141,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemset3D_v3020 = 142,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemset3DAsync_v3020 = 143,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpy3D_v3020 = 144,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpy3DAsync_v3020 = 145,
    CUPTI_RUNTIME_TRACE_CBID_cudaThreadSetCacheConfig_v3020 = 146,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamWaitEvent_v3020 = 147,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D11GetDirect3DDevice_v3020 = 148,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D10GetDirect3DDevice_v3020 = 149,
    CUPTI_RUNTIME_TRACE_CBID_cudaThreadGetCacheConfig_v3020 = 150,
    CUPTI_RUNTIME_TRACE_CBID_cudaPointerGetAttributes_v4000 = 151,
    CUPTI_RUNTIME_TRACE_CBID_cudaHostRegister_v4000 = 152,
    CUPTI_RUNTIME_TRACE_CBID_cudaHostUnregister_v4000 = 153,
    CUPTI_RUNTIME_TRACE_CBID_cudaDeviceCanAccessPeer_v4000 = 154,
    CUPTI_RUNTIME_TRACE_CBID_cudaDeviceEnablePeerAccess_v4000 = 155,
    CUPTI_RUNTIME_TRACE_CBID_cudaDeviceDisablePeerAccess_v4000 = 156,
    CUPTI_RUNTIME_TRACE_CBID_cudaPeerRegister_v4000 = 157,
    CUPTI_RUNTIME_TRACE_CBID_cudaPeerUnregister_v4000 = 158,
    CUPTI_RUNTIME_TRACE_CBID_cudaPeerGetDevicePointer_v4000 = 159,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpyPeer_v4000 = 160,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpyPeerAsync_v4000 = 161,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpy3DPeer_v4000 = 162,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpy3DPeerAsync_v4000 = 163,
    CUPTI_RUNTIME_TRACE_CBID_cudaDeviceReset_v3020 = 164,
    CUPTI_RUNTIME_TRACE_CBID_cudaDeviceSynchronize_v3020 = 165,
    CUPTI_RUNTIME_TRACE_CBID_cudaDeviceGetLimit_v3020 = 166,
    CUPTI_RUNTIME_TRACE_CBID_cudaDeviceSetLimit_v3020 = 167,
    CUPTI_RUNTIME_TRACE_CBID_cudaDeviceGetCacheConfig_v3020 = 168,
    CUPTI_RUNTIME_TRACE_CBID_cudaDeviceSetCacheConfig_v3020 = 169,
    CUPTI_RUNTIME_TRACE_CBID_cudaProfilerInitialize_v4000 = 170,
    CUPTI_RUNTIME_TRACE_CBID_cudaProfilerStart_v4000 = 171,
    CUPTI_RUNTIME_TRACE_CBID_cudaProfilerStop_v4000 = 172,
    CUPTI_RUNTIME_TRACE_CBID_cudaDeviceGetByPCIBusId_v4010 = 173,
    CUPTI_RUNTIME_TRACE_CBID_cudaDeviceGetPCIBusId_v4010 = 174,
    CUPTI_RUNTIME_TRACE_CBID_cudaGLGetDevices_v4010 = 175,
    CUPTI_RUNTIME_TRACE_CBID_cudaIpcGetEventHandle_v4010 = 176,
    CUPTI_RUNTIME_TRACE_CBID_cudaIpcOpenEventHandle_v4010 = 177,
    CUPTI_RUNTIME_TRACE_CBID_cudaIpcGetMemHandle_v4010 = 178,
    CUPTI_RUNTIME_TRACE_CBID_cudaIpcOpenMemHandle_v4010 = 179,
    CUPTI_RUNTIME_TRACE_CBID_cudaIpcCloseMemHandle_v4010 = 180,
    CUPTI_RUNTIME_TRACE_CBID_cudaArrayGetInfo_v4010 = 181,
    CUPTI_RUNTIME_TRACE_CBID_cudaFuncSetSharedMemConfig_v4020 = 182,
    CUPTI_RUNTIME_TRACE_CBID_cudaDeviceGetSharedMemConfig_v4020 = 183,
    CUPTI_RUNTIME_TRACE_CBID_cudaDeviceSetSharedMemConfig_v4020 = 184,
    CUPTI_RUNTIME_TRACE_CBID_cudaCreateTextureObject_v5000 = 185,
    CUPTI_RUNTIME_TRACE_CBID_cudaDestroyTextureObject_v5000 = 186,
    CUPTI_RUNTIME_TRACE_CBID_cudaGetTextureObjectResourceDesc_v5000 = 187,
    CUPTI_RUNTIME_TRACE_CBID_cudaGetTextureObjectTextureDesc_v5000 = 188,
    CUPTI_RUNTIME_TRACE_CBID_cudaCreateSurfaceObject_v5000 = 189,
    CUPTI_RUNTIME_TRACE_CBID_cudaDestroySurfaceObject_v5000 = 190,
    CUPTI_RUNTIME_TRACE_CBID_cudaGetSurfaceObjectResourceDesc_v5000 = 191,
    CUPTI_RUNTIME_TRACE_CBID_cudaMallocMipmappedArray_v5000 = 192,
    CUPTI_RUNTIME_TRACE_CBID_cudaGetMipmappedArrayLevel_v5000 = 193,
    CUPTI_RUNTIME_TRACE_CBID_cudaFreeMipmappedArray_v5000 = 194,
    CUPTI_RUNTIME_TRACE_CBID_cudaBindTextureToMipmappedArray_v5000 = 195,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphicsResourceGetMappedMipmappedArray_v5000 = 196,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamAddCallback_v5000 = 197,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamCreateWithFlags_v5000 = 198,
    CUPTI_RUNTIME_TRACE_CBID_cudaGetTextureObjectResourceViewDesc_v5000 = 199,
    CUPTI_RUNTIME_TRACE_CBID_cudaDeviceGetAttribute_v5000 = 200,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamDestroy_v5050 = 201,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamCreateWithPriority_v5050 = 202,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamGetPriority_v5050 = 203,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamGetFlags_v5050 = 204,
    CUPTI_RUNTIME_TRACE_CBID_cudaDeviceGetStreamPriorityRange_v5050 = 205,
    CUPTI_RUNTIME_TRACE_CBID_cudaMallocManaged_v6000 = 206,
    CUPTI_RUNTIME_TRACE_CBID_cudaOccupancyMaxActiveBlocksPerMultiprocessor_v6000 = 207,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamAttachMemAsync_v6000 = 208,
    CUPTI_RUNTIME_TRACE_CBID_cudaGetErrorName_v6050 = 209,
    CUPTI_RUNTIME_TRACE_CBID_cudaOccupancyMaxActiveBlocksPerMultiprocessor_v6050 = 210,
    CUPTI_RUNTIME_TRACE_CBID_cudaLaunchKernel_v7000 = 211,
    CUPTI_RUNTIME_TRACE_CBID_cudaGetDeviceFlags_v7000 = 212,
    CUPTI_RUNTIME_TRACE_CBID_cudaLaunch_ptsz_v7000 = 213,
    CUPTI_RUNTIME_TRACE_CBID_cudaLaunchKernel_ptsz_v7000 = 214,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpy_ptds_v7000 = 215,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpy2D_ptds_v7000 = 216,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpyToArray_ptds_v7000 = 217,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpy2DToArray_ptds_v7000 = 218,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpyFromArray_ptds_v7000 = 219,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpy2DFromArray_ptds_v7000 = 220,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpyArrayToArray_ptds_v7000 = 221,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpy2DArrayToArray_ptds_v7000 = 222,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpyToSymbol_ptds_v7000 = 223,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpyFromSymbol_ptds_v7000 = 224,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpyAsync_ptsz_v7000 = 225,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpyToArrayAsync_ptsz_v7000 = 226,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpyFromArrayAsync_ptsz_v7000 = 227,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpy2DAsync_ptsz_v7000 = 228,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpy2DToArrayAsync_ptsz_v7000 = 229,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpy2DFromArrayAsync_ptsz_v7000 = 230,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpyToSymbolAsync_ptsz_v7000 = 231,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpyFromSymbolAsync_ptsz_v7000 = 232,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemset_ptds_v7000 = 233,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemset2D_ptds_v7000 = 234,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemsetAsync_ptsz_v7000 = 235,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemset2DAsync_ptsz_v7000 = 236,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamGetPriority_ptsz_v7000 = 237,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamGetFlags_ptsz_v7000 = 238,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamSynchronize_ptsz_v7000 = 239,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamQuery_ptsz_v7000 = 240,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamAttachMemAsync_ptsz_v7000 = 241,
    CUPTI_RUNTIME_TRACE_CBID_cudaEventRecord_ptsz_v7000 = 242,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemset3D_ptds_v7000 = 243,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemset3DAsync_ptsz_v7000 = 244,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpy3D_ptds_v7000 = 245,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpy3DAsync_ptsz_v7000 = 246,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamWaitEvent_ptsz_v7000 = 247,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamAddCallback_ptsz_v7000 = 248,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpy3DPeer_ptds_v7000 = 249,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpy3DPeerAsync_ptsz_v7000 = 250,
    CUPTI_RUNTIME_TRACE_CBID_cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_v7000 = 251,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemPrefetchAsync_v8000 = 252,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemPrefetchAsync_ptsz_v8000 = 253,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemAdvise_v8000 = 254,
    CUPTI_RUNTIME_TRACE_CBID_cudaDeviceGetP2PAttribute_v8000 = 255,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphicsEGLRegisterImage_v7000 = 256,
    CUPTI_RUNTIME_TRACE_CBID_cudaEGLStreamConsumerConnect_v7000 = 257,
    CUPTI_RUNTIME_TRACE_CBID_cudaEGLStreamConsumerDisconnect_v7000 = 258,
    CUPTI_RUNTIME_TRACE_CBID_cudaEGLStreamConsumerAcquireFrame_v7000 = 259,
    CUPTI_RUNTIME_TRACE_CBID_cudaEGLStreamConsumerReleaseFrame_v7000 = 260,
    CUPTI_RUNTIME_TRACE_CBID_cudaEGLStreamProducerConnect_v7000 = 261,
    CUPTI_RUNTIME_TRACE_CBID_cudaEGLStreamProducerDisconnect_v7000 = 262,
    CUPTI_RUNTIME_TRACE_CBID_cudaEGLStreamProducerPresentFrame_v7000 = 263,
    CUPTI_RUNTIME_TRACE_CBID_cudaEGLStreamProducerReturnFrame_v7000 = 264,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphicsResourceGetMappedEglFrame_v7000 = 265,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemRangeGetAttribute_v8000 = 266,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemRangeGetAttributes_v8000 = 267,
    CUPTI_RUNTIME_TRACE_CBID_cudaEGLStreamConsumerConnectWithFlags_v7000 = 268,
    CUPTI_RUNTIME_TRACE_CBID_cudaLaunchCooperativeKernel_v9000 = 269,
    CUPTI_RUNTIME_TRACE_CBID_cudaLaunchCooperativeKernel_ptsz_v9000 = 270,
    CUPTI_RUNTIME_TRACE_CBID_cudaEventCreateFromEGLSync_v9000 = 271,
    CUPTI_RUNTIME_TRACE_CBID_cudaLaunchCooperativeKernelMultiDevice_v9000 = 272,
    CUPTI_RUNTIME_TRACE_CBID_cudaFuncSetAttribute_v9000 = 273,
    CUPTI_RUNTIME_TRACE_CBID_cudaImportExternalMemory_v10000 = 274,
    CUPTI_RUNTIME_TRACE_CBID_cudaExternalMemoryGetMappedBuffer_v10000 = 275,
    CUPTI_RUNTIME_TRACE_CBID_cudaExternalMemoryGetMappedMipmappedArray_v10000 = 276,
    CUPTI_RUNTIME_TRACE_CBID_cudaDestroyExternalMemory_v10000 = 277,
    CUPTI_RUNTIME_TRACE_CBID_cudaImportExternalSemaphore_v10000 = 278,
    CUPTI_RUNTIME_TRACE_CBID_cudaSignalExternalSemaphoresAsync_v10000 = 279,
    CUPTI_RUNTIME_TRACE_CBID_cudaSignalExternalSemaphoresAsync_ptsz_v10000 = 280,
    CUPTI_RUNTIME_TRACE_CBID_cudaWaitExternalSemaphoresAsync_v10000 = 281,
    CUPTI_RUNTIME_TRACE_CBID_cudaWaitExternalSemaphoresAsync_ptsz_v10000 = 282,
    CUPTI_RUNTIME_TRACE_CBID_cudaDestroyExternalSemaphore_v10000 = 283,
    CUPTI_RUNTIME_TRACE_CBID_cudaLaunchHostFunc_v10000 = 284,
    CUPTI_RUNTIME_TRACE_CBID_cudaLaunchHostFunc_ptsz_v10000 = 285,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphCreate_v10000 = 286,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphKernelNodeGetParams_v10000 = 287,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphKernelNodeSetParams_v10000 = 288,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphAddKernelNode_v10000 = 289,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphAddMemcpyNode_v10000 = 290,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphMemcpyNodeGetParams_v10000 = 291,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphMemcpyNodeSetParams_v10000 = 292,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphAddMemsetNode_v10000 = 293,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphMemsetNodeGetParams_v10000 = 294,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphMemsetNodeSetParams_v10000 = 295,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphAddHostNode_v10000 = 296,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphHostNodeGetParams_v10000 = 297,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphAddChildGraphNode_v10000 = 298,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphChildGraphNodeGetGraph_v10000 = 299,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphAddEmptyNode_v10000 = 300,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphClone_v10000 = 301,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphNodeFindInClone_v10000 = 302,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphNodeGetType_v10000 = 303,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphGetRootNodes_v10000 = 304,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphNodeGetDependencies_v10000 = 305,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphNodeGetDependentNodes_v10000 = 306,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphAddDependencies_v10000 = 307,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphRemoveDependencies_v10000 = 308,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphDestroyNode_v10000 = 309,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphInstantiate_v10000 = 310,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphLaunch_v10000 = 311,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphLaunch_ptsz_v10000 = 312,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphExecDestroy_v10000 = 313,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphDestroy_v10000 = 314,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamBeginCapture_v10000 = 315,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamBeginCapture_ptsz_v10000 = 316,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamIsCapturing_v10000 = 317,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamIsCapturing_ptsz_v10000 = 318,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamEndCapture_v10000 = 319,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamEndCapture_ptsz_v10000 = 320,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphHostNodeSetParams_v10000 = 321,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphGetNodes_v10000 = 322,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphGetEdges_v10000 = 323,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamGetCaptureInfo_v10010 = 324,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamGetCaptureInfo_ptsz_v10010 = 325,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphExecKernelNodeSetParams_v10010 = 326,
    CUPTI_RUNTIME_TRACE_CBID_cudaThreadExchangeStreamCaptureMode_v10010 = 327,
    CUPTI_RUNTIME_TRACE_CBID_cudaDeviceGetNvSciSyncAttributes_v10020 = 328,
    CUPTI_RUNTIME_TRACE_CBID_cudaOccupancyAvailableDynamicSMemPerBlock_v10200 = 329,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamSetFlags_v10200 = 330,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamSetFlags_ptsz_v10200 = 331,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphExecMemcpyNodeSetParams_v10020 = 332,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphExecMemsetNodeSetParams_v10020 = 333,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphExecHostNodeSetParams_v10020 = 334,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphExecUpdate_v10020 = 335,
    CUPTI_RUNTIME_TRACE_CBID_cudaGetFuncBySymbol_v11000 = 336,
    CUPTI_RUNTIME_TRACE_CBID_cudaCtxResetPersistingL2Cache_v11000 = 337,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphKernelNodeCopyAttributes_v11000 = 338,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphKernelNodeGetAttribute_v11000 = 339,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphKernelNodeSetAttribute_v11000 = 340,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamCopyAttributes_v11000 = 341,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamCopyAttributes_ptsz_v11000 = 342,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamGetAttribute_v11000 = 343,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamGetAttribute_ptsz_v11000 = 344,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamSetAttribute_v11000 = 345,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamSetAttribute_ptsz_v11000 = 346,
    CUPTI_RUNTIME_TRACE_CBID_cudaDeviceGetTexture1DLinearMaxWidth_v11010 = 347,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphUpload_v10000 = 348,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphUpload_ptsz_v10000 = 349,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphAddMemcpyNodeToSymbol_v11010 = 350,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphAddMemcpyNodeFromSymbol_v11010 = 351,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphAddMemcpyNode1D_v11010 = 352,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphMemcpyNodeSetParamsToSymbol_v11010 = 353,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphMemcpyNodeSetParamsFromSymbol_v11010 = 354,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphMemcpyNodeSetParams1D_v11010 = 355,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphExecMemcpyNodeSetParamsToSymbol_v11010 = 356,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphExecMemcpyNodeSetParamsFromSymbol_v11010 = 357,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphExecMemcpyNodeSetParams1D_v11010 = 358,
    CUPTI_RUNTIME_TRACE_CBID_cudaArrayGetSparseProperties_v11010 = 359,
    CUPTI_RUNTIME_TRACE_CBID_cudaMipmappedArrayGetSparseProperties_v11010 = 360,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphExecChildGraphNodeSetParams_v11010 = 361,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphAddEventRecordNode_v11010 = 362,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphEventRecordNodeGetEvent_v11010 = 363,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphEventRecordNodeSetEvent_v11010 = 364,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphAddEventWaitNode_v11010 = 365,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphEventWaitNodeGetEvent_v11010 = 366,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphEventWaitNodeSetEvent_v11010 = 367,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphExecEventRecordNodeSetEvent_v11010 = 368,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphExecEventWaitNodeSetEvent_v11010 = 369,
    CUPTI_RUNTIME_TRACE_CBID_cudaEventRecordWithFlags_v11010 = 370,
    CUPTI_RUNTIME_TRACE_CBID_cudaEventRecordWithFlags_ptsz_v11010 = 371,
    CUPTI_RUNTIME_TRACE_CBID_cudaDeviceGetDefaultMemPool_v11020 = 372,
    CUPTI_RUNTIME_TRACE_CBID_cudaMallocAsync_v11020 = 373,
    CUPTI_RUNTIME_TRACE_CBID_cudaMallocAsync_ptsz_v11020 = 374,
    CUPTI_RUNTIME_TRACE_CBID_cudaFreeAsync_v11020 = 375,
    CUPTI_RUNTIME_TRACE_CBID_cudaFreeAsync_ptsz_v11020 = 376,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemPoolTrimTo_v11020 = 377,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemPoolSetAttribute_v11020 = 378,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemPoolGetAttribute_v11020 = 379,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemPoolSetAccess_v11020 = 380,
    CUPTI_RUNTIME_TRACE_CBID_cudaArrayGetPlane_v11020 = 381,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemPoolGetAccess_v11020 = 382,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemPoolCreate_v11020 = 383,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemPoolDestroy_v11020 = 384,
    CUPTI_RUNTIME_TRACE_CBID_cudaDeviceSetMemPool_v11020 = 385,
    CUPTI_RUNTIME_TRACE_CBID_cudaDeviceGetMemPool_v11020 = 386,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemPoolExportToShareableHandle_v11020 = 387,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemPoolImportFromShareableHandle_v11020 = 388,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemPoolExportPointer_v11020 = 389,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemPoolImportPointer_v11020 = 390,
    CUPTI_RUNTIME_TRACE_CBID_cudaMallocFromPoolAsync_v11020 = 391,
    CUPTI_RUNTIME_TRACE_CBID_cudaMallocFromPoolAsync_ptsz_v11020 = 392,
    CUPTI_RUNTIME_TRACE_CBID_cudaSignalExternalSemaphoresAsync_v2_v11020 = 393,
    CUPTI_RUNTIME_TRACE_CBID_cudaSignalExternalSemaphoresAsync_v2_ptsz_v11020 = 394,
    CUPTI_RUNTIME_TRACE_CBID_cudaWaitExternalSemaphoresAsync_v2_v11020 = 395,
    CUPTI_RUNTIME_TRACE_CBID_cudaWaitExternalSemaphoresAsync_v2_ptsz_v11020 = 396,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphAddExternalSemaphoresSignalNode_v11020 = 397,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphExternalSemaphoresSignalNodeGetParams_v11020 = 398,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphExternalSemaphoresSignalNodeSetParams_v11020 = 399,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphAddExternalSemaphoresWaitNode_v11020 = 400,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphExternalSemaphoresWaitNodeGetParams_v11020 = 401,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphExternalSemaphoresWaitNodeSetParams_v11020 = 402,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphExecExternalSemaphoresSignalNodeSetParams_v11020 = 403,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphExecExternalSemaphoresWaitNodeSetParams_v11020 = 404,
    CUPTI_RUNTIME_TRACE_CBID_cudaDeviceFlushGPUDirectRDMAWrites_v11030 = 405,
    CUPTI_RUNTIME_TRACE_CBID_cudaGetDriverEntryPoint_v11030 = 406,
    CUPTI_RUNTIME_TRACE_CBID_cudaGetDriverEntryPoint_ptsz_v11030 = 407,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphDebugDotPrint_v11030 = 408,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamGetCaptureInfo_v2_v11030 = 409,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamGetCaptureInfo_v2_ptsz_v11030 = 410,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamUpdateCaptureDependencies_v11030 = 411,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamUpdateCaptureDependencies_ptsz_v11030 = 412,
    CUPTI_RUNTIME_TRACE_CBID_cudaUserObjectCreate_v11030 = 413,
    CUPTI_RUNTIME_TRACE_CBID_cudaUserObjectRetain_v11030 = 414,
    CUPTI_RUNTIME_TRACE_CBID_cudaUserObjectRelease_v11030 = 415,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphRetainUserObject_v11030 = 416,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphReleaseUserObject_v11030 = 417,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphInstantiateWithFlags_v11040 = 418,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphAddMemAllocNode_v11040 = 419,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphMemAllocNodeGetParams_v11040 = 420,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphAddMemFreeNode_v11040 = 421,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphMemFreeNodeGetParams_v11040 = 422,
    CUPTI_RUNTIME_TRACE_CBID_cudaDeviceGraphMemTrim_v11040 = 423,
    CUPTI_RUNTIME_TRACE_CBID_cudaDeviceGetGraphMemAttribute_v11040 = 424,
    CUPTI_RUNTIME_TRACE_CBID_cudaDeviceSetGraphMemAttribute_v11040 = 425,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphNodeSetEnabled_v11060 = 426,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphNodeGetEnabled_v11060 = 427,
    CUPTI_RUNTIME_TRACE_CBID_cudaArrayGetMemoryRequirements_v11060 = 428,
    CUPTI_RUNTIME_TRACE_CBID_cudaMipmappedArrayGetMemoryRequirements_v11060 = 429,
    CUPTI_RUNTIME_TRACE_CBID_cudaLaunchKernelExC_v11060 = 430,
    CUPTI_RUNTIME_TRACE_CBID_cudaLaunchKernelExC_ptsz_v11060 = 431,
    CUPTI_RUNTIME_TRACE_CBID_cudaOccupancyMaxPotentialClusterSize_v11070 = 432,
    CUPTI_RUNTIME_TRACE_CBID_cudaOccupancyMaxActiveClusters_v11070 = 433,
    CUPTI_RUNTIME_TRACE_CBID_cudaCreateTextureObject_v2_v11080 = 434,
    CUPTI_RUNTIME_TRACE_CBID_cudaGetTextureObjectTextureDesc_v2_v11080 = 435,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphInstantiateWithParams_v12000 = 436,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphInstantiateWithParams_ptsz_v12000 = 437,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphExecGetFlags_v12000 = 438,
    CUPTI_RUNTIME_TRACE_CBID_cuda439_v12000 = 439,
    CUPTI_RUNTIME_TRACE_CBID_cudaGetDeviceProperties_v2_v12000 = 440,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamGetId_v12000 = 441,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamGetId_ptsz_v12000 = 442,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphInstantiate_v12000 = 443,
    CUPTI_RUNTIME_TRACE_CBID_cuda444_v12000 = 444,
    CUPTI_RUNTIME_TRACE_CBID_SIZE = 445,
    CUPTI_RUNTIME_TRACE_CBID_FORCE_INT = 2147483647,
}
pub use self::CUpti_runtime_api_trace_cbid_enum as CUpti_runtime_api_trace_cbid;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_nvtx_api_trace_cbid {
    CUPTI_CBID_NVTX_INVALID = 0,
    CUPTI_CBID_NVTX_nvtxMarkA = 1,
    CUPTI_CBID_NVTX_nvtxMarkW = 2,
    CUPTI_CBID_NVTX_nvtxMarkEx = 3,
    CUPTI_CBID_NVTX_nvtxRangeStartA = 4,
    CUPTI_CBID_NVTX_nvtxRangeStartW = 5,
    CUPTI_CBID_NVTX_nvtxRangeStartEx = 6,
    CUPTI_CBID_NVTX_nvtxRangeEnd = 7,
    CUPTI_CBID_NVTX_nvtxRangePushA = 8,
    CUPTI_CBID_NVTX_nvtxRangePushW = 9,
    CUPTI_CBID_NVTX_nvtxRangePushEx = 10,
    CUPTI_CBID_NVTX_nvtxRangePop = 11,
    CUPTI_CBID_NVTX_nvtxNameCategoryA = 12,
    CUPTI_CBID_NVTX_nvtxNameCategoryW = 13,
    CUPTI_CBID_NVTX_nvtxNameOsThreadA = 14,
    CUPTI_CBID_NVTX_nvtxNameOsThreadW = 15,
    CUPTI_CBID_NVTX_nvtxNameCuDeviceA = 16,
    CUPTI_CBID_NVTX_nvtxNameCuDeviceW = 17,
    CUPTI_CBID_NVTX_nvtxNameCuContextA = 18,
    CUPTI_CBID_NVTX_nvtxNameCuContextW = 19,
    CUPTI_CBID_NVTX_nvtxNameCuStreamA = 20,
    CUPTI_CBID_NVTX_nvtxNameCuStreamW = 21,
    CUPTI_CBID_NVTX_nvtxNameCuEventA = 22,
    CUPTI_CBID_NVTX_nvtxNameCuEventW = 23,
    CUPTI_CBID_NVTX_nvtxNameCudaDeviceA = 24,
    CUPTI_CBID_NVTX_nvtxNameCudaDeviceW = 25,
    CUPTI_CBID_NVTX_nvtxNameCudaStreamA = 26,
    CUPTI_CBID_NVTX_nvtxNameCudaStreamW = 27,
    CUPTI_CBID_NVTX_nvtxNameCudaEventA = 28,
    CUPTI_CBID_NVTX_nvtxNameCudaEventW = 29,
    CUPTI_CBID_NVTX_nvtxDomainMarkEx = 30,
    CUPTI_CBID_NVTX_nvtxDomainRangeStartEx = 31,
    CUPTI_CBID_NVTX_nvtxDomainRangeEnd = 32,
    CUPTI_CBID_NVTX_nvtxDomainRangePushEx = 33,
    CUPTI_CBID_NVTX_nvtxDomainRangePop = 34,
    CUPTI_CBID_NVTX_nvtxDomainResourceCreate = 35,
    CUPTI_CBID_NVTX_nvtxDomainResourceDestroy = 36,
    CUPTI_CBID_NVTX_nvtxDomainNameCategoryA = 37,
    CUPTI_CBID_NVTX_nvtxDomainNameCategoryW = 38,
    CUPTI_CBID_NVTX_nvtxDomainRegisterStringA = 39,
    CUPTI_CBID_NVTX_nvtxDomainRegisterStringW = 40,
    CUPTI_CBID_NVTX_nvtxDomainCreateA = 41,
    CUPTI_CBID_NVTX_nvtxDomainCreateW = 42,
    CUPTI_CBID_NVTX_nvtxDomainDestroy = 43,
    CUPTI_CBID_NVTX_nvtxDomainSyncUserCreate = 44,
    CUPTI_CBID_NVTX_nvtxDomainSyncUserDestroy = 45,
    CUPTI_CBID_NVTX_nvtxDomainSyncUserAcquireStart = 46,
    CUPTI_CBID_NVTX_nvtxDomainSyncUserAcquireFailed = 47,
    CUPTI_CBID_NVTX_nvtxDomainSyncUserAcquireSuccess = 48,
    CUPTI_CBID_NVTX_nvtxDomainSyncUserReleasing = 49,
    CUPTI_CBID_NVTX_SIZE = 50,
    CUPTI_CBID_NVTX_FORCE_INT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_ProfilerRange {
    CUPTI_Range_INVALID = 0,
    CUPTI_AutoRange = 1,
    CUPTI_UserRange = 2,
    CUPTI_Range_COUNT = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_ProfilerReplayMode {
    CUPTI_Replay_INVALID = 0,
    CUPTI_ApplicationReplay = 1,
    CUPTI_KernelReplay = 2,
    CUPTI_UserReplay = 3,
    CUPTI_Replay_COUNT = 4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct CUpti_Profiler_Initialize_Params {
    pub structSize: usize,
    pub pPriv: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_CUpti_Profiler_Initialize_Params() {
    const UNINIT: ::std::mem::MaybeUninit<CUpti_Profiler_Initialize_Params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CUpti_Profiler_Initialize_Params>(),
        16usize,
        concat!("Size of: ", stringify!(CUpti_Profiler_Initialize_Params))
    );
    assert_eq!(
        ::std::mem::align_of::<CUpti_Profiler_Initialize_Params>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CUpti_Profiler_Initialize_Params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).structSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_Initialize_Params),
            "::",
            stringify!(structSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPriv) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_Initialize_Params),
            "::",
            stringify!(pPriv)
        )
    );
}
impl Default for CUpti_Profiler_Initialize_Params {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct CUpti_Profiler_DeInitialize_Params {
    pub structSize: usize,
    pub pPriv: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_CUpti_Profiler_DeInitialize_Params() {
    const UNINIT: ::std::mem::MaybeUninit<CUpti_Profiler_DeInitialize_Params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CUpti_Profiler_DeInitialize_Params>(),
        16usize,
        concat!("Size of: ", stringify!(CUpti_Profiler_DeInitialize_Params))
    );
    assert_eq!(
        ::std::mem::align_of::<CUpti_Profiler_DeInitialize_Params>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CUpti_Profiler_DeInitialize_Params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).structSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_DeInitialize_Params),
            "::",
            stringify!(structSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPriv) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_DeInitialize_Params),
            "::",
            stringify!(pPriv)
        )
    );
}
impl Default for CUpti_Profiler_DeInitialize_Params {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn cuptiProfilerInitialize(pParams: *mut CUpti_Profiler_Initialize_Params) -> CUptiResult;
}
extern "C" {
    pub fn cuptiProfilerDeInitialize(
        pParams: *mut CUpti_Profiler_DeInitialize_Params,
    ) -> CUptiResult;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct CUpti_Profiler_CounterDataImageOptions {
    pub structSize: usize,
    pub pPriv: *mut ::std::os::raw::c_void,
    pub pCounterDataPrefix: *const u8,
    pub counterDataPrefixSize: usize,
    pub maxNumRanges: u32,
    pub maxNumRangeTreeNodes: u32,
    pub maxRangeNameLength: u32,
}
#[test]
fn bindgen_test_layout_CUpti_Profiler_CounterDataImageOptions() {
    const UNINIT: ::std::mem::MaybeUninit<CUpti_Profiler_CounterDataImageOptions> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CUpti_Profiler_CounterDataImageOptions>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(CUpti_Profiler_CounterDataImageOptions)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CUpti_Profiler_CounterDataImageOptions>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CUpti_Profiler_CounterDataImageOptions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).structSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_CounterDataImageOptions),
            "::",
            stringify!(structSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPriv) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_CounterDataImageOptions),
            "::",
            stringify!(pPriv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCounterDataPrefix) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_CounterDataImageOptions),
            "::",
            stringify!(pCounterDataPrefix)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).counterDataPrefixSize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_CounterDataImageOptions),
            "::",
            stringify!(counterDataPrefixSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxNumRanges) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_CounterDataImageOptions),
            "::",
            stringify!(maxNumRanges)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxNumRangeTreeNodes) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_CounterDataImageOptions),
            "::",
            stringify!(maxNumRangeTreeNodes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxRangeNameLength) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_CounterDataImageOptions),
            "::",
            stringify!(maxRangeNameLength)
        )
    );
}
impl Default for CUpti_Profiler_CounterDataImageOptions {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct CUpti_Profiler_CounterDataImage_CalculateSize_Params {
    pub structSize: usize,
    pub pPriv: *mut ::std::os::raw::c_void,
    pub sizeofCounterDataImageOptions: usize,
    pub pOptions: *const CUpti_Profiler_CounterDataImageOptions,
    pub counterDataImageSize: usize,
}
#[test]
fn bindgen_test_layout_CUpti_Profiler_CounterDataImage_CalculateSize_Params() {
    const UNINIT: ::std::mem::MaybeUninit<CUpti_Profiler_CounterDataImage_CalculateSize_Params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CUpti_Profiler_CounterDataImage_CalculateSize_Params>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(CUpti_Profiler_CounterDataImage_CalculateSize_Params)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CUpti_Profiler_CounterDataImage_CalculateSize_Params>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CUpti_Profiler_CounterDataImage_CalculateSize_Params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).structSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_CounterDataImage_CalculateSize_Params),
            "::",
            stringify!(structSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPriv) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_CounterDataImage_CalculateSize_Params),
            "::",
            stringify!(pPriv)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).sizeofCounterDataImageOptions) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_CounterDataImage_CalculateSize_Params),
            "::",
            stringify!(sizeofCounterDataImageOptions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pOptions) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_CounterDataImage_CalculateSize_Params),
            "::",
            stringify!(pOptions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).counterDataImageSize) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_CounterDataImage_CalculateSize_Params),
            "::",
            stringify!(counterDataImageSize)
        )
    );
}
impl Default for CUpti_Profiler_CounterDataImage_CalculateSize_Params {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct CUpti_Profiler_CounterDataImage_Initialize_Params {
    pub structSize: usize,
    pub pPriv: *mut ::std::os::raw::c_void,
    pub sizeofCounterDataImageOptions: usize,
    pub pOptions: *const CUpti_Profiler_CounterDataImageOptions,
    pub counterDataImageSize: usize,
    pub pCounterDataImage: *mut u8,
}
#[test]
fn bindgen_test_layout_CUpti_Profiler_CounterDataImage_Initialize_Params() {
    const UNINIT: ::std::mem::MaybeUninit<CUpti_Profiler_CounterDataImage_Initialize_Params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CUpti_Profiler_CounterDataImage_Initialize_Params>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(CUpti_Profiler_CounterDataImage_Initialize_Params)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CUpti_Profiler_CounterDataImage_Initialize_Params>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CUpti_Profiler_CounterDataImage_Initialize_Params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).structSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_CounterDataImage_Initialize_Params),
            "::",
            stringify!(structSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPriv) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_CounterDataImage_Initialize_Params),
            "::",
            stringify!(pPriv)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).sizeofCounterDataImageOptions) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_CounterDataImage_Initialize_Params),
            "::",
            stringify!(sizeofCounterDataImageOptions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pOptions) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_CounterDataImage_Initialize_Params),
            "::",
            stringify!(pOptions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).counterDataImageSize) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_CounterDataImage_Initialize_Params),
            "::",
            stringify!(counterDataImageSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCounterDataImage) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_CounterDataImage_Initialize_Params),
            "::",
            stringify!(pCounterDataImage)
        )
    );
}
impl Default for CUpti_Profiler_CounterDataImage_Initialize_Params {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn cuptiProfilerCounterDataImageCalculateSize(
        pParams: *mut CUpti_Profiler_CounterDataImage_CalculateSize_Params,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiProfilerCounterDataImageInitialize(
        pParams: *mut CUpti_Profiler_CounterDataImage_Initialize_Params,
    ) -> CUptiResult;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct CUpti_Profiler_CounterDataImage_CalculateScratchBufferSize_Params {
    pub structSize: usize,
    pub pPriv: *mut ::std::os::raw::c_void,
    pub counterDataImageSize: usize,
    pub pCounterDataImage: *mut u8,
    pub counterDataScratchBufferSize: usize,
}
#[test]
fn bindgen_test_layout_CUpti_Profiler_CounterDataImage_CalculateScratchBufferSize_Params() {
    const UNINIT: ::std::mem::MaybeUninit<
        CUpti_Profiler_CounterDataImage_CalculateScratchBufferSize_Params,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CUpti_Profiler_CounterDataImage_CalculateScratchBufferSize_Params>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(CUpti_Profiler_CounterDataImage_CalculateScratchBufferSize_Params)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CUpti_Profiler_CounterDataImage_CalculateScratchBufferSize_Params>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CUpti_Profiler_CounterDataImage_CalculateScratchBufferSize_Params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).structSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_CounterDataImage_CalculateScratchBufferSize_Params),
            "::",
            stringify!(structSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPriv) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_CounterDataImage_CalculateScratchBufferSize_Params),
            "::",
            stringify!(pPriv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).counterDataImageSize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_CounterDataImage_CalculateScratchBufferSize_Params),
            "::",
            stringify!(counterDataImageSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCounterDataImage) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_CounterDataImage_CalculateScratchBufferSize_Params),
            "::",
            stringify!(pCounterDataImage)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).counterDataScratchBufferSize) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_CounterDataImage_CalculateScratchBufferSize_Params),
            "::",
            stringify!(counterDataScratchBufferSize)
        )
    );
}
impl Default for CUpti_Profiler_CounterDataImage_CalculateScratchBufferSize_Params {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct CUpti_Profiler_CounterDataImage_InitializeScratchBuffer_Params {
    pub structSize: usize,
    pub pPriv: *mut ::std::os::raw::c_void,
    pub counterDataImageSize: usize,
    pub pCounterDataImage: *mut u8,
    pub counterDataScratchBufferSize: usize,
    pub pCounterDataScratchBuffer: *mut u8,
}
#[test]
fn bindgen_test_layout_CUpti_Profiler_CounterDataImage_InitializeScratchBuffer_Params() {
    const UNINIT: ::std::mem::MaybeUninit<
        CUpti_Profiler_CounterDataImage_InitializeScratchBuffer_Params,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CUpti_Profiler_CounterDataImage_InitializeScratchBuffer_Params>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(CUpti_Profiler_CounterDataImage_InitializeScratchBuffer_Params)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CUpti_Profiler_CounterDataImage_InitializeScratchBuffer_Params>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CUpti_Profiler_CounterDataImage_InitializeScratchBuffer_Params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).structSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_CounterDataImage_InitializeScratchBuffer_Params),
            "::",
            stringify!(structSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPriv) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_CounterDataImage_InitializeScratchBuffer_Params),
            "::",
            stringify!(pPriv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).counterDataImageSize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_CounterDataImage_InitializeScratchBuffer_Params),
            "::",
            stringify!(counterDataImageSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCounterDataImage) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_CounterDataImage_InitializeScratchBuffer_Params),
            "::",
            stringify!(pCounterDataImage)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).counterDataScratchBufferSize) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_CounterDataImage_InitializeScratchBuffer_Params),
            "::",
            stringify!(counterDataScratchBufferSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCounterDataScratchBuffer) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_CounterDataImage_InitializeScratchBuffer_Params),
            "::",
            stringify!(pCounterDataScratchBuffer)
        )
    );
}
impl Default for CUpti_Profiler_CounterDataImage_InitializeScratchBuffer_Params {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn cuptiProfilerCounterDataImageCalculateScratchBufferSize(
        pParams: *mut CUpti_Profiler_CounterDataImage_CalculateScratchBufferSize_Params,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiProfilerCounterDataImageInitializeScratchBuffer(
        pParams: *mut CUpti_Profiler_CounterDataImage_InitializeScratchBuffer_Params,
    ) -> CUptiResult;
}
#[repr(C)]
pub struct CUpti_Profiler_BeginSession_Params {
    pub structSize: usize,
    pub pPriv: *mut ::std::os::raw::c_void,
    pub ctx: CUcontext,
    pub counterDataImageSize: usize,
    pub pCounterDataImage: *mut u8,
    pub counterDataScratchBufferSize: usize,
    pub pCounterDataScratchBuffer: *mut u8,
    pub bDumpCounterDataInFile: u8,
    pub pCounterDataFilePath: *const ::std::os::raw::c_char,
    pub range: CUpti_ProfilerRange,
    pub replayMode: CUpti_ProfilerReplayMode,
    pub maxRangesPerPass: usize,
    pub maxLaunchesPerPass: usize,
}
#[test]
fn bindgen_test_layout_CUpti_Profiler_BeginSession_Params() {
    const UNINIT: ::std::mem::MaybeUninit<CUpti_Profiler_BeginSession_Params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CUpti_Profiler_BeginSession_Params>(),
        96usize,
        concat!("Size of: ", stringify!(CUpti_Profiler_BeginSession_Params))
    );
    assert_eq!(
        ::std::mem::align_of::<CUpti_Profiler_BeginSession_Params>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CUpti_Profiler_BeginSession_Params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).structSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_BeginSession_Params),
            "::",
            stringify!(structSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPriv) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_BeginSession_Params),
            "::",
            stringify!(pPriv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_BeginSession_Params),
            "::",
            stringify!(ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).counterDataImageSize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_BeginSession_Params),
            "::",
            stringify!(counterDataImageSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCounterDataImage) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_BeginSession_Params),
            "::",
            stringify!(pCounterDataImage)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).counterDataScratchBufferSize) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_BeginSession_Params),
            "::",
            stringify!(counterDataScratchBufferSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCounterDataScratchBuffer) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_BeginSession_Params),
            "::",
            stringify!(pCounterDataScratchBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDumpCounterDataInFile) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_BeginSession_Params),
            "::",
            stringify!(bDumpCounterDataInFile)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCounterDataFilePath) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_BeginSession_Params),
            "::",
            stringify!(pCounterDataFilePath)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).range) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_BeginSession_Params),
            "::",
            stringify!(range)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).replayMode) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_BeginSession_Params),
            "::",
            stringify!(replayMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxRangesPerPass) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_BeginSession_Params),
            "::",
            stringify!(maxRangesPerPass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxLaunchesPerPass) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_BeginSession_Params),
            "::",
            stringify!(maxLaunchesPerPass)
        )
    );
}
impl Default for CUpti_Profiler_BeginSession_Params {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct CUpti_Profiler_EndSession_Params {
    pub structSize: usize,
    pub pPriv: *mut ::std::os::raw::c_void,
    pub ctx: CUcontext,
}
#[test]
fn bindgen_test_layout_CUpti_Profiler_EndSession_Params() {
    const UNINIT: ::std::mem::MaybeUninit<CUpti_Profiler_EndSession_Params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CUpti_Profiler_EndSession_Params>(),
        24usize,
        concat!("Size of: ", stringify!(CUpti_Profiler_EndSession_Params))
    );
    assert_eq!(
        ::std::mem::align_of::<CUpti_Profiler_EndSession_Params>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CUpti_Profiler_EndSession_Params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).structSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_EndSession_Params),
            "::",
            stringify!(structSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPriv) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_EndSession_Params),
            "::",
            stringify!(pPriv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_EndSession_Params),
            "::",
            stringify!(ctx)
        )
    );
}
impl Default for CUpti_Profiler_EndSession_Params {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn cuptiProfilerBeginSession(
        pParams: *mut CUpti_Profiler_BeginSession_Params,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiProfilerEndSession(pParams: *mut CUpti_Profiler_EndSession_Params) -> CUptiResult;
}
#[repr(C)]
pub struct CUpti_Profiler_SetConfig_Params {
    pub structSize: usize,
    pub pPriv: *mut ::std::os::raw::c_void,
    pub ctx: CUcontext,
    pub pConfig: *const u8,
    pub configSize: usize,
    pub minNestingLevel: u16,
    pub numNestingLevels: u16,
    pub passIndex: usize,
    pub targetNestingLevel: u16,
}
#[test]
fn bindgen_test_layout_CUpti_Profiler_SetConfig_Params() {
    const UNINIT: ::std::mem::MaybeUninit<CUpti_Profiler_SetConfig_Params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CUpti_Profiler_SetConfig_Params>(),
        64usize,
        concat!("Size of: ", stringify!(CUpti_Profiler_SetConfig_Params))
    );
    assert_eq!(
        ::std::mem::align_of::<CUpti_Profiler_SetConfig_Params>(),
        8usize,
        concat!("Alignment of ", stringify!(CUpti_Profiler_SetConfig_Params))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).structSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_SetConfig_Params),
            "::",
            stringify!(structSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPriv) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_SetConfig_Params),
            "::",
            stringify!(pPriv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_SetConfig_Params),
            "::",
            stringify!(ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pConfig) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_SetConfig_Params),
            "::",
            stringify!(pConfig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).configSize) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_SetConfig_Params),
            "::",
            stringify!(configSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minNestingLevel) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_SetConfig_Params),
            "::",
            stringify!(minNestingLevel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numNestingLevels) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_SetConfig_Params),
            "::",
            stringify!(numNestingLevels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).passIndex) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_SetConfig_Params),
            "::",
            stringify!(passIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).targetNestingLevel) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_SetConfig_Params),
            "::",
            stringify!(targetNestingLevel)
        )
    );
}
impl Default for CUpti_Profiler_SetConfig_Params {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct CUpti_Profiler_UnsetConfig_Params {
    pub structSize: usize,
    pub pPriv: *mut ::std::os::raw::c_void,
    pub ctx: CUcontext,
}
#[test]
fn bindgen_test_layout_CUpti_Profiler_UnsetConfig_Params() {
    const UNINIT: ::std::mem::MaybeUninit<CUpti_Profiler_UnsetConfig_Params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CUpti_Profiler_UnsetConfig_Params>(),
        24usize,
        concat!("Size of: ", stringify!(CUpti_Profiler_UnsetConfig_Params))
    );
    assert_eq!(
        ::std::mem::align_of::<CUpti_Profiler_UnsetConfig_Params>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CUpti_Profiler_UnsetConfig_Params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).structSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_UnsetConfig_Params),
            "::",
            stringify!(structSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPriv) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_UnsetConfig_Params),
            "::",
            stringify!(pPriv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_UnsetConfig_Params),
            "::",
            stringify!(ctx)
        )
    );
}
impl Default for CUpti_Profiler_UnsetConfig_Params {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn cuptiProfilerSetConfig(pParams: *mut CUpti_Profiler_SetConfig_Params) -> CUptiResult;
}
extern "C" {
    pub fn cuptiProfilerUnsetConfig(pParams: *mut CUpti_Profiler_UnsetConfig_Params)
        -> CUptiResult;
}
#[repr(C)]
pub struct CUpti_Profiler_BeginPass_Params {
    pub structSize: usize,
    pub pPriv: *mut ::std::os::raw::c_void,
    pub ctx: CUcontext,
}
#[test]
fn bindgen_test_layout_CUpti_Profiler_BeginPass_Params() {
    const UNINIT: ::std::mem::MaybeUninit<CUpti_Profiler_BeginPass_Params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CUpti_Profiler_BeginPass_Params>(),
        24usize,
        concat!("Size of: ", stringify!(CUpti_Profiler_BeginPass_Params))
    );
    assert_eq!(
        ::std::mem::align_of::<CUpti_Profiler_BeginPass_Params>(),
        8usize,
        concat!("Alignment of ", stringify!(CUpti_Profiler_BeginPass_Params))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).structSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_BeginPass_Params),
            "::",
            stringify!(structSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPriv) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_BeginPass_Params),
            "::",
            stringify!(pPriv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_BeginPass_Params),
            "::",
            stringify!(ctx)
        )
    );
}
impl Default for CUpti_Profiler_BeginPass_Params {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct CUpti_Profiler_EndPass_Params {
    pub structSize: usize,
    pub pPriv: *mut ::std::os::raw::c_void,
    pub ctx: CUcontext,
    pub targetNestingLevel: u16,
    pub passIndex: usize,
    pub allPassesSubmitted: u8,
}
#[test]
fn bindgen_test_layout_CUpti_Profiler_EndPass_Params() {
    const UNINIT: ::std::mem::MaybeUninit<CUpti_Profiler_EndPass_Params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CUpti_Profiler_EndPass_Params>(),
        48usize,
        concat!("Size of: ", stringify!(CUpti_Profiler_EndPass_Params))
    );
    assert_eq!(
        ::std::mem::align_of::<CUpti_Profiler_EndPass_Params>(),
        8usize,
        concat!("Alignment of ", stringify!(CUpti_Profiler_EndPass_Params))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).structSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_EndPass_Params),
            "::",
            stringify!(structSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPriv) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_EndPass_Params),
            "::",
            stringify!(pPriv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_EndPass_Params),
            "::",
            stringify!(ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).targetNestingLevel) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_EndPass_Params),
            "::",
            stringify!(targetNestingLevel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).passIndex) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_EndPass_Params),
            "::",
            stringify!(passIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allPassesSubmitted) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_EndPass_Params),
            "::",
            stringify!(allPassesSubmitted)
        )
    );
}
impl Default for CUpti_Profiler_EndPass_Params {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn cuptiProfilerBeginPass(pParams: *mut CUpti_Profiler_BeginPass_Params) -> CUptiResult;
}
extern "C" {
    pub fn cuptiProfilerEndPass(pParams: *mut CUpti_Profiler_EndPass_Params) -> CUptiResult;
}
#[repr(C)]
pub struct CUpti_Profiler_EnableProfiling_Params {
    pub structSize: usize,
    pub pPriv: *mut ::std::os::raw::c_void,
    pub ctx: CUcontext,
}
#[test]
fn bindgen_test_layout_CUpti_Profiler_EnableProfiling_Params() {
    const UNINIT: ::std::mem::MaybeUninit<CUpti_Profiler_EnableProfiling_Params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CUpti_Profiler_EnableProfiling_Params>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(CUpti_Profiler_EnableProfiling_Params)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CUpti_Profiler_EnableProfiling_Params>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CUpti_Profiler_EnableProfiling_Params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).structSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_EnableProfiling_Params),
            "::",
            stringify!(structSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPriv) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_EnableProfiling_Params),
            "::",
            stringify!(pPriv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_EnableProfiling_Params),
            "::",
            stringify!(ctx)
        )
    );
}
impl Default for CUpti_Profiler_EnableProfiling_Params {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct CUpti_Profiler_DisableProfiling_Params {
    pub structSize: usize,
    pub pPriv: *mut ::std::os::raw::c_void,
    pub ctx: CUcontext,
}
#[test]
fn bindgen_test_layout_CUpti_Profiler_DisableProfiling_Params() {
    const UNINIT: ::std::mem::MaybeUninit<CUpti_Profiler_DisableProfiling_Params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CUpti_Profiler_DisableProfiling_Params>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(CUpti_Profiler_DisableProfiling_Params)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CUpti_Profiler_DisableProfiling_Params>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CUpti_Profiler_DisableProfiling_Params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).structSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_DisableProfiling_Params),
            "::",
            stringify!(structSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPriv) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_DisableProfiling_Params),
            "::",
            stringify!(pPriv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_DisableProfiling_Params),
            "::",
            stringify!(ctx)
        )
    );
}
impl Default for CUpti_Profiler_DisableProfiling_Params {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn cuptiProfilerEnableProfiling(
        pParams: *mut CUpti_Profiler_EnableProfiling_Params,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiProfilerDisableProfiling(
        pParams: *mut CUpti_Profiler_DisableProfiling_Params,
    ) -> CUptiResult;
}
#[repr(C)]
pub struct CUpti_Profiler_IsPassCollected_Params {
    pub structSize: usize,
    pub pPriv: *mut ::std::os::raw::c_void,
    pub ctx: CUcontext,
    pub numRangesDropped: usize,
    pub numTraceBytesDropped: usize,
    pub onePassCollected: u8,
    pub allPassesCollected: u8,
}
#[test]
fn bindgen_test_layout_CUpti_Profiler_IsPassCollected_Params() {
    const UNINIT: ::std::mem::MaybeUninit<CUpti_Profiler_IsPassCollected_Params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CUpti_Profiler_IsPassCollected_Params>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(CUpti_Profiler_IsPassCollected_Params)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CUpti_Profiler_IsPassCollected_Params>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CUpti_Profiler_IsPassCollected_Params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).structSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_IsPassCollected_Params),
            "::",
            stringify!(structSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPriv) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_IsPassCollected_Params),
            "::",
            stringify!(pPriv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_IsPassCollected_Params),
            "::",
            stringify!(ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numRangesDropped) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_IsPassCollected_Params),
            "::",
            stringify!(numRangesDropped)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numTraceBytesDropped) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_IsPassCollected_Params),
            "::",
            stringify!(numTraceBytesDropped)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onePassCollected) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_IsPassCollected_Params),
            "::",
            stringify!(onePassCollected)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allPassesCollected) as usize - ptr as usize },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_IsPassCollected_Params),
            "::",
            stringify!(allPassesCollected)
        )
    );
}
impl Default for CUpti_Profiler_IsPassCollected_Params {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn cuptiProfilerIsPassCollected(
        pParams: *mut CUpti_Profiler_IsPassCollected_Params,
    ) -> CUptiResult;
}
#[repr(C)]
pub struct CUpti_Profiler_FlushCounterData_Params {
    pub structSize: usize,
    pub pPriv: *mut ::std::os::raw::c_void,
    pub ctx: CUcontext,
    pub numRangesDropped: usize,
    pub numTraceBytesDropped: usize,
}
#[test]
fn bindgen_test_layout_CUpti_Profiler_FlushCounterData_Params() {
    const UNINIT: ::std::mem::MaybeUninit<CUpti_Profiler_FlushCounterData_Params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CUpti_Profiler_FlushCounterData_Params>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(CUpti_Profiler_FlushCounterData_Params)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CUpti_Profiler_FlushCounterData_Params>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CUpti_Profiler_FlushCounterData_Params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).structSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_FlushCounterData_Params),
            "::",
            stringify!(structSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPriv) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_FlushCounterData_Params),
            "::",
            stringify!(pPriv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_FlushCounterData_Params),
            "::",
            stringify!(ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numRangesDropped) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_FlushCounterData_Params),
            "::",
            stringify!(numRangesDropped)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numTraceBytesDropped) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_FlushCounterData_Params),
            "::",
            stringify!(numTraceBytesDropped)
        )
    );
}
impl Default for CUpti_Profiler_FlushCounterData_Params {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn cuptiProfilerFlushCounterData(
        pParams: *mut CUpti_Profiler_FlushCounterData_Params,
    ) -> CUptiResult;
}
#[repr(C)]
pub struct CUpti_Profiler_PushRange_Params {
    pub structSize: usize,
    pub pPriv: *mut ::std::os::raw::c_void,
    pub ctx: CUcontext,
    pub pRangeName: *const ::std::os::raw::c_char,
    pub rangeNameLength: usize,
}
#[test]
fn bindgen_test_layout_CUpti_Profiler_PushRange_Params() {
    const UNINIT: ::std::mem::MaybeUninit<CUpti_Profiler_PushRange_Params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CUpti_Profiler_PushRange_Params>(),
        40usize,
        concat!("Size of: ", stringify!(CUpti_Profiler_PushRange_Params))
    );
    assert_eq!(
        ::std::mem::align_of::<CUpti_Profiler_PushRange_Params>(),
        8usize,
        concat!("Alignment of ", stringify!(CUpti_Profiler_PushRange_Params))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).structSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_PushRange_Params),
            "::",
            stringify!(structSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPriv) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_PushRange_Params),
            "::",
            stringify!(pPriv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_PushRange_Params),
            "::",
            stringify!(ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pRangeName) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_PushRange_Params),
            "::",
            stringify!(pRangeName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rangeNameLength) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_PushRange_Params),
            "::",
            stringify!(rangeNameLength)
        )
    );
}
impl Default for CUpti_Profiler_PushRange_Params {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct CUpti_Profiler_PopRange_Params {
    pub structSize: usize,
    pub pPriv: *mut ::std::os::raw::c_void,
    pub ctx: CUcontext,
}
#[test]
fn bindgen_test_layout_CUpti_Profiler_PopRange_Params() {
    const UNINIT: ::std::mem::MaybeUninit<CUpti_Profiler_PopRange_Params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CUpti_Profiler_PopRange_Params>(),
        24usize,
        concat!("Size of: ", stringify!(CUpti_Profiler_PopRange_Params))
    );
    assert_eq!(
        ::std::mem::align_of::<CUpti_Profiler_PopRange_Params>(),
        8usize,
        concat!("Alignment of ", stringify!(CUpti_Profiler_PopRange_Params))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).structSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_PopRange_Params),
            "::",
            stringify!(structSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPriv) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_PopRange_Params),
            "::",
            stringify!(pPriv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_PopRange_Params),
            "::",
            stringify!(ctx)
        )
    );
}
impl Default for CUpti_Profiler_PopRange_Params {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn cuptiProfilerPushRange(pParams: *mut CUpti_Profiler_PushRange_Params) -> CUptiResult;
}
extern "C" {
    pub fn cuptiProfilerPopRange(pParams: *mut CUpti_Profiler_PopRange_Params) -> CUptiResult;
}
#[repr(C)]
pub struct CUpti_Profiler_GetCounterAvailability_Params {
    pub structSize: usize,
    pub pPriv: *mut ::std::os::raw::c_void,
    pub ctx: CUcontext,
    pub counterAvailabilityImageSize: usize,
    pub pCounterAvailabilityImage: *mut u8,
}
#[test]
fn bindgen_test_layout_CUpti_Profiler_GetCounterAvailability_Params() {
    const UNINIT: ::std::mem::MaybeUninit<CUpti_Profiler_GetCounterAvailability_Params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CUpti_Profiler_GetCounterAvailability_Params>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(CUpti_Profiler_GetCounterAvailability_Params)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CUpti_Profiler_GetCounterAvailability_Params>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CUpti_Profiler_GetCounterAvailability_Params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).structSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_GetCounterAvailability_Params),
            "::",
            stringify!(structSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPriv) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_GetCounterAvailability_Params),
            "::",
            stringify!(pPriv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_GetCounterAvailability_Params),
            "::",
            stringify!(ctx)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).counterAvailabilityImageSize) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_GetCounterAvailability_Params),
            "::",
            stringify!(counterAvailabilityImageSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCounterAvailabilityImage) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_GetCounterAvailability_Params),
            "::",
            stringify!(pCounterAvailabilityImage)
        )
    );
}
impl Default for CUpti_Profiler_GetCounterAvailability_Params {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn cuptiProfilerGetCounterAvailability(
        pParams: *mut CUpti_Profiler_GetCounterAvailability_Params,
    ) -> CUptiResult;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_Profiler_Support_Level {
    CUPTI_PROFILER_CONFIGURATION_UNKNOWN = 0,
    CUPTI_PROFILER_CONFIGURATION_UNSUPPORTED = 1,
    CUPTI_PROFILER_CONFIGURATION_DISABLED = 2,
    CUPTI_PROFILER_CONFIGURATION_SUPPORTED = 3,
}
#[repr(C)]
pub struct CUpti_Profiler_DeviceSupported_Params {
    pub structSize: usize,
    pub pPriv: *mut ::std::os::raw::c_void,
    pub cuDevice: CUdevice,
    pub isSupported: CUpti_Profiler_Support_Level,
    pub architecture: CUpti_Profiler_Support_Level,
    pub sli: CUpti_Profiler_Support_Level,
    pub vGpu: CUpti_Profiler_Support_Level,
    pub confidentialCompute: CUpti_Profiler_Support_Level,
    pub cmp: CUpti_Profiler_Support_Level,
}
#[test]
fn bindgen_test_layout_CUpti_Profiler_DeviceSupported_Params() {
    const UNINIT: ::std::mem::MaybeUninit<CUpti_Profiler_DeviceSupported_Params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CUpti_Profiler_DeviceSupported_Params>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(CUpti_Profiler_DeviceSupported_Params)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CUpti_Profiler_DeviceSupported_Params>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CUpti_Profiler_DeviceSupported_Params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).structSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_DeviceSupported_Params),
            "::",
            stringify!(structSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPriv) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_DeviceSupported_Params),
            "::",
            stringify!(pPriv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cuDevice) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_DeviceSupported_Params),
            "::",
            stringify!(cuDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isSupported) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_DeviceSupported_Params),
            "::",
            stringify!(isSupported)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).architecture) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_DeviceSupported_Params),
            "::",
            stringify!(architecture)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sli) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_DeviceSupported_Params),
            "::",
            stringify!(sli)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vGpu) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_DeviceSupported_Params),
            "::",
            stringify!(vGpu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).confidentialCompute) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_DeviceSupported_Params),
            "::",
            stringify!(confidentialCompute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmp) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_DeviceSupported_Params),
            "::",
            stringify!(cmp)
        )
    );
}
impl Default for CUpti_Profiler_DeviceSupported_Params {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn cuptiProfilerDeviceSupported(
        pParams: *mut CUpti_Profiler_DeviceSupported_Params,
    ) -> CUptiResult;
}
