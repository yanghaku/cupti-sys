/* automatically generated by rust-bindgen 0.64.0 */

#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub const fn new() -> Self {
        __BindgenUnionField(::std::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        ::std::mem::transmute(self)
    }
}
impl<T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
impl<T> ::std::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::std::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> ::std::hash::Hash for __BindgenUnionField<T> {
    fn hash<H: ::std::hash::Hasher>(&self, _state: &mut H) {}
}
impl<T> ::std::cmp::PartialEq for __BindgenUnionField<T> {
    fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
        true
    }
}
impl<T> ::std::cmp::Eq for __BindgenUnionField<T> {}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUptiResult {
    CUPTI_SUCCESS = 0,
    CUPTI_ERROR_INVALID_PARAMETER = 1,
    CUPTI_ERROR_INVALID_DEVICE = 2,
    CUPTI_ERROR_INVALID_CONTEXT = 3,
    CUPTI_ERROR_INVALID_EVENT_DOMAIN_ID = 4,
    CUPTI_ERROR_INVALID_EVENT_ID = 5,
    CUPTI_ERROR_INVALID_EVENT_NAME = 6,
    CUPTI_ERROR_INVALID_OPERATION = 7,
    CUPTI_ERROR_OUT_OF_MEMORY = 8,
    CUPTI_ERROR_HARDWARE = 9,
    CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT = 10,
    CUPTI_ERROR_API_NOT_IMPLEMENTED = 11,
    CUPTI_ERROR_MAX_LIMIT_REACHED = 12,
    CUPTI_ERROR_NOT_READY = 13,
    CUPTI_ERROR_NOT_COMPATIBLE = 14,
    CUPTI_ERROR_NOT_INITIALIZED = 15,
    CUPTI_ERROR_INVALID_METRIC_ID = 16,
    CUPTI_ERROR_INVALID_METRIC_NAME = 17,
    CUPTI_ERROR_QUEUE_EMPTY = 18,
    CUPTI_ERROR_INVALID_HANDLE = 19,
    CUPTI_ERROR_INVALID_STREAM = 20,
    CUPTI_ERROR_INVALID_KIND = 21,
    CUPTI_ERROR_INVALID_EVENT_VALUE = 22,
    CUPTI_ERROR_DISABLED = 23,
    CUPTI_ERROR_INVALID_MODULE = 24,
    CUPTI_ERROR_INVALID_METRIC_VALUE = 25,
    CUPTI_ERROR_HARDWARE_BUSY = 26,
    CUPTI_ERROR_NOT_SUPPORTED = 27,
    CUPTI_ERROR_UM_PROFILING_NOT_SUPPORTED = 28,
    CUPTI_ERROR_UM_PROFILING_NOT_SUPPORTED_ON_DEVICE = 29,
    CUPTI_ERROR_UM_PROFILING_NOT_SUPPORTED_ON_NON_P2P_DEVICES = 30,
    CUPTI_ERROR_UM_PROFILING_NOT_SUPPORTED_WITH_MPS = 31,
    CUPTI_ERROR_CDP_TRACING_NOT_SUPPORTED = 32,
    CUPTI_ERROR_VIRTUALIZED_DEVICE_NOT_SUPPORTED = 33,
    CUPTI_ERROR_CUDA_COMPILER_NOT_COMPATIBLE = 34,
    CUPTI_ERROR_INSUFFICIENT_PRIVILEGES = 35,
    CUPTI_ERROR_OLD_PROFILER_API_INITIALIZED = 36,
    CUPTI_ERROR_OPENACC_UNDEFINED_ROUTINE = 37,
    CUPTI_ERROR_LEGACY_PROFILER_NOT_SUPPORTED = 38,
    CUPTI_ERROR_MULTIPLE_SUBSCRIBERS_NOT_SUPPORTED = 39,
    CUPTI_ERROR_VIRTUALIZED_DEVICE_INSUFFICIENT_PRIVILEGES = 40,
    CUPTI_ERROR_CONFIDENTIAL_COMPUTING_NOT_SUPPORTED = 41,
    CUPTI_ERROR_CMP_DEVICE_NOT_SUPPORTED = 42,
    CUPTI_ERROR_UNKNOWN = 999,
    CUPTI_ERROR_FORCE_INT = 2147483647,
}
extern "C" {
    pub fn cuptiGetResultString(
        result: CUptiResult,
        str_: *mut *const ::std::os::raw::c_char,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiGetVersion(version: *mut u32) -> CUptiResult;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct dim3 {
    pub x: ::std::os::raw::c_uint,
    pub y: ::std::os::raw::c_uint,
    pub z: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_dim3() {
    const UNINIT: ::std::mem::MaybeUninit<dim3> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<dim3>(),
        12usize,
        concat!("Size of: ", stringify!(dim3))
    );
    assert_eq!(
        ::std::mem::align_of::<dim3>(),
        4usize,
        concat!("Alignment of ", stringify!(dim3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(dim3), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(dim3), "::", stringify!(y))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(dim3), "::", stringify!(z))
    );
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaError {
    cudaSuccess = 0,
    cudaErrorInvalidValue = 1,
    cudaErrorMemoryAllocation = 2,
    cudaErrorInitializationError = 3,
    cudaErrorCudartUnloading = 4,
    cudaErrorProfilerDisabled = 5,
    cudaErrorProfilerNotInitialized = 6,
    cudaErrorProfilerAlreadyStarted = 7,
    cudaErrorProfilerAlreadyStopped = 8,
    cudaErrorInvalidConfiguration = 9,
    cudaErrorInvalidPitchValue = 12,
    cudaErrorInvalidSymbol = 13,
    cudaErrorInvalidHostPointer = 16,
    cudaErrorInvalidDevicePointer = 17,
    cudaErrorInvalidTexture = 18,
    cudaErrorInvalidTextureBinding = 19,
    cudaErrorInvalidChannelDescriptor = 20,
    cudaErrorInvalidMemcpyDirection = 21,
    cudaErrorAddressOfConstant = 22,
    cudaErrorTextureFetchFailed = 23,
    cudaErrorTextureNotBound = 24,
    cudaErrorSynchronizationError = 25,
    cudaErrorInvalidFilterSetting = 26,
    cudaErrorInvalidNormSetting = 27,
    cudaErrorMixedDeviceExecution = 28,
    cudaErrorNotYetImplemented = 31,
    cudaErrorMemoryValueTooLarge = 32,
    cudaErrorStubLibrary = 34,
    cudaErrorInsufficientDriver = 35,
    cudaErrorCallRequiresNewerDriver = 36,
    cudaErrorInvalidSurface = 37,
    cudaErrorDuplicateVariableName = 43,
    cudaErrorDuplicateTextureName = 44,
    cudaErrorDuplicateSurfaceName = 45,
    cudaErrorDevicesUnavailable = 46,
    cudaErrorIncompatibleDriverContext = 49,
    cudaErrorMissingConfiguration = 52,
    cudaErrorPriorLaunchFailure = 53,
    cudaErrorLaunchMaxDepthExceeded = 65,
    cudaErrorLaunchFileScopedTex = 66,
    cudaErrorLaunchFileScopedSurf = 67,
    cudaErrorSyncDepthExceeded = 68,
    cudaErrorLaunchPendingCountExceeded = 69,
    cudaErrorInvalidDeviceFunction = 98,
    cudaErrorNoDevice = 100,
    cudaErrorInvalidDevice = 101,
    cudaErrorDeviceNotLicensed = 102,
    cudaErrorSoftwareValidityNotEstablished = 103,
    cudaErrorStartupFailure = 127,
    cudaErrorInvalidKernelImage = 200,
    cudaErrorDeviceUninitialized = 201,
    cudaErrorMapBufferObjectFailed = 205,
    cudaErrorUnmapBufferObjectFailed = 206,
    cudaErrorArrayIsMapped = 207,
    cudaErrorAlreadyMapped = 208,
    cudaErrorNoKernelImageForDevice = 209,
    cudaErrorAlreadyAcquired = 210,
    cudaErrorNotMapped = 211,
    cudaErrorNotMappedAsArray = 212,
    cudaErrorNotMappedAsPointer = 213,
    cudaErrorECCUncorrectable = 214,
    cudaErrorUnsupportedLimit = 215,
    cudaErrorDeviceAlreadyInUse = 216,
    cudaErrorPeerAccessUnsupported = 217,
    cudaErrorInvalidPtx = 218,
    cudaErrorInvalidGraphicsContext = 219,
    cudaErrorNvlinkUncorrectable = 220,
    cudaErrorJitCompilerNotFound = 221,
    cudaErrorUnsupportedPtxVersion = 222,
    cudaErrorJitCompilationDisabled = 223,
    cudaErrorUnsupportedExecAffinity = 224,
    cudaErrorInvalidSource = 300,
    cudaErrorFileNotFound = 301,
    cudaErrorSharedObjectSymbolNotFound = 302,
    cudaErrorSharedObjectInitFailed = 303,
    cudaErrorOperatingSystem = 304,
    cudaErrorInvalidResourceHandle = 400,
    cudaErrorIllegalState = 401,
    cudaErrorSymbolNotFound = 500,
    cudaErrorNotReady = 600,
    cudaErrorIllegalAddress = 700,
    cudaErrorLaunchOutOfResources = 701,
    cudaErrorLaunchTimeout = 702,
    cudaErrorLaunchIncompatibleTexturing = 703,
    cudaErrorPeerAccessAlreadyEnabled = 704,
    cudaErrorPeerAccessNotEnabled = 705,
    cudaErrorSetOnActiveProcess = 708,
    cudaErrorContextIsDestroyed = 709,
    cudaErrorAssert = 710,
    cudaErrorTooManyPeers = 711,
    cudaErrorHostMemoryAlreadyRegistered = 712,
    cudaErrorHostMemoryNotRegistered = 713,
    cudaErrorHardwareStackError = 714,
    cudaErrorIllegalInstruction = 715,
    cudaErrorMisalignedAddress = 716,
    cudaErrorInvalidAddressSpace = 717,
    cudaErrorInvalidPc = 718,
    cudaErrorLaunchFailure = 719,
    cudaErrorCooperativeLaunchTooLarge = 720,
    cudaErrorNotPermitted = 800,
    cudaErrorNotSupported = 801,
    cudaErrorSystemNotReady = 802,
    cudaErrorSystemDriverMismatch = 803,
    cudaErrorCompatNotSupportedOnDevice = 804,
    cudaErrorMpsConnectionFailed = 805,
    cudaErrorMpsRpcFailure = 806,
    cudaErrorMpsServerNotReady = 807,
    cudaErrorMpsMaxClientsReached = 808,
    cudaErrorMpsMaxConnectionsReached = 809,
    cudaErrorMpsClientTerminated = 810,
    cudaErrorCdpNotSupported = 811,
    cudaErrorCdpVersionMismatch = 812,
    cudaErrorStreamCaptureUnsupported = 900,
    cudaErrorStreamCaptureInvalidated = 901,
    cudaErrorStreamCaptureMerge = 902,
    cudaErrorStreamCaptureUnmatched = 903,
    cudaErrorStreamCaptureUnjoined = 904,
    cudaErrorStreamCaptureIsolation = 905,
    cudaErrorStreamCaptureImplicit = 906,
    cudaErrorCapturedEvent = 907,
    cudaErrorStreamCaptureWrongThread = 908,
    cudaErrorTimeout = 909,
    cudaErrorGraphExecUpdateFailure = 910,
    cudaErrorExternalDevice = 911,
    cudaErrorInvalidClusterSize = 912,
    cudaErrorUnknown = 999,
    cudaErrorApiFailureBase = 10000,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaChannelFormatKind {
    cudaChannelFormatKindSigned = 0,
    cudaChannelFormatKindUnsigned = 1,
    cudaChannelFormatKindFloat = 2,
    cudaChannelFormatKindNone = 3,
    cudaChannelFormatKindNV12 = 4,
    cudaChannelFormatKindUnsignedNormalized8X1 = 5,
    cudaChannelFormatKindUnsignedNormalized8X2 = 6,
    cudaChannelFormatKindUnsignedNormalized8X4 = 7,
    cudaChannelFormatKindUnsignedNormalized16X1 = 8,
    cudaChannelFormatKindUnsignedNormalized16X2 = 9,
    cudaChannelFormatKindUnsignedNormalized16X4 = 10,
    cudaChannelFormatKindSignedNormalized8X1 = 11,
    cudaChannelFormatKindSignedNormalized8X2 = 12,
    cudaChannelFormatKindSignedNormalized8X4 = 13,
    cudaChannelFormatKindSignedNormalized16X1 = 14,
    cudaChannelFormatKindSignedNormalized16X2 = 15,
    cudaChannelFormatKindSignedNormalized16X4 = 16,
    cudaChannelFormatKindUnsignedBlockCompressed1 = 17,
    cudaChannelFormatKindUnsignedBlockCompressed1SRGB = 18,
    cudaChannelFormatKindUnsignedBlockCompressed2 = 19,
    cudaChannelFormatKindUnsignedBlockCompressed2SRGB = 20,
    cudaChannelFormatKindUnsignedBlockCompressed3 = 21,
    cudaChannelFormatKindUnsignedBlockCompressed3SRGB = 22,
    cudaChannelFormatKindUnsignedBlockCompressed4 = 23,
    cudaChannelFormatKindSignedBlockCompressed4 = 24,
    cudaChannelFormatKindUnsignedBlockCompressed5 = 25,
    cudaChannelFormatKindSignedBlockCompressed5 = 26,
    cudaChannelFormatKindUnsignedBlockCompressed6H = 27,
    cudaChannelFormatKindSignedBlockCompressed6H = 28,
    cudaChannelFormatKindUnsignedBlockCompressed7 = 29,
    cudaChannelFormatKindUnsignedBlockCompressed7SRGB = 30,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaChannelFormatDesc {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub z: ::std::os::raw::c_int,
    pub w: ::std::os::raw::c_int,
    pub f: cudaChannelFormatKind,
}
#[test]
fn bindgen_test_layout_cudaChannelFormatDesc() {
    const UNINIT: ::std::mem::MaybeUninit<cudaChannelFormatDesc> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaChannelFormatDesc>(),
        20usize,
        concat!("Size of: ", stringify!(cudaChannelFormatDesc))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaChannelFormatDesc>(),
        4usize,
        concat!("Alignment of ", stringify!(cudaChannelFormatDesc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaChannelFormatDesc),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaChannelFormatDesc),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaChannelFormatDesc),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaChannelFormatDesc),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaChannelFormatDesc),
            "::",
            stringify!(f)
        )
    );
}
impl Default for cudaChannelFormatDesc {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cudaArray {
    _unused: [u8; 0],
}
pub type cudaArray_t = *mut cudaArray;
pub type cudaArray_const_t = *const cudaArray;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cudaMipmappedArray {
    _unused: [u8; 0],
}
pub type cudaMipmappedArray_t = *mut cudaMipmappedArray;
pub type cudaMipmappedArray_const_t = *const cudaMipmappedArray;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaArraySparseProperties {
    pub tileExtent: cudaArraySparseProperties__bindgen_ty_1,
    pub miptailFirstLevel: ::std::os::raw::c_uint,
    pub miptailSize: ::std::os::raw::c_ulonglong,
    pub flags: ::std::os::raw::c_uint,
    pub reserved: [::std::os::raw::c_uint; 4usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaArraySparseProperties__bindgen_ty_1 {
    pub width: ::std::os::raw::c_uint,
    pub height: ::std::os::raw::c_uint,
    pub depth: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cudaArraySparseProperties__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<cudaArraySparseProperties__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaArraySparseProperties__bindgen_ty_1>(),
        12usize,
        concat!(
            "Size of: ",
            stringify!(cudaArraySparseProperties__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaArraySparseProperties__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(cudaArraySparseProperties__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaArraySparseProperties__bindgen_ty_1),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaArraySparseProperties__bindgen_ty_1),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depth) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaArraySparseProperties__bindgen_ty_1),
            "::",
            stringify!(depth)
        )
    );
}
#[test]
fn bindgen_test_layout_cudaArraySparseProperties() {
    const UNINIT: ::std::mem::MaybeUninit<cudaArraySparseProperties> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaArraySparseProperties>(),
        48usize,
        concat!("Size of: ", stringify!(cudaArraySparseProperties))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaArraySparseProperties>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaArraySparseProperties))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tileExtent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaArraySparseProperties),
            "::",
            stringify!(tileExtent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).miptailFirstLevel) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaArraySparseProperties),
            "::",
            stringify!(miptailFirstLevel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).miptailSize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaArraySparseProperties),
            "::",
            stringify!(miptailSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaArraySparseProperties),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaArraySparseProperties),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaArrayMemoryRequirements {
    pub size: usize,
    pub alignment: usize,
    pub reserved: [::std::os::raw::c_uint; 4usize],
}
#[test]
fn bindgen_test_layout_cudaArrayMemoryRequirements() {
    const UNINIT: ::std::mem::MaybeUninit<cudaArrayMemoryRequirements> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaArrayMemoryRequirements>(),
        32usize,
        concat!("Size of: ", stringify!(cudaArrayMemoryRequirements))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaArrayMemoryRequirements>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaArrayMemoryRequirements))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaArrayMemoryRequirements),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alignment) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaArrayMemoryRequirements),
            "::",
            stringify!(alignment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaArrayMemoryRequirements),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaMemoryType {
    cudaMemoryTypeUnregistered = 0,
    cudaMemoryTypeHost = 1,
    cudaMemoryTypeDevice = 2,
    cudaMemoryTypeManaged = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaMemcpyKind {
    cudaMemcpyHostToHost = 0,
    cudaMemcpyHostToDevice = 1,
    cudaMemcpyDeviceToHost = 2,
    cudaMemcpyDeviceToDevice = 3,
    cudaMemcpyDefault = 4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaPitchedPtr {
    pub ptr: *mut ::std::os::raw::c_void,
    pub pitch: usize,
    pub xsize: usize,
    pub ysize: usize,
}
#[test]
fn bindgen_test_layout_cudaPitchedPtr() {
    const UNINIT: ::std::mem::MaybeUninit<cudaPitchedPtr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaPitchedPtr>(),
        32usize,
        concat!("Size of: ", stringify!(cudaPitchedPtr))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaPitchedPtr>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaPitchedPtr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaPitchedPtr),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pitch) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaPitchedPtr),
            "::",
            stringify!(pitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xsize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaPitchedPtr),
            "::",
            stringify!(xsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ysize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaPitchedPtr),
            "::",
            stringify!(ysize)
        )
    );
}
impl Default for cudaPitchedPtr {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaExtent {
    pub width: usize,
    pub height: usize,
    pub depth: usize,
}
#[test]
fn bindgen_test_layout_cudaExtent() {
    const UNINIT: ::std::mem::MaybeUninit<cudaExtent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaExtent>(),
        24usize,
        concat!("Size of: ", stringify!(cudaExtent))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaExtent>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaExtent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExtent),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExtent),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depth) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExtent),
            "::",
            stringify!(depth)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaPos {
    pub x: usize,
    pub y: usize,
    pub z: usize,
}
#[test]
fn bindgen_test_layout_cudaPos() {
    const UNINIT: ::std::mem::MaybeUninit<cudaPos> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaPos>(),
        24usize,
        concat!("Size of: ", stringify!(cudaPos))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaPos>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaPos))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaPos),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaPos),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaPos),
            "::",
            stringify!(z)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemcpy3DParms {
    pub srcArray: cudaArray_t,
    pub srcPos: cudaPos,
    pub srcPtr: cudaPitchedPtr,
    pub dstArray: cudaArray_t,
    pub dstPos: cudaPos,
    pub dstPtr: cudaPitchedPtr,
    pub extent: cudaExtent,
    pub kind: cudaMemcpyKind,
}
#[test]
fn bindgen_test_layout_cudaMemcpy3DParms() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemcpy3DParms> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemcpy3DParms>(),
        160usize,
        concat!("Size of: ", stringify!(cudaMemcpy3DParms))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemcpy3DParms>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaMemcpy3DParms))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcArray) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy3DParms),
            "::",
            stringify!(srcArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcPos) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy3DParms),
            "::",
            stringify!(srcPos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcPtr) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy3DParms),
            "::",
            stringify!(srcPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstArray) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy3DParms),
            "::",
            stringify!(dstArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstPos) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy3DParms),
            "::",
            stringify!(dstPos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstPtr) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy3DParms),
            "::",
            stringify!(dstPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extent) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy3DParms),
            "::",
            stringify!(extent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy3DParms),
            "::",
            stringify!(kind)
        )
    );
}
impl Default for cudaMemcpy3DParms {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemcpy3DPeerParms {
    pub srcArray: cudaArray_t,
    pub srcPos: cudaPos,
    pub srcPtr: cudaPitchedPtr,
    pub srcDevice: ::std::os::raw::c_int,
    pub dstArray: cudaArray_t,
    pub dstPos: cudaPos,
    pub dstPtr: cudaPitchedPtr,
    pub dstDevice: ::std::os::raw::c_int,
    pub extent: cudaExtent,
}
#[test]
fn bindgen_test_layout_cudaMemcpy3DPeerParms() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemcpy3DPeerParms> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemcpy3DPeerParms>(),
        168usize,
        concat!("Size of: ", stringify!(cudaMemcpy3DPeerParms))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemcpy3DPeerParms>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaMemcpy3DPeerParms))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcArray) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy3DPeerParms),
            "::",
            stringify!(srcArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcPos) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy3DPeerParms),
            "::",
            stringify!(srcPos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcPtr) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy3DPeerParms),
            "::",
            stringify!(srcPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcDevice) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy3DPeerParms),
            "::",
            stringify!(srcDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstArray) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy3DPeerParms),
            "::",
            stringify!(dstArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstPos) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy3DPeerParms),
            "::",
            stringify!(dstPos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstPtr) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy3DPeerParms),
            "::",
            stringify!(dstPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstDevice) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy3DPeerParms),
            "::",
            stringify!(dstDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extent) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy3DPeerParms),
            "::",
            stringify!(extent)
        )
    );
}
impl Default for cudaMemcpy3DPeerParms {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemsetParams {
    pub dst: *mut ::std::os::raw::c_void,
    pub pitch: usize,
    pub value: ::std::os::raw::c_uint,
    pub elementSize: ::std::os::raw::c_uint,
    pub width: usize,
    pub height: usize,
}
#[test]
fn bindgen_test_layout_cudaMemsetParams() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemsetParams> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemsetParams>(),
        40usize,
        concat!("Size of: ", stringify!(cudaMemsetParams))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemsetParams>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaMemsetParams))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemsetParams),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pitch) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemsetParams),
            "::",
            stringify!(pitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemsetParams),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elementSize) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemsetParams),
            "::",
            stringify!(elementSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemsetParams),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemsetParams),
            "::",
            stringify!(height)
        )
    );
}
impl Default for cudaMemsetParams {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaAccessProperty {
    cudaAccessPropertyNormal = 0,
    cudaAccessPropertyStreaming = 1,
    cudaAccessPropertyPersisting = 2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, PartialEq)]
pub struct cudaAccessPolicyWindow {
    pub base_ptr: *mut ::std::os::raw::c_void,
    pub num_bytes: usize,
    pub hitRatio: f32,
    pub hitProp: cudaAccessProperty,
    pub missProp: cudaAccessProperty,
}
#[test]
fn bindgen_test_layout_cudaAccessPolicyWindow() {
    const UNINIT: ::std::mem::MaybeUninit<cudaAccessPolicyWindow> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaAccessPolicyWindow>(),
        32usize,
        concat!("Size of: ", stringify!(cudaAccessPolicyWindow))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaAccessPolicyWindow>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaAccessPolicyWindow))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base_ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaAccessPolicyWindow),
            "::",
            stringify!(base_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_bytes) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaAccessPolicyWindow),
            "::",
            stringify!(num_bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hitRatio) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaAccessPolicyWindow),
            "::",
            stringify!(hitRatio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hitProp) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaAccessPolicyWindow),
            "::",
            stringify!(hitProp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).missProp) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaAccessPolicyWindow),
            "::",
            stringify!(missProp)
        )
    );
}
impl Default for cudaAccessPolicyWindow {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaHostFn_t =
    ::std::option::Option<unsafe extern "C" fn(userData: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaHostNodeParams {
    pub fn_: cudaHostFn_t,
    pub userData: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_cudaHostNodeParams() {
    const UNINIT: ::std::mem::MaybeUninit<cudaHostNodeParams> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaHostNodeParams>(),
        16usize,
        concat!("Size of: ", stringify!(cudaHostNodeParams))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaHostNodeParams>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaHostNodeParams))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fn_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaHostNodeParams),
            "::",
            stringify!(fn_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).userData) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaHostNodeParams),
            "::",
            stringify!(userData)
        )
    );
}
impl Default for cudaHostNodeParams {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaStreamCaptureStatus {
    cudaStreamCaptureStatusNone = 0,
    cudaStreamCaptureStatusActive = 1,
    cudaStreamCaptureStatusInvalidated = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaStreamCaptureMode {
    cudaStreamCaptureModeGlobal = 0,
    cudaStreamCaptureModeThreadLocal = 1,
    cudaStreamCaptureModeRelaxed = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaSynchronizationPolicy {
    cudaSyncPolicyAuto = 1,
    cudaSyncPolicySpin = 2,
    cudaSyncPolicyYield = 3,
    cudaSyncPolicyBlockingSync = 4,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaClusterSchedulingPolicy {
    cudaClusterSchedulingPolicyDefault = 0,
    cudaClusterSchedulingPolicySpread = 1,
    cudaClusterSchedulingPolicyLoadBalancing = 2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cudaGraphicsResource {
    _unused: [u8; 0],
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaResourceType {
    cudaResourceTypeArray = 0,
    cudaResourceTypeMipmappedArray = 1,
    cudaResourceTypeLinear = 2,
    cudaResourceTypePitch2D = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaResourceViewFormat {
    cudaResViewFormatNone = 0,
    cudaResViewFormatUnsignedChar1 = 1,
    cudaResViewFormatUnsignedChar2 = 2,
    cudaResViewFormatUnsignedChar4 = 3,
    cudaResViewFormatSignedChar1 = 4,
    cudaResViewFormatSignedChar2 = 5,
    cudaResViewFormatSignedChar4 = 6,
    cudaResViewFormatUnsignedShort1 = 7,
    cudaResViewFormatUnsignedShort2 = 8,
    cudaResViewFormatUnsignedShort4 = 9,
    cudaResViewFormatSignedShort1 = 10,
    cudaResViewFormatSignedShort2 = 11,
    cudaResViewFormatSignedShort4 = 12,
    cudaResViewFormatUnsignedInt1 = 13,
    cudaResViewFormatUnsignedInt2 = 14,
    cudaResViewFormatUnsignedInt4 = 15,
    cudaResViewFormatSignedInt1 = 16,
    cudaResViewFormatSignedInt2 = 17,
    cudaResViewFormatSignedInt4 = 18,
    cudaResViewFormatHalf1 = 19,
    cudaResViewFormatHalf2 = 20,
    cudaResViewFormatHalf4 = 21,
    cudaResViewFormatFloat1 = 22,
    cudaResViewFormatFloat2 = 23,
    cudaResViewFormatFloat4 = 24,
    cudaResViewFormatUnsignedBlockCompressed1 = 25,
    cudaResViewFormatUnsignedBlockCompressed2 = 26,
    cudaResViewFormatUnsignedBlockCompressed3 = 27,
    cudaResViewFormatUnsignedBlockCompressed4 = 28,
    cudaResViewFormatSignedBlockCompressed4 = 29,
    cudaResViewFormatUnsignedBlockCompressed5 = 30,
    cudaResViewFormatSignedBlockCompressed5 = 31,
    cudaResViewFormatUnsignedBlockCompressed6H = 32,
    cudaResViewFormatSignedBlockCompressed6H = 33,
    cudaResViewFormatUnsignedBlockCompressed7 = 34,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudaResourceDesc {
    pub resType: cudaResourceType,
    pub res: cudaResourceDesc__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cudaResourceDesc__bindgen_ty_1 {
    pub array: cudaResourceDesc__bindgen_ty_1__bindgen_ty_1,
    pub mipmap: cudaResourceDesc__bindgen_ty_1__bindgen_ty_2,
    pub linear: cudaResourceDesc__bindgen_ty_1__bindgen_ty_3,
    pub pitch2D: cudaResourceDesc__bindgen_ty_1__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaResourceDesc__bindgen_ty_1__bindgen_ty_1 {
    pub array: cudaArray_t,
}
#[test]
fn bindgen_test_layout_cudaResourceDesc__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<cudaResourceDesc__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaResourceDesc__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(cudaResourceDesc__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaResourceDesc__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaResourceDesc__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).array) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaResourceDesc__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(array)
        )
    );
}
impl Default for cudaResourceDesc__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaResourceDesc__bindgen_ty_1__bindgen_ty_2 {
    pub mipmap: cudaMipmappedArray_t,
}
#[test]
fn bindgen_test_layout_cudaResourceDesc__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<cudaResourceDesc__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaResourceDesc__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(cudaResourceDesc__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaResourceDesc__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaResourceDesc__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mipmap) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaResourceDesc__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(mipmap)
        )
    );
}
impl Default for cudaResourceDesc__bindgen_ty_1__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaResourceDesc__bindgen_ty_1__bindgen_ty_3 {
    pub devPtr: *mut ::std::os::raw::c_void,
    pub desc: cudaChannelFormatDesc,
    pub sizeInBytes: usize,
}
#[test]
fn bindgen_test_layout_cudaResourceDesc__bindgen_ty_1__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<cudaResourceDesc__bindgen_ty_1__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaResourceDesc__bindgen_ty_1__bindgen_ty_3>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(cudaResourceDesc__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaResourceDesc__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaResourceDesc__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).devPtr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaResourceDesc__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(devPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).desc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaResourceDesc__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sizeInBytes) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaResourceDesc__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(sizeInBytes)
        )
    );
}
impl Default for cudaResourceDesc__bindgen_ty_1__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaResourceDesc__bindgen_ty_1__bindgen_ty_4 {
    pub devPtr: *mut ::std::os::raw::c_void,
    pub desc: cudaChannelFormatDesc,
    pub width: usize,
    pub height: usize,
    pub pitchInBytes: usize,
}
#[test]
fn bindgen_test_layout_cudaResourceDesc__bindgen_ty_1__bindgen_ty_4() {
    const UNINIT: ::std::mem::MaybeUninit<cudaResourceDesc__bindgen_ty_1__bindgen_ty_4> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaResourceDesc__bindgen_ty_1__bindgen_ty_4>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(cudaResourceDesc__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaResourceDesc__bindgen_ty_1__bindgen_ty_4>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaResourceDesc__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).devPtr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaResourceDesc__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(devPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).desc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaResourceDesc__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaResourceDesc__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaResourceDesc__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pitchInBytes) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaResourceDesc__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(pitchInBytes)
        )
    );
}
impl Default for cudaResourceDesc__bindgen_ty_1__bindgen_ty_4 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_cudaResourceDesc__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<cudaResourceDesc__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaResourceDesc__bindgen_ty_1>(),
        56usize,
        concat!("Size of: ", stringify!(cudaResourceDesc__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaResourceDesc__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaResourceDesc__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).array) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaResourceDesc__bindgen_ty_1),
            "::",
            stringify!(array)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mipmap) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaResourceDesc__bindgen_ty_1),
            "::",
            stringify!(mipmap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).linear) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaResourceDesc__bindgen_ty_1),
            "::",
            stringify!(linear)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pitch2D) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaResourceDesc__bindgen_ty_1),
            "::",
            stringify!(pitch2D)
        )
    );
}
impl Default for cudaResourceDesc__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_cudaResourceDesc() {
    const UNINIT: ::std::mem::MaybeUninit<cudaResourceDesc> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaResourceDesc>(),
        64usize,
        concat!("Size of: ", stringify!(cudaResourceDesc))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaResourceDesc>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaResourceDesc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaResourceDesc),
            "::",
            stringify!(resType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).res) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaResourceDesc),
            "::",
            stringify!(res)
        )
    );
}
impl Default for cudaResourceDesc {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaResourceViewDesc {
    pub format: cudaResourceViewFormat,
    pub width: usize,
    pub height: usize,
    pub depth: usize,
    pub firstMipmapLevel: ::std::os::raw::c_uint,
    pub lastMipmapLevel: ::std::os::raw::c_uint,
    pub firstLayer: ::std::os::raw::c_uint,
    pub lastLayer: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cudaResourceViewDesc() {
    const UNINIT: ::std::mem::MaybeUninit<cudaResourceViewDesc> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaResourceViewDesc>(),
        48usize,
        concat!("Size of: ", stringify!(cudaResourceViewDesc))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaResourceViewDesc>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaResourceViewDesc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaResourceViewDesc),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaResourceViewDesc),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaResourceViewDesc),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depth) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaResourceViewDesc),
            "::",
            stringify!(depth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).firstMipmapLevel) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaResourceViewDesc),
            "::",
            stringify!(firstMipmapLevel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lastMipmapLevel) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaResourceViewDesc),
            "::",
            stringify!(lastMipmapLevel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).firstLayer) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaResourceViewDesc),
            "::",
            stringify!(firstLayer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lastLayer) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaResourceViewDesc),
            "::",
            stringify!(lastLayer)
        )
    );
}
impl Default for cudaResourceViewDesc {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaPointerAttributes {
    pub type_: cudaMemoryType,
    pub device: ::std::os::raw::c_int,
    pub devicePointer: *mut ::std::os::raw::c_void,
    pub hostPointer: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_cudaPointerAttributes() {
    const UNINIT: ::std::mem::MaybeUninit<cudaPointerAttributes> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaPointerAttributes>(),
        24usize,
        concat!("Size of: ", stringify!(cudaPointerAttributes))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaPointerAttributes>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaPointerAttributes))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaPointerAttributes),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaPointerAttributes),
            "::",
            stringify!(device)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).devicePointer) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaPointerAttributes),
            "::",
            stringify!(devicePointer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hostPointer) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaPointerAttributes),
            "::",
            stringify!(hostPointer)
        )
    );
}
impl Default for cudaPointerAttributes {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaFuncAttributes {
    pub sharedSizeBytes: usize,
    pub constSizeBytes: usize,
    pub localSizeBytes: usize,
    pub maxThreadsPerBlock: ::std::os::raw::c_int,
    pub numRegs: ::std::os::raw::c_int,
    pub ptxVersion: ::std::os::raw::c_int,
    pub binaryVersion: ::std::os::raw::c_int,
    pub cacheModeCA: ::std::os::raw::c_int,
    pub maxDynamicSharedSizeBytes: ::std::os::raw::c_int,
    pub preferredShmemCarveout: ::std::os::raw::c_int,
    pub clusterDimMustBeSet: ::std::os::raw::c_int,
    pub requiredClusterWidth: ::std::os::raw::c_int,
    pub requiredClusterHeight: ::std::os::raw::c_int,
    pub requiredClusterDepth: ::std::os::raw::c_int,
    pub clusterSchedulingPolicyPreference: ::std::os::raw::c_int,
    pub nonPortableClusterSizeAllowed: ::std::os::raw::c_int,
    pub reserved: [::std::os::raw::c_int; 16usize],
}
#[test]
fn bindgen_test_layout_cudaFuncAttributes() {
    const UNINIT: ::std::mem::MaybeUninit<cudaFuncAttributes> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaFuncAttributes>(),
        144usize,
        concat!("Size of: ", stringify!(cudaFuncAttributes))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaFuncAttributes>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaFuncAttributes))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sharedSizeBytes) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaFuncAttributes),
            "::",
            stringify!(sharedSizeBytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).constSizeBytes) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaFuncAttributes),
            "::",
            stringify!(constSizeBytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).localSizeBytes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaFuncAttributes),
            "::",
            stringify!(localSizeBytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxThreadsPerBlock) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaFuncAttributes),
            "::",
            stringify!(maxThreadsPerBlock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numRegs) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaFuncAttributes),
            "::",
            stringify!(numRegs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptxVersion) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaFuncAttributes),
            "::",
            stringify!(ptxVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).binaryVersion) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaFuncAttributes),
            "::",
            stringify!(binaryVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cacheModeCA) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaFuncAttributes),
            "::",
            stringify!(cacheModeCA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxDynamicSharedSizeBytes) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaFuncAttributes),
            "::",
            stringify!(maxDynamicSharedSizeBytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).preferredShmemCarveout) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaFuncAttributes),
            "::",
            stringify!(preferredShmemCarveout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clusterDimMustBeSet) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaFuncAttributes),
            "::",
            stringify!(clusterDimMustBeSet)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).requiredClusterWidth) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaFuncAttributes),
            "::",
            stringify!(requiredClusterWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).requiredClusterHeight) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaFuncAttributes),
            "::",
            stringify!(requiredClusterHeight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).requiredClusterDepth) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaFuncAttributes),
            "::",
            stringify!(requiredClusterDepth)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).clusterSchedulingPolicyPreference) as usize - ptr as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaFuncAttributes),
            "::",
            stringify!(clusterSchedulingPolicyPreference)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).nonPortableClusterSizeAllowed) as usize - ptr as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaFuncAttributes),
            "::",
            stringify!(nonPortableClusterSizeAllowed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaFuncAttributes),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaFuncAttribute {
    cudaFuncAttributeMaxDynamicSharedMemorySize = 8,
    cudaFuncAttributePreferredSharedMemoryCarveout = 9,
    cudaFuncAttributeClusterDimMustBeSet = 10,
    cudaFuncAttributeRequiredClusterWidth = 11,
    cudaFuncAttributeRequiredClusterHeight = 12,
    cudaFuncAttributeRequiredClusterDepth = 13,
    cudaFuncAttributeNonPortableClusterSizeAllowed = 14,
    cudaFuncAttributeClusterSchedulingPolicyPreference = 15,
    cudaFuncAttributeMax = 16,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaFuncCache {
    cudaFuncCachePreferNone = 0,
    cudaFuncCachePreferShared = 1,
    cudaFuncCachePreferL1 = 2,
    cudaFuncCachePreferEqual = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaSharedMemConfig {
    cudaSharedMemBankSizeDefault = 0,
    cudaSharedMemBankSizeFourByte = 1,
    cudaSharedMemBankSizeEightByte = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaLimit {
    cudaLimitStackSize = 0,
    cudaLimitPrintfFifoSize = 1,
    cudaLimitMallocHeapSize = 2,
    cudaLimitDevRuntimeSyncDepth = 3,
    cudaLimitDevRuntimePendingLaunchCount = 4,
    cudaLimitMaxL2FetchGranularity = 5,
    cudaLimitPersistingL2CacheSize = 6,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaMemoryAdvise {
    cudaMemAdviseSetReadMostly = 1,
    cudaMemAdviseUnsetReadMostly = 2,
    cudaMemAdviseSetPreferredLocation = 3,
    cudaMemAdviseUnsetPreferredLocation = 4,
    cudaMemAdviseSetAccessedBy = 5,
    cudaMemAdviseUnsetAccessedBy = 6,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaMemRangeAttribute {
    cudaMemRangeAttributeReadMostly = 1,
    cudaMemRangeAttributePreferredLocation = 2,
    cudaMemRangeAttributeAccessedBy = 3,
    cudaMemRangeAttributeLastPrefetchLocation = 4,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaFlushGPUDirectRDMAWritesScope {
    cudaFlushGPUDirectRDMAWritesToOwner = 100,
    cudaFlushGPUDirectRDMAWritesToAllDevices = 200,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaFlushGPUDirectRDMAWritesTarget {
    cudaFlushGPUDirectRDMAWritesTargetCurrentDevice = 0,
}
impl cudaDeviceAttr {
    pub const cudaDevAttrMaxTimelineSemaphoreInteropSupported: cudaDeviceAttr =
        cudaDeviceAttr::cudaDevAttrTimelineSemaphoreInteropSupported;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaDeviceAttr {
    cudaDevAttrMaxThreadsPerBlock = 1,
    cudaDevAttrMaxBlockDimX = 2,
    cudaDevAttrMaxBlockDimY = 3,
    cudaDevAttrMaxBlockDimZ = 4,
    cudaDevAttrMaxGridDimX = 5,
    cudaDevAttrMaxGridDimY = 6,
    cudaDevAttrMaxGridDimZ = 7,
    cudaDevAttrMaxSharedMemoryPerBlock = 8,
    cudaDevAttrTotalConstantMemory = 9,
    cudaDevAttrWarpSize = 10,
    cudaDevAttrMaxPitch = 11,
    cudaDevAttrMaxRegistersPerBlock = 12,
    cudaDevAttrClockRate = 13,
    cudaDevAttrTextureAlignment = 14,
    cudaDevAttrGpuOverlap = 15,
    cudaDevAttrMultiProcessorCount = 16,
    cudaDevAttrKernelExecTimeout = 17,
    cudaDevAttrIntegrated = 18,
    cudaDevAttrCanMapHostMemory = 19,
    cudaDevAttrComputeMode = 20,
    cudaDevAttrMaxTexture1DWidth = 21,
    cudaDevAttrMaxTexture2DWidth = 22,
    cudaDevAttrMaxTexture2DHeight = 23,
    cudaDevAttrMaxTexture3DWidth = 24,
    cudaDevAttrMaxTexture3DHeight = 25,
    cudaDevAttrMaxTexture3DDepth = 26,
    cudaDevAttrMaxTexture2DLayeredWidth = 27,
    cudaDevAttrMaxTexture2DLayeredHeight = 28,
    cudaDevAttrMaxTexture2DLayeredLayers = 29,
    cudaDevAttrSurfaceAlignment = 30,
    cudaDevAttrConcurrentKernels = 31,
    cudaDevAttrEccEnabled = 32,
    cudaDevAttrPciBusId = 33,
    cudaDevAttrPciDeviceId = 34,
    cudaDevAttrTccDriver = 35,
    cudaDevAttrMemoryClockRate = 36,
    cudaDevAttrGlobalMemoryBusWidth = 37,
    cudaDevAttrL2CacheSize = 38,
    cudaDevAttrMaxThreadsPerMultiProcessor = 39,
    cudaDevAttrAsyncEngineCount = 40,
    cudaDevAttrUnifiedAddressing = 41,
    cudaDevAttrMaxTexture1DLayeredWidth = 42,
    cudaDevAttrMaxTexture1DLayeredLayers = 43,
    cudaDevAttrMaxTexture2DGatherWidth = 45,
    cudaDevAttrMaxTexture2DGatherHeight = 46,
    cudaDevAttrMaxTexture3DWidthAlt = 47,
    cudaDevAttrMaxTexture3DHeightAlt = 48,
    cudaDevAttrMaxTexture3DDepthAlt = 49,
    cudaDevAttrPciDomainId = 50,
    cudaDevAttrTexturePitchAlignment = 51,
    cudaDevAttrMaxTextureCubemapWidth = 52,
    cudaDevAttrMaxTextureCubemapLayeredWidth = 53,
    cudaDevAttrMaxTextureCubemapLayeredLayers = 54,
    cudaDevAttrMaxSurface1DWidth = 55,
    cudaDevAttrMaxSurface2DWidth = 56,
    cudaDevAttrMaxSurface2DHeight = 57,
    cudaDevAttrMaxSurface3DWidth = 58,
    cudaDevAttrMaxSurface3DHeight = 59,
    cudaDevAttrMaxSurface3DDepth = 60,
    cudaDevAttrMaxSurface1DLayeredWidth = 61,
    cudaDevAttrMaxSurface1DLayeredLayers = 62,
    cudaDevAttrMaxSurface2DLayeredWidth = 63,
    cudaDevAttrMaxSurface2DLayeredHeight = 64,
    cudaDevAttrMaxSurface2DLayeredLayers = 65,
    cudaDevAttrMaxSurfaceCubemapWidth = 66,
    cudaDevAttrMaxSurfaceCubemapLayeredWidth = 67,
    cudaDevAttrMaxSurfaceCubemapLayeredLayers = 68,
    cudaDevAttrMaxTexture1DLinearWidth = 69,
    cudaDevAttrMaxTexture2DLinearWidth = 70,
    cudaDevAttrMaxTexture2DLinearHeight = 71,
    cudaDevAttrMaxTexture2DLinearPitch = 72,
    cudaDevAttrMaxTexture2DMipmappedWidth = 73,
    cudaDevAttrMaxTexture2DMipmappedHeight = 74,
    cudaDevAttrComputeCapabilityMajor = 75,
    cudaDevAttrComputeCapabilityMinor = 76,
    cudaDevAttrMaxTexture1DMipmappedWidth = 77,
    cudaDevAttrStreamPrioritiesSupported = 78,
    cudaDevAttrGlobalL1CacheSupported = 79,
    cudaDevAttrLocalL1CacheSupported = 80,
    cudaDevAttrMaxSharedMemoryPerMultiprocessor = 81,
    cudaDevAttrMaxRegistersPerMultiprocessor = 82,
    cudaDevAttrManagedMemory = 83,
    cudaDevAttrIsMultiGpuBoard = 84,
    cudaDevAttrMultiGpuBoardGroupID = 85,
    cudaDevAttrHostNativeAtomicSupported = 86,
    cudaDevAttrSingleToDoublePrecisionPerfRatio = 87,
    cudaDevAttrPageableMemoryAccess = 88,
    cudaDevAttrConcurrentManagedAccess = 89,
    cudaDevAttrComputePreemptionSupported = 90,
    cudaDevAttrCanUseHostPointerForRegisteredMem = 91,
    cudaDevAttrReserved92 = 92,
    cudaDevAttrReserved93 = 93,
    cudaDevAttrReserved94 = 94,
    cudaDevAttrCooperativeLaunch = 95,
    cudaDevAttrCooperativeMultiDeviceLaunch = 96,
    cudaDevAttrMaxSharedMemoryPerBlockOptin = 97,
    cudaDevAttrCanFlushRemoteWrites = 98,
    cudaDevAttrHostRegisterSupported = 99,
    cudaDevAttrPageableMemoryAccessUsesHostPageTables = 100,
    cudaDevAttrDirectManagedMemAccessFromHost = 101,
    cudaDevAttrMaxBlocksPerMultiprocessor = 106,
    cudaDevAttrMaxPersistingL2CacheSize = 108,
    cudaDevAttrMaxAccessPolicyWindowSize = 109,
    cudaDevAttrReservedSharedMemoryPerBlock = 111,
    cudaDevAttrSparseCudaArraySupported = 112,
    cudaDevAttrHostRegisterReadOnlySupported = 113,
    cudaDevAttrTimelineSemaphoreInteropSupported = 114,
    cudaDevAttrMemoryPoolsSupported = 115,
    cudaDevAttrGPUDirectRDMASupported = 116,
    cudaDevAttrGPUDirectRDMAFlushWritesOptions = 117,
    cudaDevAttrGPUDirectRDMAWritesOrdering = 118,
    cudaDevAttrMemoryPoolSupportedHandleTypes = 119,
    cudaDevAttrClusterLaunch = 120,
    cudaDevAttrDeferredMappingCudaArraySupported = 121,
    cudaDevAttrReserved122 = 122,
    cudaDevAttrReserved123 = 123,
    cudaDevAttrReserved124 = 124,
    cudaDevAttrIpcEventSupport = 125,
    cudaDevAttrMemSyncDomainCount = 126,
    cudaDevAttrMax = 127,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaMemPoolAttr {
    cudaMemPoolReuseFollowEventDependencies = 1,
    cudaMemPoolReuseAllowOpportunistic = 2,
    cudaMemPoolReuseAllowInternalDependencies = 3,
    cudaMemPoolAttrReleaseThreshold = 4,
    cudaMemPoolAttrReservedMemCurrent = 5,
    cudaMemPoolAttrReservedMemHigh = 6,
    cudaMemPoolAttrUsedMemCurrent = 7,
    cudaMemPoolAttrUsedMemHigh = 8,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaMemLocationType {
    cudaMemLocationTypeInvalid = 0,
    cudaMemLocationTypeDevice = 1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemLocation {
    pub type_: cudaMemLocationType,
    pub id: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cudaMemLocation() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemLocation> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemLocation>(),
        8usize,
        concat!("Size of: ", stringify!(cudaMemLocation))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemLocation>(),
        4usize,
        concat!("Alignment of ", stringify!(cudaMemLocation))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemLocation),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemLocation),
            "::",
            stringify!(id)
        )
    );
}
impl Default for cudaMemLocation {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaMemAccessFlags {
    cudaMemAccessFlagsProtNone = 0,
    cudaMemAccessFlagsProtRead = 1,
    cudaMemAccessFlagsProtReadWrite = 3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemAccessDesc {
    pub location: cudaMemLocation,
    pub flags: cudaMemAccessFlags,
}
#[test]
fn bindgen_test_layout_cudaMemAccessDesc() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemAccessDesc> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemAccessDesc>(),
        12usize,
        concat!("Size of: ", stringify!(cudaMemAccessDesc))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemAccessDesc>(),
        4usize,
        concat!("Alignment of ", stringify!(cudaMemAccessDesc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).location) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemAccessDesc),
            "::",
            stringify!(location)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemAccessDesc),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cudaMemAccessDesc {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaMemAllocationType {
    cudaMemAllocationTypeInvalid = 0,
    cudaMemAllocationTypePinned = 1,
    cudaMemAllocationTypeMax = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaMemAllocationHandleType {
    cudaMemHandleTypeNone = 0,
    cudaMemHandleTypePosixFileDescriptor = 1,
    cudaMemHandleTypeWin32 = 2,
    cudaMemHandleTypeWin32Kmt = 4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemPoolProps {
    pub allocType: cudaMemAllocationType,
    pub handleTypes: cudaMemAllocationHandleType,
    pub location: cudaMemLocation,
    pub win32SecurityAttributes: *mut ::std::os::raw::c_void,
    pub reserved: [::std::os::raw::c_uchar; 64usize],
}
#[test]
fn bindgen_test_layout_cudaMemPoolProps() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemPoolProps> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemPoolProps>(),
        88usize,
        concat!("Size of: ", stringify!(cudaMemPoolProps))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemPoolProps>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaMemPoolProps))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allocType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemPoolProps),
            "::",
            stringify!(allocType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handleTypes) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemPoolProps),
            "::",
            stringify!(handleTypes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).location) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemPoolProps),
            "::",
            stringify!(location)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).win32SecurityAttributes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemPoolProps),
            "::",
            stringify!(win32SecurityAttributes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemPoolProps),
            "::",
            stringify!(reserved)
        )
    );
}
impl Default for cudaMemPoolProps {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemPoolPtrExportData {
    pub reserved: [::std::os::raw::c_uchar; 64usize],
}
#[test]
fn bindgen_test_layout_cudaMemPoolPtrExportData() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemPoolPtrExportData> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemPoolPtrExportData>(),
        64usize,
        concat!("Size of: ", stringify!(cudaMemPoolPtrExportData))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemPoolPtrExportData>(),
        1usize,
        concat!("Alignment of ", stringify!(cudaMemPoolPtrExportData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemPoolPtrExportData),
            "::",
            stringify!(reserved)
        )
    );
}
impl Default for cudaMemPoolPtrExportData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemAllocNodeParams {
    pub poolProps: cudaMemPoolProps,
    pub accessDescs: *const cudaMemAccessDesc,
    pub accessDescCount: usize,
    pub bytesize: usize,
    pub dptr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_cudaMemAllocNodeParams() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemAllocNodeParams> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemAllocNodeParams>(),
        120usize,
        concat!("Size of: ", stringify!(cudaMemAllocNodeParams))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemAllocNodeParams>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaMemAllocNodeParams))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).poolProps) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemAllocNodeParams),
            "::",
            stringify!(poolProps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).accessDescs) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemAllocNodeParams),
            "::",
            stringify!(accessDescs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).accessDescCount) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemAllocNodeParams),
            "::",
            stringify!(accessDescCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytesize) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemAllocNodeParams),
            "::",
            stringify!(bytesize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dptr) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemAllocNodeParams),
            "::",
            stringify!(dptr)
        )
    );
}
impl Default for cudaMemAllocNodeParams {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaGraphMemAttributeType {
    cudaGraphMemAttrUsedMemCurrent = 0,
    cudaGraphMemAttrUsedMemHigh = 1,
    cudaGraphMemAttrReservedMemCurrent = 2,
    cudaGraphMemAttrReservedMemHigh = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaDeviceP2PAttr {
    cudaDevP2PAttrPerformanceRank = 1,
    cudaDevP2PAttrAccessSupported = 2,
    cudaDevP2PAttrNativeAtomicSupported = 3,
    cudaDevP2PAttrCudaArrayAccessSupported = 4,
}
pub type cudaUUID_t = CUuuid_st;
#[repr(C)]
pub struct cudaDeviceProp {
    pub name: [::std::os::raw::c_char; 256usize],
    pub uuid: cudaUUID_t,
    pub luid: [::std::os::raw::c_char; 8usize],
    pub luidDeviceNodeMask: ::std::os::raw::c_uint,
    pub totalGlobalMem: usize,
    pub sharedMemPerBlock: usize,
    pub regsPerBlock: ::std::os::raw::c_int,
    pub warpSize: ::std::os::raw::c_int,
    pub memPitch: usize,
    pub maxThreadsPerBlock: ::std::os::raw::c_int,
    pub maxThreadsDim: [::std::os::raw::c_int; 3usize],
    pub maxGridSize: [::std::os::raw::c_int; 3usize],
    pub clockRate: ::std::os::raw::c_int,
    pub totalConstMem: usize,
    pub major: ::std::os::raw::c_int,
    pub minor: ::std::os::raw::c_int,
    pub textureAlignment: usize,
    pub texturePitchAlignment: usize,
    pub deviceOverlap: ::std::os::raw::c_int,
    pub multiProcessorCount: ::std::os::raw::c_int,
    pub kernelExecTimeoutEnabled: ::std::os::raw::c_int,
    pub integrated: ::std::os::raw::c_int,
    pub canMapHostMemory: ::std::os::raw::c_int,
    pub computeMode: ::std::os::raw::c_int,
    pub maxTexture1D: ::std::os::raw::c_int,
    pub maxTexture1DMipmap: ::std::os::raw::c_int,
    pub maxTexture1DLinear: ::std::os::raw::c_int,
    pub maxTexture2D: [::std::os::raw::c_int; 2usize],
    pub maxTexture2DMipmap: [::std::os::raw::c_int; 2usize],
    pub maxTexture2DLinear: [::std::os::raw::c_int; 3usize],
    pub maxTexture2DGather: [::std::os::raw::c_int; 2usize],
    pub maxTexture3D: [::std::os::raw::c_int; 3usize],
    pub maxTexture3DAlt: [::std::os::raw::c_int; 3usize],
    pub maxTextureCubemap: ::std::os::raw::c_int,
    pub maxTexture1DLayered: [::std::os::raw::c_int; 2usize],
    pub maxTexture2DLayered: [::std::os::raw::c_int; 3usize],
    pub maxTextureCubemapLayered: [::std::os::raw::c_int; 2usize],
    pub maxSurface1D: ::std::os::raw::c_int,
    pub maxSurface2D: [::std::os::raw::c_int; 2usize],
    pub maxSurface3D: [::std::os::raw::c_int; 3usize],
    pub maxSurface1DLayered: [::std::os::raw::c_int; 2usize],
    pub maxSurface2DLayered: [::std::os::raw::c_int; 3usize],
    pub maxSurfaceCubemap: ::std::os::raw::c_int,
    pub maxSurfaceCubemapLayered: [::std::os::raw::c_int; 2usize],
    pub surfaceAlignment: usize,
    pub concurrentKernels: ::std::os::raw::c_int,
    pub ECCEnabled: ::std::os::raw::c_int,
    pub pciBusID: ::std::os::raw::c_int,
    pub pciDeviceID: ::std::os::raw::c_int,
    pub pciDomainID: ::std::os::raw::c_int,
    pub tccDriver: ::std::os::raw::c_int,
    pub asyncEngineCount: ::std::os::raw::c_int,
    pub unifiedAddressing: ::std::os::raw::c_int,
    pub memoryClockRate: ::std::os::raw::c_int,
    pub memoryBusWidth: ::std::os::raw::c_int,
    pub l2CacheSize: ::std::os::raw::c_int,
    pub persistingL2CacheMaxSize: ::std::os::raw::c_int,
    pub maxThreadsPerMultiProcessor: ::std::os::raw::c_int,
    pub streamPrioritiesSupported: ::std::os::raw::c_int,
    pub globalL1CacheSupported: ::std::os::raw::c_int,
    pub localL1CacheSupported: ::std::os::raw::c_int,
    pub sharedMemPerMultiprocessor: usize,
    pub regsPerMultiprocessor: ::std::os::raw::c_int,
    pub managedMemory: ::std::os::raw::c_int,
    pub isMultiGpuBoard: ::std::os::raw::c_int,
    pub multiGpuBoardGroupID: ::std::os::raw::c_int,
    pub hostNativeAtomicSupported: ::std::os::raw::c_int,
    pub singleToDoublePrecisionPerfRatio: ::std::os::raw::c_int,
    pub pageableMemoryAccess: ::std::os::raw::c_int,
    pub concurrentManagedAccess: ::std::os::raw::c_int,
    pub computePreemptionSupported: ::std::os::raw::c_int,
    pub canUseHostPointerForRegisteredMem: ::std::os::raw::c_int,
    pub cooperativeLaunch: ::std::os::raw::c_int,
    pub cooperativeMultiDeviceLaunch: ::std::os::raw::c_int,
    pub sharedMemPerBlockOptin: usize,
    pub pageableMemoryAccessUsesHostPageTables: ::std::os::raw::c_int,
    pub directManagedMemAccessFromHost: ::std::os::raw::c_int,
    pub maxBlocksPerMultiProcessor: ::std::os::raw::c_int,
    pub accessPolicyMaxWindowSize: ::std::os::raw::c_int,
    pub reservedSharedMemPerBlock: usize,
    pub hostRegisterSupported: ::std::os::raw::c_int,
    pub sparseCudaArraySupported: ::std::os::raw::c_int,
    pub hostRegisterReadOnlySupported: ::std::os::raw::c_int,
    pub timelineSemaphoreInteropSupported: ::std::os::raw::c_int,
    pub memoryPoolsSupported: ::std::os::raw::c_int,
    pub gpuDirectRDMASupported: ::std::os::raw::c_int,
    pub gpuDirectRDMAFlushWritesOptions: ::std::os::raw::c_uint,
    pub gpuDirectRDMAWritesOrdering: ::std::os::raw::c_int,
    pub memoryPoolSupportedHandleTypes: ::std::os::raw::c_uint,
    pub deferredMappingCudaArraySupported: ::std::os::raw::c_int,
    pub ipcEventSupported: ::std::os::raw::c_int,
    pub clusterLaunch: ::std::os::raw::c_int,
    pub unifiedFunctionPointers: ::std::os::raw::c_int,
    pub reserved: [::std::os::raw::c_int; 63usize],
}
#[test]
fn bindgen_test_layout_cudaDeviceProp() {
    const UNINIT: ::std::mem::MaybeUninit<cudaDeviceProp> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaDeviceProp>(),
        1032usize,
        concat!("Size of: ", stringify!(cudaDeviceProp))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaDeviceProp>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaDeviceProp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uuid) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(uuid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).luid) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(luid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).luidDeviceNodeMask) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(luidDeviceNodeMask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).totalGlobalMem) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(totalGlobalMem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sharedMemPerBlock) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(sharedMemPerBlock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regsPerBlock) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(regsPerBlock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).warpSize) as usize - ptr as usize },
        308usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(warpSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memPitch) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(memPitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxThreadsPerBlock) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(maxThreadsPerBlock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxThreadsDim) as usize - ptr as usize },
        324usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(maxThreadsDim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxGridSize) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(maxGridSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clockRate) as usize - ptr as usize },
        348usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(clockRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).totalConstMem) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(totalConstMem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).major) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minor) as usize - ptr as usize },
        364usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).textureAlignment) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(textureAlignment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).texturePitchAlignment) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(texturePitchAlignment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deviceOverlap) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(deviceOverlap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).multiProcessorCount) as usize - ptr as usize },
        388usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(multiProcessorCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kernelExecTimeoutEnabled) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(kernelExecTimeoutEnabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).integrated) as usize - ptr as usize },
        396usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(integrated)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).canMapHostMemory) as usize - ptr as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(canMapHostMemory)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).computeMode) as usize - ptr as usize },
        404usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(computeMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxTexture1D) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(maxTexture1D)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxTexture1DMipmap) as usize - ptr as usize },
        412usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(maxTexture1DMipmap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxTexture1DLinear) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(maxTexture1DLinear)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxTexture2D) as usize - ptr as usize },
        420usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(maxTexture2D)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxTexture2DMipmap) as usize - ptr as usize },
        428usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(maxTexture2DMipmap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxTexture2DLinear) as usize - ptr as usize },
        436usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(maxTexture2DLinear)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxTexture2DGather) as usize - ptr as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(maxTexture2DGather)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxTexture3D) as usize - ptr as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(maxTexture3D)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxTexture3DAlt) as usize - ptr as usize },
        468usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(maxTexture3DAlt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxTextureCubemap) as usize - ptr as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(maxTextureCubemap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxTexture1DLayered) as usize - ptr as usize },
        484usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(maxTexture1DLayered)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxTexture2DLayered) as usize - ptr as usize },
        492usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(maxTexture2DLayered)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxTextureCubemapLayered) as usize - ptr as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(maxTextureCubemapLayered)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxSurface1D) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(maxSurface1D)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxSurface2D) as usize - ptr as usize },
        516usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(maxSurface2D)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxSurface3D) as usize - ptr as usize },
        524usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(maxSurface3D)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxSurface1DLayered) as usize - ptr as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(maxSurface1DLayered)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxSurface2DLayered) as usize - ptr as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(maxSurface2DLayered)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxSurfaceCubemap) as usize - ptr as usize },
        556usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(maxSurfaceCubemap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxSurfaceCubemapLayered) as usize - ptr as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(maxSurfaceCubemapLayered)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).surfaceAlignment) as usize - ptr as usize },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(surfaceAlignment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).concurrentKernels) as usize - ptr as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(concurrentKernels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ECCEnabled) as usize - ptr as usize },
        580usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(ECCEnabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pciBusID) as usize - ptr as usize },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(pciBusID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pciDeviceID) as usize - ptr as usize },
        588usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(pciDeviceID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pciDomainID) as usize - ptr as usize },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(pciDomainID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tccDriver) as usize - ptr as usize },
        596usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(tccDriver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).asyncEngineCount) as usize - ptr as usize },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(asyncEngineCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unifiedAddressing) as usize - ptr as usize },
        604usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(unifiedAddressing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memoryClockRate) as usize - ptr as usize },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(memoryClockRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memoryBusWidth) as usize - ptr as usize },
        612usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(memoryBusWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l2CacheSize) as usize - ptr as usize },
        616usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(l2CacheSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).persistingL2CacheMaxSize) as usize - ptr as usize },
        620usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(persistingL2CacheMaxSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxThreadsPerMultiProcessor) as usize - ptr as usize },
        624usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(maxThreadsPerMultiProcessor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).streamPrioritiesSupported) as usize - ptr as usize },
        628usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(streamPrioritiesSupported)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).globalL1CacheSupported) as usize - ptr as usize },
        632usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(globalL1CacheSupported)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).localL1CacheSupported) as usize - ptr as usize },
        636usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(localL1CacheSupported)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sharedMemPerMultiprocessor) as usize - ptr as usize },
        640usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(sharedMemPerMultiprocessor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regsPerMultiprocessor) as usize - ptr as usize },
        648usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(regsPerMultiprocessor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).managedMemory) as usize - ptr as usize },
        652usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(managedMemory)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isMultiGpuBoard) as usize - ptr as usize },
        656usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(isMultiGpuBoard)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).multiGpuBoardGroupID) as usize - ptr as usize },
        660usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(multiGpuBoardGroupID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hostNativeAtomicSupported) as usize - ptr as usize },
        664usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(hostNativeAtomicSupported)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).singleToDoublePrecisionPerfRatio) as usize - ptr as usize
        },
        668usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(singleToDoublePrecisionPerfRatio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pageableMemoryAccess) as usize - ptr as usize },
        672usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(pageableMemoryAccess)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).concurrentManagedAccess) as usize - ptr as usize },
        676usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(concurrentManagedAccess)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).computePreemptionSupported) as usize - ptr as usize },
        680usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(computePreemptionSupported)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).canUseHostPointerForRegisteredMem) as usize - ptr as usize
        },
        684usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(canUseHostPointerForRegisteredMem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cooperativeLaunch) as usize - ptr as usize },
        688usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(cooperativeLaunch)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).cooperativeMultiDeviceLaunch) as usize - ptr as usize
        },
        692usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(cooperativeMultiDeviceLaunch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sharedMemPerBlockOptin) as usize - ptr as usize },
        696usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(sharedMemPerBlockOptin)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pageableMemoryAccessUsesHostPageTables) as usize
                - ptr as usize
        },
        704usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(pageableMemoryAccessUsesHostPageTables)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).directManagedMemAccessFromHost) as usize - ptr as usize
        },
        708usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(directManagedMemAccessFromHost)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxBlocksPerMultiProcessor) as usize - ptr as usize },
        712usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(maxBlocksPerMultiProcessor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).accessPolicyMaxWindowSize) as usize - ptr as usize },
        716usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(accessPolicyMaxWindowSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reservedSharedMemPerBlock) as usize - ptr as usize },
        720usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(reservedSharedMemPerBlock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hostRegisterSupported) as usize - ptr as usize },
        728usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(hostRegisterSupported)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sparseCudaArraySupported) as usize - ptr as usize },
        732usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(sparseCudaArraySupported)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).hostRegisterReadOnlySupported) as usize - ptr as usize
        },
        736usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(hostRegisterReadOnlySupported)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).timelineSemaphoreInteropSupported) as usize - ptr as usize
        },
        740usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(timelineSemaphoreInteropSupported)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memoryPoolsSupported) as usize - ptr as usize },
        744usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(memoryPoolsSupported)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gpuDirectRDMASupported) as usize - ptr as usize },
        748usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(gpuDirectRDMASupported)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).gpuDirectRDMAFlushWritesOptions) as usize - ptr as usize
        },
        752usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(gpuDirectRDMAFlushWritesOptions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gpuDirectRDMAWritesOrdering) as usize - ptr as usize },
        756usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(gpuDirectRDMAWritesOrdering)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).memoryPoolSupportedHandleTypes) as usize - ptr as usize
        },
        760usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(memoryPoolSupportedHandleTypes)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).deferredMappingCudaArraySupported) as usize - ptr as usize
        },
        764usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(deferredMappingCudaArraySupported)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ipcEventSupported) as usize - ptr as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(ipcEventSupported)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clusterLaunch) as usize - ptr as usize },
        772usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(clusterLaunch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unifiedFunctionPointers) as usize - ptr as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(unifiedFunctionPointers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceProp),
            "::",
            stringify!(reserved)
        )
    );
}
impl Default for cudaDeviceProp {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaIpcEventHandle_st {
    pub reserved: [::std::os::raw::c_char; 64usize],
}
#[test]
fn bindgen_test_layout_cudaIpcEventHandle_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaIpcEventHandle_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaIpcEventHandle_st>(),
        64usize,
        concat!("Size of: ", stringify!(cudaIpcEventHandle_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaIpcEventHandle_st>(),
        1usize,
        concat!("Alignment of ", stringify!(cudaIpcEventHandle_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaIpcEventHandle_st),
            "::",
            stringify!(reserved)
        )
    );
}
impl Default for cudaIpcEventHandle_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaIpcEventHandle_t = cudaIpcEventHandle_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaIpcMemHandle_st {
    pub reserved: [::std::os::raw::c_char; 64usize],
}
#[test]
fn bindgen_test_layout_cudaIpcMemHandle_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaIpcMemHandle_st> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaIpcMemHandle_st>(),
        64usize,
        concat!("Size of: ", stringify!(cudaIpcMemHandle_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaIpcMemHandle_st>(),
        1usize,
        concat!("Alignment of ", stringify!(cudaIpcMemHandle_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaIpcMemHandle_st),
            "::",
            stringify!(reserved)
        )
    );
}
impl Default for cudaIpcMemHandle_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaIpcMemHandle_t = cudaIpcMemHandle_st;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaExternalMemoryHandleType {
    cudaExternalMemoryHandleTypeOpaqueFd = 1,
    cudaExternalMemoryHandleTypeOpaqueWin32 = 2,
    cudaExternalMemoryHandleTypeOpaqueWin32Kmt = 3,
    cudaExternalMemoryHandleTypeD3D12Heap = 4,
    cudaExternalMemoryHandleTypeD3D12Resource = 5,
    cudaExternalMemoryHandleTypeD3D11Resource = 6,
    cudaExternalMemoryHandleTypeD3D11ResourceKmt = 7,
    cudaExternalMemoryHandleTypeNvSciBuf = 8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudaExternalMemoryHandleDesc {
    pub type_: cudaExternalMemoryHandleType,
    pub handle: cudaExternalMemoryHandleDesc__bindgen_ty_1,
    pub size: ::std::os::raw::c_ulonglong,
    pub flags: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cudaExternalMemoryHandleDesc__bindgen_ty_1 {
    pub fd: ::std::os::raw::c_int,
    pub win32: cudaExternalMemoryHandleDesc__bindgen_ty_1__bindgen_ty_1,
    pub nvSciBufObject: *const ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaExternalMemoryHandleDesc__bindgen_ty_1__bindgen_ty_1 {
    pub handle: *mut ::std::os::raw::c_void,
    pub name: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_cudaExternalMemoryHandleDesc__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<
        cudaExternalMemoryHandleDesc__bindgen_ty_1__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaExternalMemoryHandleDesc__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaExternalMemoryHandleDesc__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaExternalMemoryHandleDesc__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaExternalMemoryHandleDesc__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalMemoryHandleDesc__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalMemoryHandleDesc__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(name)
        )
    );
}
impl Default for cudaExternalMemoryHandleDesc__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_cudaExternalMemoryHandleDesc__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<cudaExternalMemoryHandleDesc__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaExternalMemoryHandleDesc__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaExternalMemoryHandleDesc__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaExternalMemoryHandleDesc__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaExternalMemoryHandleDesc__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalMemoryHandleDesc__bindgen_ty_1),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).win32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalMemoryHandleDesc__bindgen_ty_1),
            "::",
            stringify!(win32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nvSciBufObject) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalMemoryHandleDesc__bindgen_ty_1),
            "::",
            stringify!(nvSciBufObject)
        )
    );
}
impl Default for cudaExternalMemoryHandleDesc__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_cudaExternalMemoryHandleDesc() {
    const UNINIT: ::std::mem::MaybeUninit<cudaExternalMemoryHandleDesc> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaExternalMemoryHandleDesc>(),
        40usize,
        concat!("Size of: ", stringify!(cudaExternalMemoryHandleDesc))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaExternalMemoryHandleDesc>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaExternalMemoryHandleDesc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalMemoryHandleDesc),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalMemoryHandleDesc),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalMemoryHandleDesc),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalMemoryHandleDesc),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cudaExternalMemoryHandleDesc {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaExternalMemoryBufferDesc {
    pub offset: ::std::os::raw::c_ulonglong,
    pub size: ::std::os::raw::c_ulonglong,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cudaExternalMemoryBufferDesc() {
    const UNINIT: ::std::mem::MaybeUninit<cudaExternalMemoryBufferDesc> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaExternalMemoryBufferDesc>(),
        24usize,
        concat!("Size of: ", stringify!(cudaExternalMemoryBufferDesc))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaExternalMemoryBufferDesc>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaExternalMemoryBufferDesc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalMemoryBufferDesc),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalMemoryBufferDesc),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalMemoryBufferDesc),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaExternalMemoryMipmappedArrayDesc {
    pub offset: ::std::os::raw::c_ulonglong,
    pub formatDesc: cudaChannelFormatDesc,
    pub extent: cudaExtent,
    pub flags: ::std::os::raw::c_uint,
    pub numLevels: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cudaExternalMemoryMipmappedArrayDesc() {
    const UNINIT: ::std::mem::MaybeUninit<cudaExternalMemoryMipmappedArrayDesc> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaExternalMemoryMipmappedArrayDesc>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(cudaExternalMemoryMipmappedArrayDesc)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaExternalMemoryMipmappedArrayDesc>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaExternalMemoryMipmappedArrayDesc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalMemoryMipmappedArrayDesc),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).formatDesc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalMemoryMipmappedArrayDesc),
            "::",
            stringify!(formatDesc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extent) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalMemoryMipmappedArrayDesc),
            "::",
            stringify!(extent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalMemoryMipmappedArrayDesc),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numLevels) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalMemoryMipmappedArrayDesc),
            "::",
            stringify!(numLevels)
        )
    );
}
impl Default for cudaExternalMemoryMipmappedArrayDesc {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaExternalSemaphoreHandleType {
    cudaExternalSemaphoreHandleTypeOpaqueFd = 1,
    cudaExternalSemaphoreHandleTypeOpaqueWin32 = 2,
    cudaExternalSemaphoreHandleTypeOpaqueWin32Kmt = 3,
    cudaExternalSemaphoreHandleTypeD3D12Fence = 4,
    cudaExternalSemaphoreHandleTypeD3D11Fence = 5,
    cudaExternalSemaphoreHandleTypeNvSciSync = 6,
    cudaExternalSemaphoreHandleTypeKeyedMutex = 7,
    cudaExternalSemaphoreHandleTypeKeyedMutexKmt = 8,
    cudaExternalSemaphoreHandleTypeTimelineSemaphoreFd = 9,
    cudaExternalSemaphoreHandleTypeTimelineSemaphoreWin32 = 10,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudaExternalSemaphoreHandleDesc {
    pub type_: cudaExternalSemaphoreHandleType,
    pub handle: cudaExternalSemaphoreHandleDesc__bindgen_ty_1,
    pub flags: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cudaExternalSemaphoreHandleDesc__bindgen_ty_1 {
    pub fd: ::std::os::raw::c_int,
    pub win32: cudaExternalSemaphoreHandleDesc__bindgen_ty_1__bindgen_ty_1,
    pub nvSciSyncObj: *const ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaExternalSemaphoreHandleDesc__bindgen_ty_1__bindgen_ty_1 {
    pub handle: *mut ::std::os::raw::c_void,
    pub name: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_cudaExternalSemaphoreHandleDesc__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<
        cudaExternalSemaphoreHandleDesc__bindgen_ty_1__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaExternalSemaphoreHandleDesc__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaExternalSemaphoreHandleDesc__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaExternalSemaphoreHandleDesc__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaExternalSemaphoreHandleDesc__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreHandleDesc__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreHandleDesc__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(name)
        )
    );
}
impl Default for cudaExternalSemaphoreHandleDesc__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_cudaExternalSemaphoreHandleDesc__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<cudaExternalSemaphoreHandleDesc__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaExternalSemaphoreHandleDesc__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaExternalSemaphoreHandleDesc__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaExternalSemaphoreHandleDesc__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaExternalSemaphoreHandleDesc__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreHandleDesc__bindgen_ty_1),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).win32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreHandleDesc__bindgen_ty_1),
            "::",
            stringify!(win32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nvSciSyncObj) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreHandleDesc__bindgen_ty_1),
            "::",
            stringify!(nvSciSyncObj)
        )
    );
}
impl Default for cudaExternalSemaphoreHandleDesc__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_cudaExternalSemaphoreHandleDesc() {
    const UNINIT: ::std::mem::MaybeUninit<cudaExternalSemaphoreHandleDesc> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaExternalSemaphoreHandleDesc>(),
        32usize,
        concat!("Size of: ", stringify!(cudaExternalSemaphoreHandleDesc))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaExternalSemaphoreHandleDesc>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaExternalSemaphoreHandleDesc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreHandleDesc),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreHandleDesc),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreHandleDesc),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cudaExternalSemaphoreHandleDesc {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudaExternalSemaphoreSignalParams_v1 {
    pub params: cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1,
    pub flags: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1 {
    pub fence: cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_1,
    pub nvSciSync: cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_2,
    pub keyedMutex: cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_1 {
    pub value: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<
        cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_2 {
    pub fence: *mut ::std::os::raw::c_void,
    pub reserved: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<
        cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_2,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fence) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(fence)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(reserved)
        )
    );
}
impl Default for cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_3 {
    pub key: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<
        cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_3,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(key)
        )
    );
}
#[test]
fn bindgen_test_layout_cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fence) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1),
            "::",
            stringify!(fence)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nvSciSync) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1),
            "::",
            stringify!(nvSciSync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keyedMutex) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1),
            "::",
            stringify!(keyedMutex)
        )
    );
}
impl Default for cudaExternalSemaphoreSignalParams_v1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_cudaExternalSemaphoreSignalParams_v1() {
    const UNINIT: ::std::mem::MaybeUninit<cudaExternalSemaphoreSignalParams_v1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaExternalSemaphoreSignalParams_v1>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(cudaExternalSemaphoreSignalParams_v1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaExternalSemaphoreSignalParams_v1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaExternalSemaphoreSignalParams_v1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).params) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreSignalParams_v1),
            "::",
            stringify!(params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreSignalParams_v1),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cudaExternalSemaphoreSignalParams_v1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudaExternalSemaphoreWaitParams_v1 {
    pub params: cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1,
    pub flags: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1 {
    pub fence: cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_1,
    pub nvSciSync: cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_2,
    pub keyedMutex: cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_1 {
    pub value: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<
        cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_2 {
    pub fence: *mut ::std::os::raw::c_void,
    pub reserved: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<
        cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_2,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fence) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(fence)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(reserved)
        )
    );
}
impl Default for cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_3 {
    pub key: ::std::os::raw::c_ulonglong,
    pub timeoutMs: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<
        cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_3,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_3>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeoutMs) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(timeoutMs)
        )
    );
}
#[test]
fn bindgen_test_layout_cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fence) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1),
            "::",
            stringify!(fence)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nvSciSync) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1),
            "::",
            stringify!(nvSciSync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keyedMutex) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1),
            "::",
            stringify!(keyedMutex)
        )
    );
}
impl Default for cudaExternalSemaphoreWaitParams_v1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_cudaExternalSemaphoreWaitParams_v1() {
    const UNINIT: ::std::mem::MaybeUninit<cudaExternalSemaphoreWaitParams_v1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaExternalSemaphoreWaitParams_v1>(),
        40usize,
        concat!("Size of: ", stringify!(cudaExternalSemaphoreWaitParams_v1))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaExternalSemaphoreWaitParams_v1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaExternalSemaphoreWaitParams_v1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).params) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreWaitParams_v1),
            "::",
            stringify!(params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreWaitParams_v1),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cudaExternalSemaphoreWaitParams_v1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudaExternalSemaphoreSignalParams {
    pub params: cudaExternalSemaphoreSignalParams__bindgen_ty_1,
    pub flags: ::std::os::raw::c_uint,
    pub reserved: [::std::os::raw::c_uint; 16usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudaExternalSemaphoreSignalParams__bindgen_ty_1 {
    pub fence: cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_1,
    pub nvSciSync: cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_2,
    pub keyedMutex: cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_3,
    pub reserved: [::std::os::raw::c_uint; 12usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_1 {
    pub value: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<
        cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_2 {
    pub fence: *mut ::std::os::raw::c_void,
    pub reserved: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<
        cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_2,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fence) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(fence)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(reserved)
        )
    );
}
impl Default for cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_3 {
    pub key: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<
        cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_3,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(key)
        )
    );
}
#[test]
fn bindgen_test_layout_cudaExternalSemaphoreSignalParams__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<cudaExternalSemaphoreSignalParams__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaExternalSemaphoreSignalParams__bindgen_ty_1>(),
        72usize,
        concat!(
            "Size of: ",
            stringify!(cudaExternalSemaphoreSignalParams__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaExternalSemaphoreSignalParams__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaExternalSemaphoreSignalParams__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fence) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreSignalParams__bindgen_ty_1),
            "::",
            stringify!(fence)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nvSciSync) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreSignalParams__bindgen_ty_1),
            "::",
            stringify!(nvSciSync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keyedMutex) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreSignalParams__bindgen_ty_1),
            "::",
            stringify!(keyedMutex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreSignalParams__bindgen_ty_1),
            "::",
            stringify!(reserved)
        )
    );
}
impl Default for cudaExternalSemaphoreSignalParams__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_cudaExternalSemaphoreSignalParams() {
    const UNINIT: ::std::mem::MaybeUninit<cudaExternalSemaphoreSignalParams> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaExternalSemaphoreSignalParams>(),
        144usize,
        concat!("Size of: ", stringify!(cudaExternalSemaphoreSignalParams))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaExternalSemaphoreSignalParams>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaExternalSemaphoreSignalParams)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).params) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreSignalParams),
            "::",
            stringify!(params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreSignalParams),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreSignalParams),
            "::",
            stringify!(reserved)
        )
    );
}
impl Default for cudaExternalSemaphoreSignalParams {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudaExternalSemaphoreWaitParams {
    pub params: cudaExternalSemaphoreWaitParams__bindgen_ty_1,
    pub flags: ::std::os::raw::c_uint,
    pub reserved: [::std::os::raw::c_uint; 16usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudaExternalSemaphoreWaitParams__bindgen_ty_1 {
    pub fence: cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_1,
    pub nvSciSync: cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_2,
    pub keyedMutex: cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_3,
    pub reserved: [::std::os::raw::c_uint; 10usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_1 {
    pub value: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<
        cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_2 {
    pub fence: *mut ::std::os::raw::c_void,
    pub reserved: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<
        cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_2,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fence) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(fence)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(reserved)
        )
    );
}
impl Default for cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_3 {
    pub key: ::std::os::raw::c_ulonglong,
    pub timeoutMs: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<
        cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_3,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_3>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeoutMs) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(timeoutMs)
        )
    );
}
#[test]
fn bindgen_test_layout_cudaExternalSemaphoreWaitParams__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<cudaExternalSemaphoreWaitParams__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaExternalSemaphoreWaitParams__bindgen_ty_1>(),
        72usize,
        concat!(
            "Size of: ",
            stringify!(cudaExternalSemaphoreWaitParams__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaExternalSemaphoreWaitParams__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaExternalSemaphoreWaitParams__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fence) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreWaitParams__bindgen_ty_1),
            "::",
            stringify!(fence)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nvSciSync) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreWaitParams__bindgen_ty_1),
            "::",
            stringify!(nvSciSync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keyedMutex) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreWaitParams__bindgen_ty_1),
            "::",
            stringify!(keyedMutex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreWaitParams__bindgen_ty_1),
            "::",
            stringify!(reserved)
        )
    );
}
impl Default for cudaExternalSemaphoreWaitParams__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_cudaExternalSemaphoreWaitParams() {
    const UNINIT: ::std::mem::MaybeUninit<cudaExternalSemaphoreWaitParams> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaExternalSemaphoreWaitParams>(),
        144usize,
        concat!("Size of: ", stringify!(cudaExternalSemaphoreWaitParams))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaExternalSemaphoreWaitParams>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaExternalSemaphoreWaitParams))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).params) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreWaitParams),
            "::",
            stringify!(params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreWaitParams),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreWaitParams),
            "::",
            stringify!(reserved)
        )
    );
}
impl Default for cudaExternalSemaphoreWaitParams {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub use self::cudaError as cudaError_t;
pub type cudaStream_t = *mut CUstream_st;
pub type cudaEvent_t = *mut CUevent_st;
pub type cudaGraphicsResource_t = *mut cudaGraphicsResource;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUexternalMemory_st {
    _unused: [u8; 0],
}
pub type cudaExternalMemory_t = *mut CUexternalMemory_st;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUexternalSemaphore_st {
    _unused: [u8; 0],
}
pub type cudaExternalSemaphore_t = *mut CUexternalSemaphore_st;
pub type cudaGraph_t = *mut CUgraph_st;
pub type cudaGraphNode_t = *mut CUgraphNode_st;
pub type cudaUserObject_t = *mut CUuserObject_st;
pub type cudaFunction_t = *mut CUfunc_st;
pub type cudaMemPool_t = *mut CUmemPoolHandle_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaLaunchParams {
    pub func: *mut ::std::os::raw::c_void,
    pub gridDim: dim3,
    pub blockDim: dim3,
    pub args: *mut *mut ::std::os::raw::c_void,
    pub sharedMem: usize,
    pub stream: cudaStream_t,
}
#[test]
fn bindgen_test_layout_cudaLaunchParams() {
    const UNINIT: ::std::mem::MaybeUninit<cudaLaunchParams> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaLaunchParams>(),
        56usize,
        concat!("Size of: ", stringify!(cudaLaunchParams))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaLaunchParams>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaLaunchParams))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchParams),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gridDim) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchParams),
            "::",
            stringify!(gridDim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blockDim) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchParams),
            "::",
            stringify!(blockDim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).args) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchParams),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sharedMem) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchParams),
            "::",
            stringify!(sharedMem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchParams),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for cudaLaunchParams {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaKernelNodeParams {
    pub func: *mut ::std::os::raw::c_void,
    pub gridDim: dim3,
    pub blockDim: dim3,
    pub sharedMemBytes: ::std::os::raw::c_uint,
    pub kernelParams: *mut *mut ::std::os::raw::c_void,
    pub extra: *mut *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_cudaKernelNodeParams() {
    const UNINIT: ::std::mem::MaybeUninit<cudaKernelNodeParams> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaKernelNodeParams>(),
        56usize,
        concat!("Size of: ", stringify!(cudaKernelNodeParams))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaKernelNodeParams>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaKernelNodeParams))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaKernelNodeParams),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gridDim) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaKernelNodeParams),
            "::",
            stringify!(gridDim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blockDim) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaKernelNodeParams),
            "::",
            stringify!(blockDim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sharedMemBytes) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaKernelNodeParams),
            "::",
            stringify!(sharedMemBytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kernelParams) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaKernelNodeParams),
            "::",
            stringify!(kernelParams)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extra) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaKernelNodeParams),
            "::",
            stringify!(extra)
        )
    );
}
impl Default for cudaKernelNodeParams {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaExternalSemaphoreSignalNodeParams {
    pub extSemArray: *mut cudaExternalSemaphore_t,
    pub paramsArray: *const cudaExternalSemaphoreSignalParams,
    pub numExtSems: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cudaExternalSemaphoreSignalNodeParams() {
    const UNINIT: ::std::mem::MaybeUninit<cudaExternalSemaphoreSignalNodeParams> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaExternalSemaphoreSignalNodeParams>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cudaExternalSemaphoreSignalNodeParams)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaExternalSemaphoreSignalNodeParams>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaExternalSemaphoreSignalNodeParams)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extSemArray) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreSignalNodeParams),
            "::",
            stringify!(extSemArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paramsArray) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreSignalNodeParams),
            "::",
            stringify!(paramsArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numExtSems) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreSignalNodeParams),
            "::",
            stringify!(numExtSems)
        )
    );
}
impl Default for cudaExternalSemaphoreSignalNodeParams {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaExternalSemaphoreWaitNodeParams {
    pub extSemArray: *mut cudaExternalSemaphore_t,
    pub paramsArray: *const cudaExternalSemaphoreWaitParams,
    pub numExtSems: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cudaExternalSemaphoreWaitNodeParams() {
    const UNINIT: ::std::mem::MaybeUninit<cudaExternalSemaphoreWaitNodeParams> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaExternalSemaphoreWaitNodeParams>(),
        24usize,
        concat!("Size of: ", stringify!(cudaExternalSemaphoreWaitNodeParams))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaExternalSemaphoreWaitNodeParams>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaExternalSemaphoreWaitNodeParams)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extSemArray) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreWaitNodeParams),
            "::",
            stringify!(extSemArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paramsArray) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreWaitNodeParams),
            "::",
            stringify!(paramsArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numExtSems) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalSemaphoreWaitNodeParams),
            "::",
            stringify!(numExtSems)
        )
    );
}
impl Default for cudaExternalSemaphoreWaitNodeParams {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaGraphNodeType {
    cudaGraphNodeTypeKernel = 0,
    cudaGraphNodeTypeMemcpy = 1,
    cudaGraphNodeTypeMemset = 2,
    cudaGraphNodeTypeHost = 3,
    cudaGraphNodeTypeGraph = 4,
    cudaGraphNodeTypeEmpty = 5,
    cudaGraphNodeTypeWaitEvent = 6,
    cudaGraphNodeTypeEventRecord = 7,
    cudaGraphNodeTypeExtSemaphoreSignal = 8,
    cudaGraphNodeTypeExtSemaphoreWait = 9,
    cudaGraphNodeTypeMemAlloc = 10,
    cudaGraphNodeTypeMemFree = 11,
    cudaGraphNodeTypeCount = 12,
}
pub type cudaGraphExec_t = *mut CUgraphExec_st;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaGraphExecUpdateResult {
    cudaGraphExecUpdateSuccess = 0,
    cudaGraphExecUpdateError = 1,
    cudaGraphExecUpdateErrorTopologyChanged = 2,
    cudaGraphExecUpdateErrorNodeTypeChanged = 3,
    cudaGraphExecUpdateErrorFunctionChanged = 4,
    cudaGraphExecUpdateErrorParametersChanged = 5,
    cudaGraphExecUpdateErrorNotSupported = 6,
    cudaGraphExecUpdateErrorUnsupportedFunctionChange = 7,
    cudaGraphExecUpdateErrorAttributesChanged = 8,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaGraphInstantiateResult {
    cudaGraphInstantiateSuccess = 0,
    cudaGraphInstantiateError = 1,
    cudaGraphInstantiateInvalidStructure = 2,
    cudaGraphInstantiateNodeOperationNotSupported = 3,
    cudaGraphInstantiateMultipleDevicesNotSupported = 4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphInstantiateParams_st {
    pub flags: ::std::os::raw::c_ulonglong,
    pub uploadStream: cudaStream_t,
    pub errNode_out: cudaGraphNode_t,
    pub result_out: cudaGraphInstantiateResult,
}
#[test]
fn bindgen_test_layout_cudaGraphInstantiateParams_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphInstantiateParams_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphInstantiateParams_st>(),
        32usize,
        concat!("Size of: ", stringify!(cudaGraphInstantiateParams_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphInstantiateParams_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaGraphInstantiateParams_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphInstantiateParams_st),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uploadStream) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphInstantiateParams_st),
            "::",
            stringify!(uploadStream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).errNode_out) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphInstantiateParams_st),
            "::",
            stringify!(errNode_out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result_out) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphInstantiateParams_st),
            "::",
            stringify!(result_out)
        )
    );
}
impl Default for cudaGraphInstantiateParams_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphInstantiateParams = cudaGraphInstantiateParams_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphExecUpdateResultInfo_st {
    pub result: cudaGraphExecUpdateResult,
    pub errorNode: cudaGraphNode_t,
    pub errorFromNode: cudaGraphNode_t,
}
#[test]
fn bindgen_test_layout_cudaGraphExecUpdateResultInfo_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphExecUpdateResultInfo_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphExecUpdateResultInfo_st>(),
        24usize,
        concat!("Size of: ", stringify!(cudaGraphExecUpdateResultInfo_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphExecUpdateResultInfo_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphExecUpdateResultInfo_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphExecUpdateResultInfo_st),
            "::",
            stringify!(result)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).errorNode) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphExecUpdateResultInfo_st),
            "::",
            stringify!(errorNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).errorFromNode) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphExecUpdateResultInfo_st),
            "::",
            stringify!(errorFromNode)
        )
    );
}
impl Default for cudaGraphExecUpdateResultInfo_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphExecUpdateResultInfo = cudaGraphExecUpdateResultInfo_st;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaDriverEntryPointQueryResult {
    cudaDriverEntryPointSuccess = 0,
    cudaDriverEntryPointSymbolNotFound = 1,
    cudaDriverEntryPointVersionNotSufficent = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaLaunchMemSyncDomain {
    cudaLaunchMemSyncDomainDefault = 0,
    cudaLaunchMemSyncDomainRemote = 1,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaLaunchMemSyncDomainMap_st {
    pub default_: ::std::os::raw::c_uchar,
    pub remote: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_cudaLaunchMemSyncDomainMap_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaLaunchMemSyncDomainMap_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaLaunchMemSyncDomainMap_st>(),
        2usize,
        concat!("Size of: ", stringify!(cudaLaunchMemSyncDomainMap_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaLaunchMemSyncDomainMap_st>(),
        1usize,
        concat!("Alignment of ", stringify!(cudaLaunchMemSyncDomainMap_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).default_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchMemSyncDomainMap_st),
            "::",
            stringify!(default_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).remote) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchMemSyncDomainMap_st),
            "::",
            stringify!(remote)
        )
    );
}
pub type cudaLaunchMemSyncDomainMap = cudaLaunchMemSyncDomainMap_st;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaLaunchAttributeID {
    cudaLaunchAttributeIgnore = 0,
    cudaLaunchAttributeAccessPolicyWindow = 1,
    cudaLaunchAttributeCooperative = 2,
    cudaLaunchAttributeSynchronizationPolicy = 3,
    cudaLaunchAttributeClusterDimension = 4,
    cudaLaunchAttributeClusterSchedulingPolicyPreference = 5,
    cudaLaunchAttributeProgrammaticStreamSerialization = 6,
    cudaLaunchAttributeProgrammaticEvent = 7,
    cudaLaunchAttributePriority = 8,
    cudaLaunchAttributeMemSyncDomainMap = 9,
    cudaLaunchAttributeMemSyncDomain = 10,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cudaLaunchAttributeValue {
    pub pad: [::std::os::raw::c_char; 64usize],
    pub accessPolicyWindow: cudaAccessPolicyWindow,
    pub cooperative: ::std::os::raw::c_int,
    pub syncPolicy: cudaSynchronizationPolicy,
    pub clusterDim: cudaLaunchAttributeValue__bindgen_ty_1,
    pub clusterSchedulingPolicyPreference: cudaClusterSchedulingPolicy,
    pub programmaticStreamSerializationAllowed: ::std::os::raw::c_int,
    pub programmaticEvent: cudaLaunchAttributeValue__bindgen_ty_2,
    pub priority: ::std::os::raw::c_int,
    pub memSyncDomainMap: cudaLaunchMemSyncDomainMap,
    pub memSyncDomain: cudaLaunchMemSyncDomain,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaLaunchAttributeValue__bindgen_ty_1 {
    pub x: ::std::os::raw::c_uint,
    pub y: ::std::os::raw::c_uint,
    pub z: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cudaLaunchAttributeValue__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<cudaLaunchAttributeValue__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaLaunchAttributeValue__bindgen_ty_1>(),
        12usize,
        concat!(
            "Size of: ",
            stringify!(cudaLaunchAttributeValue__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaLaunchAttributeValue__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(cudaLaunchAttributeValue__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchAttributeValue__bindgen_ty_1),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchAttributeValue__bindgen_ty_1),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchAttributeValue__bindgen_ty_1),
            "::",
            stringify!(z)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaLaunchAttributeValue__bindgen_ty_2 {
    pub event: cudaEvent_t,
    pub flags: ::std::os::raw::c_int,
    pub triggerAtBlockStart: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cudaLaunchAttributeValue__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<cudaLaunchAttributeValue__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaLaunchAttributeValue__bindgen_ty_2>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaLaunchAttributeValue__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaLaunchAttributeValue__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaLaunchAttributeValue__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchAttributeValue__bindgen_ty_2),
            "::",
            stringify!(event)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchAttributeValue__bindgen_ty_2),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).triggerAtBlockStart) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchAttributeValue__bindgen_ty_2),
            "::",
            stringify!(triggerAtBlockStart)
        )
    );
}
impl Default for cudaLaunchAttributeValue__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_cudaLaunchAttributeValue() {
    const UNINIT: ::std::mem::MaybeUninit<cudaLaunchAttributeValue> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaLaunchAttributeValue>(),
        64usize,
        concat!("Size of: ", stringify!(cudaLaunchAttributeValue))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaLaunchAttributeValue>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaLaunchAttributeValue))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchAttributeValue),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).accessPolicyWindow) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchAttributeValue),
            "::",
            stringify!(accessPolicyWindow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cooperative) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchAttributeValue),
            "::",
            stringify!(cooperative)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).syncPolicy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchAttributeValue),
            "::",
            stringify!(syncPolicy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clusterDim) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchAttributeValue),
            "::",
            stringify!(clusterDim)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).clusterSchedulingPolicyPreference) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchAttributeValue),
            "::",
            stringify!(clusterSchedulingPolicyPreference)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).programmaticStreamSerializationAllowed) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchAttributeValue),
            "::",
            stringify!(programmaticStreamSerializationAllowed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).programmaticEvent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchAttributeValue),
            "::",
            stringify!(programmaticEvent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priority) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchAttributeValue),
            "::",
            stringify!(priority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memSyncDomainMap) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchAttributeValue),
            "::",
            stringify!(memSyncDomainMap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memSyncDomain) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchAttributeValue),
            "::",
            stringify!(memSyncDomain)
        )
    );
}
impl Default for cudaLaunchAttributeValue {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cudaLaunchAttribute_st {
    pub id: cudaLaunchAttributeID,
    pub pad: [::std::os::raw::c_char; 4usize],
    pub val: cudaLaunchAttributeValue,
}
#[test]
fn bindgen_test_layout_cudaLaunchAttribute_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaLaunchAttribute_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaLaunchAttribute_st>(),
        72usize,
        concat!("Size of: ", stringify!(cudaLaunchAttribute_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaLaunchAttribute_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaLaunchAttribute_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchAttribute_st),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchAttribute_st),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchAttribute_st),
            "::",
            stringify!(val)
        )
    );
}
impl Default for cudaLaunchAttribute_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaLaunchAttribute = cudaLaunchAttribute_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaLaunchConfig_st {
    pub gridDim: dim3,
    pub blockDim: dim3,
    pub dynamicSmemBytes: usize,
    pub stream: cudaStream_t,
    pub attrs: *mut cudaLaunchAttribute,
    pub numAttrs: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cudaLaunchConfig_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaLaunchConfig_st> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaLaunchConfig_st>(),
        56usize,
        concat!("Size of: ", stringify!(cudaLaunchConfig_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaLaunchConfig_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaLaunchConfig_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gridDim) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchConfig_st),
            "::",
            stringify!(gridDim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blockDim) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchConfig_st),
            "::",
            stringify!(blockDim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dynamicSmemBytes) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchConfig_st),
            "::",
            stringify!(dynamicSmemBytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchConfig_st),
            "::",
            stringify!(stream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attrs) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchConfig_st),
            "::",
            stringify!(attrs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numAttrs) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchConfig_st),
            "::",
            stringify!(numAttrs)
        )
    );
}
impl Default for cudaLaunchConfig_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaLaunchConfig_t = cudaLaunchConfig_st;
pub type cudaSurfaceObject_t = ::std::os::raw::c_ulonglong;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaTextureAddressMode {
    cudaAddressModeWrap = 0,
    cudaAddressModeClamp = 1,
    cudaAddressModeMirror = 2,
    cudaAddressModeBorder = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaTextureFilterMode {
    cudaFilterModePoint = 0,
    cudaFilterModeLinear = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaTextureReadMode {
    cudaReadModeElementType = 0,
    cudaReadModeNormalizedFloat = 1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, PartialEq)]
pub struct cudaTextureDesc {
    pub addressMode: [cudaTextureAddressMode; 3usize],
    pub filterMode: cudaTextureFilterMode,
    pub readMode: cudaTextureReadMode,
    pub sRGB: ::std::os::raw::c_int,
    pub borderColor: [f32; 4usize],
    pub normalizedCoords: ::std::os::raw::c_int,
    pub maxAnisotropy: ::std::os::raw::c_uint,
    pub mipmapFilterMode: cudaTextureFilterMode,
    pub mipmapLevelBias: f32,
    pub minMipmapLevelClamp: f32,
    pub maxMipmapLevelClamp: f32,
    pub disableTrilinearOptimization: ::std::os::raw::c_int,
    pub seamlessCubemap: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cudaTextureDesc() {
    const UNINIT: ::std::mem::MaybeUninit<cudaTextureDesc> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaTextureDesc>(),
        72usize,
        concat!("Size of: ", stringify!(cudaTextureDesc))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaTextureDesc>(),
        4usize,
        concat!("Alignment of ", stringify!(cudaTextureDesc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addressMode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaTextureDesc),
            "::",
            stringify!(addressMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filterMode) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaTextureDesc),
            "::",
            stringify!(filterMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).readMode) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaTextureDesc),
            "::",
            stringify!(readMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sRGB) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaTextureDesc),
            "::",
            stringify!(sRGB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).borderColor) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaTextureDesc),
            "::",
            stringify!(borderColor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).normalizedCoords) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaTextureDesc),
            "::",
            stringify!(normalizedCoords)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxAnisotropy) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaTextureDesc),
            "::",
            stringify!(maxAnisotropy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mipmapFilterMode) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaTextureDesc),
            "::",
            stringify!(mipmapFilterMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mipmapLevelBias) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaTextureDesc),
            "::",
            stringify!(mipmapLevelBias)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minMipmapLevelClamp) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaTextureDesc),
            "::",
            stringify!(minMipmapLevelClamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxMipmapLevelClamp) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaTextureDesc),
            "::",
            stringify!(maxMipmapLevelClamp)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).disableTrilinearOptimization) as usize - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaTextureDesc),
            "::",
            stringify!(disableTrilinearOptimization)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seamlessCubemap) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaTextureDesc),
            "::",
            stringify!(seamlessCubemap)
        )
    );
}
impl Default for cudaTextureDesc {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaTextureObject_t = ::std::os::raw::c_ulonglong;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_ApiCallbackSite {
    CUPTI_API_ENTER = 0,
    CUPTI_API_EXIT = 1,
    CUPTI_API_CBSITE_FORCE_INT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_CallbackDomain {
    CUPTI_CB_DOMAIN_INVALID = 0,
    CUPTI_CB_DOMAIN_DRIVER_API = 1,
    CUPTI_CB_DOMAIN_RUNTIME_API = 2,
    CUPTI_CB_DOMAIN_RESOURCE = 3,
    CUPTI_CB_DOMAIN_SYNCHRONIZE = 4,
    CUPTI_CB_DOMAIN_NVTX = 5,
    CUPTI_CB_DOMAIN_SIZE = 6,
    CUPTI_CB_DOMAIN_FORCE_INT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_CallbackIdResource {
    CUPTI_CBID_RESOURCE_INVALID = 0,
    CUPTI_CBID_RESOURCE_CONTEXT_CREATED = 1,
    CUPTI_CBID_RESOURCE_CONTEXT_DESTROY_STARTING = 2,
    CUPTI_CBID_RESOURCE_STREAM_CREATED = 3,
    CUPTI_CBID_RESOURCE_STREAM_DESTROY_STARTING = 4,
    CUPTI_CBID_RESOURCE_CU_INIT_FINISHED = 5,
    CUPTI_CBID_RESOURCE_MODULE_LOADED = 6,
    CUPTI_CBID_RESOURCE_MODULE_UNLOAD_STARTING = 7,
    CUPTI_CBID_RESOURCE_MODULE_PROFILED = 8,
    CUPTI_CBID_RESOURCE_GRAPH_CREATED = 9,
    CUPTI_CBID_RESOURCE_GRAPH_DESTROY_STARTING = 10,
    CUPTI_CBID_RESOURCE_GRAPH_CLONED = 11,
    CUPTI_CBID_RESOURCE_GRAPHNODE_CREATE_STARTING = 12,
    CUPTI_CBID_RESOURCE_GRAPHNODE_CREATED = 13,
    CUPTI_CBID_RESOURCE_GRAPHNODE_DESTROY_STARTING = 14,
    CUPTI_CBID_RESOURCE_GRAPHNODE_DEPENDENCY_CREATED = 15,
    CUPTI_CBID_RESOURCE_GRAPHNODE_DEPENDENCY_DESTROY_STARTING = 16,
    CUPTI_CBID_RESOURCE_GRAPHEXEC_CREATE_STARTING = 17,
    CUPTI_CBID_RESOURCE_GRAPHEXEC_CREATED = 18,
    CUPTI_CBID_RESOURCE_GRAPHEXEC_DESTROY_STARTING = 19,
    CUPTI_CBID_RESOURCE_GRAPHNODE_CLONED = 20,
    CUPTI_CBID_RESOURCE_SIZE = 21,
    CUPTI_CBID_RESOURCE_FORCE_INT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_CallbackIdSync {
    CUPTI_CBID_SYNCHRONIZE_INVALID = 0,
    CUPTI_CBID_SYNCHRONIZE_STREAM_SYNCHRONIZED = 1,
    CUPTI_CBID_SYNCHRONIZE_CONTEXT_SYNCHRONIZED = 2,
    CUPTI_CBID_SYNCHRONIZE_SIZE = 3,
    CUPTI_CBID_SYNCHRONIZE_FORCE_INT = 2147483647,
}
#[repr(C)]
pub struct CUpti_CallbackData {
    pub callbackSite: CUpti_ApiCallbackSite,
    pub functionName: *const ::std::os::raw::c_char,
    pub functionParams: *const ::std::os::raw::c_void,
    pub functionReturnValue: *mut ::std::os::raw::c_void,
    pub symbolName: *const ::std::os::raw::c_char,
    pub context: CUcontext,
    pub contextUid: u32,
    pub correlationData: *mut u64,
    pub correlationId: u32,
}
#[test]
fn bindgen_test_layout_CUpti_CallbackData() {
    const UNINIT: ::std::mem::MaybeUninit<CUpti_CallbackData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CUpti_CallbackData>(),
        72usize,
        concat!("Size of: ", stringify!(CUpti_CallbackData))
    );
    assert_eq!(
        ::std::mem::align_of::<CUpti_CallbackData>(),
        8usize,
        concat!("Alignment of ", stringify!(CUpti_CallbackData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).callbackSite) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_CallbackData),
            "::",
            stringify!(callbackSite)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).functionName) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_CallbackData),
            "::",
            stringify!(functionName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).functionParams) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_CallbackData),
            "::",
            stringify!(functionParams)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).functionReturnValue) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_CallbackData),
            "::",
            stringify!(functionReturnValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).symbolName) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_CallbackData),
            "::",
            stringify!(symbolName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_CallbackData),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).contextUid) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_CallbackData),
            "::",
            stringify!(contextUid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).correlationData) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_CallbackData),
            "::",
            stringify!(correlationData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).correlationId) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_CallbackData),
            "::",
            stringify!(correlationId)
        )
    );
}
impl Default for CUpti_CallbackData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct CUpti_ResourceData {
    pub context: CUcontext,
    pub resourceHandle: CUpti_ResourceData__bindgen_ty_1,
    pub resourceDescriptor: *mut ::std::os::raw::c_void,
}
#[repr(C)]
pub struct CUpti_ResourceData__bindgen_ty_1 {
    pub stream: __BindgenUnionField<CUstream>,
    pub bindgen_union_field: u64,
}
#[test]
fn bindgen_test_layout_CUpti_ResourceData__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<CUpti_ResourceData__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CUpti_ResourceData__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(CUpti_ResourceData__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<CUpti_ResourceData__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CUpti_ResourceData__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_ResourceData__bindgen_ty_1),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for CUpti_ResourceData__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_CUpti_ResourceData() {
    const UNINIT: ::std::mem::MaybeUninit<CUpti_ResourceData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CUpti_ResourceData>(),
        24usize,
        concat!("Size of: ", stringify!(CUpti_ResourceData))
    );
    assert_eq!(
        ::std::mem::align_of::<CUpti_ResourceData>(),
        8usize,
        concat!("Alignment of ", stringify!(CUpti_ResourceData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_ResourceData),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resourceHandle) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_ResourceData),
            "::",
            stringify!(resourceHandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resourceDescriptor) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_ResourceData),
            "::",
            stringify!(resourceDescriptor)
        )
    );
}
impl Default for CUpti_ResourceData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct CUpti_ModuleResourceData {
    pub moduleId: u32,
    pub cubinSize: usize,
    pub pCubin: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_CUpti_ModuleResourceData() {
    const UNINIT: ::std::mem::MaybeUninit<CUpti_ModuleResourceData> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CUpti_ModuleResourceData>(),
        24usize,
        concat!("Size of: ", stringify!(CUpti_ModuleResourceData))
    );
    assert_eq!(
        ::std::mem::align_of::<CUpti_ModuleResourceData>(),
        8usize,
        concat!("Alignment of ", stringify!(CUpti_ModuleResourceData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).moduleId) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_ModuleResourceData),
            "::",
            stringify!(moduleId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cubinSize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_ModuleResourceData),
            "::",
            stringify!(cubinSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCubin) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_ModuleResourceData),
            "::",
            stringify!(pCubin)
        )
    );
}
impl Default for CUpti_ModuleResourceData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct CUpti_GraphData {
    pub graph: CUgraph,
    pub originalGraph: CUgraph,
    pub node: CUgraphNode,
    pub originalNode: CUgraphNode,
    pub nodeType: CUgraphNodeType,
    pub dependency: CUgraphNode,
    pub graphExec: CUgraphExec,
}
#[test]
fn bindgen_test_layout_CUpti_GraphData() {
    const UNINIT: ::std::mem::MaybeUninit<CUpti_GraphData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CUpti_GraphData>(),
        56usize,
        concat!("Size of: ", stringify!(CUpti_GraphData))
    );
    assert_eq!(
        ::std::mem::align_of::<CUpti_GraphData>(),
        8usize,
        concat!("Alignment of ", stringify!(CUpti_GraphData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graph) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_GraphData),
            "::",
            stringify!(graph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).originalGraph) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_GraphData),
            "::",
            stringify!(originalGraph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_GraphData),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).originalNode) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_GraphData),
            "::",
            stringify!(originalNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeType) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_GraphData),
            "::",
            stringify!(nodeType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dependency) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_GraphData),
            "::",
            stringify!(dependency)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graphExec) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_GraphData),
            "::",
            stringify!(graphExec)
        )
    );
}
impl Default for CUpti_GraphData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct CUpti_SynchronizeData {
    pub context: CUcontext,
    pub stream: CUstream,
}
#[test]
fn bindgen_test_layout_CUpti_SynchronizeData() {
    const UNINIT: ::std::mem::MaybeUninit<CUpti_SynchronizeData> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CUpti_SynchronizeData>(),
        16usize,
        concat!("Size of: ", stringify!(CUpti_SynchronizeData))
    );
    assert_eq!(
        ::std::mem::align_of::<CUpti_SynchronizeData>(),
        8usize,
        concat!("Alignment of ", stringify!(CUpti_SynchronizeData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_SynchronizeData),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_SynchronizeData),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for CUpti_SynchronizeData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct CUpti_NvtxData {
    pub functionName: *const ::std::os::raw::c_char,
    pub functionParams: *const ::std::os::raw::c_void,
    pub functionReturnValue: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_CUpti_NvtxData() {
    const UNINIT: ::std::mem::MaybeUninit<CUpti_NvtxData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CUpti_NvtxData>(),
        24usize,
        concat!("Size of: ", stringify!(CUpti_NvtxData))
    );
    assert_eq!(
        ::std::mem::align_of::<CUpti_NvtxData>(),
        8usize,
        concat!("Alignment of ", stringify!(CUpti_NvtxData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).functionName) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_NvtxData),
            "::",
            stringify!(functionName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).functionParams) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_NvtxData),
            "::",
            stringify!(functionParams)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).functionReturnValue) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_NvtxData),
            "::",
            stringify!(functionReturnValue)
        )
    );
}
impl Default for CUpti_NvtxData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type CUpti_CallbackId = u32;
pub type CUpti_CallbackFunc = ::std::option::Option<
    unsafe extern "C" fn(
        userdata: *mut ::std::os::raw::c_void,
        domain: CUpti_CallbackDomain,
        cbid: CUpti_CallbackId,
        cbdata: *const ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CUpti_Subscriber_st {
    _unused: [u8; 0],
}
pub type CUpti_SubscriberHandle = *mut CUpti_Subscriber_st;
pub type CUpti_DomainTable = *mut CUpti_CallbackDomain;
extern "C" {
    pub fn cuptiSupportedDomains(
        domainCount: *mut usize,
        domainTable: *mut CUpti_DomainTable,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiSubscribe(
        subscriber: *mut CUpti_SubscriberHandle,
        callback: CUpti_CallbackFunc,
        userdata: *mut ::std::os::raw::c_void,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiUnsubscribe(subscriber: CUpti_SubscriberHandle) -> CUptiResult;
}
extern "C" {
    pub fn cuptiGetCallbackState(
        enable: *mut u32,
        subscriber: CUpti_SubscriberHandle,
        domain: CUpti_CallbackDomain,
        cbid: CUpti_CallbackId,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEnableCallback(
        enable: u32,
        subscriber: CUpti_SubscriberHandle,
        domain: CUpti_CallbackDomain,
        cbid: CUpti_CallbackId,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEnableDomain(
        enable: u32,
        subscriber: CUpti_SubscriberHandle,
        domain: CUpti_CallbackDomain,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEnableAllDomains(enable: u32, subscriber: CUpti_SubscriberHandle) -> CUptiResult;
}
extern "C" {
    pub fn cuptiGetCallbackName(
        domain: CUpti_CallbackDomain,
        cbid: u32,
        name: *mut *const ::std::os::raw::c_char,
    ) -> CUptiResult;
}
pub type CUpti_EventID = u32;
pub type CUpti_EventDomainID = u32;
pub type CUpti_EventGroup = *mut ::std::os::raw::c_void;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_DeviceAttributeDeviceClass {
    CUPTI_DEVICE_ATTR_DEVICE_CLASS_TESLA = 0,
    CUPTI_DEVICE_ATTR_DEVICE_CLASS_QUADRO = 1,
    CUPTI_DEVICE_ATTR_DEVICE_CLASS_GEFORCE = 2,
    CUPTI_DEVICE_ATTR_DEVICE_CLASS_TEGRA = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_DeviceAttribute {
    CUPTI_DEVICE_ATTR_MAX_EVENT_ID = 1,
    CUPTI_DEVICE_ATTR_MAX_EVENT_DOMAIN_ID = 2,
    CUPTI_DEVICE_ATTR_GLOBAL_MEMORY_BANDWIDTH = 3,
    CUPTI_DEVICE_ATTR_INSTRUCTION_PER_CYCLE = 4,
    CUPTI_DEVICE_ATTR_INSTRUCTION_THROUGHPUT_SINGLE_PRECISION = 5,
    CUPTI_DEVICE_ATTR_MAX_FRAME_BUFFERS = 6,
    CUPTI_DEVICE_ATTR_PCIE_LINK_RATE = 7,
    CUPTI_DEVICE_ATTR_PCIE_LINK_WIDTH = 8,
    CUPTI_DEVICE_ATTR_PCIE_GEN = 9,
    CUPTI_DEVICE_ATTR_DEVICE_CLASS = 10,
    CUPTI_DEVICE_ATTR_FLOP_SP_PER_CYCLE = 11,
    CUPTI_DEVICE_ATTR_FLOP_DP_PER_CYCLE = 12,
    CUPTI_DEVICE_ATTR_MAX_L2_UNITS = 13,
    CUPTI_DEVICE_ATTR_MAX_SHARED_MEMORY_CACHE_CONFIG_PREFER_SHARED = 14,
    CUPTI_DEVICE_ATTR_MAX_SHARED_MEMORY_CACHE_CONFIG_PREFER_L1 = 15,
    CUPTI_DEVICE_ATTR_MAX_SHARED_MEMORY_CACHE_CONFIG_PREFER_EQUAL = 16,
    CUPTI_DEVICE_ATTR_FLOP_HP_PER_CYCLE = 17,
    CUPTI_DEVICE_ATTR_NVLINK_PRESENT = 18,
    CUPTI_DEVICE_ATTR_GPU_CPU_NVLINK_BW = 19,
    CUPTI_DEVICE_ATTR_NVSWITCH_PRESENT = 20,
    CUPTI_DEVICE_ATTR_FORCE_INT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_EventDomainAttribute {
    CUPTI_EVENT_DOMAIN_ATTR_NAME = 0,
    CUPTI_EVENT_DOMAIN_ATTR_INSTANCE_COUNT = 1,
    CUPTI_EVENT_DOMAIN_ATTR_TOTAL_INSTANCE_COUNT = 3,
    CUPTI_EVENT_DOMAIN_ATTR_COLLECTION_METHOD = 4,
    CUPTI_EVENT_DOMAIN_ATTR_FORCE_INT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_EventCollectionMethod {
    CUPTI_EVENT_COLLECTION_METHOD_PM = 0,
    CUPTI_EVENT_COLLECTION_METHOD_SM = 1,
    CUPTI_EVENT_COLLECTION_METHOD_INSTRUMENTED = 2,
    CUPTI_EVENT_COLLECTION_METHOD_NVLINK_TC = 3,
    CUPTI_EVENT_COLLECTION_METHOD_FORCE_INT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_EventGroupAttribute {
    CUPTI_EVENT_GROUP_ATTR_EVENT_DOMAIN_ID = 0,
    CUPTI_EVENT_GROUP_ATTR_PROFILE_ALL_DOMAIN_INSTANCES = 1,
    CUPTI_EVENT_GROUP_ATTR_USER_DATA = 2,
    CUPTI_EVENT_GROUP_ATTR_NUM_EVENTS = 3,
    CUPTI_EVENT_GROUP_ATTR_EVENTS = 4,
    CUPTI_EVENT_GROUP_ATTR_INSTANCE_COUNT = 5,
    CUPTI_EVENT_GROUP_ATTR_PROFILING_SCOPE = 6,
    CUPTI_EVENT_GROUP_ATTR_FORCE_INT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_EventProfilingScope {
    CUPTI_EVENT_PROFILING_SCOPE_CONTEXT = 0,
    CUPTI_EVENT_PROFILING_SCOPE_DEVICE = 1,
    CUPTI_EVENT_PROFILING_SCOPE_BOTH = 2,
    CUPTI_EVENT_PROFILING_SCOPE_FORCE_INT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_EventAttribute {
    CUPTI_EVENT_ATTR_NAME = 0,
    CUPTI_EVENT_ATTR_SHORT_DESCRIPTION = 1,
    CUPTI_EVENT_ATTR_LONG_DESCRIPTION = 2,
    CUPTI_EVENT_ATTR_CATEGORY = 3,
    CUPTI_EVENT_ATTR_PROFILING_SCOPE = 5,
    CUPTI_EVENT_ATTR_FORCE_INT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_EventCollectionMode {
    CUPTI_EVENT_COLLECTION_MODE_CONTINUOUS = 0,
    CUPTI_EVENT_COLLECTION_MODE_KERNEL = 1,
    CUPTI_EVENT_COLLECTION_MODE_FORCE_INT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_EventCategory {
    CUPTI_EVENT_CATEGORY_INSTRUCTION = 0,
    CUPTI_EVENT_CATEGORY_MEMORY = 1,
    CUPTI_EVENT_CATEGORY_CACHE = 2,
    CUPTI_EVENT_CATEGORY_PROFILE_TRIGGER = 3,
    CUPTI_EVENT_CATEGORY_SYSTEM = 4,
    CUPTI_EVENT_CATEGORY_FORCE_INT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_ReadEventFlags {
    CUPTI_EVENT_READ_FLAG_NONE = 0,
    CUPTI_EVENT_READ_FLAG_FORCE_INT = 2147483647,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct CUpti_EventGroupSet {
    pub numEventGroups: u32,
    pub eventGroups: *mut CUpti_EventGroup,
}
#[test]
fn bindgen_test_layout_CUpti_EventGroupSet() {
    const UNINIT: ::std::mem::MaybeUninit<CUpti_EventGroupSet> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CUpti_EventGroupSet>(),
        16usize,
        concat!("Size of: ", stringify!(CUpti_EventGroupSet))
    );
    assert_eq!(
        ::std::mem::align_of::<CUpti_EventGroupSet>(),
        8usize,
        concat!("Alignment of ", stringify!(CUpti_EventGroupSet))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numEventGroups) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_EventGroupSet),
            "::",
            stringify!(numEventGroups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eventGroups) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_EventGroupSet),
            "::",
            stringify!(eventGroups)
        )
    );
}
impl Default for CUpti_EventGroupSet {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct CUpti_EventGroupSets {
    pub numSets: u32,
    pub sets: *mut CUpti_EventGroupSet,
}
#[test]
fn bindgen_test_layout_CUpti_EventGroupSets() {
    const UNINIT: ::std::mem::MaybeUninit<CUpti_EventGroupSets> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CUpti_EventGroupSets>(),
        16usize,
        concat!("Size of: ", stringify!(CUpti_EventGroupSets))
    );
    assert_eq!(
        ::std::mem::align_of::<CUpti_EventGroupSets>(),
        8usize,
        concat!("Alignment of ", stringify!(CUpti_EventGroupSets))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numSets) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_EventGroupSets),
            "::",
            stringify!(numSets)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sets) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_EventGroupSets),
            "::",
            stringify!(sets)
        )
    );
}
impl Default for CUpti_EventGroupSets {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn cuptiSetEventCollectionMode(
        context: CUcontext,
        mode: CUpti_EventCollectionMode,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiDeviceGetAttribute(
        device: CUdevice,
        attrib: CUpti_DeviceAttribute,
        valueSize: *mut usize,
        value: *mut ::std::os::raw::c_void,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiDeviceGetTimestamp(context: CUcontext, timestamp: *mut u64) -> CUptiResult;
}
extern "C" {
    pub fn cuptiDeviceGetNumEventDomains(device: CUdevice, numDomains: *mut u32) -> CUptiResult;
}
extern "C" {
    pub fn cuptiDeviceEnumEventDomains(
        device: CUdevice,
        arraySizeBytes: *mut usize,
        domainArray: *mut CUpti_EventDomainID,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiDeviceGetEventDomainAttribute(
        device: CUdevice,
        eventDomain: CUpti_EventDomainID,
        attrib: CUpti_EventDomainAttribute,
        valueSize: *mut usize,
        value: *mut ::std::os::raw::c_void,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiGetNumEventDomains(numDomains: *mut u32) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEnumEventDomains(
        arraySizeBytes: *mut usize,
        domainArray: *mut CUpti_EventDomainID,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEventDomainGetAttribute(
        eventDomain: CUpti_EventDomainID,
        attrib: CUpti_EventDomainAttribute,
        valueSize: *mut usize,
        value: *mut ::std::os::raw::c_void,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEventDomainGetNumEvents(
        eventDomain: CUpti_EventDomainID,
        numEvents: *mut u32,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEventDomainEnumEvents(
        eventDomain: CUpti_EventDomainID,
        arraySizeBytes: *mut usize,
        eventArray: *mut CUpti_EventID,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEventGetAttribute(
        event: CUpti_EventID,
        attrib: CUpti_EventAttribute,
        valueSize: *mut usize,
        value: *mut ::std::os::raw::c_void,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEventGetIdFromName(
        device: CUdevice,
        eventName: *const ::std::os::raw::c_char,
        event: *mut CUpti_EventID,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEventGroupCreate(
        context: CUcontext,
        eventGroup: *mut CUpti_EventGroup,
        flags: u32,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEventGroupDestroy(eventGroup: CUpti_EventGroup) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEventGroupGetAttribute(
        eventGroup: CUpti_EventGroup,
        attrib: CUpti_EventGroupAttribute,
        valueSize: *mut usize,
        value: *mut ::std::os::raw::c_void,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEventGroupSetAttribute(
        eventGroup: CUpti_EventGroup,
        attrib: CUpti_EventGroupAttribute,
        valueSize: usize,
        value: *mut ::std::os::raw::c_void,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEventGroupAddEvent(
        eventGroup: CUpti_EventGroup,
        event: CUpti_EventID,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEventGroupRemoveEvent(
        eventGroup: CUpti_EventGroup,
        event: CUpti_EventID,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEventGroupRemoveAllEvents(eventGroup: CUpti_EventGroup) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEventGroupResetAllEvents(eventGroup: CUpti_EventGroup) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEventGroupEnable(eventGroup: CUpti_EventGroup) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEventGroupDisable(eventGroup: CUpti_EventGroup) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEventGroupReadEvent(
        eventGroup: CUpti_EventGroup,
        flags: CUpti_ReadEventFlags,
        event: CUpti_EventID,
        eventValueBufferSizeBytes: *mut usize,
        eventValueBuffer: *mut u64,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEventGroupReadAllEvents(
        eventGroup: CUpti_EventGroup,
        flags: CUpti_ReadEventFlags,
        eventValueBufferSizeBytes: *mut usize,
        eventValueBuffer: *mut u64,
        eventIdArraySizeBytes: *mut usize,
        eventIdArray: *mut CUpti_EventID,
        numEventIdsRead: *mut usize,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEventGroupSetsCreate(
        context: CUcontext,
        eventIdArraySizeBytes: usize,
        eventIdArray: *mut CUpti_EventID,
        eventGroupPasses: *mut *mut CUpti_EventGroupSets,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEventGroupSetsDestroy(eventGroupSets: *mut CUpti_EventGroupSets) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEventGroupSetEnable(eventGroupSet: *mut CUpti_EventGroupSet) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEventGroupSetDisable(eventGroupSet: *mut CUpti_EventGroupSet) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEnableKernelReplayMode(context: CUcontext) -> CUptiResult;
}
extern "C" {
    pub fn cuptiDisableKernelReplayMode(context: CUcontext) -> CUptiResult;
}
pub type CUpti_KernelReplayUpdateFunc = ::std::option::Option<
    unsafe extern "C" fn(
        kernelName: *const ::std::os::raw::c_char,
        numReplaysDone: ::std::os::raw::c_int,
        customData: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn cuptiKernelReplaySubscribeUpdate(
        updateFunc: CUpti_KernelReplayUpdateFunc,
        customData: *mut ::std::os::raw::c_void,
    ) -> CUptiResult;
}
pub type CUpti_MetricID = u32;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_MetricCategory {
    CUPTI_METRIC_CATEGORY_MEMORY = 0,
    CUPTI_METRIC_CATEGORY_INSTRUCTION = 1,
    CUPTI_METRIC_CATEGORY_MULTIPROCESSOR = 2,
    CUPTI_METRIC_CATEGORY_CACHE = 3,
    CUPTI_METRIC_CATEGORY_TEXTURE = 4,
    CUPTI_METRIC_CATEGORY_NVLINK = 5,
    CUPTI_METRIC_CATEGORY_PCIE = 6,
    CUPTI_METRIC_CATEGORY_FORCE_INT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_MetricEvaluationMode {
    CUPTI_METRIC_EVALUATION_MODE_PER_INSTANCE = 1,
    CUPTI_METRIC_EVALUATION_MODE_AGGREGATE = 2,
    CUPTI_METRIC_EVALUATION_MODE_FORCE_INT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_MetricValueKind {
    CUPTI_METRIC_VALUE_KIND_DOUBLE = 0,
    CUPTI_METRIC_VALUE_KIND_UINT64 = 1,
    CUPTI_METRIC_VALUE_KIND_PERCENT = 2,
    CUPTI_METRIC_VALUE_KIND_THROUGHPUT = 3,
    CUPTI_METRIC_VALUE_KIND_INT64 = 4,
    CUPTI_METRIC_VALUE_KIND_UTILIZATION_LEVEL = 5,
    CUPTI_METRIC_VALUE_KIND_FORCE_INT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_MetricValueUtilizationLevel {
    CUPTI_METRIC_VALUE_UTILIZATION_IDLE = 0,
    CUPTI_METRIC_VALUE_UTILIZATION_LOW = 2,
    CUPTI_METRIC_VALUE_UTILIZATION_MID = 5,
    CUPTI_METRIC_VALUE_UTILIZATION_HIGH = 8,
    CUPTI_METRIC_VALUE_UTILIZATION_MAX = 10,
    CUPTI_METRIC_VALUE_UTILIZATION_FORCE_INT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_MetricAttribute {
    CUPTI_METRIC_ATTR_NAME = 0,
    CUPTI_METRIC_ATTR_SHORT_DESCRIPTION = 1,
    CUPTI_METRIC_ATTR_LONG_DESCRIPTION = 2,
    CUPTI_METRIC_ATTR_CATEGORY = 3,
    CUPTI_METRIC_ATTR_VALUE_KIND = 4,
    CUPTI_METRIC_ATTR_EVALUATION_MODE = 5,
    CUPTI_METRIC_ATTR_FORCE_INT = 2147483647,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union CUpti_MetricValue {
    pub metricValueDouble: f64,
    pub metricValueUint64: u64,
    pub metricValueInt64: i64,
    pub metricValuePercent: f64,
    pub metricValueThroughput: u64,
    pub metricValueUtilizationLevel: CUpti_MetricValueUtilizationLevel,
}
#[test]
fn bindgen_test_layout_CUpti_MetricValue() {
    const UNINIT: ::std::mem::MaybeUninit<CUpti_MetricValue> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CUpti_MetricValue>(),
        8usize,
        concat!("Size of: ", stringify!(CUpti_MetricValue))
    );
    assert_eq!(
        ::std::mem::align_of::<CUpti_MetricValue>(),
        8usize,
        concat!("Alignment of ", stringify!(CUpti_MetricValue))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).metricValueDouble) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_MetricValue),
            "::",
            stringify!(metricValueDouble)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).metricValueUint64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_MetricValue),
            "::",
            stringify!(metricValueUint64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).metricValueInt64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_MetricValue),
            "::",
            stringify!(metricValueInt64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).metricValuePercent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_MetricValue),
            "::",
            stringify!(metricValuePercent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).metricValueThroughput) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_MetricValue),
            "::",
            stringify!(metricValueThroughput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).metricValueUtilizationLevel) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_MetricValue),
            "::",
            stringify!(metricValueUtilizationLevel)
        )
    );
}
impl Default for CUpti_MetricValue {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_MetricPropertyDeviceClass {
    CUPTI_METRIC_PROPERTY_DEVICE_CLASS_TESLA = 0,
    CUPTI_METRIC_PROPERTY_DEVICE_CLASS_QUADRO = 1,
    CUPTI_METRIC_PROPERTY_DEVICE_CLASS_GEFORCE = 2,
    CUPTI_METRIC_PROPERTY_DEVICE_CLASS_TEGRA = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_MetricPropertyID {
    CUPTI_METRIC_PROPERTY_MULTIPROCESSOR_COUNT = 0,
    CUPTI_METRIC_PROPERTY_WARPS_PER_MULTIPROCESSOR = 1,
    CUPTI_METRIC_PROPERTY_KERNEL_GPU_TIME = 2,
    CUPTI_METRIC_PROPERTY_CLOCK_RATE = 3,
    CUPTI_METRIC_PROPERTY_FRAME_BUFFER_COUNT = 4,
    CUPTI_METRIC_PROPERTY_GLOBAL_MEMORY_BANDWIDTH = 5,
    CUPTI_METRIC_PROPERTY_PCIE_LINK_RATE = 6,
    CUPTI_METRIC_PROPERTY_PCIE_LINK_WIDTH = 7,
    CUPTI_METRIC_PROPERTY_PCIE_GEN = 8,
    CUPTI_METRIC_PROPERTY_DEVICE_CLASS = 9,
    CUPTI_METRIC_PROPERTY_FLOP_SP_PER_CYCLE = 10,
    CUPTI_METRIC_PROPERTY_FLOP_DP_PER_CYCLE = 11,
    CUPTI_METRIC_PROPERTY_L2_UNITS = 12,
    CUPTI_METRIC_PROPERTY_ECC_ENABLED = 13,
    CUPTI_METRIC_PROPERTY_FLOP_HP_PER_CYCLE = 14,
    CUPTI_METRIC_PROPERTY_GPU_CPU_NVLINK_BANDWIDTH = 15,
}
extern "C" {
    pub fn cuptiGetNumMetrics(numMetrics: *mut u32) -> CUptiResult;
}
extern "C" {
    pub fn cuptiEnumMetrics(
        arraySizeBytes: *mut usize,
        metricArray: *mut CUpti_MetricID,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiDeviceGetNumMetrics(device: CUdevice, numMetrics: *mut u32) -> CUptiResult;
}
extern "C" {
    pub fn cuptiDeviceEnumMetrics(
        device: CUdevice,
        arraySizeBytes: *mut usize,
        metricArray: *mut CUpti_MetricID,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiMetricGetAttribute(
        metric: CUpti_MetricID,
        attrib: CUpti_MetricAttribute,
        valueSize: *mut usize,
        value: *mut ::std::os::raw::c_void,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiMetricGetIdFromName(
        device: CUdevice,
        metricName: *const ::std::os::raw::c_char,
        metric: *mut CUpti_MetricID,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiMetricGetNumEvents(metric: CUpti_MetricID, numEvents: *mut u32) -> CUptiResult;
}
extern "C" {
    pub fn cuptiMetricEnumEvents(
        metric: CUpti_MetricID,
        eventIdArraySizeBytes: *mut usize,
        eventIdArray: *mut CUpti_EventID,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiMetricGetNumProperties(metric: CUpti_MetricID, numProp: *mut u32) -> CUptiResult;
}
extern "C" {
    pub fn cuptiMetricEnumProperties(
        metric: CUpti_MetricID,
        propIdArraySizeBytes: *mut usize,
        propIdArray: *mut CUpti_MetricPropertyID,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiMetricGetRequiredEventGroupSets(
        context: CUcontext,
        metric: CUpti_MetricID,
        eventGroupSets: *mut *mut CUpti_EventGroupSets,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiMetricCreateEventGroupSets(
        context: CUcontext,
        metricIdArraySizeBytes: usize,
        metricIdArray: *mut CUpti_MetricID,
        eventGroupPasses: *mut *mut CUpti_EventGroupSets,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiMetricGetValue(
        device: CUdevice,
        metric: CUpti_MetricID,
        eventIdArraySizeBytes: usize,
        eventIdArray: *mut CUpti_EventID,
        eventValueArraySizeBytes: usize,
        eventValueArray: *mut u64,
        timeDuration: u64,
        metricValue: *mut CUpti_MetricValue,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiMetricGetValue2(
        metric: CUpti_MetricID,
        eventIdArraySizeBytes: usize,
        eventIdArray: *mut CUpti_EventID,
        eventValueArraySizeBytes: usize,
        eventValueArray: *mut u64,
        propIdArraySizeBytes: usize,
        propIdArray: *mut CUpti_MetricPropertyID,
        propValueArraySizeBytes: usize,
        propValueArray: *mut u64,
        metricValue: *mut CUpti_MetricValue,
    ) -> CUptiResult;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_EnvironmentClocksThrottleReason {
    CUPTI_CLOCKS_THROTTLE_REASON_GPU_IDLE = 1,
    CUPTI_CLOCKS_THROTTLE_REASON_USER_DEFINED_CLOCKS = 2,
    CUPTI_CLOCKS_THROTTLE_REASON_SW_POWER_CAP = 4,
    CUPTI_CLOCKS_THROTTLE_REASON_HW_SLOWDOWN = 8,
    CUPTI_CLOCKS_THROTTLE_REASON_UNKNOWN = 2147483648,
    CUPTI_CLOCKS_THROTTLE_REASON_UNSUPPORTED = 1073741824,
    CUPTI_CLOCKS_THROTTLE_REASON_NONE = 0,
    CUPTI_CLOCKS_THROTTLE_REASON_FORCE_INT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_LinkFlag {
    CUPTI_LINK_FLAG_INVALID = 0,
    CUPTI_LINK_FLAG_PEER_ACCESS = 2,
    CUPTI_LINK_FLAG_SYSMEM_ACCESS = 4,
    CUPTI_LINK_FLAG_PEER_ATOMICS = 8,
    CUPTI_LINK_FLAG_SYSMEM_ATOMICS = 16,
    CUPTI_LINK_FLAG_FORCE_INT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_ChannelType {
    CUPTI_CHANNEL_TYPE_INVALID = 0,
    CUPTI_CHANNEL_TYPE_COMPUTE = 1,
    CUPTI_CHANNEL_TYPE_ASYNC_MEMCPY = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_FuncShmemLimitConfig {
    CUPTI_FUNC_SHMEM_LIMIT_DEFAULT = 0,
    CUPTI_FUNC_SHMEM_LIMIT_OPTIN = 1,
    CUPTI_FUNC_SHMEM_LIMIT_FORCE_INT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_OpenAccEventKind {
    CUPTI_OPENACC_EVENT_KIND_INVALID = 0,
    CUPTI_OPENACC_EVENT_KIND_DEVICE_INIT = 1,
    CUPTI_OPENACC_EVENT_KIND_DEVICE_SHUTDOWN = 2,
    CUPTI_OPENACC_EVENT_KIND_RUNTIME_SHUTDOWN = 3,
    CUPTI_OPENACC_EVENT_KIND_ENQUEUE_LAUNCH = 4,
    CUPTI_OPENACC_EVENT_KIND_ENQUEUE_UPLOAD = 5,
    CUPTI_OPENACC_EVENT_KIND_ENQUEUE_DOWNLOAD = 6,
    CUPTI_OPENACC_EVENT_KIND_WAIT = 7,
    CUPTI_OPENACC_EVENT_KIND_IMPLICIT_WAIT = 8,
    CUPTI_OPENACC_EVENT_KIND_COMPUTE_CONSTRUCT = 9,
    CUPTI_OPENACC_EVENT_KIND_UPDATE = 10,
    CUPTI_OPENACC_EVENT_KIND_ENTER_DATA = 11,
    CUPTI_OPENACC_EVENT_KIND_EXIT_DATA = 12,
    CUPTI_OPENACC_EVENT_KIND_CREATE = 13,
    CUPTI_OPENACC_EVENT_KIND_DELETE = 14,
    CUPTI_OPENACC_EVENT_KIND_ALLOC = 15,
    CUPTI_OPENACC_EVENT_KIND_FREE = 16,
    CUPTI_OPENACC_EVENT_KIND_FORCE_INT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_OpenAccConstructKind {
    CUPTI_OPENACC_CONSTRUCT_KIND_UNKNOWN = 0,
    CUPTI_OPENACC_CONSTRUCT_KIND_PARALLEL = 1,
    CUPTI_OPENACC_CONSTRUCT_KIND_KERNELS = 2,
    CUPTI_OPENACC_CONSTRUCT_KIND_LOOP = 3,
    CUPTI_OPENACC_CONSTRUCT_KIND_DATA = 4,
    CUPTI_OPENACC_CONSTRUCT_KIND_ENTER_DATA = 5,
    CUPTI_OPENACC_CONSTRUCT_KIND_EXIT_DATA = 6,
    CUPTI_OPENACC_CONSTRUCT_KIND_HOST_DATA = 7,
    CUPTI_OPENACC_CONSTRUCT_KIND_ATOMIC = 8,
    CUPTI_OPENACC_CONSTRUCT_KIND_DECLARE = 9,
    CUPTI_OPENACC_CONSTRUCT_KIND_INIT = 10,
    CUPTI_OPENACC_CONSTRUCT_KIND_SHUTDOWN = 11,
    CUPTI_OPENACC_CONSTRUCT_KIND_SET = 12,
    CUPTI_OPENACC_CONSTRUCT_KIND_UPDATE = 13,
    CUPTI_OPENACC_CONSTRUCT_KIND_ROUTINE = 14,
    CUPTI_OPENACC_CONSTRUCT_KIND_WAIT = 15,
    CUPTI_OPENACC_CONSTRUCT_KIND_RUNTIME_API = 16,
    CUPTI_OPENACC_CONSTRUCT_KIND_FORCE_INT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_OpenMpEventKind {
    CUPTI_OPENMP_EVENT_KIND_INVALID = 0,
    CUPTI_OPENMP_EVENT_KIND_PARALLEL = 1,
    CUPTI_OPENMP_EVENT_KIND_TASK = 2,
    CUPTI_OPENMP_EVENT_KIND_THREAD = 3,
    CUPTI_OPENMP_EVENT_KIND_IDLE = 4,
    CUPTI_OPENMP_EVENT_KIND_WAIT_BARRIER = 5,
    CUPTI_OPENMP_EVENT_KIND_WAIT_TASKWAIT = 6,
    CUPTI_OPENMP_EVENT_KIND_FORCE_INT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_ExternalCorrelationKind {
    CUPTI_EXTERNAL_CORRELATION_KIND_INVALID = 0,
    CUPTI_EXTERNAL_CORRELATION_KIND_UNKNOWN = 1,
    CUPTI_EXTERNAL_CORRELATION_KIND_OPENACC = 2,
    CUPTI_EXTERNAL_CORRELATION_KIND_CUSTOM0 = 3,
    CUPTI_EXTERNAL_CORRELATION_KIND_CUSTOM1 = 4,
    CUPTI_EXTERNAL_CORRELATION_KIND_CUSTOM2 = 5,
    CUPTI_EXTERNAL_CORRELATION_KIND_SIZE = 6,
    CUPTI_EXTERNAL_CORRELATION_KIND_FORCE_INT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_DevType {
    CUPTI_DEV_TYPE_INVALID = 0,
    CUPTI_DEV_TYPE_GPU = 1,
    CUPTI_DEV_TYPE_NPU = 2,
    CUPTI_DEV_TYPE_FORCE_INT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_PcieDeviceType {
    CUPTI_PCIE_DEVICE_TYPE_GPU = 0,
    CUPTI_PCIE_DEVICE_TYPE_BRIDGE = 1,
    CUPTI_PCIE_DEVICE_TYPE_FORCE_INT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_PcieGen {
    CUPTI_PCIE_GEN_GEN1 = 1,
    CUPTI_PCIE_GEN_GEN2 = 2,
    CUPTI_PCIE_GEN_GEN3 = 3,
    CUPTI_PCIE_GEN_GEN4 = 4,
    CUPTI_PCIE_GEN_GEN5 = 5,
    CUPTI_PCIE_GEN_FORCE_INT = 2147483647,
}
extern "C" {
    pub fn cuptiGetTimestamp(timestamp: *mut u64) -> CUptiResult;
}
extern "C" {
    pub fn cuptiGetContextId(context: CUcontext, contextId: *mut u32) -> CUptiResult;
}
extern "C" {
    pub fn cuptiGetStreamId(
        context: CUcontext,
        stream: CUstream,
        streamId: *mut u32,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiGetStreamIdEx(
        context: CUcontext,
        stream: CUstream,
        perThreadStream: u8,
        streamId: *mut u32,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiGetDeviceId(context: CUcontext, deviceId: *mut u32) -> CUptiResult;
}
extern "C" {
    pub fn cuptiGetGraphNodeId(node: CUgraphNode, nodeId: *mut u64) -> CUptiResult;
}
extern "C" {
    pub fn cuptiGetGraphId(graph: CUgraph, pId: *mut u32) -> CUptiResult;
}
pub type CUpti_BuffersCallbackRequestFunc = ::std::option::Option<
    unsafe extern "C" fn(buffer: *mut *mut u8, size: *mut usize, maxNumRecords: *mut usize),
>;
pub type CUpti_BuffersCallbackCompleteFunc = ::std::option::Option<
    unsafe extern "C" fn(
        context: CUcontext,
        streamId: u32,
        buffer: *mut u8,
        size: usize,
        validSize: usize,
    ),
>;
extern "C" {
    pub fn cuptiGetLastError() -> CUptiResult;
}
extern "C" {
    pub fn cuptiComputeCapabilitySupported(
        major: ::std::os::raw::c_int,
        minor: ::std::os::raw::c_int,
        support: *mut ::std::os::raw::c_int,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiDeviceSupported(dev: CUdevice, support: *mut ::std::os::raw::c_int) -> CUptiResult;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_DeviceVirtualizationMode {
    CUPTI_DEVICE_VIRTUALIZATION_MODE_NONE = 0,
    CUPTI_DEVICE_VIRTUALIZATION_MODE_PASS_THROUGH = 1,
    CUPTI_DEVICE_VIRTUALIZATION_MODE_VIRTUAL_GPU = 2,
    CUPTI_DEVICE_VIRTUALIZATION_MODE_FORCE_INT = 2147483647,
}
extern "C" {
    pub fn cuptiDeviceVirtualizationMode(
        dev: CUdevice,
        mode: *mut CUpti_DeviceVirtualizationMode,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiFinalize() -> CUptiResult;
}
pub type CUpti_TimestampCallbackFunc = ::std::option::Option<unsafe extern "C" fn() -> u64>;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_driver_api_trace_cbid_enum {
    CUPTI_DRIVER_TRACE_CBID_INVALID = 0,
    CUPTI_DRIVER_TRACE_CBID_cuInit = 1,
    CUPTI_DRIVER_TRACE_CBID_cuDriverGetVersion = 2,
    CUPTI_DRIVER_TRACE_CBID_cuDeviceGet = 3,
    CUPTI_DRIVER_TRACE_CBID_cuDeviceGetCount = 4,
    CUPTI_DRIVER_TRACE_CBID_cuDeviceGetName = 5,
    CUPTI_DRIVER_TRACE_CBID_cuDeviceComputeCapability = 6,
    CUPTI_DRIVER_TRACE_CBID_cuDeviceTotalMem = 7,
    CUPTI_DRIVER_TRACE_CBID_cuDeviceGetProperties = 8,
    CUPTI_DRIVER_TRACE_CBID_cuDeviceGetAttribute = 9,
    CUPTI_DRIVER_TRACE_CBID_cuCtxCreate = 10,
    CUPTI_DRIVER_TRACE_CBID_cuCtxDestroy = 11,
    CUPTI_DRIVER_TRACE_CBID_cuCtxAttach = 12,
    CUPTI_DRIVER_TRACE_CBID_cuCtxDetach = 13,
    CUPTI_DRIVER_TRACE_CBID_cuCtxPushCurrent = 14,
    CUPTI_DRIVER_TRACE_CBID_cuCtxPopCurrent = 15,
    CUPTI_DRIVER_TRACE_CBID_cuCtxGetDevice = 16,
    CUPTI_DRIVER_TRACE_CBID_cuCtxSynchronize = 17,
    CUPTI_DRIVER_TRACE_CBID_cuModuleLoad = 18,
    CUPTI_DRIVER_TRACE_CBID_cuModuleLoadData = 19,
    CUPTI_DRIVER_TRACE_CBID_cuModuleLoadDataEx = 20,
    CUPTI_DRIVER_TRACE_CBID_cuModuleLoadFatBinary = 21,
    CUPTI_DRIVER_TRACE_CBID_cuModuleUnload = 22,
    CUPTI_DRIVER_TRACE_CBID_cuModuleGetFunction = 23,
    CUPTI_DRIVER_TRACE_CBID_cuModuleGetGlobal = 24,
    CUPTI_DRIVER_TRACE_CBID_cu64ModuleGetGlobal = 25,
    CUPTI_DRIVER_TRACE_CBID_cuModuleGetTexRef = 26,
    CUPTI_DRIVER_TRACE_CBID_cuMemGetInfo = 27,
    CUPTI_DRIVER_TRACE_CBID_cu64MemGetInfo = 28,
    CUPTI_DRIVER_TRACE_CBID_cuMemAlloc = 29,
    CUPTI_DRIVER_TRACE_CBID_cu64MemAlloc = 30,
    CUPTI_DRIVER_TRACE_CBID_cuMemAllocPitch = 31,
    CUPTI_DRIVER_TRACE_CBID_cu64MemAllocPitch = 32,
    CUPTI_DRIVER_TRACE_CBID_cuMemFree = 33,
    CUPTI_DRIVER_TRACE_CBID_cu64MemFree = 34,
    CUPTI_DRIVER_TRACE_CBID_cuMemGetAddressRange = 35,
    CUPTI_DRIVER_TRACE_CBID_cu64MemGetAddressRange = 36,
    CUPTI_DRIVER_TRACE_CBID_cuMemAllocHost = 37,
    CUPTI_DRIVER_TRACE_CBID_cuMemFreeHost = 38,
    CUPTI_DRIVER_TRACE_CBID_cuMemHostAlloc = 39,
    CUPTI_DRIVER_TRACE_CBID_cuMemHostGetDevicePointer = 40,
    CUPTI_DRIVER_TRACE_CBID_cu64MemHostGetDevicePointer = 41,
    CUPTI_DRIVER_TRACE_CBID_cuMemHostGetFlags = 42,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyHtoD = 43,
    CUPTI_DRIVER_TRACE_CBID_cu64MemcpyHtoD = 44,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyDtoH = 45,
    CUPTI_DRIVER_TRACE_CBID_cu64MemcpyDtoH = 46,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyDtoD = 47,
    CUPTI_DRIVER_TRACE_CBID_cu64MemcpyDtoD = 48,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyDtoA = 49,
    CUPTI_DRIVER_TRACE_CBID_cu64MemcpyDtoA = 50,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyAtoD = 51,
    CUPTI_DRIVER_TRACE_CBID_cu64MemcpyAtoD = 52,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyHtoA = 53,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyAtoH = 54,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyAtoA = 55,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpy2D = 56,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpy2DUnaligned = 57,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpy3D = 58,
    CUPTI_DRIVER_TRACE_CBID_cu64Memcpy3D = 59,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyHtoDAsync = 60,
    CUPTI_DRIVER_TRACE_CBID_cu64MemcpyHtoDAsync = 61,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyDtoHAsync = 62,
    CUPTI_DRIVER_TRACE_CBID_cu64MemcpyDtoHAsync = 63,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyDtoDAsync = 64,
    CUPTI_DRIVER_TRACE_CBID_cu64MemcpyDtoDAsync = 65,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyHtoAAsync = 66,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyAtoHAsync = 67,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpy2DAsync = 68,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpy3DAsync = 69,
    CUPTI_DRIVER_TRACE_CBID_cu64Memcpy3DAsync = 70,
    CUPTI_DRIVER_TRACE_CBID_cuMemsetD8 = 71,
    CUPTI_DRIVER_TRACE_CBID_cu64MemsetD8 = 72,
    CUPTI_DRIVER_TRACE_CBID_cuMemsetD16 = 73,
    CUPTI_DRIVER_TRACE_CBID_cu64MemsetD16 = 74,
    CUPTI_DRIVER_TRACE_CBID_cuMemsetD32 = 75,
    CUPTI_DRIVER_TRACE_CBID_cu64MemsetD32 = 76,
    CUPTI_DRIVER_TRACE_CBID_cuMemsetD2D8 = 77,
    CUPTI_DRIVER_TRACE_CBID_cu64MemsetD2D8 = 78,
    CUPTI_DRIVER_TRACE_CBID_cuMemsetD2D16 = 79,
    CUPTI_DRIVER_TRACE_CBID_cu64MemsetD2D16 = 80,
    CUPTI_DRIVER_TRACE_CBID_cuMemsetD2D32 = 81,
    CUPTI_DRIVER_TRACE_CBID_cu64MemsetD2D32 = 82,
    CUPTI_DRIVER_TRACE_CBID_cuFuncSetBlockShape = 83,
    CUPTI_DRIVER_TRACE_CBID_cuFuncSetSharedSize = 84,
    CUPTI_DRIVER_TRACE_CBID_cuFuncGetAttribute = 85,
    CUPTI_DRIVER_TRACE_CBID_cuFuncSetCacheConfig = 86,
    CUPTI_DRIVER_TRACE_CBID_cuArrayCreate = 87,
    CUPTI_DRIVER_TRACE_CBID_cuArrayGetDescriptor = 88,
    CUPTI_DRIVER_TRACE_CBID_cuArrayDestroy = 89,
    CUPTI_DRIVER_TRACE_CBID_cuArray3DCreate = 90,
    CUPTI_DRIVER_TRACE_CBID_cuArray3DGetDescriptor = 91,
    CUPTI_DRIVER_TRACE_CBID_cuTexRefCreate = 92,
    CUPTI_DRIVER_TRACE_CBID_cuTexRefDestroy = 93,
    CUPTI_DRIVER_TRACE_CBID_cuTexRefSetArray = 94,
    CUPTI_DRIVER_TRACE_CBID_cuTexRefSetAddress = 95,
    CUPTI_DRIVER_TRACE_CBID_cu64TexRefSetAddress = 96,
    CUPTI_DRIVER_TRACE_CBID_cuTexRefSetAddress2D = 97,
    CUPTI_DRIVER_TRACE_CBID_cu64TexRefSetAddress2D = 98,
    CUPTI_DRIVER_TRACE_CBID_cuTexRefSetFormat = 99,
    CUPTI_DRIVER_TRACE_CBID_cuTexRefSetAddressMode = 100,
    CUPTI_DRIVER_TRACE_CBID_cuTexRefSetFilterMode = 101,
    CUPTI_DRIVER_TRACE_CBID_cuTexRefSetFlags = 102,
    CUPTI_DRIVER_TRACE_CBID_cuTexRefGetAddress = 103,
    CUPTI_DRIVER_TRACE_CBID_cu64TexRefGetAddress = 104,
    CUPTI_DRIVER_TRACE_CBID_cuTexRefGetArray = 105,
    CUPTI_DRIVER_TRACE_CBID_cuTexRefGetAddressMode = 106,
    CUPTI_DRIVER_TRACE_CBID_cuTexRefGetFilterMode = 107,
    CUPTI_DRIVER_TRACE_CBID_cuTexRefGetFormat = 108,
    CUPTI_DRIVER_TRACE_CBID_cuTexRefGetFlags = 109,
    CUPTI_DRIVER_TRACE_CBID_cuParamSetSize = 110,
    CUPTI_DRIVER_TRACE_CBID_cuParamSeti = 111,
    CUPTI_DRIVER_TRACE_CBID_cuParamSetf = 112,
    CUPTI_DRIVER_TRACE_CBID_cuParamSetv = 113,
    CUPTI_DRIVER_TRACE_CBID_cuParamSetTexRef = 114,
    CUPTI_DRIVER_TRACE_CBID_cuLaunch = 115,
    CUPTI_DRIVER_TRACE_CBID_cuLaunchGrid = 116,
    CUPTI_DRIVER_TRACE_CBID_cuLaunchGridAsync = 117,
    CUPTI_DRIVER_TRACE_CBID_cuEventCreate = 118,
    CUPTI_DRIVER_TRACE_CBID_cuEventRecord = 119,
    CUPTI_DRIVER_TRACE_CBID_cuEventQuery = 120,
    CUPTI_DRIVER_TRACE_CBID_cuEventSynchronize = 121,
    CUPTI_DRIVER_TRACE_CBID_cuEventDestroy = 122,
    CUPTI_DRIVER_TRACE_CBID_cuEventElapsedTime = 123,
    CUPTI_DRIVER_TRACE_CBID_cuStreamCreate = 124,
    CUPTI_DRIVER_TRACE_CBID_cuStreamQuery = 125,
    CUPTI_DRIVER_TRACE_CBID_cuStreamSynchronize = 126,
    CUPTI_DRIVER_TRACE_CBID_cuStreamDestroy = 127,
    CUPTI_DRIVER_TRACE_CBID_cuGraphicsUnregisterResource = 128,
    CUPTI_DRIVER_TRACE_CBID_cuGraphicsSubResourceGetMappedArray = 129,
    CUPTI_DRIVER_TRACE_CBID_cuGraphicsResourceGetMappedPointer = 130,
    CUPTI_DRIVER_TRACE_CBID_cu64GraphicsResourceGetMappedPointer = 131,
    CUPTI_DRIVER_TRACE_CBID_cuGraphicsResourceSetMapFlags = 132,
    CUPTI_DRIVER_TRACE_CBID_cuGraphicsMapResources = 133,
    CUPTI_DRIVER_TRACE_CBID_cuGraphicsUnmapResources = 134,
    CUPTI_DRIVER_TRACE_CBID_cuGetExportTable = 135,
    CUPTI_DRIVER_TRACE_CBID_cuCtxSetLimit = 136,
    CUPTI_DRIVER_TRACE_CBID_cuCtxGetLimit = 137,
    CUPTI_DRIVER_TRACE_CBID_cuD3D10GetDevice = 138,
    CUPTI_DRIVER_TRACE_CBID_cuD3D10CtxCreate = 139,
    CUPTI_DRIVER_TRACE_CBID_cuGraphicsD3D10RegisterResource = 140,
    CUPTI_DRIVER_TRACE_CBID_cuD3D10RegisterResource = 141,
    CUPTI_DRIVER_TRACE_CBID_cuD3D10UnregisterResource = 142,
    CUPTI_DRIVER_TRACE_CBID_cuD3D10MapResources = 143,
    CUPTI_DRIVER_TRACE_CBID_cuD3D10UnmapResources = 144,
    CUPTI_DRIVER_TRACE_CBID_cuD3D10ResourceSetMapFlags = 145,
    CUPTI_DRIVER_TRACE_CBID_cuD3D10ResourceGetMappedArray = 146,
    CUPTI_DRIVER_TRACE_CBID_cuD3D10ResourceGetMappedPointer = 147,
    CUPTI_DRIVER_TRACE_CBID_cuD3D10ResourceGetMappedSize = 148,
    CUPTI_DRIVER_TRACE_CBID_cuD3D10ResourceGetMappedPitch = 149,
    CUPTI_DRIVER_TRACE_CBID_cuD3D10ResourceGetSurfaceDimensions = 150,
    CUPTI_DRIVER_TRACE_CBID_cuD3D11GetDevice = 151,
    CUPTI_DRIVER_TRACE_CBID_cuD3D11CtxCreate = 152,
    CUPTI_DRIVER_TRACE_CBID_cuGraphicsD3D11RegisterResource = 153,
    CUPTI_DRIVER_TRACE_CBID_cuD3D9GetDevice = 154,
    CUPTI_DRIVER_TRACE_CBID_cuD3D9CtxCreate = 155,
    CUPTI_DRIVER_TRACE_CBID_cuGraphicsD3D9RegisterResource = 156,
    CUPTI_DRIVER_TRACE_CBID_cuD3D9GetDirect3DDevice = 157,
    CUPTI_DRIVER_TRACE_CBID_cuD3D9RegisterResource = 158,
    CUPTI_DRIVER_TRACE_CBID_cuD3D9UnregisterResource = 159,
    CUPTI_DRIVER_TRACE_CBID_cuD3D9MapResources = 160,
    CUPTI_DRIVER_TRACE_CBID_cuD3D9UnmapResources = 161,
    CUPTI_DRIVER_TRACE_CBID_cuD3D9ResourceSetMapFlags = 162,
    CUPTI_DRIVER_TRACE_CBID_cuD3D9ResourceGetSurfaceDimensions = 163,
    CUPTI_DRIVER_TRACE_CBID_cuD3D9ResourceGetMappedArray = 164,
    CUPTI_DRIVER_TRACE_CBID_cuD3D9ResourceGetMappedPointer = 165,
    CUPTI_DRIVER_TRACE_CBID_cuD3D9ResourceGetMappedSize = 166,
    CUPTI_DRIVER_TRACE_CBID_cuD3D9ResourceGetMappedPitch = 167,
    CUPTI_DRIVER_TRACE_CBID_cuD3D9Begin = 168,
    CUPTI_DRIVER_TRACE_CBID_cuD3D9End = 169,
    CUPTI_DRIVER_TRACE_CBID_cuD3D9RegisterVertexBuffer = 170,
    CUPTI_DRIVER_TRACE_CBID_cuD3D9MapVertexBuffer = 171,
    CUPTI_DRIVER_TRACE_CBID_cuD3D9UnmapVertexBuffer = 172,
    CUPTI_DRIVER_TRACE_CBID_cuD3D9UnregisterVertexBuffer = 173,
    CUPTI_DRIVER_TRACE_CBID_cuGLCtxCreate = 174,
    CUPTI_DRIVER_TRACE_CBID_cuGraphicsGLRegisterBuffer = 175,
    CUPTI_DRIVER_TRACE_CBID_cuGraphicsGLRegisterImage = 176,
    CUPTI_DRIVER_TRACE_CBID_cuWGLGetDevice = 177,
    CUPTI_DRIVER_TRACE_CBID_cuGLInit = 178,
    CUPTI_DRIVER_TRACE_CBID_cuGLRegisterBufferObject = 179,
    CUPTI_DRIVER_TRACE_CBID_cuGLMapBufferObject = 180,
    CUPTI_DRIVER_TRACE_CBID_cuGLUnmapBufferObject = 181,
    CUPTI_DRIVER_TRACE_CBID_cuGLUnregisterBufferObject = 182,
    CUPTI_DRIVER_TRACE_CBID_cuGLSetBufferObjectMapFlags = 183,
    CUPTI_DRIVER_TRACE_CBID_cuGLMapBufferObjectAsync = 184,
    CUPTI_DRIVER_TRACE_CBID_cuGLUnmapBufferObjectAsync = 185,
    CUPTI_DRIVER_TRACE_CBID_cuVDPAUGetDevice = 186,
    CUPTI_DRIVER_TRACE_CBID_cuVDPAUCtxCreate = 187,
    CUPTI_DRIVER_TRACE_CBID_cuGraphicsVDPAURegisterVideoSurface = 188,
    CUPTI_DRIVER_TRACE_CBID_cuGraphicsVDPAURegisterOutputSurface = 189,
    CUPTI_DRIVER_TRACE_CBID_cuModuleGetSurfRef = 190,
    CUPTI_DRIVER_TRACE_CBID_cuSurfRefCreate = 191,
    CUPTI_DRIVER_TRACE_CBID_cuSurfRefDestroy = 192,
    CUPTI_DRIVER_TRACE_CBID_cuSurfRefSetFormat = 193,
    CUPTI_DRIVER_TRACE_CBID_cuSurfRefSetArray = 194,
    CUPTI_DRIVER_TRACE_CBID_cuSurfRefGetFormat = 195,
    CUPTI_DRIVER_TRACE_CBID_cuSurfRefGetArray = 196,
    CUPTI_DRIVER_TRACE_CBID_cu64DeviceTotalMem = 197,
    CUPTI_DRIVER_TRACE_CBID_cu64D3D10ResourceGetMappedPointer = 198,
    CUPTI_DRIVER_TRACE_CBID_cu64D3D10ResourceGetMappedSize = 199,
    CUPTI_DRIVER_TRACE_CBID_cu64D3D10ResourceGetMappedPitch = 200,
    CUPTI_DRIVER_TRACE_CBID_cu64D3D10ResourceGetSurfaceDimensions = 201,
    CUPTI_DRIVER_TRACE_CBID_cu64D3D9ResourceGetSurfaceDimensions = 202,
    CUPTI_DRIVER_TRACE_CBID_cu64D3D9ResourceGetMappedPointer = 203,
    CUPTI_DRIVER_TRACE_CBID_cu64D3D9ResourceGetMappedSize = 204,
    CUPTI_DRIVER_TRACE_CBID_cu64D3D9ResourceGetMappedPitch = 205,
    CUPTI_DRIVER_TRACE_CBID_cu64D3D9MapVertexBuffer = 206,
    CUPTI_DRIVER_TRACE_CBID_cu64GLMapBufferObject = 207,
    CUPTI_DRIVER_TRACE_CBID_cu64GLMapBufferObjectAsync = 208,
    CUPTI_DRIVER_TRACE_CBID_cuD3D11GetDevices = 209,
    CUPTI_DRIVER_TRACE_CBID_cuD3D11CtxCreateOnDevice = 210,
    CUPTI_DRIVER_TRACE_CBID_cuD3D10GetDevices = 211,
    CUPTI_DRIVER_TRACE_CBID_cuD3D10CtxCreateOnDevice = 212,
    CUPTI_DRIVER_TRACE_CBID_cuD3D9GetDevices = 213,
    CUPTI_DRIVER_TRACE_CBID_cuD3D9CtxCreateOnDevice = 214,
    CUPTI_DRIVER_TRACE_CBID_cu64MemHostAlloc = 215,
    CUPTI_DRIVER_TRACE_CBID_cuMemsetD8Async = 216,
    CUPTI_DRIVER_TRACE_CBID_cu64MemsetD8Async = 217,
    CUPTI_DRIVER_TRACE_CBID_cuMemsetD16Async = 218,
    CUPTI_DRIVER_TRACE_CBID_cu64MemsetD16Async = 219,
    CUPTI_DRIVER_TRACE_CBID_cuMemsetD32Async = 220,
    CUPTI_DRIVER_TRACE_CBID_cu64MemsetD32Async = 221,
    CUPTI_DRIVER_TRACE_CBID_cuMemsetD2D8Async = 222,
    CUPTI_DRIVER_TRACE_CBID_cu64MemsetD2D8Async = 223,
    CUPTI_DRIVER_TRACE_CBID_cuMemsetD2D16Async = 224,
    CUPTI_DRIVER_TRACE_CBID_cu64MemsetD2D16Async = 225,
    CUPTI_DRIVER_TRACE_CBID_cuMemsetD2D32Async = 226,
    CUPTI_DRIVER_TRACE_CBID_cu64MemsetD2D32Async = 227,
    CUPTI_DRIVER_TRACE_CBID_cu64ArrayCreate = 228,
    CUPTI_DRIVER_TRACE_CBID_cu64ArrayGetDescriptor = 229,
    CUPTI_DRIVER_TRACE_CBID_cu64Array3DCreate = 230,
    CUPTI_DRIVER_TRACE_CBID_cu64Array3DGetDescriptor = 231,
    CUPTI_DRIVER_TRACE_CBID_cu64Memcpy2D = 232,
    CUPTI_DRIVER_TRACE_CBID_cu64Memcpy2DUnaligned = 233,
    CUPTI_DRIVER_TRACE_CBID_cu64Memcpy2DAsync = 234,
    CUPTI_DRIVER_TRACE_CBID_cuCtxCreate_v2 = 235,
    CUPTI_DRIVER_TRACE_CBID_cuD3D10CtxCreate_v2 = 236,
    CUPTI_DRIVER_TRACE_CBID_cuD3D11CtxCreate_v2 = 237,
    CUPTI_DRIVER_TRACE_CBID_cuD3D9CtxCreate_v2 = 238,
    CUPTI_DRIVER_TRACE_CBID_cuGLCtxCreate_v2 = 239,
    CUPTI_DRIVER_TRACE_CBID_cuVDPAUCtxCreate_v2 = 240,
    CUPTI_DRIVER_TRACE_CBID_cuModuleGetGlobal_v2 = 241,
    CUPTI_DRIVER_TRACE_CBID_cuMemGetInfo_v2 = 242,
    CUPTI_DRIVER_TRACE_CBID_cuMemAlloc_v2 = 243,
    CUPTI_DRIVER_TRACE_CBID_cuMemAllocPitch_v2 = 244,
    CUPTI_DRIVER_TRACE_CBID_cuMemFree_v2 = 245,
    CUPTI_DRIVER_TRACE_CBID_cuMemGetAddressRange_v2 = 246,
    CUPTI_DRIVER_TRACE_CBID_cuMemHostGetDevicePointer_v2 = 247,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpy_v2 = 248,
    CUPTI_DRIVER_TRACE_CBID_cuMemsetD8_v2 = 249,
    CUPTI_DRIVER_TRACE_CBID_cuMemsetD16_v2 = 250,
    CUPTI_DRIVER_TRACE_CBID_cuMemsetD32_v2 = 251,
    CUPTI_DRIVER_TRACE_CBID_cuMemsetD2D8_v2 = 252,
    CUPTI_DRIVER_TRACE_CBID_cuMemsetD2D16_v2 = 253,
    CUPTI_DRIVER_TRACE_CBID_cuMemsetD2D32_v2 = 254,
    CUPTI_DRIVER_TRACE_CBID_cuTexRefSetAddress_v2 = 255,
    CUPTI_DRIVER_TRACE_CBID_cuTexRefSetAddress2D_v2 = 256,
    CUPTI_DRIVER_TRACE_CBID_cuTexRefGetAddress_v2 = 257,
    CUPTI_DRIVER_TRACE_CBID_cuGraphicsResourceGetMappedPointer_v2 = 258,
    CUPTI_DRIVER_TRACE_CBID_cuDeviceTotalMem_v2 = 259,
    CUPTI_DRIVER_TRACE_CBID_cuD3D10ResourceGetMappedPointer_v2 = 260,
    CUPTI_DRIVER_TRACE_CBID_cuD3D10ResourceGetMappedSize_v2 = 261,
    CUPTI_DRIVER_TRACE_CBID_cuD3D10ResourceGetMappedPitch_v2 = 262,
    CUPTI_DRIVER_TRACE_CBID_cuD3D10ResourceGetSurfaceDimensions_v2 = 263,
    CUPTI_DRIVER_TRACE_CBID_cuD3D9ResourceGetSurfaceDimensions_v2 = 264,
    CUPTI_DRIVER_TRACE_CBID_cuD3D9ResourceGetMappedPointer_v2 = 265,
    CUPTI_DRIVER_TRACE_CBID_cuD3D9ResourceGetMappedSize_v2 = 266,
    CUPTI_DRIVER_TRACE_CBID_cuD3D9ResourceGetMappedPitch_v2 = 267,
    CUPTI_DRIVER_TRACE_CBID_cuD3D9MapVertexBuffer_v2 = 268,
    CUPTI_DRIVER_TRACE_CBID_cuGLMapBufferObject_v2 = 269,
    CUPTI_DRIVER_TRACE_CBID_cuGLMapBufferObjectAsync_v2 = 270,
    CUPTI_DRIVER_TRACE_CBID_cuMemHostAlloc_v2 = 271,
    CUPTI_DRIVER_TRACE_CBID_cuArrayCreate_v2 = 272,
    CUPTI_DRIVER_TRACE_CBID_cuArrayGetDescriptor_v2 = 273,
    CUPTI_DRIVER_TRACE_CBID_cuArray3DCreate_v2 = 274,
    CUPTI_DRIVER_TRACE_CBID_cuArray3DGetDescriptor_v2 = 275,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyHtoD_v2 = 276,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyHtoDAsync_v2 = 277,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyDtoH_v2 = 278,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyDtoHAsync_v2 = 279,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyDtoD_v2 = 280,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyDtoDAsync_v2 = 281,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyAtoH_v2 = 282,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyAtoHAsync_v2 = 283,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyAtoD_v2 = 284,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyDtoA_v2 = 285,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyAtoA_v2 = 286,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpy2D_v2 = 287,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpy2DUnaligned_v2 = 288,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpy2DAsync_v2 = 289,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpy3D_v2 = 290,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpy3DAsync_v2 = 291,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyHtoA_v2 = 292,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyHtoAAsync_v2 = 293,
    CUPTI_DRIVER_TRACE_CBID_cuMemAllocHost_v2 = 294,
    CUPTI_DRIVER_TRACE_CBID_cuStreamWaitEvent = 295,
    CUPTI_DRIVER_TRACE_CBID_cuCtxGetApiVersion = 296,
    CUPTI_DRIVER_TRACE_CBID_cuD3D10GetDirect3DDevice = 297,
    CUPTI_DRIVER_TRACE_CBID_cuD3D11GetDirect3DDevice = 298,
    CUPTI_DRIVER_TRACE_CBID_cuCtxGetCacheConfig = 299,
    CUPTI_DRIVER_TRACE_CBID_cuCtxSetCacheConfig = 300,
    CUPTI_DRIVER_TRACE_CBID_cuMemHostRegister = 301,
    CUPTI_DRIVER_TRACE_CBID_cuMemHostUnregister = 302,
    CUPTI_DRIVER_TRACE_CBID_cuCtxSetCurrent = 303,
    CUPTI_DRIVER_TRACE_CBID_cuCtxGetCurrent = 304,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpy = 305,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyAsync = 306,
    CUPTI_DRIVER_TRACE_CBID_cuLaunchKernel = 307,
    CUPTI_DRIVER_TRACE_CBID_cuProfilerStart = 308,
    CUPTI_DRIVER_TRACE_CBID_cuProfilerStop = 309,
    CUPTI_DRIVER_TRACE_CBID_cuPointerGetAttribute = 310,
    CUPTI_DRIVER_TRACE_CBID_cuProfilerInitialize = 311,
    CUPTI_DRIVER_TRACE_CBID_cuDeviceCanAccessPeer = 312,
    CUPTI_DRIVER_TRACE_CBID_cuCtxEnablePeerAccess = 313,
    CUPTI_DRIVER_TRACE_CBID_cuCtxDisablePeerAccess = 314,
    CUPTI_DRIVER_TRACE_CBID_cuMemPeerRegister = 315,
    CUPTI_DRIVER_TRACE_CBID_cuMemPeerUnregister = 316,
    CUPTI_DRIVER_TRACE_CBID_cuMemPeerGetDevicePointer = 317,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyPeer = 318,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyPeerAsync = 319,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpy3DPeer = 320,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpy3DPeerAsync = 321,
    CUPTI_DRIVER_TRACE_CBID_cuCtxDestroy_v2 = 322,
    CUPTI_DRIVER_TRACE_CBID_cuCtxPushCurrent_v2 = 323,
    CUPTI_DRIVER_TRACE_CBID_cuCtxPopCurrent_v2 = 324,
    CUPTI_DRIVER_TRACE_CBID_cuEventDestroy_v2 = 325,
    CUPTI_DRIVER_TRACE_CBID_cuStreamDestroy_v2 = 326,
    CUPTI_DRIVER_TRACE_CBID_cuTexRefSetAddress2D_v3 = 327,
    CUPTI_DRIVER_TRACE_CBID_cuIpcGetMemHandle = 328,
    CUPTI_DRIVER_TRACE_CBID_cuIpcOpenMemHandle = 329,
    CUPTI_DRIVER_TRACE_CBID_cuIpcCloseMemHandle = 330,
    CUPTI_DRIVER_TRACE_CBID_cuDeviceGetByPCIBusId = 331,
    CUPTI_DRIVER_TRACE_CBID_cuDeviceGetPCIBusId = 332,
    CUPTI_DRIVER_TRACE_CBID_cuGLGetDevices = 333,
    CUPTI_DRIVER_TRACE_CBID_cuIpcGetEventHandle = 334,
    CUPTI_DRIVER_TRACE_CBID_cuIpcOpenEventHandle = 335,
    CUPTI_DRIVER_TRACE_CBID_cuCtxSetSharedMemConfig = 336,
    CUPTI_DRIVER_TRACE_CBID_cuCtxGetSharedMemConfig = 337,
    CUPTI_DRIVER_TRACE_CBID_cuFuncSetSharedMemConfig = 338,
    CUPTI_DRIVER_TRACE_CBID_cuTexObjectCreate = 339,
    CUPTI_DRIVER_TRACE_CBID_cuTexObjectDestroy = 340,
    CUPTI_DRIVER_TRACE_CBID_cuTexObjectGetResourceDesc = 341,
    CUPTI_DRIVER_TRACE_CBID_cuTexObjectGetTextureDesc = 342,
    CUPTI_DRIVER_TRACE_CBID_cuSurfObjectCreate = 343,
    CUPTI_DRIVER_TRACE_CBID_cuSurfObjectDestroy = 344,
    CUPTI_DRIVER_TRACE_CBID_cuSurfObjectGetResourceDesc = 345,
    CUPTI_DRIVER_TRACE_CBID_cuStreamAddCallback = 346,
    CUPTI_DRIVER_TRACE_CBID_cuMipmappedArrayCreate = 347,
    CUPTI_DRIVER_TRACE_CBID_cuMipmappedArrayGetLevel = 348,
    CUPTI_DRIVER_TRACE_CBID_cuMipmappedArrayDestroy = 349,
    CUPTI_DRIVER_TRACE_CBID_cuTexRefSetMipmappedArray = 350,
    CUPTI_DRIVER_TRACE_CBID_cuTexRefSetMipmapFilterMode = 351,
    CUPTI_DRIVER_TRACE_CBID_cuTexRefSetMipmapLevelBias = 352,
    CUPTI_DRIVER_TRACE_CBID_cuTexRefSetMipmapLevelClamp = 353,
    CUPTI_DRIVER_TRACE_CBID_cuTexRefSetMaxAnisotropy = 354,
    CUPTI_DRIVER_TRACE_CBID_cuTexRefGetMipmappedArray = 355,
    CUPTI_DRIVER_TRACE_CBID_cuTexRefGetMipmapFilterMode = 356,
    CUPTI_DRIVER_TRACE_CBID_cuTexRefGetMipmapLevelBias = 357,
    CUPTI_DRIVER_TRACE_CBID_cuTexRefGetMipmapLevelClamp = 358,
    CUPTI_DRIVER_TRACE_CBID_cuTexRefGetMaxAnisotropy = 359,
    CUPTI_DRIVER_TRACE_CBID_cuGraphicsResourceGetMappedMipmappedArray = 360,
    CUPTI_DRIVER_TRACE_CBID_cuTexObjectGetResourceViewDesc = 361,
    CUPTI_DRIVER_TRACE_CBID_cuLinkCreate = 362,
    CUPTI_DRIVER_TRACE_CBID_cuLinkAddData = 363,
    CUPTI_DRIVER_TRACE_CBID_cuLinkAddFile = 364,
    CUPTI_DRIVER_TRACE_CBID_cuLinkComplete = 365,
    CUPTI_DRIVER_TRACE_CBID_cuLinkDestroy = 366,
    CUPTI_DRIVER_TRACE_CBID_cuStreamCreateWithPriority = 367,
    CUPTI_DRIVER_TRACE_CBID_cuStreamGetPriority = 368,
    CUPTI_DRIVER_TRACE_CBID_cuStreamGetFlags = 369,
    CUPTI_DRIVER_TRACE_CBID_cuCtxGetStreamPriorityRange = 370,
    CUPTI_DRIVER_TRACE_CBID_cuMemAllocManaged = 371,
    CUPTI_DRIVER_TRACE_CBID_cuGetErrorString = 372,
    CUPTI_DRIVER_TRACE_CBID_cuGetErrorName = 373,
    CUPTI_DRIVER_TRACE_CBID_cuOccupancyMaxActiveBlocksPerMultiprocessor = 374,
    CUPTI_DRIVER_TRACE_CBID_cuCompilePtx = 375,
    CUPTI_DRIVER_TRACE_CBID_cuBinaryFree = 376,
    CUPTI_DRIVER_TRACE_CBID_cuStreamAttachMemAsync = 377,
    CUPTI_DRIVER_TRACE_CBID_cuPointerSetAttribute = 378,
    CUPTI_DRIVER_TRACE_CBID_cuMemHostRegister_v2 = 379,
    CUPTI_DRIVER_TRACE_CBID_cuGraphicsResourceSetMapFlags_v2 = 380,
    CUPTI_DRIVER_TRACE_CBID_cuLinkCreate_v2 = 381,
    CUPTI_DRIVER_TRACE_CBID_cuLinkAddData_v2 = 382,
    CUPTI_DRIVER_TRACE_CBID_cuLinkAddFile_v2 = 383,
    CUPTI_DRIVER_TRACE_CBID_cuOccupancyMaxPotentialBlockSize = 384,
    CUPTI_DRIVER_TRACE_CBID_cuGLGetDevices_v2 = 385,
    CUPTI_DRIVER_TRACE_CBID_cuDevicePrimaryCtxRetain = 386,
    CUPTI_DRIVER_TRACE_CBID_cuDevicePrimaryCtxRelease = 387,
    CUPTI_DRIVER_TRACE_CBID_cuDevicePrimaryCtxSetFlags = 388,
    CUPTI_DRIVER_TRACE_CBID_cuDevicePrimaryCtxReset = 389,
    CUPTI_DRIVER_TRACE_CBID_cuGraphicsEGLRegisterImage = 390,
    CUPTI_DRIVER_TRACE_CBID_cuCtxGetFlags = 391,
    CUPTI_DRIVER_TRACE_CBID_cuDevicePrimaryCtxGetState = 392,
    CUPTI_DRIVER_TRACE_CBID_cuEGLStreamConsumerConnect = 393,
    CUPTI_DRIVER_TRACE_CBID_cuEGLStreamConsumerDisconnect = 394,
    CUPTI_DRIVER_TRACE_CBID_cuEGLStreamConsumerAcquireFrame = 395,
    CUPTI_DRIVER_TRACE_CBID_cuEGLStreamConsumerReleaseFrame = 396,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyHtoD_v2_ptds = 397,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyDtoH_v2_ptds = 398,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyDtoD_v2_ptds = 399,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyDtoA_v2_ptds = 400,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyAtoD_v2_ptds = 401,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyHtoA_v2_ptds = 402,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyAtoH_v2_ptds = 403,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyAtoA_v2_ptds = 404,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpy2D_v2_ptds = 405,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpy2DUnaligned_v2_ptds = 406,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpy3D_v2_ptds = 407,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpy_ptds = 408,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyPeer_ptds = 409,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpy3DPeer_ptds = 410,
    CUPTI_DRIVER_TRACE_CBID_cuMemsetD8_v2_ptds = 411,
    CUPTI_DRIVER_TRACE_CBID_cuMemsetD16_v2_ptds = 412,
    CUPTI_DRIVER_TRACE_CBID_cuMemsetD32_v2_ptds = 413,
    CUPTI_DRIVER_TRACE_CBID_cuMemsetD2D8_v2_ptds = 414,
    CUPTI_DRIVER_TRACE_CBID_cuMemsetD2D16_v2_ptds = 415,
    CUPTI_DRIVER_TRACE_CBID_cuMemsetD2D32_v2_ptds = 416,
    CUPTI_DRIVER_TRACE_CBID_cuGLMapBufferObject_v2_ptds = 417,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyAsync_ptsz = 418,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyHtoAAsync_v2_ptsz = 419,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyAtoHAsync_v2_ptsz = 420,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyHtoDAsync_v2_ptsz = 421,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyDtoHAsync_v2_ptsz = 422,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyDtoDAsync_v2_ptsz = 423,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpy2DAsync_v2_ptsz = 424,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpy3DAsync_v2_ptsz = 425,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpyPeerAsync_ptsz = 426,
    CUPTI_DRIVER_TRACE_CBID_cuMemcpy3DPeerAsync_ptsz = 427,
    CUPTI_DRIVER_TRACE_CBID_cuMemsetD8Async_ptsz = 428,
    CUPTI_DRIVER_TRACE_CBID_cuMemsetD16Async_ptsz = 429,
    CUPTI_DRIVER_TRACE_CBID_cuMemsetD32Async_ptsz = 430,
    CUPTI_DRIVER_TRACE_CBID_cuMemsetD2D8Async_ptsz = 431,
    CUPTI_DRIVER_TRACE_CBID_cuMemsetD2D16Async_ptsz = 432,
    CUPTI_DRIVER_TRACE_CBID_cuMemsetD2D32Async_ptsz = 433,
    CUPTI_DRIVER_TRACE_CBID_cuStreamGetPriority_ptsz = 434,
    CUPTI_DRIVER_TRACE_CBID_cuStreamGetFlags_ptsz = 435,
    CUPTI_DRIVER_TRACE_CBID_cuStreamWaitEvent_ptsz = 436,
    CUPTI_DRIVER_TRACE_CBID_cuStreamAddCallback_ptsz = 437,
    CUPTI_DRIVER_TRACE_CBID_cuStreamAttachMemAsync_ptsz = 438,
    CUPTI_DRIVER_TRACE_CBID_cuStreamQuery_ptsz = 439,
    CUPTI_DRIVER_TRACE_CBID_cuStreamSynchronize_ptsz = 440,
    CUPTI_DRIVER_TRACE_CBID_cuEventRecord_ptsz = 441,
    CUPTI_DRIVER_TRACE_CBID_cuLaunchKernel_ptsz = 442,
    CUPTI_DRIVER_TRACE_CBID_cuGraphicsMapResources_ptsz = 443,
    CUPTI_DRIVER_TRACE_CBID_cuGraphicsUnmapResources_ptsz = 444,
    CUPTI_DRIVER_TRACE_CBID_cuGLMapBufferObjectAsync_v2_ptsz = 445,
    CUPTI_DRIVER_TRACE_CBID_cuEGLStreamProducerConnect = 446,
    CUPTI_DRIVER_TRACE_CBID_cuEGLStreamProducerDisconnect = 447,
    CUPTI_DRIVER_TRACE_CBID_cuEGLStreamProducerPresentFrame = 448,
    CUPTI_DRIVER_TRACE_CBID_cuGraphicsResourceGetMappedEglFrame = 449,
    CUPTI_DRIVER_TRACE_CBID_cuPointerGetAttributes = 450,
    CUPTI_DRIVER_TRACE_CBID_cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags = 451,
    CUPTI_DRIVER_TRACE_CBID_cuOccupancyMaxPotentialBlockSizeWithFlags = 452,
    CUPTI_DRIVER_TRACE_CBID_cuEGLStreamProducerReturnFrame = 453,
    CUPTI_DRIVER_TRACE_CBID_cuDeviceGetP2PAttribute = 454,
    CUPTI_DRIVER_TRACE_CBID_cuTexRefSetBorderColor = 455,
    CUPTI_DRIVER_TRACE_CBID_cuTexRefGetBorderColor = 456,
    CUPTI_DRIVER_TRACE_CBID_cuMemAdvise = 457,
    CUPTI_DRIVER_TRACE_CBID_cuStreamWaitValue32 = 458,
    CUPTI_DRIVER_TRACE_CBID_cuStreamWaitValue32_ptsz = 459,
    CUPTI_DRIVER_TRACE_CBID_cuStreamWriteValue32 = 460,
    CUPTI_DRIVER_TRACE_CBID_cuStreamWriteValue32_ptsz = 461,
    CUPTI_DRIVER_TRACE_CBID_cuStreamBatchMemOp = 462,
    CUPTI_DRIVER_TRACE_CBID_cuStreamBatchMemOp_ptsz = 463,
    CUPTI_DRIVER_TRACE_CBID_cuNVNbufferGetPointer = 464,
    CUPTI_DRIVER_TRACE_CBID_cuNVNtextureGetArray = 465,
    CUPTI_DRIVER_TRACE_CBID_cuNNSetAllocator = 466,
    CUPTI_DRIVER_TRACE_CBID_cuMemPrefetchAsync = 467,
    CUPTI_DRIVER_TRACE_CBID_cuMemPrefetchAsync_ptsz = 468,
    CUPTI_DRIVER_TRACE_CBID_cuEventCreateFromNVNSync = 469,
    CUPTI_DRIVER_TRACE_CBID_cuEGLStreamConsumerConnectWithFlags = 470,
    CUPTI_DRIVER_TRACE_CBID_cuMemRangeGetAttribute = 471,
    CUPTI_DRIVER_TRACE_CBID_cuMemRangeGetAttributes = 472,
    CUPTI_DRIVER_TRACE_CBID_cuStreamWaitValue64 = 473,
    CUPTI_DRIVER_TRACE_CBID_cuStreamWaitValue64_ptsz = 474,
    CUPTI_DRIVER_TRACE_CBID_cuStreamWriteValue64 = 475,
    CUPTI_DRIVER_TRACE_CBID_cuStreamWriteValue64_ptsz = 476,
    CUPTI_DRIVER_TRACE_CBID_cuLaunchCooperativeKernel = 477,
    CUPTI_DRIVER_TRACE_CBID_cuLaunchCooperativeKernel_ptsz = 478,
    CUPTI_DRIVER_TRACE_CBID_cuEventCreateFromEGLSync = 479,
    CUPTI_DRIVER_TRACE_CBID_cuLaunchCooperativeKernelMultiDevice = 480,
    CUPTI_DRIVER_TRACE_CBID_cuFuncSetAttribute = 481,
    CUPTI_DRIVER_TRACE_CBID_cuDeviceGetUuid = 482,
    CUPTI_DRIVER_TRACE_CBID_cuStreamGetCtx = 483,
    CUPTI_DRIVER_TRACE_CBID_cuStreamGetCtx_ptsz = 484,
    CUPTI_DRIVER_TRACE_CBID_cuImportExternalMemory = 485,
    CUPTI_DRIVER_TRACE_CBID_cuExternalMemoryGetMappedBuffer = 486,
    CUPTI_DRIVER_TRACE_CBID_cuExternalMemoryGetMappedMipmappedArray = 487,
    CUPTI_DRIVER_TRACE_CBID_cuDestroyExternalMemory = 488,
    CUPTI_DRIVER_TRACE_CBID_cuImportExternalSemaphore = 489,
    CUPTI_DRIVER_TRACE_CBID_cuSignalExternalSemaphoresAsync = 490,
    CUPTI_DRIVER_TRACE_CBID_cuSignalExternalSemaphoresAsync_ptsz = 491,
    CUPTI_DRIVER_TRACE_CBID_cuWaitExternalSemaphoresAsync = 492,
    CUPTI_DRIVER_TRACE_CBID_cuWaitExternalSemaphoresAsync_ptsz = 493,
    CUPTI_DRIVER_TRACE_CBID_cuDestroyExternalSemaphore = 494,
    CUPTI_DRIVER_TRACE_CBID_cuStreamBeginCapture = 495,
    CUPTI_DRIVER_TRACE_CBID_cuStreamBeginCapture_ptsz = 496,
    CUPTI_DRIVER_TRACE_CBID_cuStreamEndCapture = 497,
    CUPTI_DRIVER_TRACE_CBID_cuStreamEndCapture_ptsz = 498,
    CUPTI_DRIVER_TRACE_CBID_cuStreamIsCapturing = 499,
    CUPTI_DRIVER_TRACE_CBID_cuStreamIsCapturing_ptsz = 500,
    CUPTI_DRIVER_TRACE_CBID_cuGraphCreate = 501,
    CUPTI_DRIVER_TRACE_CBID_cuGraphAddKernelNode = 502,
    CUPTI_DRIVER_TRACE_CBID_cuGraphKernelNodeGetParams = 503,
    CUPTI_DRIVER_TRACE_CBID_cuGraphAddMemcpyNode = 504,
    CUPTI_DRIVER_TRACE_CBID_cuGraphMemcpyNodeGetParams = 505,
    CUPTI_DRIVER_TRACE_CBID_cuGraphAddMemsetNode = 506,
    CUPTI_DRIVER_TRACE_CBID_cuGraphMemsetNodeGetParams = 507,
    CUPTI_DRIVER_TRACE_CBID_cuGraphMemsetNodeSetParams = 508,
    CUPTI_DRIVER_TRACE_CBID_cuGraphNodeGetType = 509,
    CUPTI_DRIVER_TRACE_CBID_cuGraphGetRootNodes = 510,
    CUPTI_DRIVER_TRACE_CBID_cuGraphNodeGetDependencies = 511,
    CUPTI_DRIVER_TRACE_CBID_cuGraphNodeGetDependentNodes = 512,
    CUPTI_DRIVER_TRACE_CBID_cuGraphInstantiate = 513,
    CUPTI_DRIVER_TRACE_CBID_cuGraphLaunch = 514,
    CUPTI_DRIVER_TRACE_CBID_cuGraphLaunch_ptsz = 515,
    CUPTI_DRIVER_TRACE_CBID_cuGraphExecDestroy = 516,
    CUPTI_DRIVER_TRACE_CBID_cuGraphDestroy = 517,
    CUPTI_DRIVER_TRACE_CBID_cuGraphAddDependencies = 518,
    CUPTI_DRIVER_TRACE_CBID_cuGraphRemoveDependencies = 519,
    CUPTI_DRIVER_TRACE_CBID_cuGraphMemcpyNodeSetParams = 520,
    CUPTI_DRIVER_TRACE_CBID_cuGraphKernelNodeSetParams = 521,
    CUPTI_DRIVER_TRACE_CBID_cuGraphDestroyNode = 522,
    CUPTI_DRIVER_TRACE_CBID_cuGraphClone = 523,
    CUPTI_DRIVER_TRACE_CBID_cuGraphNodeFindInClone = 524,
    CUPTI_DRIVER_TRACE_CBID_cuGraphAddChildGraphNode = 525,
    CUPTI_DRIVER_TRACE_CBID_cuGraphAddEmptyNode = 526,
    CUPTI_DRIVER_TRACE_CBID_cuLaunchHostFunc = 527,
    CUPTI_DRIVER_TRACE_CBID_cuLaunchHostFunc_ptsz = 528,
    CUPTI_DRIVER_TRACE_CBID_cuGraphChildGraphNodeGetGraph = 529,
    CUPTI_DRIVER_TRACE_CBID_cuGraphAddHostNode = 530,
    CUPTI_DRIVER_TRACE_CBID_cuGraphHostNodeGetParams = 531,
    CUPTI_DRIVER_TRACE_CBID_cuDeviceGetLuid = 532,
    CUPTI_DRIVER_TRACE_CBID_cuGraphHostNodeSetParams = 533,
    CUPTI_DRIVER_TRACE_CBID_cuGraphGetNodes = 534,
    CUPTI_DRIVER_TRACE_CBID_cuGraphGetEdges = 535,
    CUPTI_DRIVER_TRACE_CBID_cuStreamGetCaptureInfo = 536,
    CUPTI_DRIVER_TRACE_CBID_cuStreamGetCaptureInfo_ptsz = 537,
    CUPTI_DRIVER_TRACE_CBID_cuGraphExecKernelNodeSetParams = 538,
    CUPTI_DRIVER_TRACE_CBID_cuStreamBeginCapture_v2 = 539,
    CUPTI_DRIVER_TRACE_CBID_cuStreamBeginCapture_v2_ptsz = 540,
    CUPTI_DRIVER_TRACE_CBID_cuThreadExchangeStreamCaptureMode = 541,
    CUPTI_DRIVER_TRACE_CBID_cuDeviceGetNvSciSyncAttributes = 542,
    CUPTI_DRIVER_TRACE_CBID_cuOccupancyAvailableDynamicSMemPerBlock = 543,
    CUPTI_DRIVER_TRACE_CBID_cuDevicePrimaryCtxRelease_v2 = 544,
    CUPTI_DRIVER_TRACE_CBID_cuDevicePrimaryCtxReset_v2 = 545,
    CUPTI_DRIVER_TRACE_CBID_cuDevicePrimaryCtxSetFlags_v2 = 546,
    CUPTI_DRIVER_TRACE_CBID_cuMemAddressReserve = 547,
    CUPTI_DRIVER_TRACE_CBID_cuMemAddressFree = 548,
    CUPTI_DRIVER_TRACE_CBID_cuMemCreate = 549,
    CUPTI_DRIVER_TRACE_CBID_cuMemRelease = 550,
    CUPTI_DRIVER_TRACE_CBID_cuMemMap = 551,
    CUPTI_DRIVER_TRACE_CBID_cuMemUnmap = 552,
    CUPTI_DRIVER_TRACE_CBID_cuMemSetAccess = 553,
    CUPTI_DRIVER_TRACE_CBID_cuMemExportToShareableHandle = 554,
    CUPTI_DRIVER_TRACE_CBID_cuMemImportFromShareableHandle = 555,
    CUPTI_DRIVER_TRACE_CBID_cuMemGetAllocationGranularity = 556,
    CUPTI_DRIVER_TRACE_CBID_cuMemGetAllocationPropertiesFromHandle = 557,
    CUPTI_DRIVER_TRACE_CBID_cuMemGetAccess = 558,
    CUPTI_DRIVER_TRACE_CBID_cuStreamSetFlags = 559,
    CUPTI_DRIVER_TRACE_CBID_cuStreamSetFlags_ptsz = 560,
    CUPTI_DRIVER_TRACE_CBID_cuGraphExecUpdate = 561,
    CUPTI_DRIVER_TRACE_CBID_cuGraphExecMemcpyNodeSetParams = 562,
    CUPTI_DRIVER_TRACE_CBID_cuGraphExecMemsetNodeSetParams = 563,
    CUPTI_DRIVER_TRACE_CBID_cuGraphExecHostNodeSetParams = 564,
    CUPTI_DRIVER_TRACE_CBID_cuMemRetainAllocationHandle = 565,
    CUPTI_DRIVER_TRACE_CBID_cuFuncGetModule = 566,
    CUPTI_DRIVER_TRACE_CBID_cuIpcOpenMemHandle_v2 = 567,
    CUPTI_DRIVER_TRACE_CBID_cuCtxResetPersistingL2Cache = 568,
    CUPTI_DRIVER_TRACE_CBID_cuGraphKernelNodeCopyAttributes = 569,
    CUPTI_DRIVER_TRACE_CBID_cuGraphKernelNodeGetAttribute = 570,
    CUPTI_DRIVER_TRACE_CBID_cuGraphKernelNodeSetAttribute = 571,
    CUPTI_DRIVER_TRACE_CBID_cuStreamCopyAttributes = 572,
    CUPTI_DRIVER_TRACE_CBID_cuStreamCopyAttributes_ptsz = 573,
    CUPTI_DRIVER_TRACE_CBID_cuStreamGetAttribute = 574,
    CUPTI_DRIVER_TRACE_CBID_cuStreamGetAttribute_ptsz = 575,
    CUPTI_DRIVER_TRACE_CBID_cuStreamSetAttribute = 576,
    CUPTI_DRIVER_TRACE_CBID_cuStreamSetAttribute_ptsz = 577,
    CUPTI_DRIVER_TRACE_CBID_cuGraphInstantiate_v2 = 578,
    CUPTI_DRIVER_TRACE_CBID_cuDeviceGetTexture1DLinearMaxWidth = 579,
    CUPTI_DRIVER_TRACE_CBID_cuGraphUpload = 580,
    CUPTI_DRIVER_TRACE_CBID_cuGraphUpload_ptsz = 581,
    CUPTI_DRIVER_TRACE_CBID_cuArrayGetSparseProperties = 582,
    CUPTI_DRIVER_TRACE_CBID_cuMipmappedArrayGetSparseProperties = 583,
    CUPTI_DRIVER_TRACE_CBID_cuMemMapArrayAsync = 584,
    CUPTI_DRIVER_TRACE_CBID_cuMemMapArrayAsync_ptsz = 585,
    CUPTI_DRIVER_TRACE_CBID_cuGraphExecChildGraphNodeSetParams = 586,
    CUPTI_DRIVER_TRACE_CBID_cuEventRecordWithFlags = 587,
    CUPTI_DRIVER_TRACE_CBID_cuEventRecordWithFlags_ptsz = 588,
    CUPTI_DRIVER_TRACE_CBID_cuGraphAddEventRecordNode = 589,
    CUPTI_DRIVER_TRACE_CBID_cuGraphAddEventWaitNode = 590,
    CUPTI_DRIVER_TRACE_CBID_cuGraphEventRecordNodeGetEvent = 591,
    CUPTI_DRIVER_TRACE_CBID_cuGraphEventWaitNodeGetEvent = 592,
    CUPTI_DRIVER_TRACE_CBID_cuGraphEventRecordNodeSetEvent = 593,
    CUPTI_DRIVER_TRACE_CBID_cuGraphEventWaitNodeSetEvent = 594,
    CUPTI_DRIVER_TRACE_CBID_cuGraphExecEventRecordNodeSetEvent = 595,
    CUPTI_DRIVER_TRACE_CBID_cuGraphExecEventWaitNodeSetEvent = 596,
    CUPTI_DRIVER_TRACE_CBID_cuArrayGetPlane = 597,
    CUPTI_DRIVER_TRACE_CBID_cuMemAllocAsync = 598,
    CUPTI_DRIVER_TRACE_CBID_cuMemAllocAsync_ptsz = 599,
    CUPTI_DRIVER_TRACE_CBID_cuMemFreeAsync = 600,
    CUPTI_DRIVER_TRACE_CBID_cuMemFreeAsync_ptsz = 601,
    CUPTI_DRIVER_TRACE_CBID_cuMemPoolTrimTo = 602,
    CUPTI_DRIVER_TRACE_CBID_cuMemPoolSetAttribute = 603,
    CUPTI_DRIVER_TRACE_CBID_cuMemPoolGetAttribute = 604,
    CUPTI_DRIVER_TRACE_CBID_cuMemPoolSetAccess = 605,
    CUPTI_DRIVER_TRACE_CBID_cuDeviceGetDefaultMemPool = 606,
    CUPTI_DRIVER_TRACE_CBID_cuMemPoolCreate = 607,
    CUPTI_DRIVER_TRACE_CBID_cuMemPoolDestroy = 608,
    CUPTI_DRIVER_TRACE_CBID_cuDeviceSetMemPool = 609,
    CUPTI_DRIVER_TRACE_CBID_cuDeviceGetMemPool = 610,
    CUPTI_DRIVER_TRACE_CBID_cuMemAllocFromPoolAsync = 611,
    CUPTI_DRIVER_TRACE_CBID_cuMemAllocFromPoolAsync_ptsz = 612,
    CUPTI_DRIVER_TRACE_CBID_cuMemPoolExportToShareableHandle = 613,
    CUPTI_DRIVER_TRACE_CBID_cuMemPoolImportFromShareableHandle = 614,
    CUPTI_DRIVER_TRACE_CBID_cuMemPoolExportPointer = 615,
    CUPTI_DRIVER_TRACE_CBID_cuMemPoolImportPointer = 616,
    CUPTI_DRIVER_TRACE_CBID_cuMemPoolGetAccess = 617,
    CUPTI_DRIVER_TRACE_CBID_cuGraphAddExternalSemaphoresSignalNode = 618,
    CUPTI_DRIVER_TRACE_CBID_cuGraphExternalSemaphoresSignalNodeGetParams = 619,
    CUPTI_DRIVER_TRACE_CBID_cuGraphExternalSemaphoresSignalNodeSetParams = 620,
    CUPTI_DRIVER_TRACE_CBID_cuGraphAddExternalSemaphoresWaitNode = 621,
    CUPTI_DRIVER_TRACE_CBID_cuGraphExternalSemaphoresWaitNodeGetParams = 622,
    CUPTI_DRIVER_TRACE_CBID_cuGraphExternalSemaphoresWaitNodeSetParams = 623,
    CUPTI_DRIVER_TRACE_CBID_cuGraphExecExternalSemaphoresSignalNodeSetParams = 624,
    CUPTI_DRIVER_TRACE_CBID_cuGraphExecExternalSemaphoresWaitNodeSetParams = 625,
    CUPTI_DRIVER_TRACE_CBID_cuGetProcAddress = 626,
    CUPTI_DRIVER_TRACE_CBID_cuFlushGPUDirectRDMAWrites = 627,
    CUPTI_DRIVER_TRACE_CBID_cuGraphDebugDotPrint = 628,
    CUPTI_DRIVER_TRACE_CBID_cuStreamGetCaptureInfo_v2 = 629,
    CUPTI_DRIVER_TRACE_CBID_cuStreamGetCaptureInfo_v2_ptsz = 630,
    CUPTI_DRIVER_TRACE_CBID_cuStreamUpdateCaptureDependencies = 631,
    CUPTI_DRIVER_TRACE_CBID_cuStreamUpdateCaptureDependencies_ptsz = 632,
    CUPTI_DRIVER_TRACE_CBID_cuUserObjectCreate = 633,
    CUPTI_DRIVER_TRACE_CBID_cuUserObjectRetain = 634,
    CUPTI_DRIVER_TRACE_CBID_cuUserObjectRelease = 635,
    CUPTI_DRIVER_TRACE_CBID_cuGraphRetainUserObject = 636,
    CUPTI_DRIVER_TRACE_CBID_cuGraphReleaseUserObject = 637,
    CUPTI_DRIVER_TRACE_CBID_cuGraphAddMemAllocNode = 638,
    CUPTI_DRIVER_TRACE_CBID_cuGraphAddMemFreeNode = 639,
    CUPTI_DRIVER_TRACE_CBID_cuDeviceGraphMemTrim = 640,
    CUPTI_DRIVER_TRACE_CBID_cuDeviceGetGraphMemAttribute = 641,
    CUPTI_DRIVER_TRACE_CBID_cuDeviceSetGraphMemAttribute = 642,
    CUPTI_DRIVER_TRACE_CBID_cuGraphInstantiateWithFlags = 643,
    CUPTI_DRIVER_TRACE_CBID_cuDeviceGetExecAffinitySupport = 644,
    CUPTI_DRIVER_TRACE_CBID_cuCtxCreate_v3 = 645,
    CUPTI_DRIVER_TRACE_CBID_cuCtxGetExecAffinity = 646,
    CUPTI_DRIVER_TRACE_CBID_cuDeviceGetUuid_v2 = 647,
    CUPTI_DRIVER_TRACE_CBID_cuGraphMemAllocNodeGetParams = 648,
    CUPTI_DRIVER_TRACE_CBID_cuGraphMemFreeNodeGetParams = 649,
    CUPTI_DRIVER_TRACE_CBID_cuGraphNodeSetEnabled = 650,
    CUPTI_DRIVER_TRACE_CBID_cuGraphNodeGetEnabled = 651,
    CUPTI_DRIVER_TRACE_CBID_cuLaunchKernelEx = 652,
    CUPTI_DRIVER_TRACE_CBID_cuLaunchKernelEx_ptsz = 653,
    CUPTI_DRIVER_TRACE_CBID_cuArrayGetMemoryRequirements = 654,
    CUPTI_DRIVER_TRACE_CBID_cuMipmappedArrayGetMemoryRequirements = 655,
    CUPTI_DRIVER_TRACE_CBID_cuGraphInstantiateWithParams = 656,
    CUPTI_DRIVER_TRACE_CBID_cuGraphInstantiateWithParams_ptsz = 657,
    CUPTI_DRIVER_TRACE_CBID_cuGraphExecGetFlags = 658,
    CUPTI_DRIVER_TRACE_CBID_cuStreamWaitValue32_v2 = 659,
    CUPTI_DRIVER_TRACE_CBID_cuStreamWaitValue32_v2_ptsz = 660,
    CUPTI_DRIVER_TRACE_CBID_cuStreamWaitValue64_v2 = 661,
    CUPTI_DRIVER_TRACE_CBID_cuStreamWaitValue64_v2_ptsz = 662,
    CUPTI_DRIVER_TRACE_CBID_cuStreamWriteValue32_v2 = 663,
    CUPTI_DRIVER_TRACE_CBID_cuStreamWriteValue32_v2_ptsz = 664,
    CUPTI_DRIVER_TRACE_CBID_cuStreamWriteValue64_v2 = 665,
    CUPTI_DRIVER_TRACE_CBID_cuStreamWriteValue64_v2_ptsz = 666,
    CUPTI_DRIVER_TRACE_CBID_cuStreamBatchMemOp_v2 = 667,
    CUPTI_DRIVER_TRACE_CBID_cuStreamBatchMemOp_v2_ptsz = 668,
    CUPTI_DRIVER_TRACE_CBID_cuGraphAddBatchMemOpNode = 669,
    CUPTI_DRIVER_TRACE_CBID_cuGraphBatchMemOpNodeGetParams = 670,
    CUPTI_DRIVER_TRACE_CBID_cuGraphBatchMemOpNodeSetParams = 671,
    CUPTI_DRIVER_TRACE_CBID_cuGraphExecBatchMemOpNodeSetParams = 672,
    CUPTI_DRIVER_TRACE_CBID_cuModuleGetLoadingMode = 673,
    CUPTI_DRIVER_TRACE_CBID_cuMemGetHandleForAddressRange = 674,
    CUPTI_DRIVER_TRACE_CBID_cuOccupancyMaxPotentialClusterSize = 675,
    CUPTI_DRIVER_TRACE_CBID_cuOccupancyMaxActiveClusters = 676,
    CUPTI_DRIVER_TRACE_CBID_cuGetProcAddress_v2 = 677,
    CUPTI_DRIVER_TRACE_CBID_cuLibraryLoadData = 678,
    CUPTI_DRIVER_TRACE_CBID_cuLibraryLoadFromFile = 679,
    CUPTI_DRIVER_TRACE_CBID_cuLibraryUnload = 680,
    CUPTI_DRIVER_TRACE_CBID_cuLibraryGetKernel = 681,
    CUPTI_DRIVER_TRACE_CBID_cuLibraryGetModule = 682,
    CUPTI_DRIVER_TRACE_CBID_cuKernelGetFunction = 683,
    CUPTI_DRIVER_TRACE_CBID_cuLibraryGetGlobal = 684,
    CUPTI_DRIVER_TRACE_CBID_cuLibraryGetManaged = 685,
    CUPTI_DRIVER_TRACE_CBID_cuKernelGetAttribute = 686,
    CUPTI_DRIVER_TRACE_CBID_cuKernelSetAttribute = 687,
    CUPTI_DRIVER_TRACE_CBID_cuKernelSetCacheConfig = 688,
    CUPTI_DRIVER_TRACE_CBID_cuGraphAddKernelNode_v2 = 689,
    CUPTI_DRIVER_TRACE_CBID_cuGraphKernelNodeGetParams_v2 = 690,
    CUPTI_DRIVER_TRACE_CBID_cuGraphKernelNodeSetParams_v2 = 691,
    CUPTI_DRIVER_TRACE_CBID_cuGraphExecKernelNodeSetParams_v2 = 692,
    CUPTI_DRIVER_TRACE_CBID_cuStreamGetId = 693,
    CUPTI_DRIVER_TRACE_CBID_cuStreamGetId_ptsz = 694,
    CUPTI_DRIVER_TRACE_CBID_cuCtxGetId = 695,
    CUPTI_DRIVER_TRACE_CBID_cuGraphExecUpdate_v2 = 696,
    CUPTI_DRIVER_TRACE_CBID_cuTensorMapEncodeTiled = 697,
    CUPTI_DRIVER_TRACE_CBID_cuTensorMapEncodeIm2col = 698,
    CUPTI_DRIVER_TRACE_CBID_cuTensorMapReplaceAddress = 699,
    CUPTI_DRIVER_TRACE_CBID_cuLibraryGetUnifiedFunction = 700,
    CUPTI_DRIVER_TRACE_CBID_SIZE = 701,
    CUPTI_DRIVER_TRACE_CBID_FORCE_INT = 2147483647,
}
pub use self::CUpti_driver_api_trace_cbid_enum as CUpti_driver_api_trace_cbid;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_runtime_api_trace_cbid_enum {
    CUPTI_RUNTIME_TRACE_CBID_INVALID = 0,
    CUPTI_RUNTIME_TRACE_CBID_cudaDriverGetVersion_v3020 = 1,
    CUPTI_RUNTIME_TRACE_CBID_cudaRuntimeGetVersion_v3020 = 2,
    CUPTI_RUNTIME_TRACE_CBID_cudaGetDeviceCount_v3020 = 3,
    CUPTI_RUNTIME_TRACE_CBID_cudaGetDeviceProperties_v3020 = 4,
    CUPTI_RUNTIME_TRACE_CBID_cudaChooseDevice_v3020 = 5,
    CUPTI_RUNTIME_TRACE_CBID_cudaGetChannelDesc_v3020 = 6,
    CUPTI_RUNTIME_TRACE_CBID_cudaCreateChannelDesc_v3020 = 7,
    CUPTI_RUNTIME_TRACE_CBID_cudaConfigureCall_v3020 = 8,
    CUPTI_RUNTIME_TRACE_CBID_cudaSetupArgument_v3020 = 9,
    CUPTI_RUNTIME_TRACE_CBID_cudaGetLastError_v3020 = 10,
    CUPTI_RUNTIME_TRACE_CBID_cudaPeekAtLastError_v3020 = 11,
    CUPTI_RUNTIME_TRACE_CBID_cudaGetErrorString_v3020 = 12,
    CUPTI_RUNTIME_TRACE_CBID_cudaLaunch_v3020 = 13,
    CUPTI_RUNTIME_TRACE_CBID_cudaFuncSetCacheConfig_v3020 = 14,
    CUPTI_RUNTIME_TRACE_CBID_cudaFuncGetAttributes_v3020 = 15,
    CUPTI_RUNTIME_TRACE_CBID_cudaSetDevice_v3020 = 16,
    CUPTI_RUNTIME_TRACE_CBID_cudaGetDevice_v3020 = 17,
    CUPTI_RUNTIME_TRACE_CBID_cudaSetValidDevices_v3020 = 18,
    CUPTI_RUNTIME_TRACE_CBID_cudaSetDeviceFlags_v3020 = 19,
    CUPTI_RUNTIME_TRACE_CBID_cudaMalloc_v3020 = 20,
    CUPTI_RUNTIME_TRACE_CBID_cudaMallocPitch_v3020 = 21,
    CUPTI_RUNTIME_TRACE_CBID_cudaFree_v3020 = 22,
    CUPTI_RUNTIME_TRACE_CBID_cudaMallocArray_v3020 = 23,
    CUPTI_RUNTIME_TRACE_CBID_cudaFreeArray_v3020 = 24,
    CUPTI_RUNTIME_TRACE_CBID_cudaMallocHost_v3020 = 25,
    CUPTI_RUNTIME_TRACE_CBID_cudaFreeHost_v3020 = 26,
    CUPTI_RUNTIME_TRACE_CBID_cudaHostAlloc_v3020 = 27,
    CUPTI_RUNTIME_TRACE_CBID_cudaHostGetDevicePointer_v3020 = 28,
    CUPTI_RUNTIME_TRACE_CBID_cudaHostGetFlags_v3020 = 29,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemGetInfo_v3020 = 30,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpy_v3020 = 31,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpy2D_v3020 = 32,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpyToArray_v3020 = 33,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpy2DToArray_v3020 = 34,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpyFromArray_v3020 = 35,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpy2DFromArray_v3020 = 36,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpyArrayToArray_v3020 = 37,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpy2DArrayToArray_v3020 = 38,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpyToSymbol_v3020 = 39,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpyFromSymbol_v3020 = 40,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpyAsync_v3020 = 41,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpyToArrayAsync_v3020 = 42,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpyFromArrayAsync_v3020 = 43,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpy2DAsync_v3020 = 44,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpy2DToArrayAsync_v3020 = 45,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpy2DFromArrayAsync_v3020 = 46,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpyToSymbolAsync_v3020 = 47,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpyFromSymbolAsync_v3020 = 48,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemset_v3020 = 49,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemset2D_v3020 = 50,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemsetAsync_v3020 = 51,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemset2DAsync_v3020 = 52,
    CUPTI_RUNTIME_TRACE_CBID_cudaGetSymbolAddress_v3020 = 53,
    CUPTI_RUNTIME_TRACE_CBID_cudaGetSymbolSize_v3020 = 54,
    CUPTI_RUNTIME_TRACE_CBID_cudaBindTexture_v3020 = 55,
    CUPTI_RUNTIME_TRACE_CBID_cudaBindTexture2D_v3020 = 56,
    CUPTI_RUNTIME_TRACE_CBID_cudaBindTextureToArray_v3020 = 57,
    CUPTI_RUNTIME_TRACE_CBID_cudaUnbindTexture_v3020 = 58,
    CUPTI_RUNTIME_TRACE_CBID_cudaGetTextureAlignmentOffset_v3020 = 59,
    CUPTI_RUNTIME_TRACE_CBID_cudaGetTextureReference_v3020 = 60,
    CUPTI_RUNTIME_TRACE_CBID_cudaBindSurfaceToArray_v3020 = 61,
    CUPTI_RUNTIME_TRACE_CBID_cudaGetSurfaceReference_v3020 = 62,
    CUPTI_RUNTIME_TRACE_CBID_cudaGLSetGLDevice_v3020 = 63,
    CUPTI_RUNTIME_TRACE_CBID_cudaGLRegisterBufferObject_v3020 = 64,
    CUPTI_RUNTIME_TRACE_CBID_cudaGLMapBufferObject_v3020 = 65,
    CUPTI_RUNTIME_TRACE_CBID_cudaGLUnmapBufferObject_v3020 = 66,
    CUPTI_RUNTIME_TRACE_CBID_cudaGLUnregisterBufferObject_v3020 = 67,
    CUPTI_RUNTIME_TRACE_CBID_cudaGLSetBufferObjectMapFlags_v3020 = 68,
    CUPTI_RUNTIME_TRACE_CBID_cudaGLMapBufferObjectAsync_v3020 = 69,
    CUPTI_RUNTIME_TRACE_CBID_cudaGLUnmapBufferObjectAsync_v3020 = 70,
    CUPTI_RUNTIME_TRACE_CBID_cudaWGLGetDevice_v3020 = 71,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphicsGLRegisterImage_v3020 = 72,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphicsGLRegisterBuffer_v3020 = 73,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphicsUnregisterResource_v3020 = 74,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphicsResourceSetMapFlags_v3020 = 75,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphicsMapResources_v3020 = 76,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphicsUnmapResources_v3020 = 77,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphicsResourceGetMappedPointer_v3020 = 78,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphicsSubResourceGetMappedArray_v3020 = 79,
    CUPTI_RUNTIME_TRACE_CBID_cudaVDPAUGetDevice_v3020 = 80,
    CUPTI_RUNTIME_TRACE_CBID_cudaVDPAUSetVDPAUDevice_v3020 = 81,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphicsVDPAURegisterVideoSurface_v3020 = 82,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphicsVDPAURegisterOutputSurface_v3020 = 83,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D11GetDevice_v3020 = 84,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D11GetDevices_v3020 = 85,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D11SetDirect3DDevice_v3020 = 86,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphicsD3D11RegisterResource_v3020 = 87,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D10GetDevice_v3020 = 88,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D10GetDevices_v3020 = 89,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D10SetDirect3DDevice_v3020 = 90,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphicsD3D10RegisterResource_v3020 = 91,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D10RegisterResource_v3020 = 92,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D10UnregisterResource_v3020 = 93,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D10MapResources_v3020 = 94,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D10UnmapResources_v3020 = 95,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D10ResourceSetMapFlags_v3020 = 96,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D10ResourceGetSurfaceDimensions_v3020 = 97,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D10ResourceGetMappedArray_v3020 = 98,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D10ResourceGetMappedPointer_v3020 = 99,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D10ResourceGetMappedSize_v3020 = 100,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D10ResourceGetMappedPitch_v3020 = 101,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D9GetDevice_v3020 = 102,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D9GetDevices_v3020 = 103,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D9SetDirect3DDevice_v3020 = 104,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D9GetDirect3DDevice_v3020 = 105,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphicsD3D9RegisterResource_v3020 = 106,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D9RegisterResource_v3020 = 107,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D9UnregisterResource_v3020 = 108,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D9MapResources_v3020 = 109,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D9UnmapResources_v3020 = 110,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D9ResourceSetMapFlags_v3020 = 111,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D9ResourceGetSurfaceDimensions_v3020 = 112,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D9ResourceGetMappedArray_v3020 = 113,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D9ResourceGetMappedPointer_v3020 = 114,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D9ResourceGetMappedSize_v3020 = 115,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D9ResourceGetMappedPitch_v3020 = 116,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D9Begin_v3020 = 117,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D9End_v3020 = 118,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D9RegisterVertexBuffer_v3020 = 119,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D9UnregisterVertexBuffer_v3020 = 120,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D9MapVertexBuffer_v3020 = 121,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D9UnmapVertexBuffer_v3020 = 122,
    CUPTI_RUNTIME_TRACE_CBID_cudaThreadExit_v3020 = 123,
    CUPTI_RUNTIME_TRACE_CBID_cudaSetDoubleForDevice_v3020 = 124,
    CUPTI_RUNTIME_TRACE_CBID_cudaSetDoubleForHost_v3020 = 125,
    CUPTI_RUNTIME_TRACE_CBID_cudaThreadSynchronize_v3020 = 126,
    CUPTI_RUNTIME_TRACE_CBID_cudaThreadGetLimit_v3020 = 127,
    CUPTI_RUNTIME_TRACE_CBID_cudaThreadSetLimit_v3020 = 128,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamCreate_v3020 = 129,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamDestroy_v3020 = 130,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamSynchronize_v3020 = 131,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamQuery_v3020 = 132,
    CUPTI_RUNTIME_TRACE_CBID_cudaEventCreate_v3020 = 133,
    CUPTI_RUNTIME_TRACE_CBID_cudaEventCreateWithFlags_v3020 = 134,
    CUPTI_RUNTIME_TRACE_CBID_cudaEventRecord_v3020 = 135,
    CUPTI_RUNTIME_TRACE_CBID_cudaEventDestroy_v3020 = 136,
    CUPTI_RUNTIME_TRACE_CBID_cudaEventSynchronize_v3020 = 137,
    CUPTI_RUNTIME_TRACE_CBID_cudaEventQuery_v3020 = 138,
    CUPTI_RUNTIME_TRACE_CBID_cudaEventElapsedTime_v3020 = 139,
    CUPTI_RUNTIME_TRACE_CBID_cudaMalloc3D_v3020 = 140,
    CUPTI_RUNTIME_TRACE_CBID_cudaMalloc3DArray_v3020 = 141,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemset3D_v3020 = 142,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemset3DAsync_v3020 = 143,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpy3D_v3020 = 144,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpy3DAsync_v3020 = 145,
    CUPTI_RUNTIME_TRACE_CBID_cudaThreadSetCacheConfig_v3020 = 146,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamWaitEvent_v3020 = 147,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D11GetDirect3DDevice_v3020 = 148,
    CUPTI_RUNTIME_TRACE_CBID_cudaD3D10GetDirect3DDevice_v3020 = 149,
    CUPTI_RUNTIME_TRACE_CBID_cudaThreadGetCacheConfig_v3020 = 150,
    CUPTI_RUNTIME_TRACE_CBID_cudaPointerGetAttributes_v4000 = 151,
    CUPTI_RUNTIME_TRACE_CBID_cudaHostRegister_v4000 = 152,
    CUPTI_RUNTIME_TRACE_CBID_cudaHostUnregister_v4000 = 153,
    CUPTI_RUNTIME_TRACE_CBID_cudaDeviceCanAccessPeer_v4000 = 154,
    CUPTI_RUNTIME_TRACE_CBID_cudaDeviceEnablePeerAccess_v4000 = 155,
    CUPTI_RUNTIME_TRACE_CBID_cudaDeviceDisablePeerAccess_v4000 = 156,
    CUPTI_RUNTIME_TRACE_CBID_cudaPeerRegister_v4000 = 157,
    CUPTI_RUNTIME_TRACE_CBID_cudaPeerUnregister_v4000 = 158,
    CUPTI_RUNTIME_TRACE_CBID_cudaPeerGetDevicePointer_v4000 = 159,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpyPeer_v4000 = 160,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpyPeerAsync_v4000 = 161,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpy3DPeer_v4000 = 162,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpy3DPeerAsync_v4000 = 163,
    CUPTI_RUNTIME_TRACE_CBID_cudaDeviceReset_v3020 = 164,
    CUPTI_RUNTIME_TRACE_CBID_cudaDeviceSynchronize_v3020 = 165,
    CUPTI_RUNTIME_TRACE_CBID_cudaDeviceGetLimit_v3020 = 166,
    CUPTI_RUNTIME_TRACE_CBID_cudaDeviceSetLimit_v3020 = 167,
    CUPTI_RUNTIME_TRACE_CBID_cudaDeviceGetCacheConfig_v3020 = 168,
    CUPTI_RUNTIME_TRACE_CBID_cudaDeviceSetCacheConfig_v3020 = 169,
    CUPTI_RUNTIME_TRACE_CBID_cudaProfilerInitialize_v4000 = 170,
    CUPTI_RUNTIME_TRACE_CBID_cudaProfilerStart_v4000 = 171,
    CUPTI_RUNTIME_TRACE_CBID_cudaProfilerStop_v4000 = 172,
    CUPTI_RUNTIME_TRACE_CBID_cudaDeviceGetByPCIBusId_v4010 = 173,
    CUPTI_RUNTIME_TRACE_CBID_cudaDeviceGetPCIBusId_v4010 = 174,
    CUPTI_RUNTIME_TRACE_CBID_cudaGLGetDevices_v4010 = 175,
    CUPTI_RUNTIME_TRACE_CBID_cudaIpcGetEventHandle_v4010 = 176,
    CUPTI_RUNTIME_TRACE_CBID_cudaIpcOpenEventHandle_v4010 = 177,
    CUPTI_RUNTIME_TRACE_CBID_cudaIpcGetMemHandle_v4010 = 178,
    CUPTI_RUNTIME_TRACE_CBID_cudaIpcOpenMemHandle_v4010 = 179,
    CUPTI_RUNTIME_TRACE_CBID_cudaIpcCloseMemHandle_v4010 = 180,
    CUPTI_RUNTIME_TRACE_CBID_cudaArrayGetInfo_v4010 = 181,
    CUPTI_RUNTIME_TRACE_CBID_cudaFuncSetSharedMemConfig_v4020 = 182,
    CUPTI_RUNTIME_TRACE_CBID_cudaDeviceGetSharedMemConfig_v4020 = 183,
    CUPTI_RUNTIME_TRACE_CBID_cudaDeviceSetSharedMemConfig_v4020 = 184,
    CUPTI_RUNTIME_TRACE_CBID_cudaCreateTextureObject_v5000 = 185,
    CUPTI_RUNTIME_TRACE_CBID_cudaDestroyTextureObject_v5000 = 186,
    CUPTI_RUNTIME_TRACE_CBID_cudaGetTextureObjectResourceDesc_v5000 = 187,
    CUPTI_RUNTIME_TRACE_CBID_cudaGetTextureObjectTextureDesc_v5000 = 188,
    CUPTI_RUNTIME_TRACE_CBID_cudaCreateSurfaceObject_v5000 = 189,
    CUPTI_RUNTIME_TRACE_CBID_cudaDestroySurfaceObject_v5000 = 190,
    CUPTI_RUNTIME_TRACE_CBID_cudaGetSurfaceObjectResourceDesc_v5000 = 191,
    CUPTI_RUNTIME_TRACE_CBID_cudaMallocMipmappedArray_v5000 = 192,
    CUPTI_RUNTIME_TRACE_CBID_cudaGetMipmappedArrayLevel_v5000 = 193,
    CUPTI_RUNTIME_TRACE_CBID_cudaFreeMipmappedArray_v5000 = 194,
    CUPTI_RUNTIME_TRACE_CBID_cudaBindTextureToMipmappedArray_v5000 = 195,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphicsResourceGetMappedMipmappedArray_v5000 = 196,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamAddCallback_v5000 = 197,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamCreateWithFlags_v5000 = 198,
    CUPTI_RUNTIME_TRACE_CBID_cudaGetTextureObjectResourceViewDesc_v5000 = 199,
    CUPTI_RUNTIME_TRACE_CBID_cudaDeviceGetAttribute_v5000 = 200,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamDestroy_v5050 = 201,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamCreateWithPriority_v5050 = 202,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamGetPriority_v5050 = 203,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamGetFlags_v5050 = 204,
    CUPTI_RUNTIME_TRACE_CBID_cudaDeviceGetStreamPriorityRange_v5050 = 205,
    CUPTI_RUNTIME_TRACE_CBID_cudaMallocManaged_v6000 = 206,
    CUPTI_RUNTIME_TRACE_CBID_cudaOccupancyMaxActiveBlocksPerMultiprocessor_v6000 = 207,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamAttachMemAsync_v6000 = 208,
    CUPTI_RUNTIME_TRACE_CBID_cudaGetErrorName_v6050 = 209,
    CUPTI_RUNTIME_TRACE_CBID_cudaOccupancyMaxActiveBlocksPerMultiprocessor_v6050 = 210,
    CUPTI_RUNTIME_TRACE_CBID_cudaLaunchKernel_v7000 = 211,
    CUPTI_RUNTIME_TRACE_CBID_cudaGetDeviceFlags_v7000 = 212,
    CUPTI_RUNTIME_TRACE_CBID_cudaLaunch_ptsz_v7000 = 213,
    CUPTI_RUNTIME_TRACE_CBID_cudaLaunchKernel_ptsz_v7000 = 214,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpy_ptds_v7000 = 215,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpy2D_ptds_v7000 = 216,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpyToArray_ptds_v7000 = 217,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpy2DToArray_ptds_v7000 = 218,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpyFromArray_ptds_v7000 = 219,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpy2DFromArray_ptds_v7000 = 220,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpyArrayToArray_ptds_v7000 = 221,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpy2DArrayToArray_ptds_v7000 = 222,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpyToSymbol_ptds_v7000 = 223,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpyFromSymbol_ptds_v7000 = 224,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpyAsync_ptsz_v7000 = 225,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpyToArrayAsync_ptsz_v7000 = 226,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpyFromArrayAsync_ptsz_v7000 = 227,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpy2DAsync_ptsz_v7000 = 228,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpy2DToArrayAsync_ptsz_v7000 = 229,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpy2DFromArrayAsync_ptsz_v7000 = 230,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpyToSymbolAsync_ptsz_v7000 = 231,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpyFromSymbolAsync_ptsz_v7000 = 232,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemset_ptds_v7000 = 233,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemset2D_ptds_v7000 = 234,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemsetAsync_ptsz_v7000 = 235,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemset2DAsync_ptsz_v7000 = 236,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamGetPriority_ptsz_v7000 = 237,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamGetFlags_ptsz_v7000 = 238,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamSynchronize_ptsz_v7000 = 239,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamQuery_ptsz_v7000 = 240,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamAttachMemAsync_ptsz_v7000 = 241,
    CUPTI_RUNTIME_TRACE_CBID_cudaEventRecord_ptsz_v7000 = 242,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemset3D_ptds_v7000 = 243,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemset3DAsync_ptsz_v7000 = 244,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpy3D_ptds_v7000 = 245,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpy3DAsync_ptsz_v7000 = 246,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamWaitEvent_ptsz_v7000 = 247,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamAddCallback_ptsz_v7000 = 248,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpy3DPeer_ptds_v7000 = 249,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemcpy3DPeerAsync_ptsz_v7000 = 250,
    CUPTI_RUNTIME_TRACE_CBID_cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_v7000 = 251,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemPrefetchAsync_v8000 = 252,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemPrefetchAsync_ptsz_v8000 = 253,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemAdvise_v8000 = 254,
    CUPTI_RUNTIME_TRACE_CBID_cudaDeviceGetP2PAttribute_v8000 = 255,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphicsEGLRegisterImage_v7000 = 256,
    CUPTI_RUNTIME_TRACE_CBID_cudaEGLStreamConsumerConnect_v7000 = 257,
    CUPTI_RUNTIME_TRACE_CBID_cudaEGLStreamConsumerDisconnect_v7000 = 258,
    CUPTI_RUNTIME_TRACE_CBID_cudaEGLStreamConsumerAcquireFrame_v7000 = 259,
    CUPTI_RUNTIME_TRACE_CBID_cudaEGLStreamConsumerReleaseFrame_v7000 = 260,
    CUPTI_RUNTIME_TRACE_CBID_cudaEGLStreamProducerConnect_v7000 = 261,
    CUPTI_RUNTIME_TRACE_CBID_cudaEGLStreamProducerDisconnect_v7000 = 262,
    CUPTI_RUNTIME_TRACE_CBID_cudaEGLStreamProducerPresentFrame_v7000 = 263,
    CUPTI_RUNTIME_TRACE_CBID_cudaEGLStreamProducerReturnFrame_v7000 = 264,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphicsResourceGetMappedEglFrame_v7000 = 265,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemRangeGetAttribute_v8000 = 266,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemRangeGetAttributes_v8000 = 267,
    CUPTI_RUNTIME_TRACE_CBID_cudaEGLStreamConsumerConnectWithFlags_v7000 = 268,
    CUPTI_RUNTIME_TRACE_CBID_cudaLaunchCooperativeKernel_v9000 = 269,
    CUPTI_RUNTIME_TRACE_CBID_cudaLaunchCooperativeKernel_ptsz_v9000 = 270,
    CUPTI_RUNTIME_TRACE_CBID_cudaEventCreateFromEGLSync_v9000 = 271,
    CUPTI_RUNTIME_TRACE_CBID_cudaLaunchCooperativeKernelMultiDevice_v9000 = 272,
    CUPTI_RUNTIME_TRACE_CBID_cudaFuncSetAttribute_v9000 = 273,
    CUPTI_RUNTIME_TRACE_CBID_cudaImportExternalMemory_v10000 = 274,
    CUPTI_RUNTIME_TRACE_CBID_cudaExternalMemoryGetMappedBuffer_v10000 = 275,
    CUPTI_RUNTIME_TRACE_CBID_cudaExternalMemoryGetMappedMipmappedArray_v10000 = 276,
    CUPTI_RUNTIME_TRACE_CBID_cudaDestroyExternalMemory_v10000 = 277,
    CUPTI_RUNTIME_TRACE_CBID_cudaImportExternalSemaphore_v10000 = 278,
    CUPTI_RUNTIME_TRACE_CBID_cudaSignalExternalSemaphoresAsync_v10000 = 279,
    CUPTI_RUNTIME_TRACE_CBID_cudaSignalExternalSemaphoresAsync_ptsz_v10000 = 280,
    CUPTI_RUNTIME_TRACE_CBID_cudaWaitExternalSemaphoresAsync_v10000 = 281,
    CUPTI_RUNTIME_TRACE_CBID_cudaWaitExternalSemaphoresAsync_ptsz_v10000 = 282,
    CUPTI_RUNTIME_TRACE_CBID_cudaDestroyExternalSemaphore_v10000 = 283,
    CUPTI_RUNTIME_TRACE_CBID_cudaLaunchHostFunc_v10000 = 284,
    CUPTI_RUNTIME_TRACE_CBID_cudaLaunchHostFunc_ptsz_v10000 = 285,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphCreate_v10000 = 286,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphKernelNodeGetParams_v10000 = 287,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphKernelNodeSetParams_v10000 = 288,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphAddKernelNode_v10000 = 289,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphAddMemcpyNode_v10000 = 290,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphMemcpyNodeGetParams_v10000 = 291,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphMemcpyNodeSetParams_v10000 = 292,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphAddMemsetNode_v10000 = 293,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphMemsetNodeGetParams_v10000 = 294,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphMemsetNodeSetParams_v10000 = 295,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphAddHostNode_v10000 = 296,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphHostNodeGetParams_v10000 = 297,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphAddChildGraphNode_v10000 = 298,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphChildGraphNodeGetGraph_v10000 = 299,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphAddEmptyNode_v10000 = 300,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphClone_v10000 = 301,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphNodeFindInClone_v10000 = 302,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphNodeGetType_v10000 = 303,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphGetRootNodes_v10000 = 304,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphNodeGetDependencies_v10000 = 305,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphNodeGetDependentNodes_v10000 = 306,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphAddDependencies_v10000 = 307,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphRemoveDependencies_v10000 = 308,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphDestroyNode_v10000 = 309,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphInstantiate_v10000 = 310,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphLaunch_v10000 = 311,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphLaunch_ptsz_v10000 = 312,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphExecDestroy_v10000 = 313,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphDestroy_v10000 = 314,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamBeginCapture_v10000 = 315,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamBeginCapture_ptsz_v10000 = 316,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamIsCapturing_v10000 = 317,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamIsCapturing_ptsz_v10000 = 318,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamEndCapture_v10000 = 319,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamEndCapture_ptsz_v10000 = 320,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphHostNodeSetParams_v10000 = 321,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphGetNodes_v10000 = 322,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphGetEdges_v10000 = 323,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamGetCaptureInfo_v10010 = 324,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamGetCaptureInfo_ptsz_v10010 = 325,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphExecKernelNodeSetParams_v10010 = 326,
    CUPTI_RUNTIME_TRACE_CBID_cudaThreadExchangeStreamCaptureMode_v10010 = 327,
    CUPTI_RUNTIME_TRACE_CBID_cudaDeviceGetNvSciSyncAttributes_v10020 = 328,
    CUPTI_RUNTIME_TRACE_CBID_cudaOccupancyAvailableDynamicSMemPerBlock_v10200 = 329,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamSetFlags_v10200 = 330,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamSetFlags_ptsz_v10200 = 331,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphExecMemcpyNodeSetParams_v10020 = 332,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphExecMemsetNodeSetParams_v10020 = 333,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphExecHostNodeSetParams_v10020 = 334,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphExecUpdate_v10020 = 335,
    CUPTI_RUNTIME_TRACE_CBID_cudaGetFuncBySymbol_v11000 = 336,
    CUPTI_RUNTIME_TRACE_CBID_cudaCtxResetPersistingL2Cache_v11000 = 337,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphKernelNodeCopyAttributes_v11000 = 338,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphKernelNodeGetAttribute_v11000 = 339,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphKernelNodeSetAttribute_v11000 = 340,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamCopyAttributes_v11000 = 341,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamCopyAttributes_ptsz_v11000 = 342,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamGetAttribute_v11000 = 343,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamGetAttribute_ptsz_v11000 = 344,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamSetAttribute_v11000 = 345,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamSetAttribute_ptsz_v11000 = 346,
    CUPTI_RUNTIME_TRACE_CBID_cudaDeviceGetTexture1DLinearMaxWidth_v11010 = 347,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphUpload_v10000 = 348,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphUpload_ptsz_v10000 = 349,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphAddMemcpyNodeToSymbol_v11010 = 350,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphAddMemcpyNodeFromSymbol_v11010 = 351,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphAddMemcpyNode1D_v11010 = 352,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphMemcpyNodeSetParamsToSymbol_v11010 = 353,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphMemcpyNodeSetParamsFromSymbol_v11010 = 354,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphMemcpyNodeSetParams1D_v11010 = 355,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphExecMemcpyNodeSetParamsToSymbol_v11010 = 356,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphExecMemcpyNodeSetParamsFromSymbol_v11010 = 357,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphExecMemcpyNodeSetParams1D_v11010 = 358,
    CUPTI_RUNTIME_TRACE_CBID_cudaArrayGetSparseProperties_v11010 = 359,
    CUPTI_RUNTIME_TRACE_CBID_cudaMipmappedArrayGetSparseProperties_v11010 = 360,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphExecChildGraphNodeSetParams_v11010 = 361,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphAddEventRecordNode_v11010 = 362,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphEventRecordNodeGetEvent_v11010 = 363,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphEventRecordNodeSetEvent_v11010 = 364,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphAddEventWaitNode_v11010 = 365,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphEventWaitNodeGetEvent_v11010 = 366,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphEventWaitNodeSetEvent_v11010 = 367,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphExecEventRecordNodeSetEvent_v11010 = 368,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphExecEventWaitNodeSetEvent_v11010 = 369,
    CUPTI_RUNTIME_TRACE_CBID_cudaEventRecordWithFlags_v11010 = 370,
    CUPTI_RUNTIME_TRACE_CBID_cudaEventRecordWithFlags_ptsz_v11010 = 371,
    CUPTI_RUNTIME_TRACE_CBID_cudaDeviceGetDefaultMemPool_v11020 = 372,
    CUPTI_RUNTIME_TRACE_CBID_cudaMallocAsync_v11020 = 373,
    CUPTI_RUNTIME_TRACE_CBID_cudaMallocAsync_ptsz_v11020 = 374,
    CUPTI_RUNTIME_TRACE_CBID_cudaFreeAsync_v11020 = 375,
    CUPTI_RUNTIME_TRACE_CBID_cudaFreeAsync_ptsz_v11020 = 376,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemPoolTrimTo_v11020 = 377,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemPoolSetAttribute_v11020 = 378,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemPoolGetAttribute_v11020 = 379,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemPoolSetAccess_v11020 = 380,
    CUPTI_RUNTIME_TRACE_CBID_cudaArrayGetPlane_v11020 = 381,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemPoolGetAccess_v11020 = 382,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemPoolCreate_v11020 = 383,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemPoolDestroy_v11020 = 384,
    CUPTI_RUNTIME_TRACE_CBID_cudaDeviceSetMemPool_v11020 = 385,
    CUPTI_RUNTIME_TRACE_CBID_cudaDeviceGetMemPool_v11020 = 386,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemPoolExportToShareableHandle_v11020 = 387,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemPoolImportFromShareableHandle_v11020 = 388,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemPoolExportPointer_v11020 = 389,
    CUPTI_RUNTIME_TRACE_CBID_cudaMemPoolImportPointer_v11020 = 390,
    CUPTI_RUNTIME_TRACE_CBID_cudaMallocFromPoolAsync_v11020 = 391,
    CUPTI_RUNTIME_TRACE_CBID_cudaMallocFromPoolAsync_ptsz_v11020 = 392,
    CUPTI_RUNTIME_TRACE_CBID_cudaSignalExternalSemaphoresAsync_v2_v11020 = 393,
    CUPTI_RUNTIME_TRACE_CBID_cudaSignalExternalSemaphoresAsync_v2_ptsz_v11020 = 394,
    CUPTI_RUNTIME_TRACE_CBID_cudaWaitExternalSemaphoresAsync_v2_v11020 = 395,
    CUPTI_RUNTIME_TRACE_CBID_cudaWaitExternalSemaphoresAsync_v2_ptsz_v11020 = 396,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphAddExternalSemaphoresSignalNode_v11020 = 397,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphExternalSemaphoresSignalNodeGetParams_v11020 = 398,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphExternalSemaphoresSignalNodeSetParams_v11020 = 399,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphAddExternalSemaphoresWaitNode_v11020 = 400,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphExternalSemaphoresWaitNodeGetParams_v11020 = 401,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphExternalSemaphoresWaitNodeSetParams_v11020 = 402,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphExecExternalSemaphoresSignalNodeSetParams_v11020 = 403,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphExecExternalSemaphoresWaitNodeSetParams_v11020 = 404,
    CUPTI_RUNTIME_TRACE_CBID_cudaDeviceFlushGPUDirectRDMAWrites_v11030 = 405,
    CUPTI_RUNTIME_TRACE_CBID_cudaGetDriverEntryPoint_v11030 = 406,
    CUPTI_RUNTIME_TRACE_CBID_cudaGetDriverEntryPoint_ptsz_v11030 = 407,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphDebugDotPrint_v11030 = 408,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamGetCaptureInfo_v2_v11030 = 409,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamGetCaptureInfo_v2_ptsz_v11030 = 410,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamUpdateCaptureDependencies_v11030 = 411,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamUpdateCaptureDependencies_ptsz_v11030 = 412,
    CUPTI_RUNTIME_TRACE_CBID_cudaUserObjectCreate_v11030 = 413,
    CUPTI_RUNTIME_TRACE_CBID_cudaUserObjectRetain_v11030 = 414,
    CUPTI_RUNTIME_TRACE_CBID_cudaUserObjectRelease_v11030 = 415,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphRetainUserObject_v11030 = 416,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphReleaseUserObject_v11030 = 417,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphInstantiateWithFlags_v11040 = 418,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphAddMemAllocNode_v11040 = 419,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphMemAllocNodeGetParams_v11040 = 420,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphAddMemFreeNode_v11040 = 421,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphMemFreeNodeGetParams_v11040 = 422,
    CUPTI_RUNTIME_TRACE_CBID_cudaDeviceGraphMemTrim_v11040 = 423,
    CUPTI_RUNTIME_TRACE_CBID_cudaDeviceGetGraphMemAttribute_v11040 = 424,
    CUPTI_RUNTIME_TRACE_CBID_cudaDeviceSetGraphMemAttribute_v11040 = 425,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphNodeSetEnabled_v11060 = 426,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphNodeGetEnabled_v11060 = 427,
    CUPTI_RUNTIME_TRACE_CBID_cudaArrayGetMemoryRequirements_v11060 = 428,
    CUPTI_RUNTIME_TRACE_CBID_cudaMipmappedArrayGetMemoryRequirements_v11060 = 429,
    CUPTI_RUNTIME_TRACE_CBID_cudaLaunchKernelExC_v11060 = 430,
    CUPTI_RUNTIME_TRACE_CBID_cudaLaunchKernelExC_ptsz_v11060 = 431,
    CUPTI_RUNTIME_TRACE_CBID_cudaOccupancyMaxPotentialClusterSize_v11070 = 432,
    CUPTI_RUNTIME_TRACE_CBID_cudaOccupancyMaxActiveClusters_v11070 = 433,
    CUPTI_RUNTIME_TRACE_CBID_cudaCreateTextureObject_v2_v11080 = 434,
    CUPTI_RUNTIME_TRACE_CBID_cudaGetTextureObjectTextureDesc_v2_v11080 = 435,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphInstantiateWithParams_v12000 = 436,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphInstantiateWithParams_ptsz_v12000 = 437,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphExecGetFlags_v12000 = 438,
    CUPTI_RUNTIME_TRACE_CBID_cuda439_v12000 = 439,
    CUPTI_RUNTIME_TRACE_CBID_cudaGetDeviceProperties_v2_v12000 = 440,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamGetId_v12000 = 441,
    CUPTI_RUNTIME_TRACE_CBID_cudaStreamGetId_ptsz_v12000 = 442,
    CUPTI_RUNTIME_TRACE_CBID_cudaGraphInstantiate_v12000 = 443,
    CUPTI_RUNTIME_TRACE_CBID_cuda444_v12000 = 444,
    CUPTI_RUNTIME_TRACE_CBID_SIZE = 445,
    CUPTI_RUNTIME_TRACE_CBID_FORCE_INT = 2147483647,
}
pub use self::CUpti_runtime_api_trace_cbid_enum as CUpti_runtime_api_trace_cbid;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_nvtx_api_trace_cbid {
    CUPTI_CBID_NVTX_INVALID = 0,
    CUPTI_CBID_NVTX_nvtxMarkA = 1,
    CUPTI_CBID_NVTX_nvtxMarkW = 2,
    CUPTI_CBID_NVTX_nvtxMarkEx = 3,
    CUPTI_CBID_NVTX_nvtxRangeStartA = 4,
    CUPTI_CBID_NVTX_nvtxRangeStartW = 5,
    CUPTI_CBID_NVTX_nvtxRangeStartEx = 6,
    CUPTI_CBID_NVTX_nvtxRangeEnd = 7,
    CUPTI_CBID_NVTX_nvtxRangePushA = 8,
    CUPTI_CBID_NVTX_nvtxRangePushW = 9,
    CUPTI_CBID_NVTX_nvtxRangePushEx = 10,
    CUPTI_CBID_NVTX_nvtxRangePop = 11,
    CUPTI_CBID_NVTX_nvtxNameCategoryA = 12,
    CUPTI_CBID_NVTX_nvtxNameCategoryW = 13,
    CUPTI_CBID_NVTX_nvtxNameOsThreadA = 14,
    CUPTI_CBID_NVTX_nvtxNameOsThreadW = 15,
    CUPTI_CBID_NVTX_nvtxNameCuDeviceA = 16,
    CUPTI_CBID_NVTX_nvtxNameCuDeviceW = 17,
    CUPTI_CBID_NVTX_nvtxNameCuContextA = 18,
    CUPTI_CBID_NVTX_nvtxNameCuContextW = 19,
    CUPTI_CBID_NVTX_nvtxNameCuStreamA = 20,
    CUPTI_CBID_NVTX_nvtxNameCuStreamW = 21,
    CUPTI_CBID_NVTX_nvtxNameCuEventA = 22,
    CUPTI_CBID_NVTX_nvtxNameCuEventW = 23,
    CUPTI_CBID_NVTX_nvtxNameCudaDeviceA = 24,
    CUPTI_CBID_NVTX_nvtxNameCudaDeviceW = 25,
    CUPTI_CBID_NVTX_nvtxNameCudaStreamA = 26,
    CUPTI_CBID_NVTX_nvtxNameCudaStreamW = 27,
    CUPTI_CBID_NVTX_nvtxNameCudaEventA = 28,
    CUPTI_CBID_NVTX_nvtxNameCudaEventW = 29,
    CUPTI_CBID_NVTX_nvtxDomainMarkEx = 30,
    CUPTI_CBID_NVTX_nvtxDomainRangeStartEx = 31,
    CUPTI_CBID_NVTX_nvtxDomainRangeEnd = 32,
    CUPTI_CBID_NVTX_nvtxDomainRangePushEx = 33,
    CUPTI_CBID_NVTX_nvtxDomainRangePop = 34,
    CUPTI_CBID_NVTX_nvtxDomainResourceCreate = 35,
    CUPTI_CBID_NVTX_nvtxDomainResourceDestroy = 36,
    CUPTI_CBID_NVTX_nvtxDomainNameCategoryA = 37,
    CUPTI_CBID_NVTX_nvtxDomainNameCategoryW = 38,
    CUPTI_CBID_NVTX_nvtxDomainRegisterStringA = 39,
    CUPTI_CBID_NVTX_nvtxDomainRegisterStringW = 40,
    CUPTI_CBID_NVTX_nvtxDomainCreateA = 41,
    CUPTI_CBID_NVTX_nvtxDomainCreateW = 42,
    CUPTI_CBID_NVTX_nvtxDomainDestroy = 43,
    CUPTI_CBID_NVTX_nvtxDomainSyncUserCreate = 44,
    CUPTI_CBID_NVTX_nvtxDomainSyncUserDestroy = 45,
    CUPTI_CBID_NVTX_nvtxDomainSyncUserAcquireStart = 46,
    CUPTI_CBID_NVTX_nvtxDomainSyncUserAcquireFailed = 47,
    CUPTI_CBID_NVTX_nvtxDomainSyncUserAcquireSuccess = 48,
    CUPTI_CBID_NVTX_nvtxDomainSyncUserReleasing = 49,
    CUPTI_CBID_NVTX_SIZE = 50,
    CUPTI_CBID_NVTX_FORCE_INT = 2147483647,
}
pub type CUdeviceptr_v1 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct CUDA_MEMCPY2D_v1_st {
    pub dummy: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_CUDA_MEMCPY2D_v1_st() {
    const UNINIT: ::std::mem::MaybeUninit<CUDA_MEMCPY2D_v1_st> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CUDA_MEMCPY2D_v1_st>(),
        4usize,
        concat!("Size of: ", stringify!(CUDA_MEMCPY2D_v1_st))
    );
    assert_eq!(
        ::std::mem::align_of::<CUDA_MEMCPY2D_v1_st>(),
        4usize,
        concat!("Alignment of ", stringify!(CUDA_MEMCPY2D_v1_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUDA_MEMCPY2D_v1_st),
            "::",
            stringify!(dummy)
        )
    );
}
pub type CUDA_MEMCPY2D_v1 = CUDA_MEMCPY2D_v1_st;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct CUDA_MEMCPY3D_v1_st {
    pub dummy: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_CUDA_MEMCPY3D_v1_st() {
    const UNINIT: ::std::mem::MaybeUninit<CUDA_MEMCPY3D_v1_st> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CUDA_MEMCPY3D_v1_st>(),
        4usize,
        concat!("Size of: ", stringify!(CUDA_MEMCPY3D_v1_st))
    );
    assert_eq!(
        ::std::mem::align_of::<CUDA_MEMCPY3D_v1_st>(),
        4usize,
        concat!("Alignment of ", stringify!(CUDA_MEMCPY3D_v1_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUDA_MEMCPY3D_v1_st),
            "::",
            stringify!(dummy)
        )
    );
}
pub type CUDA_MEMCPY3D_v1 = CUDA_MEMCPY3D_v1_st;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct CUDA_ARRAY_DESCRIPTOR_v1_st {
    pub dummy: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_CUDA_ARRAY_DESCRIPTOR_v1_st() {
    const UNINIT: ::std::mem::MaybeUninit<CUDA_ARRAY_DESCRIPTOR_v1_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CUDA_ARRAY_DESCRIPTOR_v1_st>(),
        4usize,
        concat!("Size of: ", stringify!(CUDA_ARRAY_DESCRIPTOR_v1_st))
    );
    assert_eq!(
        ::std::mem::align_of::<CUDA_ARRAY_DESCRIPTOR_v1_st>(),
        4usize,
        concat!("Alignment of ", stringify!(CUDA_ARRAY_DESCRIPTOR_v1_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUDA_ARRAY_DESCRIPTOR_v1_st),
            "::",
            stringify!(dummy)
        )
    );
}
pub type CUDA_ARRAY_DESCRIPTOR_v1 = CUDA_ARRAY_DESCRIPTOR_v1_st;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct CUDA_ARRAY3D_DESCRIPTOR_v1_st {
    pub dummy: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_CUDA_ARRAY3D_DESCRIPTOR_v1_st() {
    const UNINIT: ::std::mem::MaybeUninit<CUDA_ARRAY3D_DESCRIPTOR_v1_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CUDA_ARRAY3D_DESCRIPTOR_v1_st>(),
        4usize,
        concat!("Size of: ", stringify!(CUDA_ARRAY3D_DESCRIPTOR_v1_st))
    );
    assert_eq!(
        ::std::mem::align_of::<CUDA_ARRAY3D_DESCRIPTOR_v1_st>(),
        4usize,
        concat!("Alignment of ", stringify!(CUDA_ARRAY3D_DESCRIPTOR_v1_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUDA_ARRAY3D_DESCRIPTOR_v1_st),
            "::",
            stringify!(dummy)
        )
    );
}
pub type CUDA_ARRAY3D_DESCRIPTOR_v1 = CUDA_ARRAY3D_DESCRIPTOR_v1_st;
pub type cudaStreamCallback_t = ::std::option::Option<
    unsafe extern "C" fn(
        stream: cudaStream_t,
        status: cudaError_t,
        userData: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaDeviceSetLimit_v3020_params_st {
    pub limit: cudaLimit,
    pub value: usize,
}
#[test]
fn bindgen_test_layout_cudaDeviceSetLimit_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaDeviceSetLimit_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaDeviceSetLimit_v3020_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cudaDeviceSetLimit_v3020_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaDeviceSetLimit_v3020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaDeviceSetLimit_v3020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).limit) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceSetLimit_v3020_params_st),
            "::",
            stringify!(limit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceSetLimit_v3020_params_st),
            "::",
            stringify!(value)
        )
    );
}
impl Default for cudaDeviceSetLimit_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaDeviceSetLimit_v3020_params = cudaDeviceSetLimit_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaDeviceGetLimit_v3020_params_st {
    pub pValue: *mut usize,
    pub limit: cudaLimit,
}
#[test]
fn bindgen_test_layout_cudaDeviceGetLimit_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaDeviceGetLimit_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaDeviceGetLimit_v3020_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cudaDeviceGetLimit_v3020_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaDeviceGetLimit_v3020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaDeviceGetLimit_v3020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceGetLimit_v3020_params_st),
            "::",
            stringify!(pValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).limit) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceGetLimit_v3020_params_st),
            "::",
            stringify!(limit)
        )
    );
}
impl Default for cudaDeviceGetLimit_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaDeviceGetLimit_v3020_params = cudaDeviceGetLimit_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaDeviceGetTexture1DLinearMaxWidth_v11010_params_st {
    pub maxWidthInElements: *mut usize,
    pub fmtDesc: *const cudaChannelFormatDesc,
    pub device: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cudaDeviceGetTexture1DLinearMaxWidth_v11010_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaDeviceGetTexture1DLinearMaxWidth_v11010_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaDeviceGetTexture1DLinearMaxWidth_v11010_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cudaDeviceGetTexture1DLinearMaxWidth_v11010_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaDeviceGetTexture1DLinearMaxWidth_v11010_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaDeviceGetTexture1DLinearMaxWidth_v11010_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxWidthInElements) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceGetTexture1DLinearMaxWidth_v11010_params_st),
            "::",
            stringify!(maxWidthInElements)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fmtDesc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceGetTexture1DLinearMaxWidth_v11010_params_st),
            "::",
            stringify!(fmtDesc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceGetTexture1DLinearMaxWidth_v11010_params_st),
            "::",
            stringify!(device)
        )
    );
}
impl Default for cudaDeviceGetTexture1DLinearMaxWidth_v11010_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaDeviceGetTexture1DLinearMaxWidth_v11010_params =
    cudaDeviceGetTexture1DLinearMaxWidth_v11010_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaDeviceGetCacheConfig_v3020_params_st {
    pub pCacheConfig: *mut cudaFuncCache,
}
#[test]
fn bindgen_test_layout_cudaDeviceGetCacheConfig_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaDeviceGetCacheConfig_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaDeviceGetCacheConfig_v3020_params_st>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(cudaDeviceGetCacheConfig_v3020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaDeviceGetCacheConfig_v3020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaDeviceGetCacheConfig_v3020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCacheConfig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceGetCacheConfig_v3020_params_st),
            "::",
            stringify!(pCacheConfig)
        )
    );
}
impl Default for cudaDeviceGetCacheConfig_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaDeviceGetCacheConfig_v3020_params = cudaDeviceGetCacheConfig_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaDeviceGetStreamPriorityRange_v5050_params_st {
    pub leastPriority: *mut ::std::os::raw::c_int,
    pub greatestPriority: *mut ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cudaDeviceGetStreamPriorityRange_v5050_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaDeviceGetStreamPriorityRange_v5050_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaDeviceGetStreamPriorityRange_v5050_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaDeviceGetStreamPriorityRange_v5050_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaDeviceGetStreamPriorityRange_v5050_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaDeviceGetStreamPriorityRange_v5050_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).leastPriority) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceGetStreamPriorityRange_v5050_params_st),
            "::",
            stringify!(leastPriority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).greatestPriority) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceGetStreamPriorityRange_v5050_params_st),
            "::",
            stringify!(greatestPriority)
        )
    );
}
impl Default for cudaDeviceGetStreamPriorityRange_v5050_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaDeviceGetStreamPriorityRange_v5050_params =
    cudaDeviceGetStreamPriorityRange_v5050_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaDeviceSetCacheConfig_v3020_params_st {
    pub cacheConfig: cudaFuncCache,
}
#[test]
fn bindgen_test_layout_cudaDeviceSetCacheConfig_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaDeviceSetCacheConfig_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaDeviceSetCacheConfig_v3020_params_st>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(cudaDeviceSetCacheConfig_v3020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaDeviceSetCacheConfig_v3020_params_st>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(cudaDeviceSetCacheConfig_v3020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cacheConfig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceSetCacheConfig_v3020_params_st),
            "::",
            stringify!(cacheConfig)
        )
    );
}
impl Default for cudaDeviceSetCacheConfig_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaDeviceSetCacheConfig_v3020_params = cudaDeviceSetCacheConfig_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaDeviceGetSharedMemConfig_v4020_params_st {
    pub pConfig: *mut cudaSharedMemConfig,
}
#[test]
fn bindgen_test_layout_cudaDeviceGetSharedMemConfig_v4020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaDeviceGetSharedMemConfig_v4020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaDeviceGetSharedMemConfig_v4020_params_st>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(cudaDeviceGetSharedMemConfig_v4020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaDeviceGetSharedMemConfig_v4020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaDeviceGetSharedMemConfig_v4020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pConfig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceGetSharedMemConfig_v4020_params_st),
            "::",
            stringify!(pConfig)
        )
    );
}
impl Default for cudaDeviceGetSharedMemConfig_v4020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaDeviceGetSharedMemConfig_v4020_params = cudaDeviceGetSharedMemConfig_v4020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaDeviceSetSharedMemConfig_v4020_params_st {
    pub config: cudaSharedMemConfig,
}
#[test]
fn bindgen_test_layout_cudaDeviceSetSharedMemConfig_v4020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaDeviceSetSharedMemConfig_v4020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaDeviceSetSharedMemConfig_v4020_params_st>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(cudaDeviceSetSharedMemConfig_v4020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaDeviceSetSharedMemConfig_v4020_params_st>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(cudaDeviceSetSharedMemConfig_v4020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).config) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceSetSharedMemConfig_v4020_params_st),
            "::",
            stringify!(config)
        )
    );
}
impl Default for cudaDeviceSetSharedMemConfig_v4020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaDeviceSetSharedMemConfig_v4020_params = cudaDeviceSetSharedMemConfig_v4020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaDeviceGetByPCIBusId_v4010_params_st {
    pub device: *mut ::std::os::raw::c_int,
    pub pciBusId: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_cudaDeviceGetByPCIBusId_v4010_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaDeviceGetByPCIBusId_v4010_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaDeviceGetByPCIBusId_v4010_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaDeviceGetByPCIBusId_v4010_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaDeviceGetByPCIBusId_v4010_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaDeviceGetByPCIBusId_v4010_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceGetByPCIBusId_v4010_params_st),
            "::",
            stringify!(device)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pciBusId) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceGetByPCIBusId_v4010_params_st),
            "::",
            stringify!(pciBusId)
        )
    );
}
impl Default for cudaDeviceGetByPCIBusId_v4010_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaDeviceGetByPCIBusId_v4010_params = cudaDeviceGetByPCIBusId_v4010_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaDeviceGetPCIBusId_v4010_params_st {
    pub pciBusId: *mut ::std::os::raw::c_char,
    pub len: ::std::os::raw::c_int,
    pub device: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cudaDeviceGetPCIBusId_v4010_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaDeviceGetPCIBusId_v4010_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaDeviceGetPCIBusId_v4010_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaDeviceGetPCIBusId_v4010_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaDeviceGetPCIBusId_v4010_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaDeviceGetPCIBusId_v4010_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pciBusId) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceGetPCIBusId_v4010_params_st),
            "::",
            stringify!(pciBusId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceGetPCIBusId_v4010_params_st),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceGetPCIBusId_v4010_params_st),
            "::",
            stringify!(device)
        )
    );
}
impl Default for cudaDeviceGetPCIBusId_v4010_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaDeviceGetPCIBusId_v4010_params = cudaDeviceGetPCIBusId_v4010_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaIpcGetEventHandle_v4010_params_st {
    pub handle: *mut cudaIpcEventHandle_t,
    pub event: cudaEvent_t,
}
#[test]
fn bindgen_test_layout_cudaIpcGetEventHandle_v4010_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaIpcGetEventHandle_v4010_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaIpcGetEventHandle_v4010_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaIpcGetEventHandle_v4010_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaIpcGetEventHandle_v4010_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaIpcGetEventHandle_v4010_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaIpcGetEventHandle_v4010_params_st),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaIpcGetEventHandle_v4010_params_st),
            "::",
            stringify!(event)
        )
    );
}
impl Default for cudaIpcGetEventHandle_v4010_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaIpcGetEventHandle_v4010_params = cudaIpcGetEventHandle_v4010_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaIpcOpenEventHandle_v4010_params_st {
    pub event: *mut cudaEvent_t,
    pub handle: cudaIpcEventHandle_t,
}
#[test]
fn bindgen_test_layout_cudaIpcOpenEventHandle_v4010_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaIpcOpenEventHandle_v4010_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaIpcOpenEventHandle_v4010_params_st>(),
        72usize,
        concat!(
            "Size of: ",
            stringify!(cudaIpcOpenEventHandle_v4010_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaIpcOpenEventHandle_v4010_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaIpcOpenEventHandle_v4010_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaIpcOpenEventHandle_v4010_params_st),
            "::",
            stringify!(event)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaIpcOpenEventHandle_v4010_params_st),
            "::",
            stringify!(handle)
        )
    );
}
impl Default for cudaIpcOpenEventHandle_v4010_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaIpcOpenEventHandle_v4010_params = cudaIpcOpenEventHandle_v4010_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaIpcGetMemHandle_v4010_params_st {
    pub handle: *mut cudaIpcMemHandle_t,
    pub devPtr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_cudaIpcGetMemHandle_v4010_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaIpcGetMemHandle_v4010_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaIpcGetMemHandle_v4010_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cudaIpcGetMemHandle_v4010_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaIpcGetMemHandle_v4010_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaIpcGetMemHandle_v4010_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaIpcGetMemHandle_v4010_params_st),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).devPtr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaIpcGetMemHandle_v4010_params_st),
            "::",
            stringify!(devPtr)
        )
    );
}
impl Default for cudaIpcGetMemHandle_v4010_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaIpcGetMemHandle_v4010_params = cudaIpcGetMemHandle_v4010_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaIpcOpenMemHandle_v4010_params_st {
    pub devPtr: *mut *mut ::std::os::raw::c_void,
    pub handle: cudaIpcMemHandle_t,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cudaIpcOpenMemHandle_v4010_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaIpcOpenMemHandle_v4010_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaIpcOpenMemHandle_v4010_params_st>(),
        80usize,
        concat!(
            "Size of: ",
            stringify!(cudaIpcOpenMemHandle_v4010_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaIpcOpenMemHandle_v4010_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaIpcOpenMemHandle_v4010_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).devPtr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaIpcOpenMemHandle_v4010_params_st),
            "::",
            stringify!(devPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaIpcOpenMemHandle_v4010_params_st),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaIpcOpenMemHandle_v4010_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cudaIpcOpenMemHandle_v4010_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaIpcOpenMemHandle_v4010_params = cudaIpcOpenMemHandle_v4010_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaIpcCloseMemHandle_v4010_params_st {
    pub devPtr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_cudaIpcCloseMemHandle_v4010_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaIpcCloseMemHandle_v4010_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaIpcCloseMemHandle_v4010_params_st>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(cudaIpcCloseMemHandle_v4010_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaIpcCloseMemHandle_v4010_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaIpcCloseMemHandle_v4010_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).devPtr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaIpcCloseMemHandle_v4010_params_st),
            "::",
            stringify!(devPtr)
        )
    );
}
impl Default for cudaIpcCloseMemHandle_v4010_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaIpcCloseMemHandle_v4010_params = cudaIpcCloseMemHandle_v4010_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaDeviceFlushGPUDirectRDMAWrites_v11030_params_st {
    pub target: cudaFlushGPUDirectRDMAWritesTarget,
    pub scope: cudaFlushGPUDirectRDMAWritesScope,
}
#[test]
fn bindgen_test_layout_cudaDeviceFlushGPUDirectRDMAWrites_v11030_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaDeviceFlushGPUDirectRDMAWrites_v11030_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaDeviceFlushGPUDirectRDMAWrites_v11030_params_st>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(cudaDeviceFlushGPUDirectRDMAWrites_v11030_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaDeviceFlushGPUDirectRDMAWrites_v11030_params_st>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(cudaDeviceFlushGPUDirectRDMAWrites_v11030_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceFlushGPUDirectRDMAWrites_v11030_params_st),
            "::",
            stringify!(target)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scope) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceFlushGPUDirectRDMAWrites_v11030_params_st),
            "::",
            stringify!(scope)
        )
    );
}
impl Default for cudaDeviceFlushGPUDirectRDMAWrites_v11030_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaDeviceFlushGPUDirectRDMAWrites_v11030_params =
    cudaDeviceFlushGPUDirectRDMAWrites_v11030_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaThreadSetLimit_v3020_params_st {
    pub limit: cudaLimit,
    pub value: usize,
}
#[test]
fn bindgen_test_layout_cudaThreadSetLimit_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaThreadSetLimit_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaThreadSetLimit_v3020_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cudaThreadSetLimit_v3020_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaThreadSetLimit_v3020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaThreadSetLimit_v3020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).limit) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaThreadSetLimit_v3020_params_st),
            "::",
            stringify!(limit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaThreadSetLimit_v3020_params_st),
            "::",
            stringify!(value)
        )
    );
}
impl Default for cudaThreadSetLimit_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaThreadSetLimit_v3020_params = cudaThreadSetLimit_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaThreadGetLimit_v3020_params_st {
    pub pValue: *mut usize,
    pub limit: cudaLimit,
}
#[test]
fn bindgen_test_layout_cudaThreadGetLimit_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaThreadGetLimit_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaThreadGetLimit_v3020_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cudaThreadGetLimit_v3020_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaThreadGetLimit_v3020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaThreadGetLimit_v3020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaThreadGetLimit_v3020_params_st),
            "::",
            stringify!(pValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).limit) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaThreadGetLimit_v3020_params_st),
            "::",
            stringify!(limit)
        )
    );
}
impl Default for cudaThreadGetLimit_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaThreadGetLimit_v3020_params = cudaThreadGetLimit_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaThreadGetCacheConfig_v3020_params_st {
    pub pCacheConfig: *mut cudaFuncCache,
}
#[test]
fn bindgen_test_layout_cudaThreadGetCacheConfig_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaThreadGetCacheConfig_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaThreadGetCacheConfig_v3020_params_st>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(cudaThreadGetCacheConfig_v3020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaThreadGetCacheConfig_v3020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaThreadGetCacheConfig_v3020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCacheConfig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaThreadGetCacheConfig_v3020_params_st),
            "::",
            stringify!(pCacheConfig)
        )
    );
}
impl Default for cudaThreadGetCacheConfig_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaThreadGetCacheConfig_v3020_params = cudaThreadGetCacheConfig_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaThreadSetCacheConfig_v3020_params_st {
    pub cacheConfig: cudaFuncCache,
}
#[test]
fn bindgen_test_layout_cudaThreadSetCacheConfig_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaThreadSetCacheConfig_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaThreadSetCacheConfig_v3020_params_st>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(cudaThreadSetCacheConfig_v3020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaThreadSetCacheConfig_v3020_params_st>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(cudaThreadSetCacheConfig_v3020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cacheConfig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaThreadSetCacheConfig_v3020_params_st),
            "::",
            stringify!(cacheConfig)
        )
    );
}
impl Default for cudaThreadSetCacheConfig_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaThreadSetCacheConfig_v3020_params = cudaThreadSetCacheConfig_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGetErrorName_v6050_params_st {
    pub error: cudaError_t,
}
#[test]
fn bindgen_test_layout_cudaGetErrorName_v6050_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGetErrorName_v6050_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGetErrorName_v6050_params_st>(),
        4usize,
        concat!("Size of: ", stringify!(cudaGetErrorName_v6050_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGetErrorName_v6050_params_st>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGetErrorName_v6050_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGetErrorName_v6050_params_st),
            "::",
            stringify!(error)
        )
    );
}
impl Default for cudaGetErrorName_v6050_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGetErrorName_v6050_params = cudaGetErrorName_v6050_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGetErrorString_v3020_params_st {
    pub error: cudaError_t,
}
#[test]
fn bindgen_test_layout_cudaGetErrorString_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGetErrorString_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGetErrorString_v3020_params_st>(),
        4usize,
        concat!("Size of: ", stringify!(cudaGetErrorString_v3020_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGetErrorString_v3020_params_st>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGetErrorString_v3020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGetErrorString_v3020_params_st),
            "::",
            stringify!(error)
        )
    );
}
impl Default for cudaGetErrorString_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGetErrorString_v3020_params = cudaGetErrorString_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGetDeviceCount_v3020_params_st {
    pub count: *mut ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cudaGetDeviceCount_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGetDeviceCount_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGetDeviceCount_v3020_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cudaGetDeviceCount_v3020_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGetDeviceCount_v3020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGetDeviceCount_v3020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGetDeviceCount_v3020_params_st),
            "::",
            stringify!(count)
        )
    );
}
impl Default for cudaGetDeviceCount_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGetDeviceCount_v3020_params = cudaGetDeviceCount_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGetDeviceProperties_v2_v12000_params_st {
    pub prop: *mut cudaDeviceProp,
    pub device: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cudaGetDeviceProperties_v2_v12000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGetDeviceProperties_v2_v12000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGetDeviceProperties_v2_v12000_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaGetDeviceProperties_v2_v12000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGetDeviceProperties_v2_v12000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGetDeviceProperties_v2_v12000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGetDeviceProperties_v2_v12000_params_st),
            "::",
            stringify!(prop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGetDeviceProperties_v2_v12000_params_st),
            "::",
            stringify!(device)
        )
    );
}
impl Default for cudaGetDeviceProperties_v2_v12000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGetDeviceProperties_v2_v12000_params = cudaGetDeviceProperties_v2_v12000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaDeviceGetAttribute_v5000_params_st {
    pub value: *mut ::std::os::raw::c_int,
    pub attr: cudaDeviceAttr,
    pub device: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cudaDeviceGetAttribute_v5000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaDeviceGetAttribute_v5000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaDeviceGetAttribute_v5000_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaDeviceGetAttribute_v5000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaDeviceGetAttribute_v5000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaDeviceGetAttribute_v5000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceGetAttribute_v5000_params_st),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceGetAttribute_v5000_params_st),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceGetAttribute_v5000_params_st),
            "::",
            stringify!(device)
        )
    );
}
impl Default for cudaDeviceGetAttribute_v5000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaDeviceGetAttribute_v5000_params = cudaDeviceGetAttribute_v5000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaDeviceGetDefaultMemPool_v11020_params_st {
    pub memPool: *mut cudaMemPool_t,
    pub device: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cudaDeviceGetDefaultMemPool_v11020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaDeviceGetDefaultMemPool_v11020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaDeviceGetDefaultMemPool_v11020_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaDeviceGetDefaultMemPool_v11020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaDeviceGetDefaultMemPool_v11020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaDeviceGetDefaultMemPool_v11020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memPool) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceGetDefaultMemPool_v11020_params_st),
            "::",
            stringify!(memPool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceGetDefaultMemPool_v11020_params_st),
            "::",
            stringify!(device)
        )
    );
}
impl Default for cudaDeviceGetDefaultMemPool_v11020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaDeviceGetDefaultMemPool_v11020_params = cudaDeviceGetDefaultMemPool_v11020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaDeviceSetMemPool_v11020_params_st {
    pub device: ::std::os::raw::c_int,
    pub memPool: cudaMemPool_t,
}
#[test]
fn bindgen_test_layout_cudaDeviceSetMemPool_v11020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaDeviceSetMemPool_v11020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaDeviceSetMemPool_v11020_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaDeviceSetMemPool_v11020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaDeviceSetMemPool_v11020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaDeviceSetMemPool_v11020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceSetMemPool_v11020_params_st),
            "::",
            stringify!(device)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memPool) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceSetMemPool_v11020_params_st),
            "::",
            stringify!(memPool)
        )
    );
}
impl Default for cudaDeviceSetMemPool_v11020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaDeviceSetMemPool_v11020_params = cudaDeviceSetMemPool_v11020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaDeviceGetMemPool_v11020_params_st {
    pub memPool: *mut cudaMemPool_t,
    pub device: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cudaDeviceGetMemPool_v11020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaDeviceGetMemPool_v11020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaDeviceGetMemPool_v11020_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaDeviceGetMemPool_v11020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaDeviceGetMemPool_v11020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaDeviceGetMemPool_v11020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memPool) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceGetMemPool_v11020_params_st),
            "::",
            stringify!(memPool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceGetMemPool_v11020_params_st),
            "::",
            stringify!(device)
        )
    );
}
impl Default for cudaDeviceGetMemPool_v11020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaDeviceGetMemPool_v11020_params = cudaDeviceGetMemPool_v11020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaDeviceGetNvSciSyncAttributes_v10020_params_st {
    pub nvSciSyncAttrList: *mut ::std::os::raw::c_void,
    pub device: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cudaDeviceGetNvSciSyncAttributes_v10020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaDeviceGetNvSciSyncAttributes_v10020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaDeviceGetNvSciSyncAttributes_v10020_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaDeviceGetNvSciSyncAttributes_v10020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaDeviceGetNvSciSyncAttributes_v10020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaDeviceGetNvSciSyncAttributes_v10020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nvSciSyncAttrList) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceGetNvSciSyncAttributes_v10020_params_st),
            "::",
            stringify!(nvSciSyncAttrList)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceGetNvSciSyncAttributes_v10020_params_st),
            "::",
            stringify!(device)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceGetNvSciSyncAttributes_v10020_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cudaDeviceGetNvSciSyncAttributes_v10020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaDeviceGetNvSciSyncAttributes_v10020_params =
    cudaDeviceGetNvSciSyncAttributes_v10020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaDeviceGetP2PAttribute_v8000_params_st {
    pub value: *mut ::std::os::raw::c_int,
    pub attr: cudaDeviceP2PAttr,
    pub srcDevice: ::std::os::raw::c_int,
    pub dstDevice: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cudaDeviceGetP2PAttribute_v8000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaDeviceGetP2PAttribute_v8000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaDeviceGetP2PAttribute_v8000_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cudaDeviceGetP2PAttribute_v8000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaDeviceGetP2PAttribute_v8000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaDeviceGetP2PAttribute_v8000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceGetP2PAttribute_v8000_params_st),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceGetP2PAttribute_v8000_params_st),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcDevice) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceGetP2PAttribute_v8000_params_st),
            "::",
            stringify!(srcDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstDevice) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceGetP2PAttribute_v8000_params_st),
            "::",
            stringify!(dstDevice)
        )
    );
}
impl Default for cudaDeviceGetP2PAttribute_v8000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaDeviceGetP2PAttribute_v8000_params = cudaDeviceGetP2PAttribute_v8000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaChooseDevice_v3020_params_st {
    pub device: *mut ::std::os::raw::c_int,
    pub prop: *const cudaDeviceProp,
}
#[test]
fn bindgen_test_layout_cudaChooseDevice_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaChooseDevice_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaChooseDevice_v3020_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cudaChooseDevice_v3020_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaChooseDevice_v3020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaChooseDevice_v3020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaChooseDevice_v3020_params_st),
            "::",
            stringify!(device)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaChooseDevice_v3020_params_st),
            "::",
            stringify!(prop)
        )
    );
}
impl Default for cudaChooseDevice_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaChooseDevice_v3020_params = cudaChooseDevice_v3020_params_st;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaSetDevice_v3020_params_st {
    pub device: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cudaSetDevice_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaSetDevice_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaSetDevice_v3020_params_st>(),
        4usize,
        concat!("Size of: ", stringify!(cudaSetDevice_v3020_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaSetDevice_v3020_params_st>(),
        4usize,
        concat!("Alignment of ", stringify!(cudaSetDevice_v3020_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaSetDevice_v3020_params_st),
            "::",
            stringify!(device)
        )
    );
}
pub type cudaSetDevice_v3020_params = cudaSetDevice_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGetDevice_v3020_params_st {
    pub device: *mut ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cudaGetDevice_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGetDevice_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGetDevice_v3020_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cudaGetDevice_v3020_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGetDevice_v3020_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaGetDevice_v3020_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGetDevice_v3020_params_st),
            "::",
            stringify!(device)
        )
    );
}
impl Default for cudaGetDevice_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGetDevice_v3020_params = cudaGetDevice_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaSetValidDevices_v3020_params_st {
    pub device_arr: *mut ::std::os::raw::c_int,
    pub len: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cudaSetValidDevices_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaSetValidDevices_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaSetValidDevices_v3020_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cudaSetValidDevices_v3020_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaSetValidDevices_v3020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaSetValidDevices_v3020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device_arr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaSetValidDevices_v3020_params_st),
            "::",
            stringify!(device_arr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaSetValidDevices_v3020_params_st),
            "::",
            stringify!(len)
        )
    );
}
impl Default for cudaSetValidDevices_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaSetValidDevices_v3020_params = cudaSetValidDevices_v3020_params_st;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaSetDeviceFlags_v3020_params_st {
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cudaSetDeviceFlags_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaSetDeviceFlags_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaSetDeviceFlags_v3020_params_st>(),
        4usize,
        concat!("Size of: ", stringify!(cudaSetDeviceFlags_v3020_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaSetDeviceFlags_v3020_params_st>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(cudaSetDeviceFlags_v3020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaSetDeviceFlags_v3020_params_st),
            "::",
            stringify!(flags)
        )
    );
}
pub type cudaSetDeviceFlags_v3020_params = cudaSetDeviceFlags_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGetDeviceFlags_v7000_params_st {
    pub flags: *mut ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cudaGetDeviceFlags_v7000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGetDeviceFlags_v7000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGetDeviceFlags_v7000_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cudaGetDeviceFlags_v7000_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGetDeviceFlags_v7000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGetDeviceFlags_v7000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGetDeviceFlags_v7000_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cudaGetDeviceFlags_v7000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGetDeviceFlags_v7000_params = cudaGetDeviceFlags_v7000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaStreamCreate_v3020_params_st {
    pub pStream: *mut cudaStream_t,
}
#[test]
fn bindgen_test_layout_cudaStreamCreate_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaStreamCreate_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaStreamCreate_v3020_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cudaStreamCreate_v3020_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaStreamCreate_v3020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaStreamCreate_v3020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pStream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamCreate_v3020_params_st),
            "::",
            stringify!(pStream)
        )
    );
}
impl Default for cudaStreamCreate_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaStreamCreate_v3020_params = cudaStreamCreate_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaStreamCreateWithFlags_v5000_params_st {
    pub pStream: *mut cudaStream_t,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cudaStreamCreateWithFlags_v5000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaStreamCreateWithFlags_v5000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaStreamCreateWithFlags_v5000_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaStreamCreateWithFlags_v5000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaStreamCreateWithFlags_v5000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaStreamCreateWithFlags_v5000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pStream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamCreateWithFlags_v5000_params_st),
            "::",
            stringify!(pStream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamCreateWithFlags_v5000_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cudaStreamCreateWithFlags_v5000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaStreamCreateWithFlags_v5000_params = cudaStreamCreateWithFlags_v5000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaStreamCreateWithPriority_v5050_params_st {
    pub pStream: *mut cudaStream_t,
    pub flags: ::std::os::raw::c_uint,
    pub priority: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cudaStreamCreateWithPriority_v5050_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaStreamCreateWithPriority_v5050_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaStreamCreateWithPriority_v5050_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaStreamCreateWithPriority_v5050_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaStreamCreateWithPriority_v5050_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaStreamCreateWithPriority_v5050_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pStream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamCreateWithPriority_v5050_params_st),
            "::",
            stringify!(pStream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamCreateWithPriority_v5050_params_st),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priority) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamCreateWithPriority_v5050_params_st),
            "::",
            stringify!(priority)
        )
    );
}
impl Default for cudaStreamCreateWithPriority_v5050_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaStreamCreateWithPriority_v5050_params = cudaStreamCreateWithPriority_v5050_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaStreamGetPriority_ptsz_v7000_params_st {
    pub hStream: cudaStream_t,
    pub priority: *mut ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cudaStreamGetPriority_ptsz_v7000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaStreamGetPriority_ptsz_v7000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaStreamGetPriority_ptsz_v7000_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaStreamGetPriority_ptsz_v7000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaStreamGetPriority_ptsz_v7000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaStreamGetPriority_ptsz_v7000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamGetPriority_ptsz_v7000_params_st),
            "::",
            stringify!(hStream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priority) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamGetPriority_ptsz_v7000_params_st),
            "::",
            stringify!(priority)
        )
    );
}
impl Default for cudaStreamGetPriority_ptsz_v7000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaStreamGetPriority_ptsz_v7000_params = cudaStreamGetPriority_ptsz_v7000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaStreamGetFlags_ptsz_v7000_params_st {
    pub hStream: cudaStream_t,
    pub flags: *mut ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cudaStreamGetFlags_ptsz_v7000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaStreamGetFlags_ptsz_v7000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaStreamGetFlags_ptsz_v7000_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaStreamGetFlags_ptsz_v7000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaStreamGetFlags_ptsz_v7000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaStreamGetFlags_ptsz_v7000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamGetFlags_ptsz_v7000_params_st),
            "::",
            stringify!(hStream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamGetFlags_ptsz_v7000_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cudaStreamGetFlags_ptsz_v7000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaStreamGetFlags_ptsz_v7000_params = cudaStreamGetFlags_ptsz_v7000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaStreamGetId_ptsz_v12000_params_st {
    pub hStream: cudaStream_t,
    pub streamId: *mut ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_cudaStreamGetId_ptsz_v12000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaStreamGetId_ptsz_v12000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaStreamGetId_ptsz_v12000_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaStreamGetId_ptsz_v12000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaStreamGetId_ptsz_v12000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaStreamGetId_ptsz_v12000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamGetId_ptsz_v12000_params_st),
            "::",
            stringify!(hStream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).streamId) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamGetId_ptsz_v12000_params_st),
            "::",
            stringify!(streamId)
        )
    );
}
impl Default for cudaStreamGetId_ptsz_v12000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaStreamGetId_ptsz_v12000_params = cudaStreamGetId_ptsz_v12000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaStreamCopyAttributes_ptsz_v11000_params_st {
    pub dst: cudaStream_t,
    pub src: cudaStream_t,
}
#[test]
fn bindgen_test_layout_cudaStreamCopyAttributes_ptsz_v11000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaStreamCopyAttributes_ptsz_v11000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaStreamCopyAttributes_ptsz_v11000_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaStreamCopyAttributes_ptsz_v11000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaStreamCopyAttributes_ptsz_v11000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaStreamCopyAttributes_ptsz_v11000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamCopyAttributes_ptsz_v11000_params_st),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamCopyAttributes_ptsz_v11000_params_st),
            "::",
            stringify!(src)
        )
    );
}
impl Default for cudaStreamCopyAttributes_ptsz_v11000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaStreamCopyAttributes_ptsz_v11000_params =
    cudaStreamCopyAttributes_ptsz_v11000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaStreamGetAttribute_ptsz_v11000_params_st {
    pub hStream: cudaStream_t,
    pub attr: cudaLaunchAttributeID,
    pub value_out: *mut cudaLaunchAttributeValue,
}
#[test]
fn bindgen_test_layout_cudaStreamGetAttribute_ptsz_v11000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaStreamGetAttribute_ptsz_v11000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaStreamGetAttribute_ptsz_v11000_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cudaStreamGetAttribute_ptsz_v11000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaStreamGetAttribute_ptsz_v11000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaStreamGetAttribute_ptsz_v11000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamGetAttribute_ptsz_v11000_params_st),
            "::",
            stringify!(hStream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamGetAttribute_ptsz_v11000_params_st),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value_out) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamGetAttribute_ptsz_v11000_params_st),
            "::",
            stringify!(value_out)
        )
    );
}
impl Default for cudaStreamGetAttribute_ptsz_v11000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaStreamGetAttribute_ptsz_v11000_params = cudaStreamGetAttribute_ptsz_v11000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaStreamSetAttribute_ptsz_v11000_params_st {
    pub hStream: cudaStream_t,
    pub attr: cudaLaunchAttributeID,
    pub value: *const cudaLaunchAttributeValue,
}
#[test]
fn bindgen_test_layout_cudaStreamSetAttribute_ptsz_v11000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaStreamSetAttribute_ptsz_v11000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaStreamSetAttribute_ptsz_v11000_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cudaStreamSetAttribute_ptsz_v11000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaStreamSetAttribute_ptsz_v11000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaStreamSetAttribute_ptsz_v11000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamSetAttribute_ptsz_v11000_params_st),
            "::",
            stringify!(hStream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamSetAttribute_ptsz_v11000_params_st),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamSetAttribute_ptsz_v11000_params_st),
            "::",
            stringify!(value)
        )
    );
}
impl Default for cudaStreamSetAttribute_ptsz_v11000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaStreamSetAttribute_ptsz_v11000_params = cudaStreamSetAttribute_ptsz_v11000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaStreamDestroy_v5050_params_st {
    pub stream: cudaStream_t,
}
#[test]
fn bindgen_test_layout_cudaStreamDestroy_v5050_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaStreamDestroy_v5050_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaStreamDestroy_v5050_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cudaStreamDestroy_v5050_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaStreamDestroy_v5050_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaStreamDestroy_v5050_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamDestroy_v5050_params_st),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for cudaStreamDestroy_v5050_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaStreamDestroy_v5050_params = cudaStreamDestroy_v5050_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaStreamWaitEvent_ptsz_v7000_params_st {
    pub stream: cudaStream_t,
    pub event: cudaEvent_t,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cudaStreamWaitEvent_ptsz_v7000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaStreamWaitEvent_ptsz_v7000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaStreamWaitEvent_ptsz_v7000_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cudaStreamWaitEvent_ptsz_v7000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaStreamWaitEvent_ptsz_v7000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaStreamWaitEvent_ptsz_v7000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamWaitEvent_ptsz_v7000_params_st),
            "::",
            stringify!(stream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamWaitEvent_ptsz_v7000_params_st),
            "::",
            stringify!(event)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamWaitEvent_ptsz_v7000_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cudaStreamWaitEvent_ptsz_v7000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaStreamWaitEvent_ptsz_v7000_params = cudaStreamWaitEvent_ptsz_v7000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaStreamAddCallback_ptsz_v7000_params_st {
    pub stream: cudaStream_t,
    pub callback: cudaStreamCallback_t,
    pub userData: *mut ::std::os::raw::c_void,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cudaStreamAddCallback_ptsz_v7000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaStreamAddCallback_ptsz_v7000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaStreamAddCallback_ptsz_v7000_params_st>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(cudaStreamAddCallback_ptsz_v7000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaStreamAddCallback_ptsz_v7000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaStreamAddCallback_ptsz_v7000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamAddCallback_ptsz_v7000_params_st),
            "::",
            stringify!(stream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).callback) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamAddCallback_ptsz_v7000_params_st),
            "::",
            stringify!(callback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).userData) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamAddCallback_ptsz_v7000_params_st),
            "::",
            stringify!(userData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamAddCallback_ptsz_v7000_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cudaStreamAddCallback_ptsz_v7000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaStreamAddCallback_ptsz_v7000_params = cudaStreamAddCallback_ptsz_v7000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaStreamSynchronize_ptsz_v7000_params_st {
    pub stream: cudaStream_t,
}
#[test]
fn bindgen_test_layout_cudaStreamSynchronize_ptsz_v7000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaStreamSynchronize_ptsz_v7000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaStreamSynchronize_ptsz_v7000_params_st>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(cudaStreamSynchronize_ptsz_v7000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaStreamSynchronize_ptsz_v7000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaStreamSynchronize_ptsz_v7000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamSynchronize_ptsz_v7000_params_st),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for cudaStreamSynchronize_ptsz_v7000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaStreamSynchronize_ptsz_v7000_params = cudaStreamSynchronize_ptsz_v7000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaStreamQuery_ptsz_v7000_params_st {
    pub stream: cudaStream_t,
}
#[test]
fn bindgen_test_layout_cudaStreamQuery_ptsz_v7000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaStreamQuery_ptsz_v7000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaStreamQuery_ptsz_v7000_params_st>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(cudaStreamQuery_ptsz_v7000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaStreamQuery_ptsz_v7000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaStreamQuery_ptsz_v7000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamQuery_ptsz_v7000_params_st),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for cudaStreamQuery_ptsz_v7000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaStreamQuery_ptsz_v7000_params = cudaStreamQuery_ptsz_v7000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaStreamAttachMemAsync_ptsz_v7000_params_st {
    pub stream: cudaStream_t,
    pub devPtr: *mut ::std::os::raw::c_void,
    pub length: usize,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cudaStreamAttachMemAsync_ptsz_v7000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaStreamAttachMemAsync_ptsz_v7000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaStreamAttachMemAsync_ptsz_v7000_params_st>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(cudaStreamAttachMemAsync_ptsz_v7000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaStreamAttachMemAsync_ptsz_v7000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaStreamAttachMemAsync_ptsz_v7000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamAttachMemAsync_ptsz_v7000_params_st),
            "::",
            stringify!(stream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).devPtr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamAttachMemAsync_ptsz_v7000_params_st),
            "::",
            stringify!(devPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamAttachMemAsync_ptsz_v7000_params_st),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamAttachMemAsync_ptsz_v7000_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cudaStreamAttachMemAsync_ptsz_v7000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaStreamAttachMemAsync_ptsz_v7000_params = cudaStreamAttachMemAsync_ptsz_v7000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaStreamBeginCapture_ptsz_v10000_params_st {
    pub stream: cudaStream_t,
    pub mode: cudaStreamCaptureMode,
}
#[test]
fn bindgen_test_layout_cudaStreamBeginCapture_ptsz_v10000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaStreamBeginCapture_ptsz_v10000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaStreamBeginCapture_ptsz_v10000_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaStreamBeginCapture_ptsz_v10000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaStreamBeginCapture_ptsz_v10000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaStreamBeginCapture_ptsz_v10000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamBeginCapture_ptsz_v10000_params_st),
            "::",
            stringify!(stream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamBeginCapture_ptsz_v10000_params_st),
            "::",
            stringify!(mode)
        )
    );
}
impl Default for cudaStreamBeginCapture_ptsz_v10000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaStreamBeginCapture_ptsz_v10000_params = cudaStreamBeginCapture_ptsz_v10000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaThreadExchangeStreamCaptureMode_v10010_params_st {
    pub mode: *mut cudaStreamCaptureMode,
}
#[test]
fn bindgen_test_layout_cudaThreadExchangeStreamCaptureMode_v10010_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaThreadExchangeStreamCaptureMode_v10010_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaThreadExchangeStreamCaptureMode_v10010_params_st>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(cudaThreadExchangeStreamCaptureMode_v10010_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaThreadExchangeStreamCaptureMode_v10010_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaThreadExchangeStreamCaptureMode_v10010_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaThreadExchangeStreamCaptureMode_v10010_params_st),
            "::",
            stringify!(mode)
        )
    );
}
impl Default for cudaThreadExchangeStreamCaptureMode_v10010_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaThreadExchangeStreamCaptureMode_v10010_params =
    cudaThreadExchangeStreamCaptureMode_v10010_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaStreamEndCapture_ptsz_v10000_params_st {
    pub stream: cudaStream_t,
    pub pGraph: *mut cudaGraph_t,
}
#[test]
fn bindgen_test_layout_cudaStreamEndCapture_ptsz_v10000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaStreamEndCapture_ptsz_v10000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaStreamEndCapture_ptsz_v10000_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaStreamEndCapture_ptsz_v10000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaStreamEndCapture_ptsz_v10000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaStreamEndCapture_ptsz_v10000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamEndCapture_ptsz_v10000_params_st),
            "::",
            stringify!(stream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pGraph) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamEndCapture_ptsz_v10000_params_st),
            "::",
            stringify!(pGraph)
        )
    );
}
impl Default for cudaStreamEndCapture_ptsz_v10000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaStreamEndCapture_ptsz_v10000_params = cudaStreamEndCapture_ptsz_v10000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaStreamIsCapturing_ptsz_v10000_params_st {
    pub stream: cudaStream_t,
    pub pCaptureStatus: *mut cudaStreamCaptureStatus,
}
#[test]
fn bindgen_test_layout_cudaStreamIsCapturing_ptsz_v10000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaStreamIsCapturing_ptsz_v10000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaStreamIsCapturing_ptsz_v10000_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaStreamIsCapturing_ptsz_v10000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaStreamIsCapturing_ptsz_v10000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaStreamIsCapturing_ptsz_v10000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamIsCapturing_ptsz_v10000_params_st),
            "::",
            stringify!(stream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCaptureStatus) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamIsCapturing_ptsz_v10000_params_st),
            "::",
            stringify!(pCaptureStatus)
        )
    );
}
impl Default for cudaStreamIsCapturing_ptsz_v10000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaStreamIsCapturing_ptsz_v10000_params = cudaStreamIsCapturing_ptsz_v10000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaStreamGetCaptureInfo_v2_ptsz_v11030_params_st {
    pub stream: cudaStream_t,
    pub captureStatus_out: *mut cudaStreamCaptureStatus,
    pub id_out: *mut ::std::os::raw::c_ulonglong,
    pub graph_out: *mut cudaGraph_t,
    pub dependencies_out: *mut *const cudaGraphNode_t,
    pub numDependencies_out: *mut usize,
}
#[test]
fn bindgen_test_layout_cudaStreamGetCaptureInfo_v2_ptsz_v11030_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaStreamGetCaptureInfo_v2_ptsz_v11030_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaStreamGetCaptureInfo_v2_ptsz_v11030_params_st>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(cudaStreamGetCaptureInfo_v2_ptsz_v11030_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaStreamGetCaptureInfo_v2_ptsz_v11030_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaStreamGetCaptureInfo_v2_ptsz_v11030_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamGetCaptureInfo_v2_ptsz_v11030_params_st),
            "::",
            stringify!(stream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).captureStatus_out) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamGetCaptureInfo_v2_ptsz_v11030_params_st),
            "::",
            stringify!(captureStatus_out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id_out) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamGetCaptureInfo_v2_ptsz_v11030_params_st),
            "::",
            stringify!(id_out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graph_out) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamGetCaptureInfo_v2_ptsz_v11030_params_st),
            "::",
            stringify!(graph_out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dependencies_out) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamGetCaptureInfo_v2_ptsz_v11030_params_st),
            "::",
            stringify!(dependencies_out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numDependencies_out) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamGetCaptureInfo_v2_ptsz_v11030_params_st),
            "::",
            stringify!(numDependencies_out)
        )
    );
}
impl Default for cudaStreamGetCaptureInfo_v2_ptsz_v11030_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaStreamGetCaptureInfo_v2_ptsz_v11030_params =
    cudaStreamGetCaptureInfo_v2_ptsz_v11030_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaStreamUpdateCaptureDependencies_v11030_params_st {
    pub stream: cudaStream_t,
    pub dependencies: *mut cudaGraphNode_t,
    pub numDependencies: usize,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cudaStreamUpdateCaptureDependencies_v11030_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaStreamUpdateCaptureDependencies_v11030_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaStreamUpdateCaptureDependencies_v11030_params_st>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(cudaStreamUpdateCaptureDependencies_v11030_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaStreamUpdateCaptureDependencies_v11030_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaStreamUpdateCaptureDependencies_v11030_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamUpdateCaptureDependencies_v11030_params_st),
            "::",
            stringify!(stream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dependencies) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamUpdateCaptureDependencies_v11030_params_st),
            "::",
            stringify!(dependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numDependencies) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamUpdateCaptureDependencies_v11030_params_st),
            "::",
            stringify!(numDependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamUpdateCaptureDependencies_v11030_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cudaStreamUpdateCaptureDependencies_v11030_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaStreamUpdateCaptureDependencies_v11030_params =
    cudaStreamUpdateCaptureDependencies_v11030_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaEventCreate_v3020_params_st {
    pub event: *mut cudaEvent_t,
}
#[test]
fn bindgen_test_layout_cudaEventCreate_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaEventCreate_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaEventCreate_v3020_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cudaEventCreate_v3020_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaEventCreate_v3020_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaEventCreate_v3020_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaEventCreate_v3020_params_st),
            "::",
            stringify!(event)
        )
    );
}
impl Default for cudaEventCreate_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaEventCreate_v3020_params = cudaEventCreate_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaEventCreateWithFlags_v3020_params_st {
    pub event: *mut cudaEvent_t,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cudaEventCreateWithFlags_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaEventCreateWithFlags_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaEventCreateWithFlags_v3020_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaEventCreateWithFlags_v3020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaEventCreateWithFlags_v3020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaEventCreateWithFlags_v3020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaEventCreateWithFlags_v3020_params_st),
            "::",
            stringify!(event)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaEventCreateWithFlags_v3020_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cudaEventCreateWithFlags_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaEventCreateWithFlags_v3020_params = cudaEventCreateWithFlags_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaEventRecord_ptsz_v7000_params_st {
    pub event: cudaEvent_t,
    pub stream: cudaStream_t,
}
#[test]
fn bindgen_test_layout_cudaEventRecord_ptsz_v7000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaEventRecord_ptsz_v7000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaEventRecord_ptsz_v7000_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaEventRecord_ptsz_v7000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaEventRecord_ptsz_v7000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaEventRecord_ptsz_v7000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaEventRecord_ptsz_v7000_params_st),
            "::",
            stringify!(event)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaEventRecord_ptsz_v7000_params_st),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for cudaEventRecord_ptsz_v7000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaEventRecord_ptsz_v7000_params = cudaEventRecord_ptsz_v7000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaEventRecordWithFlags_ptsz_v11010_params_st {
    pub event: cudaEvent_t,
    pub stream: cudaStream_t,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cudaEventRecordWithFlags_ptsz_v11010_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaEventRecordWithFlags_ptsz_v11010_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaEventRecordWithFlags_ptsz_v11010_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cudaEventRecordWithFlags_ptsz_v11010_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaEventRecordWithFlags_ptsz_v11010_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaEventRecordWithFlags_ptsz_v11010_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaEventRecordWithFlags_ptsz_v11010_params_st),
            "::",
            stringify!(event)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaEventRecordWithFlags_ptsz_v11010_params_st),
            "::",
            stringify!(stream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaEventRecordWithFlags_ptsz_v11010_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cudaEventRecordWithFlags_ptsz_v11010_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaEventRecordWithFlags_ptsz_v11010_params =
    cudaEventRecordWithFlags_ptsz_v11010_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaEventQuery_v3020_params_st {
    pub event: cudaEvent_t,
}
#[test]
fn bindgen_test_layout_cudaEventQuery_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaEventQuery_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaEventQuery_v3020_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cudaEventQuery_v3020_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaEventQuery_v3020_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaEventQuery_v3020_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaEventQuery_v3020_params_st),
            "::",
            stringify!(event)
        )
    );
}
impl Default for cudaEventQuery_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaEventQuery_v3020_params = cudaEventQuery_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaEventSynchronize_v3020_params_st {
    pub event: cudaEvent_t,
}
#[test]
fn bindgen_test_layout_cudaEventSynchronize_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaEventSynchronize_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaEventSynchronize_v3020_params_st>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(cudaEventSynchronize_v3020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaEventSynchronize_v3020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaEventSynchronize_v3020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaEventSynchronize_v3020_params_st),
            "::",
            stringify!(event)
        )
    );
}
impl Default for cudaEventSynchronize_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaEventSynchronize_v3020_params = cudaEventSynchronize_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaEventDestroy_v3020_params_st {
    pub event: cudaEvent_t,
}
#[test]
fn bindgen_test_layout_cudaEventDestroy_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaEventDestroy_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaEventDestroy_v3020_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cudaEventDestroy_v3020_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaEventDestroy_v3020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaEventDestroy_v3020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaEventDestroy_v3020_params_st),
            "::",
            stringify!(event)
        )
    );
}
impl Default for cudaEventDestroy_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaEventDestroy_v3020_params = cudaEventDestroy_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaEventElapsedTime_v3020_params_st {
    pub ms: *mut f32,
    pub start: cudaEvent_t,
    pub end: cudaEvent_t,
}
#[test]
fn bindgen_test_layout_cudaEventElapsedTime_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaEventElapsedTime_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaEventElapsedTime_v3020_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cudaEventElapsedTime_v3020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaEventElapsedTime_v3020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaEventElapsedTime_v3020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ms) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaEventElapsedTime_v3020_params_st),
            "::",
            stringify!(ms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaEventElapsedTime_v3020_params_st),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaEventElapsedTime_v3020_params_st),
            "::",
            stringify!(end)
        )
    );
}
impl Default for cudaEventElapsedTime_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaEventElapsedTime_v3020_params = cudaEventElapsedTime_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaImportExternalMemory_v10000_params_st {
    pub extMem_out: *mut cudaExternalMemory_t,
    pub memHandleDesc: *const cudaExternalMemoryHandleDesc,
}
#[test]
fn bindgen_test_layout_cudaImportExternalMemory_v10000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaImportExternalMemory_v10000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaImportExternalMemory_v10000_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaImportExternalMemory_v10000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaImportExternalMemory_v10000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaImportExternalMemory_v10000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extMem_out) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaImportExternalMemory_v10000_params_st),
            "::",
            stringify!(extMem_out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memHandleDesc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaImportExternalMemory_v10000_params_st),
            "::",
            stringify!(memHandleDesc)
        )
    );
}
impl Default for cudaImportExternalMemory_v10000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaImportExternalMemory_v10000_params = cudaImportExternalMemory_v10000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaExternalMemoryGetMappedBuffer_v10000_params_st {
    pub devPtr: *mut *mut ::std::os::raw::c_void,
    pub extMem: cudaExternalMemory_t,
    pub bufferDesc: *const cudaExternalMemoryBufferDesc,
}
#[test]
fn bindgen_test_layout_cudaExternalMemoryGetMappedBuffer_v10000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaExternalMemoryGetMappedBuffer_v10000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaExternalMemoryGetMappedBuffer_v10000_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cudaExternalMemoryGetMappedBuffer_v10000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaExternalMemoryGetMappedBuffer_v10000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaExternalMemoryGetMappedBuffer_v10000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).devPtr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalMemoryGetMappedBuffer_v10000_params_st),
            "::",
            stringify!(devPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extMem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalMemoryGetMappedBuffer_v10000_params_st),
            "::",
            stringify!(extMem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufferDesc) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalMemoryGetMappedBuffer_v10000_params_st),
            "::",
            stringify!(bufferDesc)
        )
    );
}
impl Default for cudaExternalMemoryGetMappedBuffer_v10000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaExternalMemoryGetMappedBuffer_v10000_params =
    cudaExternalMemoryGetMappedBuffer_v10000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaExternalMemoryGetMappedMipmappedArray_v10000_params_st {
    pub mipmap: *mut cudaMipmappedArray_t,
    pub extMem: cudaExternalMemory_t,
    pub mipmapDesc: *const cudaExternalMemoryMipmappedArrayDesc,
}
#[test]
fn bindgen_test_layout_cudaExternalMemoryGetMappedMipmappedArray_v10000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<
        cudaExternalMemoryGetMappedMipmappedArray_v10000_params_st,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaExternalMemoryGetMappedMipmappedArray_v10000_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cudaExternalMemoryGetMappedMipmappedArray_v10000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaExternalMemoryGetMappedMipmappedArray_v10000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaExternalMemoryGetMappedMipmappedArray_v10000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mipmap) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalMemoryGetMappedMipmappedArray_v10000_params_st),
            "::",
            stringify!(mipmap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extMem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalMemoryGetMappedMipmappedArray_v10000_params_st),
            "::",
            stringify!(extMem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mipmapDesc) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaExternalMemoryGetMappedMipmappedArray_v10000_params_st),
            "::",
            stringify!(mipmapDesc)
        )
    );
}
impl Default for cudaExternalMemoryGetMappedMipmappedArray_v10000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaExternalMemoryGetMappedMipmappedArray_v10000_params =
    cudaExternalMemoryGetMappedMipmappedArray_v10000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaDestroyExternalMemory_v10000_params_st {
    pub extMem: cudaExternalMemory_t,
}
#[test]
fn bindgen_test_layout_cudaDestroyExternalMemory_v10000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaDestroyExternalMemory_v10000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaDestroyExternalMemory_v10000_params_st>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(cudaDestroyExternalMemory_v10000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaDestroyExternalMemory_v10000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaDestroyExternalMemory_v10000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extMem) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDestroyExternalMemory_v10000_params_st),
            "::",
            stringify!(extMem)
        )
    );
}
impl Default for cudaDestroyExternalMemory_v10000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaDestroyExternalMemory_v10000_params = cudaDestroyExternalMemory_v10000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaImportExternalSemaphore_v10000_params_st {
    pub extSem_out: *mut cudaExternalSemaphore_t,
    pub semHandleDesc: *const cudaExternalSemaphoreHandleDesc,
}
#[test]
fn bindgen_test_layout_cudaImportExternalSemaphore_v10000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaImportExternalSemaphore_v10000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaImportExternalSemaphore_v10000_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaImportExternalSemaphore_v10000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaImportExternalSemaphore_v10000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaImportExternalSemaphore_v10000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extSem_out) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaImportExternalSemaphore_v10000_params_st),
            "::",
            stringify!(extSem_out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).semHandleDesc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaImportExternalSemaphore_v10000_params_st),
            "::",
            stringify!(semHandleDesc)
        )
    );
}
impl Default for cudaImportExternalSemaphore_v10000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaImportExternalSemaphore_v10000_params = cudaImportExternalSemaphore_v10000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaSignalExternalSemaphoresAsync_v2_ptsz_v11020_params_st {
    pub extSemArray: *const cudaExternalSemaphore_t,
    pub paramsArray: *const cudaExternalSemaphoreSignalParams,
    pub numExtSems: ::std::os::raw::c_uint,
    pub stream: cudaStream_t,
}
#[test]
fn bindgen_test_layout_cudaSignalExternalSemaphoresAsync_v2_ptsz_v11020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<
        cudaSignalExternalSemaphoresAsync_v2_ptsz_v11020_params_st,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaSignalExternalSemaphoresAsync_v2_ptsz_v11020_params_st>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(cudaSignalExternalSemaphoresAsync_v2_ptsz_v11020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaSignalExternalSemaphoresAsync_v2_ptsz_v11020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaSignalExternalSemaphoresAsync_v2_ptsz_v11020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extSemArray) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaSignalExternalSemaphoresAsync_v2_ptsz_v11020_params_st),
            "::",
            stringify!(extSemArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paramsArray) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaSignalExternalSemaphoresAsync_v2_ptsz_v11020_params_st),
            "::",
            stringify!(paramsArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numExtSems) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaSignalExternalSemaphoresAsync_v2_ptsz_v11020_params_st),
            "::",
            stringify!(numExtSems)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaSignalExternalSemaphoresAsync_v2_ptsz_v11020_params_st),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for cudaSignalExternalSemaphoresAsync_v2_ptsz_v11020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaSignalExternalSemaphoresAsync_v2_ptsz_v11020_params =
    cudaSignalExternalSemaphoresAsync_v2_ptsz_v11020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaWaitExternalSemaphoresAsync_v2_ptsz_v11020_params_st {
    pub extSemArray: *const cudaExternalSemaphore_t,
    pub paramsArray: *const cudaExternalSemaphoreWaitParams,
    pub numExtSems: ::std::os::raw::c_uint,
    pub stream: cudaStream_t,
}
#[test]
fn bindgen_test_layout_cudaWaitExternalSemaphoresAsync_v2_ptsz_v11020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<
        cudaWaitExternalSemaphoresAsync_v2_ptsz_v11020_params_st,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaWaitExternalSemaphoresAsync_v2_ptsz_v11020_params_st>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(cudaWaitExternalSemaphoresAsync_v2_ptsz_v11020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaWaitExternalSemaphoresAsync_v2_ptsz_v11020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaWaitExternalSemaphoresAsync_v2_ptsz_v11020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extSemArray) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaWaitExternalSemaphoresAsync_v2_ptsz_v11020_params_st),
            "::",
            stringify!(extSemArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paramsArray) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaWaitExternalSemaphoresAsync_v2_ptsz_v11020_params_st),
            "::",
            stringify!(paramsArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numExtSems) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaWaitExternalSemaphoresAsync_v2_ptsz_v11020_params_st),
            "::",
            stringify!(numExtSems)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaWaitExternalSemaphoresAsync_v2_ptsz_v11020_params_st),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for cudaWaitExternalSemaphoresAsync_v2_ptsz_v11020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaWaitExternalSemaphoresAsync_v2_ptsz_v11020_params =
    cudaWaitExternalSemaphoresAsync_v2_ptsz_v11020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaDestroyExternalSemaphore_v10000_params_st {
    pub extSem: cudaExternalSemaphore_t,
}
#[test]
fn bindgen_test_layout_cudaDestroyExternalSemaphore_v10000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaDestroyExternalSemaphore_v10000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaDestroyExternalSemaphore_v10000_params_st>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(cudaDestroyExternalSemaphore_v10000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaDestroyExternalSemaphore_v10000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaDestroyExternalSemaphore_v10000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extSem) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDestroyExternalSemaphore_v10000_params_st),
            "::",
            stringify!(extSem)
        )
    );
}
impl Default for cudaDestroyExternalSemaphore_v10000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaDestroyExternalSemaphore_v10000_params = cudaDestroyExternalSemaphore_v10000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaLaunchKernel_ptsz_v7000_params_st {
    pub func: *const ::std::os::raw::c_void,
    pub gridDim: dim3,
    pub blockDim: dim3,
    pub args: *mut *mut ::std::os::raw::c_void,
    pub sharedMem: usize,
    pub stream: cudaStream_t,
}
#[test]
fn bindgen_test_layout_cudaLaunchKernel_ptsz_v7000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaLaunchKernel_ptsz_v7000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaLaunchKernel_ptsz_v7000_params_st>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(cudaLaunchKernel_ptsz_v7000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaLaunchKernel_ptsz_v7000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaLaunchKernel_ptsz_v7000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchKernel_ptsz_v7000_params_st),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gridDim) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchKernel_ptsz_v7000_params_st),
            "::",
            stringify!(gridDim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blockDim) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchKernel_ptsz_v7000_params_st),
            "::",
            stringify!(blockDim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).args) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchKernel_ptsz_v7000_params_st),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sharedMem) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchKernel_ptsz_v7000_params_st),
            "::",
            stringify!(sharedMem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchKernel_ptsz_v7000_params_st),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for cudaLaunchKernel_ptsz_v7000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaLaunchKernel_ptsz_v7000_params = cudaLaunchKernel_ptsz_v7000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaLaunchKernelExC_ptsz_v11060_params_st {
    pub config: *const cudaLaunchConfig_t,
    pub func: *const ::std::os::raw::c_void,
    pub args: *mut *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_cudaLaunchKernelExC_ptsz_v11060_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaLaunchKernelExC_ptsz_v11060_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaLaunchKernelExC_ptsz_v11060_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cudaLaunchKernelExC_ptsz_v11060_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaLaunchKernelExC_ptsz_v11060_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaLaunchKernelExC_ptsz_v11060_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).config) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchKernelExC_ptsz_v11060_params_st),
            "::",
            stringify!(config)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchKernelExC_ptsz_v11060_params_st),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).args) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchKernelExC_ptsz_v11060_params_st),
            "::",
            stringify!(args)
        )
    );
}
impl Default for cudaLaunchKernelExC_ptsz_v11060_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaLaunchKernelExC_ptsz_v11060_params = cudaLaunchKernelExC_ptsz_v11060_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaLaunchCooperativeKernel_ptsz_v9000_params_st {
    pub func: *const ::std::os::raw::c_void,
    pub gridDim: dim3,
    pub blockDim: dim3,
    pub args: *mut *mut ::std::os::raw::c_void,
    pub sharedMem: usize,
    pub stream: cudaStream_t,
}
#[test]
fn bindgen_test_layout_cudaLaunchCooperativeKernel_ptsz_v9000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaLaunchCooperativeKernel_ptsz_v9000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaLaunchCooperativeKernel_ptsz_v9000_params_st>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(cudaLaunchCooperativeKernel_ptsz_v9000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaLaunchCooperativeKernel_ptsz_v9000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaLaunchCooperativeKernel_ptsz_v9000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchCooperativeKernel_ptsz_v9000_params_st),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gridDim) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchCooperativeKernel_ptsz_v9000_params_st),
            "::",
            stringify!(gridDim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blockDim) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchCooperativeKernel_ptsz_v9000_params_st),
            "::",
            stringify!(blockDim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).args) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchCooperativeKernel_ptsz_v9000_params_st),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sharedMem) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchCooperativeKernel_ptsz_v9000_params_st),
            "::",
            stringify!(sharedMem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchCooperativeKernel_ptsz_v9000_params_st),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for cudaLaunchCooperativeKernel_ptsz_v9000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaLaunchCooperativeKernel_ptsz_v9000_params =
    cudaLaunchCooperativeKernel_ptsz_v9000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaLaunchCooperativeKernelMultiDevice_v9000_params_st {
    pub launchParamsList: *mut cudaLaunchParams,
    pub numDevices: ::std::os::raw::c_uint,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cudaLaunchCooperativeKernelMultiDevice_v9000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaLaunchCooperativeKernelMultiDevice_v9000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaLaunchCooperativeKernelMultiDevice_v9000_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaLaunchCooperativeKernelMultiDevice_v9000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaLaunchCooperativeKernelMultiDevice_v9000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaLaunchCooperativeKernelMultiDevice_v9000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).launchParamsList) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchCooperativeKernelMultiDevice_v9000_params_st),
            "::",
            stringify!(launchParamsList)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numDevices) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchCooperativeKernelMultiDevice_v9000_params_st),
            "::",
            stringify!(numDevices)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchCooperativeKernelMultiDevice_v9000_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cudaLaunchCooperativeKernelMultiDevice_v9000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaLaunchCooperativeKernelMultiDevice_v9000_params =
    cudaLaunchCooperativeKernelMultiDevice_v9000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaFuncSetCacheConfig_v3020_params_st {
    pub func: *const ::std::os::raw::c_void,
    pub cacheConfig: cudaFuncCache,
}
#[test]
fn bindgen_test_layout_cudaFuncSetCacheConfig_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaFuncSetCacheConfig_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaFuncSetCacheConfig_v3020_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaFuncSetCacheConfig_v3020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaFuncSetCacheConfig_v3020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaFuncSetCacheConfig_v3020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaFuncSetCacheConfig_v3020_params_st),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cacheConfig) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaFuncSetCacheConfig_v3020_params_st),
            "::",
            stringify!(cacheConfig)
        )
    );
}
impl Default for cudaFuncSetCacheConfig_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaFuncSetCacheConfig_v3020_params = cudaFuncSetCacheConfig_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaFuncSetSharedMemConfig_v4020_params_st {
    pub func: *const ::std::os::raw::c_void,
    pub config: cudaSharedMemConfig,
}
#[test]
fn bindgen_test_layout_cudaFuncSetSharedMemConfig_v4020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaFuncSetSharedMemConfig_v4020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaFuncSetSharedMemConfig_v4020_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaFuncSetSharedMemConfig_v4020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaFuncSetSharedMemConfig_v4020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaFuncSetSharedMemConfig_v4020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaFuncSetSharedMemConfig_v4020_params_st),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).config) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaFuncSetSharedMemConfig_v4020_params_st),
            "::",
            stringify!(config)
        )
    );
}
impl Default for cudaFuncSetSharedMemConfig_v4020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaFuncSetSharedMemConfig_v4020_params = cudaFuncSetSharedMemConfig_v4020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaFuncGetAttributes_v3020_params_st {
    pub attr: *mut cudaFuncAttributes,
    pub func: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_cudaFuncGetAttributes_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaFuncGetAttributes_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaFuncGetAttributes_v3020_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaFuncGetAttributes_v3020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaFuncGetAttributes_v3020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaFuncGetAttributes_v3020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaFuncGetAttributes_v3020_params_st),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaFuncGetAttributes_v3020_params_st),
            "::",
            stringify!(func)
        )
    );
}
impl Default for cudaFuncGetAttributes_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaFuncGetAttributes_v3020_params = cudaFuncGetAttributes_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaFuncSetAttribute_v9000_params_st {
    pub func: *const ::std::os::raw::c_void,
    pub attr: cudaFuncAttribute,
    pub value: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cudaFuncSetAttribute_v9000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaFuncSetAttribute_v9000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaFuncSetAttribute_v9000_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaFuncSetAttribute_v9000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaFuncSetAttribute_v9000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaFuncSetAttribute_v9000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaFuncSetAttribute_v9000_params_st),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaFuncSetAttribute_v9000_params_st),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaFuncSetAttribute_v9000_params_st),
            "::",
            stringify!(value)
        )
    );
}
impl Default for cudaFuncSetAttribute_v9000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaFuncSetAttribute_v9000_params = cudaFuncSetAttribute_v9000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaSetDoubleForDevice_v3020_params_st {
    pub d: *mut f64,
}
#[test]
fn bindgen_test_layout_cudaSetDoubleForDevice_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaSetDoubleForDevice_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaSetDoubleForDevice_v3020_params_st>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(cudaSetDoubleForDevice_v3020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaSetDoubleForDevice_v3020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaSetDoubleForDevice_v3020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaSetDoubleForDevice_v3020_params_st),
            "::",
            stringify!(d)
        )
    );
}
impl Default for cudaSetDoubleForDevice_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaSetDoubleForDevice_v3020_params = cudaSetDoubleForDevice_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaSetDoubleForHost_v3020_params_st {
    pub d: *mut f64,
}
#[test]
fn bindgen_test_layout_cudaSetDoubleForHost_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaSetDoubleForHost_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaSetDoubleForHost_v3020_params_st>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(cudaSetDoubleForHost_v3020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaSetDoubleForHost_v3020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaSetDoubleForHost_v3020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaSetDoubleForHost_v3020_params_st),
            "::",
            stringify!(d)
        )
    );
}
impl Default for cudaSetDoubleForHost_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaSetDoubleForHost_v3020_params = cudaSetDoubleForHost_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaLaunchHostFunc_ptsz_v10000_params_st {
    pub stream: cudaStream_t,
    pub fn_: cudaHostFn_t,
    pub userData: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_cudaLaunchHostFunc_ptsz_v10000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaLaunchHostFunc_ptsz_v10000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaLaunchHostFunc_ptsz_v10000_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cudaLaunchHostFunc_ptsz_v10000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaLaunchHostFunc_ptsz_v10000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaLaunchHostFunc_ptsz_v10000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchHostFunc_ptsz_v10000_params_st),
            "::",
            stringify!(stream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fn_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchHostFunc_ptsz_v10000_params_st),
            "::",
            stringify!(fn_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).userData) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchHostFunc_ptsz_v10000_params_st),
            "::",
            stringify!(userData)
        )
    );
}
impl Default for cudaLaunchHostFunc_ptsz_v10000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaLaunchHostFunc_ptsz_v10000_params = cudaLaunchHostFunc_ptsz_v10000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaOccupancyMaxActiveBlocksPerMultiprocessor_v6050_params_st {
    pub numBlocks: *mut ::std::os::raw::c_int,
    pub func: *const ::std::os::raw::c_void,
    pub blockSize: ::std::os::raw::c_int,
    pub dynamicSMemSize: usize,
}
#[test]
fn bindgen_test_layout_cudaOccupancyMaxActiveBlocksPerMultiprocessor_v6050_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<
        cudaOccupancyMaxActiveBlocksPerMultiprocessor_v6050_params_st,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaOccupancyMaxActiveBlocksPerMultiprocessor_v6050_params_st>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(cudaOccupancyMaxActiveBlocksPerMultiprocessor_v6050_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaOccupancyMaxActiveBlocksPerMultiprocessor_v6050_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaOccupancyMaxActiveBlocksPerMultiprocessor_v6050_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numBlocks) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaOccupancyMaxActiveBlocksPerMultiprocessor_v6050_params_st),
            "::",
            stringify!(numBlocks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaOccupancyMaxActiveBlocksPerMultiprocessor_v6050_params_st),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blockSize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaOccupancyMaxActiveBlocksPerMultiprocessor_v6050_params_st),
            "::",
            stringify!(blockSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dynamicSMemSize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaOccupancyMaxActiveBlocksPerMultiprocessor_v6050_params_st),
            "::",
            stringify!(dynamicSMemSize)
        )
    );
}
impl Default for cudaOccupancyMaxActiveBlocksPerMultiprocessor_v6050_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaOccupancyMaxActiveBlocksPerMultiprocessor_v6050_params =
    cudaOccupancyMaxActiveBlocksPerMultiprocessor_v6050_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaOccupancyAvailableDynamicSMemPerBlock_v10200_params_st {
    pub dynamicSmemSize: *mut usize,
    pub func: *const ::std::os::raw::c_void,
    pub numBlocks: ::std::os::raw::c_int,
    pub blockSize: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cudaOccupancyAvailableDynamicSMemPerBlock_v10200_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<
        cudaOccupancyAvailableDynamicSMemPerBlock_v10200_params_st,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaOccupancyAvailableDynamicSMemPerBlock_v10200_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cudaOccupancyAvailableDynamicSMemPerBlock_v10200_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaOccupancyAvailableDynamicSMemPerBlock_v10200_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaOccupancyAvailableDynamicSMemPerBlock_v10200_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dynamicSmemSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaOccupancyAvailableDynamicSMemPerBlock_v10200_params_st),
            "::",
            stringify!(dynamicSmemSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaOccupancyAvailableDynamicSMemPerBlock_v10200_params_st),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numBlocks) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaOccupancyAvailableDynamicSMemPerBlock_v10200_params_st),
            "::",
            stringify!(numBlocks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blockSize) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaOccupancyAvailableDynamicSMemPerBlock_v10200_params_st),
            "::",
            stringify!(blockSize)
        )
    );
}
impl Default for cudaOccupancyAvailableDynamicSMemPerBlock_v10200_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaOccupancyAvailableDynamicSMemPerBlock_v10200_params =
    cudaOccupancyAvailableDynamicSMemPerBlock_v10200_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_v7000_params_st {
    pub numBlocks: *mut ::std::os::raw::c_int,
    pub func: *const ::std::os::raw::c_void,
    pub blockSize: ::std::os::raw::c_int,
    pub dynamicSMemSize: usize,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_v7000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<
        cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_v7000_params_st,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_v7000_params_st>(
        ),
        40usize,
        concat!(
            "Size of: ",
            stringify!(cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_v7000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<
            cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_v7000_params_st,
        >(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_v7000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numBlocks) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_v7000_params_st),
            "::",
            stringify!(numBlocks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_v7000_params_st),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blockSize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_v7000_params_st),
            "::",
            stringify!(blockSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dynamicSMemSize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_v7000_params_st),
            "::",
            stringify!(dynamicSMemSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_v7000_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_v7000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_v7000_params =
    cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_v7000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaOccupancyMaxPotentialClusterSize_v11070_params_st {
    pub clusterSize: *mut ::std::os::raw::c_int,
    pub func: *const ::std::os::raw::c_void,
    pub launchConfig: *const cudaLaunchConfig_t,
}
#[test]
fn bindgen_test_layout_cudaOccupancyMaxPotentialClusterSize_v11070_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaOccupancyMaxPotentialClusterSize_v11070_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaOccupancyMaxPotentialClusterSize_v11070_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cudaOccupancyMaxPotentialClusterSize_v11070_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaOccupancyMaxPotentialClusterSize_v11070_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaOccupancyMaxPotentialClusterSize_v11070_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clusterSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaOccupancyMaxPotentialClusterSize_v11070_params_st),
            "::",
            stringify!(clusterSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaOccupancyMaxPotentialClusterSize_v11070_params_st),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).launchConfig) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaOccupancyMaxPotentialClusterSize_v11070_params_st),
            "::",
            stringify!(launchConfig)
        )
    );
}
impl Default for cudaOccupancyMaxPotentialClusterSize_v11070_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaOccupancyMaxPotentialClusterSize_v11070_params =
    cudaOccupancyMaxPotentialClusterSize_v11070_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaOccupancyMaxActiveClusters_v11070_params_st {
    pub numClusters: *mut ::std::os::raw::c_int,
    pub func: *const ::std::os::raw::c_void,
    pub launchConfig: *const cudaLaunchConfig_t,
}
#[test]
fn bindgen_test_layout_cudaOccupancyMaxActiveClusters_v11070_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaOccupancyMaxActiveClusters_v11070_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaOccupancyMaxActiveClusters_v11070_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cudaOccupancyMaxActiveClusters_v11070_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaOccupancyMaxActiveClusters_v11070_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaOccupancyMaxActiveClusters_v11070_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numClusters) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaOccupancyMaxActiveClusters_v11070_params_st),
            "::",
            stringify!(numClusters)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaOccupancyMaxActiveClusters_v11070_params_st),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).launchConfig) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaOccupancyMaxActiveClusters_v11070_params_st),
            "::",
            stringify!(launchConfig)
        )
    );
}
impl Default for cudaOccupancyMaxActiveClusters_v11070_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaOccupancyMaxActiveClusters_v11070_params =
    cudaOccupancyMaxActiveClusters_v11070_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMallocManaged_v6000_params_st {
    pub devPtr: *mut *mut ::std::os::raw::c_void,
    pub size: usize,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cudaMallocManaged_v6000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMallocManaged_v6000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMallocManaged_v6000_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cudaMallocManaged_v6000_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMallocManaged_v6000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMallocManaged_v6000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).devPtr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMallocManaged_v6000_params_st),
            "::",
            stringify!(devPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMallocManaged_v6000_params_st),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMallocManaged_v6000_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cudaMallocManaged_v6000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMallocManaged_v6000_params = cudaMallocManaged_v6000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMalloc_v3020_params_st {
    pub devPtr: *mut *mut ::std::os::raw::c_void,
    pub size: usize,
}
#[test]
fn bindgen_test_layout_cudaMalloc_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMalloc_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMalloc_v3020_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cudaMalloc_v3020_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMalloc_v3020_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaMalloc_v3020_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).devPtr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMalloc_v3020_params_st),
            "::",
            stringify!(devPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMalloc_v3020_params_st),
            "::",
            stringify!(size)
        )
    );
}
impl Default for cudaMalloc_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMalloc_v3020_params = cudaMalloc_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMallocHost_v3020_params_st {
    pub ptr: *mut *mut ::std::os::raw::c_void,
    pub size: usize,
}
#[test]
fn bindgen_test_layout_cudaMallocHost_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMallocHost_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMallocHost_v3020_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cudaMallocHost_v3020_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMallocHost_v3020_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaMallocHost_v3020_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMallocHost_v3020_params_st),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMallocHost_v3020_params_st),
            "::",
            stringify!(size)
        )
    );
}
impl Default for cudaMallocHost_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMallocHost_v3020_params = cudaMallocHost_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMallocPitch_v3020_params_st {
    pub devPtr: *mut *mut ::std::os::raw::c_void,
    pub pitch: *mut usize,
    pub width: usize,
    pub height: usize,
}
#[test]
fn bindgen_test_layout_cudaMallocPitch_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMallocPitch_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMallocPitch_v3020_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cudaMallocPitch_v3020_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMallocPitch_v3020_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaMallocPitch_v3020_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).devPtr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMallocPitch_v3020_params_st),
            "::",
            stringify!(devPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pitch) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMallocPitch_v3020_params_st),
            "::",
            stringify!(pitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMallocPitch_v3020_params_st),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMallocPitch_v3020_params_st),
            "::",
            stringify!(height)
        )
    );
}
impl Default for cudaMallocPitch_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMallocPitch_v3020_params = cudaMallocPitch_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMallocArray_v3020_params_st {
    pub array: *mut cudaArray_t,
    pub desc: *const cudaChannelFormatDesc,
    pub width: usize,
    pub height: usize,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cudaMallocArray_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMallocArray_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMallocArray_v3020_params_st>(),
        40usize,
        concat!("Size of: ", stringify!(cudaMallocArray_v3020_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMallocArray_v3020_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaMallocArray_v3020_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).array) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMallocArray_v3020_params_st),
            "::",
            stringify!(array)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).desc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMallocArray_v3020_params_st),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMallocArray_v3020_params_st),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMallocArray_v3020_params_st),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMallocArray_v3020_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cudaMallocArray_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMallocArray_v3020_params = cudaMallocArray_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaFree_v3020_params_st {
    pub devPtr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_cudaFree_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaFree_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaFree_v3020_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cudaFree_v3020_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaFree_v3020_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaFree_v3020_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).devPtr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaFree_v3020_params_st),
            "::",
            stringify!(devPtr)
        )
    );
}
impl Default for cudaFree_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaFree_v3020_params = cudaFree_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaFreeHost_v3020_params_st {
    pub ptr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_cudaFreeHost_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaFreeHost_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaFreeHost_v3020_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cudaFreeHost_v3020_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaFreeHost_v3020_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaFreeHost_v3020_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaFreeHost_v3020_params_st),
            "::",
            stringify!(ptr)
        )
    );
}
impl Default for cudaFreeHost_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaFreeHost_v3020_params = cudaFreeHost_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaFreeArray_v3020_params_st {
    pub array: cudaArray_t,
}
#[test]
fn bindgen_test_layout_cudaFreeArray_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaFreeArray_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaFreeArray_v3020_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cudaFreeArray_v3020_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaFreeArray_v3020_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaFreeArray_v3020_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).array) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaFreeArray_v3020_params_st),
            "::",
            stringify!(array)
        )
    );
}
impl Default for cudaFreeArray_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaFreeArray_v3020_params = cudaFreeArray_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaFreeMipmappedArray_v5000_params_st {
    pub mipmappedArray: cudaMipmappedArray_t,
}
#[test]
fn bindgen_test_layout_cudaFreeMipmappedArray_v5000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaFreeMipmappedArray_v5000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaFreeMipmappedArray_v5000_params_st>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(cudaFreeMipmappedArray_v5000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaFreeMipmappedArray_v5000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaFreeMipmappedArray_v5000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mipmappedArray) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaFreeMipmappedArray_v5000_params_st),
            "::",
            stringify!(mipmappedArray)
        )
    );
}
impl Default for cudaFreeMipmappedArray_v5000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaFreeMipmappedArray_v5000_params = cudaFreeMipmappedArray_v5000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaHostAlloc_v3020_params_st {
    pub pHost: *mut *mut ::std::os::raw::c_void,
    pub size: usize,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cudaHostAlloc_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaHostAlloc_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaHostAlloc_v3020_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cudaHostAlloc_v3020_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaHostAlloc_v3020_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaHostAlloc_v3020_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pHost) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaHostAlloc_v3020_params_st),
            "::",
            stringify!(pHost)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaHostAlloc_v3020_params_st),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaHostAlloc_v3020_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cudaHostAlloc_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaHostAlloc_v3020_params = cudaHostAlloc_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaHostRegister_v4000_params_st {
    pub ptr: *mut ::std::os::raw::c_void,
    pub size: usize,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cudaHostRegister_v4000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaHostRegister_v4000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaHostRegister_v4000_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cudaHostRegister_v4000_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaHostRegister_v4000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaHostRegister_v4000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaHostRegister_v4000_params_st),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaHostRegister_v4000_params_st),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaHostRegister_v4000_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cudaHostRegister_v4000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaHostRegister_v4000_params = cudaHostRegister_v4000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaHostUnregister_v4000_params_st {
    pub ptr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_cudaHostUnregister_v4000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaHostUnregister_v4000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaHostUnregister_v4000_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cudaHostUnregister_v4000_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaHostUnregister_v4000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaHostUnregister_v4000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaHostUnregister_v4000_params_st),
            "::",
            stringify!(ptr)
        )
    );
}
impl Default for cudaHostUnregister_v4000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaHostUnregister_v4000_params = cudaHostUnregister_v4000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaHostGetDevicePointer_v3020_params_st {
    pub pDevice: *mut *mut ::std::os::raw::c_void,
    pub pHost: *mut ::std::os::raw::c_void,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cudaHostGetDevicePointer_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaHostGetDevicePointer_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaHostGetDevicePointer_v3020_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cudaHostGetDevicePointer_v3020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaHostGetDevicePointer_v3020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaHostGetDevicePointer_v3020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaHostGetDevicePointer_v3020_params_st),
            "::",
            stringify!(pDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pHost) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaHostGetDevicePointer_v3020_params_st),
            "::",
            stringify!(pHost)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaHostGetDevicePointer_v3020_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cudaHostGetDevicePointer_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaHostGetDevicePointer_v3020_params = cudaHostGetDevicePointer_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaHostGetFlags_v3020_params_st {
    pub pFlags: *mut ::std::os::raw::c_uint,
    pub pHost: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_cudaHostGetFlags_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaHostGetFlags_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaHostGetFlags_v3020_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cudaHostGetFlags_v3020_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaHostGetFlags_v3020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaHostGetFlags_v3020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pFlags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaHostGetFlags_v3020_params_st),
            "::",
            stringify!(pFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pHost) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaHostGetFlags_v3020_params_st),
            "::",
            stringify!(pHost)
        )
    );
}
impl Default for cudaHostGetFlags_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaHostGetFlags_v3020_params = cudaHostGetFlags_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMalloc3D_v3020_params_st {
    pub pitchedDevPtr: *mut cudaPitchedPtr,
    pub extent: cudaExtent,
}
#[test]
fn bindgen_test_layout_cudaMalloc3D_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMalloc3D_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMalloc3D_v3020_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cudaMalloc3D_v3020_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMalloc3D_v3020_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaMalloc3D_v3020_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pitchedDevPtr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMalloc3D_v3020_params_st),
            "::",
            stringify!(pitchedDevPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extent) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMalloc3D_v3020_params_st),
            "::",
            stringify!(extent)
        )
    );
}
impl Default for cudaMalloc3D_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMalloc3D_v3020_params = cudaMalloc3D_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMalloc3DArray_v3020_params_st {
    pub array: *mut cudaArray_t,
    pub desc: *const cudaChannelFormatDesc,
    pub extent: cudaExtent,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cudaMalloc3DArray_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMalloc3DArray_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMalloc3DArray_v3020_params_st>(),
        48usize,
        concat!("Size of: ", stringify!(cudaMalloc3DArray_v3020_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMalloc3DArray_v3020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMalloc3DArray_v3020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).array) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMalloc3DArray_v3020_params_st),
            "::",
            stringify!(array)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).desc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMalloc3DArray_v3020_params_st),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extent) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMalloc3DArray_v3020_params_st),
            "::",
            stringify!(extent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMalloc3DArray_v3020_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cudaMalloc3DArray_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMalloc3DArray_v3020_params = cudaMalloc3DArray_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMallocMipmappedArray_v5000_params_st {
    pub mipmappedArray: *mut cudaMipmappedArray_t,
    pub desc: *const cudaChannelFormatDesc,
    pub extent: cudaExtent,
    pub numLevels: ::std::os::raw::c_uint,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cudaMallocMipmappedArray_v5000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMallocMipmappedArray_v5000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMallocMipmappedArray_v5000_params_st>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(cudaMallocMipmappedArray_v5000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMallocMipmappedArray_v5000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMallocMipmappedArray_v5000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mipmappedArray) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMallocMipmappedArray_v5000_params_st),
            "::",
            stringify!(mipmappedArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).desc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMallocMipmappedArray_v5000_params_st),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extent) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMallocMipmappedArray_v5000_params_st),
            "::",
            stringify!(extent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numLevels) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMallocMipmappedArray_v5000_params_st),
            "::",
            stringify!(numLevels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMallocMipmappedArray_v5000_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cudaMallocMipmappedArray_v5000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMallocMipmappedArray_v5000_params = cudaMallocMipmappedArray_v5000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGetMipmappedArrayLevel_v5000_params_st {
    pub levelArray: *mut cudaArray_t,
    pub mipmappedArray: cudaMipmappedArray_const_t,
    pub level: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cudaGetMipmappedArrayLevel_v5000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGetMipmappedArrayLevel_v5000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGetMipmappedArrayLevel_v5000_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cudaGetMipmappedArrayLevel_v5000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGetMipmappedArrayLevel_v5000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGetMipmappedArrayLevel_v5000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).levelArray) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGetMipmappedArrayLevel_v5000_params_st),
            "::",
            stringify!(levelArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mipmappedArray) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGetMipmappedArrayLevel_v5000_params_st),
            "::",
            stringify!(mipmappedArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).level) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGetMipmappedArrayLevel_v5000_params_st),
            "::",
            stringify!(level)
        )
    );
}
impl Default for cudaGetMipmappedArrayLevel_v5000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGetMipmappedArrayLevel_v5000_params = cudaGetMipmappedArrayLevel_v5000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemcpy3D_ptds_v7000_params_st {
    pub p: *const cudaMemcpy3DParms,
}
#[test]
fn bindgen_test_layout_cudaMemcpy3D_ptds_v7000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemcpy3D_ptds_v7000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemcpy3D_ptds_v7000_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cudaMemcpy3D_ptds_v7000_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemcpy3D_ptds_v7000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMemcpy3D_ptds_v7000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy3D_ptds_v7000_params_st),
            "::",
            stringify!(p)
        )
    );
}
impl Default for cudaMemcpy3D_ptds_v7000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemcpy3D_ptds_v7000_params = cudaMemcpy3D_ptds_v7000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemcpy3DPeer_ptds_v7000_params_st {
    pub p: *const cudaMemcpy3DPeerParms,
}
#[test]
fn bindgen_test_layout_cudaMemcpy3DPeer_ptds_v7000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemcpy3DPeer_ptds_v7000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemcpy3DPeer_ptds_v7000_params_st>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(cudaMemcpy3DPeer_ptds_v7000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemcpy3DPeer_ptds_v7000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMemcpy3DPeer_ptds_v7000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy3DPeer_ptds_v7000_params_st),
            "::",
            stringify!(p)
        )
    );
}
impl Default for cudaMemcpy3DPeer_ptds_v7000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemcpy3DPeer_ptds_v7000_params = cudaMemcpy3DPeer_ptds_v7000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemcpy3DAsync_ptsz_v7000_params_st {
    pub p: *const cudaMemcpy3DParms,
    pub stream: cudaStream_t,
}
#[test]
fn bindgen_test_layout_cudaMemcpy3DAsync_ptsz_v7000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemcpy3DAsync_ptsz_v7000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemcpy3DAsync_ptsz_v7000_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaMemcpy3DAsync_ptsz_v7000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemcpy3DAsync_ptsz_v7000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMemcpy3DAsync_ptsz_v7000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy3DAsync_ptsz_v7000_params_st),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy3DAsync_ptsz_v7000_params_st),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for cudaMemcpy3DAsync_ptsz_v7000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemcpy3DAsync_ptsz_v7000_params = cudaMemcpy3DAsync_ptsz_v7000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemcpy3DPeerAsync_ptsz_v7000_params_st {
    pub p: *const cudaMemcpy3DPeerParms,
    pub stream: cudaStream_t,
}
#[test]
fn bindgen_test_layout_cudaMemcpy3DPeerAsync_ptsz_v7000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemcpy3DPeerAsync_ptsz_v7000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemcpy3DPeerAsync_ptsz_v7000_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaMemcpy3DPeerAsync_ptsz_v7000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemcpy3DPeerAsync_ptsz_v7000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMemcpy3DPeerAsync_ptsz_v7000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy3DPeerAsync_ptsz_v7000_params_st),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy3DPeerAsync_ptsz_v7000_params_st),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for cudaMemcpy3DPeerAsync_ptsz_v7000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemcpy3DPeerAsync_ptsz_v7000_params = cudaMemcpy3DPeerAsync_ptsz_v7000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemGetInfo_v3020_params_st {
    pub free: *mut usize,
    pub total: *mut usize,
}
#[test]
fn bindgen_test_layout_cudaMemGetInfo_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemGetInfo_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemGetInfo_v3020_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cudaMemGetInfo_v3020_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemGetInfo_v3020_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaMemGetInfo_v3020_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemGetInfo_v3020_params_st),
            "::",
            stringify!(free)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemGetInfo_v3020_params_st),
            "::",
            stringify!(total)
        )
    );
}
impl Default for cudaMemGetInfo_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemGetInfo_v3020_params = cudaMemGetInfo_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaArrayGetInfo_v4010_params_st {
    pub desc: *mut cudaChannelFormatDesc,
    pub extent: *mut cudaExtent,
    pub flags: *mut ::std::os::raw::c_uint,
    pub array: cudaArray_t,
}
#[test]
fn bindgen_test_layout_cudaArrayGetInfo_v4010_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaArrayGetInfo_v4010_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaArrayGetInfo_v4010_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cudaArrayGetInfo_v4010_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaArrayGetInfo_v4010_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaArrayGetInfo_v4010_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).desc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaArrayGetInfo_v4010_params_st),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extent) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaArrayGetInfo_v4010_params_st),
            "::",
            stringify!(extent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaArrayGetInfo_v4010_params_st),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).array) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaArrayGetInfo_v4010_params_st),
            "::",
            stringify!(array)
        )
    );
}
impl Default for cudaArrayGetInfo_v4010_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaArrayGetInfo_v4010_params = cudaArrayGetInfo_v4010_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaArrayGetPlane_v11020_params_st {
    pub pPlaneArray: *mut cudaArray_t,
    pub hArray: cudaArray_t,
    pub planeIdx: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cudaArrayGetPlane_v11020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaArrayGetPlane_v11020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaArrayGetPlane_v11020_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cudaArrayGetPlane_v11020_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaArrayGetPlane_v11020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaArrayGetPlane_v11020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPlaneArray) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaArrayGetPlane_v11020_params_st),
            "::",
            stringify!(pPlaneArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hArray) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaArrayGetPlane_v11020_params_st),
            "::",
            stringify!(hArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).planeIdx) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaArrayGetPlane_v11020_params_st),
            "::",
            stringify!(planeIdx)
        )
    );
}
impl Default for cudaArrayGetPlane_v11020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaArrayGetPlane_v11020_params = cudaArrayGetPlane_v11020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaArrayGetMemoryRequirements_v11060_params_st {
    pub memoryRequirements: *mut cudaArrayMemoryRequirements,
    pub array: cudaArray_t,
    pub device: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cudaArrayGetMemoryRequirements_v11060_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaArrayGetMemoryRequirements_v11060_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaArrayGetMemoryRequirements_v11060_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cudaArrayGetMemoryRequirements_v11060_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaArrayGetMemoryRequirements_v11060_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaArrayGetMemoryRequirements_v11060_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memoryRequirements) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaArrayGetMemoryRequirements_v11060_params_st),
            "::",
            stringify!(memoryRequirements)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).array) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaArrayGetMemoryRequirements_v11060_params_st),
            "::",
            stringify!(array)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaArrayGetMemoryRequirements_v11060_params_st),
            "::",
            stringify!(device)
        )
    );
}
impl Default for cudaArrayGetMemoryRequirements_v11060_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaArrayGetMemoryRequirements_v11060_params =
    cudaArrayGetMemoryRequirements_v11060_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMipmappedArrayGetMemoryRequirements_v11060_params_st {
    pub memoryRequirements: *mut cudaArrayMemoryRequirements,
    pub mipmap: cudaMipmappedArray_t,
    pub device: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cudaMipmappedArrayGetMemoryRequirements_v11060_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<
        cudaMipmappedArrayGetMemoryRequirements_v11060_params_st,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMipmappedArrayGetMemoryRequirements_v11060_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cudaMipmappedArrayGetMemoryRequirements_v11060_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMipmappedArrayGetMemoryRequirements_v11060_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMipmappedArrayGetMemoryRequirements_v11060_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memoryRequirements) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMipmappedArrayGetMemoryRequirements_v11060_params_st),
            "::",
            stringify!(memoryRequirements)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mipmap) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMipmappedArrayGetMemoryRequirements_v11060_params_st),
            "::",
            stringify!(mipmap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMipmappedArrayGetMemoryRequirements_v11060_params_st),
            "::",
            stringify!(device)
        )
    );
}
impl Default for cudaMipmappedArrayGetMemoryRequirements_v11060_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMipmappedArrayGetMemoryRequirements_v11060_params =
    cudaMipmappedArrayGetMemoryRequirements_v11060_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaArrayGetSparseProperties_v11010_params_st {
    pub sparseProperties: *mut cudaArraySparseProperties,
    pub array: cudaArray_t,
}
#[test]
fn bindgen_test_layout_cudaArrayGetSparseProperties_v11010_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaArrayGetSparseProperties_v11010_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaArrayGetSparseProperties_v11010_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaArrayGetSparseProperties_v11010_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaArrayGetSparseProperties_v11010_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaArrayGetSparseProperties_v11010_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sparseProperties) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaArrayGetSparseProperties_v11010_params_st),
            "::",
            stringify!(sparseProperties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).array) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaArrayGetSparseProperties_v11010_params_st),
            "::",
            stringify!(array)
        )
    );
}
impl Default for cudaArrayGetSparseProperties_v11010_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaArrayGetSparseProperties_v11010_params = cudaArrayGetSparseProperties_v11010_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMipmappedArrayGetSparseProperties_v11010_params_st {
    pub sparseProperties: *mut cudaArraySparseProperties,
    pub mipmap: cudaMipmappedArray_t,
}
#[test]
fn bindgen_test_layout_cudaMipmappedArrayGetSparseProperties_v11010_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMipmappedArrayGetSparseProperties_v11010_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMipmappedArrayGetSparseProperties_v11010_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaMipmappedArrayGetSparseProperties_v11010_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMipmappedArrayGetSparseProperties_v11010_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMipmappedArrayGetSparseProperties_v11010_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sparseProperties) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMipmappedArrayGetSparseProperties_v11010_params_st),
            "::",
            stringify!(sparseProperties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mipmap) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMipmappedArrayGetSparseProperties_v11010_params_st),
            "::",
            stringify!(mipmap)
        )
    );
}
impl Default for cudaMipmappedArrayGetSparseProperties_v11010_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMipmappedArrayGetSparseProperties_v11010_params =
    cudaMipmappedArrayGetSparseProperties_v11010_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemcpy_ptds_v7000_params_st {
    pub dst: *mut ::std::os::raw::c_void,
    pub src: *const ::std::os::raw::c_void,
    pub count: usize,
    pub kind: cudaMemcpyKind,
}
#[test]
fn bindgen_test_layout_cudaMemcpy_ptds_v7000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemcpy_ptds_v7000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemcpy_ptds_v7000_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cudaMemcpy_ptds_v7000_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemcpy_ptds_v7000_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaMemcpy_ptds_v7000_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy_ptds_v7000_params_st),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy_ptds_v7000_params_st),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy_ptds_v7000_params_st),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy_ptds_v7000_params_st),
            "::",
            stringify!(kind)
        )
    );
}
impl Default for cudaMemcpy_ptds_v7000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemcpy_ptds_v7000_params = cudaMemcpy_ptds_v7000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemcpyPeer_v4000_params_st {
    pub dst: *mut ::std::os::raw::c_void,
    pub dstDevice: ::std::os::raw::c_int,
    pub src: *const ::std::os::raw::c_void,
    pub srcDevice: ::std::os::raw::c_int,
    pub count: usize,
}
#[test]
fn bindgen_test_layout_cudaMemcpyPeer_v4000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemcpyPeer_v4000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemcpyPeer_v4000_params_st>(),
        40usize,
        concat!("Size of: ", stringify!(cudaMemcpyPeer_v4000_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemcpyPeer_v4000_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaMemcpyPeer_v4000_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyPeer_v4000_params_st),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstDevice) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyPeer_v4000_params_st),
            "::",
            stringify!(dstDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyPeer_v4000_params_st),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcDevice) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyPeer_v4000_params_st),
            "::",
            stringify!(srcDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyPeer_v4000_params_st),
            "::",
            stringify!(count)
        )
    );
}
impl Default for cudaMemcpyPeer_v4000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemcpyPeer_v4000_params = cudaMemcpyPeer_v4000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemcpy2D_ptds_v7000_params_st {
    pub dst: *mut ::std::os::raw::c_void,
    pub dpitch: usize,
    pub src: *const ::std::os::raw::c_void,
    pub spitch: usize,
    pub width: usize,
    pub height: usize,
    pub kind: cudaMemcpyKind,
}
#[test]
fn bindgen_test_layout_cudaMemcpy2D_ptds_v7000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemcpy2D_ptds_v7000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemcpy2D_ptds_v7000_params_st>(),
        56usize,
        concat!("Size of: ", stringify!(cudaMemcpy2D_ptds_v7000_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemcpy2D_ptds_v7000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMemcpy2D_ptds_v7000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2D_ptds_v7000_params_st),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dpitch) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2D_ptds_v7000_params_st),
            "::",
            stringify!(dpitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2D_ptds_v7000_params_st),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spitch) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2D_ptds_v7000_params_st),
            "::",
            stringify!(spitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2D_ptds_v7000_params_st),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2D_ptds_v7000_params_st),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2D_ptds_v7000_params_st),
            "::",
            stringify!(kind)
        )
    );
}
impl Default for cudaMemcpy2D_ptds_v7000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemcpy2D_ptds_v7000_params = cudaMemcpy2D_ptds_v7000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemcpy2DToArray_ptds_v7000_params_st {
    pub dst: cudaArray_t,
    pub wOffset: usize,
    pub hOffset: usize,
    pub src: *const ::std::os::raw::c_void,
    pub spitch: usize,
    pub width: usize,
    pub height: usize,
    pub kind: cudaMemcpyKind,
}
#[test]
fn bindgen_test_layout_cudaMemcpy2DToArray_ptds_v7000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemcpy2DToArray_ptds_v7000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemcpy2DToArray_ptds_v7000_params_st>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(cudaMemcpy2DToArray_ptds_v7000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemcpy2DToArray_ptds_v7000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMemcpy2DToArray_ptds_v7000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DToArray_ptds_v7000_params_st),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wOffset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DToArray_ptds_v7000_params_st),
            "::",
            stringify!(wOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hOffset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DToArray_ptds_v7000_params_st),
            "::",
            stringify!(hOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DToArray_ptds_v7000_params_st),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spitch) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DToArray_ptds_v7000_params_st),
            "::",
            stringify!(spitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DToArray_ptds_v7000_params_st),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DToArray_ptds_v7000_params_st),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DToArray_ptds_v7000_params_st),
            "::",
            stringify!(kind)
        )
    );
}
impl Default for cudaMemcpy2DToArray_ptds_v7000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemcpy2DToArray_ptds_v7000_params = cudaMemcpy2DToArray_ptds_v7000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemcpy2DFromArray_ptds_v7000_params_st {
    pub dst: *mut ::std::os::raw::c_void,
    pub dpitch: usize,
    pub src: cudaArray_const_t,
    pub wOffset: usize,
    pub hOffset: usize,
    pub width: usize,
    pub height: usize,
    pub kind: cudaMemcpyKind,
}
#[test]
fn bindgen_test_layout_cudaMemcpy2DFromArray_ptds_v7000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemcpy2DFromArray_ptds_v7000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemcpy2DFromArray_ptds_v7000_params_st>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(cudaMemcpy2DFromArray_ptds_v7000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemcpy2DFromArray_ptds_v7000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMemcpy2DFromArray_ptds_v7000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DFromArray_ptds_v7000_params_st),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dpitch) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DFromArray_ptds_v7000_params_st),
            "::",
            stringify!(dpitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DFromArray_ptds_v7000_params_st),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wOffset) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DFromArray_ptds_v7000_params_st),
            "::",
            stringify!(wOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hOffset) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DFromArray_ptds_v7000_params_st),
            "::",
            stringify!(hOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DFromArray_ptds_v7000_params_st),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DFromArray_ptds_v7000_params_st),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DFromArray_ptds_v7000_params_st),
            "::",
            stringify!(kind)
        )
    );
}
impl Default for cudaMemcpy2DFromArray_ptds_v7000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemcpy2DFromArray_ptds_v7000_params = cudaMemcpy2DFromArray_ptds_v7000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemcpy2DArrayToArray_ptds_v7000_params_st {
    pub dst: cudaArray_t,
    pub wOffsetDst: usize,
    pub hOffsetDst: usize,
    pub src: cudaArray_const_t,
    pub wOffsetSrc: usize,
    pub hOffsetSrc: usize,
    pub width: usize,
    pub height: usize,
    pub kind: cudaMemcpyKind,
}
#[test]
fn bindgen_test_layout_cudaMemcpy2DArrayToArray_ptds_v7000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemcpy2DArrayToArray_ptds_v7000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemcpy2DArrayToArray_ptds_v7000_params_st>(),
        72usize,
        concat!(
            "Size of: ",
            stringify!(cudaMemcpy2DArrayToArray_ptds_v7000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemcpy2DArrayToArray_ptds_v7000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMemcpy2DArrayToArray_ptds_v7000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DArrayToArray_ptds_v7000_params_st),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wOffsetDst) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DArrayToArray_ptds_v7000_params_st),
            "::",
            stringify!(wOffsetDst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hOffsetDst) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DArrayToArray_ptds_v7000_params_st),
            "::",
            stringify!(hOffsetDst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DArrayToArray_ptds_v7000_params_st),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wOffsetSrc) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DArrayToArray_ptds_v7000_params_st),
            "::",
            stringify!(wOffsetSrc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hOffsetSrc) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DArrayToArray_ptds_v7000_params_st),
            "::",
            stringify!(hOffsetSrc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DArrayToArray_ptds_v7000_params_st),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DArrayToArray_ptds_v7000_params_st),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DArrayToArray_ptds_v7000_params_st),
            "::",
            stringify!(kind)
        )
    );
}
impl Default for cudaMemcpy2DArrayToArray_ptds_v7000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemcpy2DArrayToArray_ptds_v7000_params = cudaMemcpy2DArrayToArray_ptds_v7000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemcpyToSymbol_ptds_v7000_params_st {
    pub symbol: *const ::std::os::raw::c_void,
    pub src: *const ::std::os::raw::c_void,
    pub count: usize,
    pub offset: usize,
    pub kind: cudaMemcpyKind,
}
#[test]
fn bindgen_test_layout_cudaMemcpyToSymbol_ptds_v7000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemcpyToSymbol_ptds_v7000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemcpyToSymbol_ptds_v7000_params_st>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(cudaMemcpyToSymbol_ptds_v7000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemcpyToSymbol_ptds_v7000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMemcpyToSymbol_ptds_v7000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).symbol) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyToSymbol_ptds_v7000_params_st),
            "::",
            stringify!(symbol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyToSymbol_ptds_v7000_params_st),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyToSymbol_ptds_v7000_params_st),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyToSymbol_ptds_v7000_params_st),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyToSymbol_ptds_v7000_params_st),
            "::",
            stringify!(kind)
        )
    );
}
impl Default for cudaMemcpyToSymbol_ptds_v7000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemcpyToSymbol_ptds_v7000_params = cudaMemcpyToSymbol_ptds_v7000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemcpyFromSymbol_ptds_v7000_params_st {
    pub dst: *mut ::std::os::raw::c_void,
    pub symbol: *const ::std::os::raw::c_void,
    pub count: usize,
    pub offset: usize,
    pub kind: cudaMemcpyKind,
}
#[test]
fn bindgen_test_layout_cudaMemcpyFromSymbol_ptds_v7000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemcpyFromSymbol_ptds_v7000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemcpyFromSymbol_ptds_v7000_params_st>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(cudaMemcpyFromSymbol_ptds_v7000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemcpyFromSymbol_ptds_v7000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMemcpyFromSymbol_ptds_v7000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyFromSymbol_ptds_v7000_params_st),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).symbol) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyFromSymbol_ptds_v7000_params_st),
            "::",
            stringify!(symbol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyFromSymbol_ptds_v7000_params_st),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyFromSymbol_ptds_v7000_params_st),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyFromSymbol_ptds_v7000_params_st),
            "::",
            stringify!(kind)
        )
    );
}
impl Default for cudaMemcpyFromSymbol_ptds_v7000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemcpyFromSymbol_ptds_v7000_params = cudaMemcpyFromSymbol_ptds_v7000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemcpyAsync_ptsz_v7000_params_st {
    pub dst: *mut ::std::os::raw::c_void,
    pub src: *const ::std::os::raw::c_void,
    pub count: usize,
    pub kind: cudaMemcpyKind,
    pub stream: cudaStream_t,
}
#[test]
fn bindgen_test_layout_cudaMemcpyAsync_ptsz_v7000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemcpyAsync_ptsz_v7000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemcpyAsync_ptsz_v7000_params_st>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(cudaMemcpyAsync_ptsz_v7000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemcpyAsync_ptsz_v7000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMemcpyAsync_ptsz_v7000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyAsync_ptsz_v7000_params_st),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyAsync_ptsz_v7000_params_st),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyAsync_ptsz_v7000_params_st),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyAsync_ptsz_v7000_params_st),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyAsync_ptsz_v7000_params_st),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for cudaMemcpyAsync_ptsz_v7000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemcpyAsync_ptsz_v7000_params = cudaMemcpyAsync_ptsz_v7000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemcpyPeerAsync_v4000_params_st {
    pub dst: *mut ::std::os::raw::c_void,
    pub dstDevice: ::std::os::raw::c_int,
    pub src: *const ::std::os::raw::c_void,
    pub srcDevice: ::std::os::raw::c_int,
    pub count: usize,
    pub stream: cudaStream_t,
}
#[test]
fn bindgen_test_layout_cudaMemcpyPeerAsync_v4000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemcpyPeerAsync_v4000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemcpyPeerAsync_v4000_params_st>(),
        48usize,
        concat!("Size of: ", stringify!(cudaMemcpyPeerAsync_v4000_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemcpyPeerAsync_v4000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMemcpyPeerAsync_v4000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyPeerAsync_v4000_params_st),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstDevice) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyPeerAsync_v4000_params_st),
            "::",
            stringify!(dstDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyPeerAsync_v4000_params_st),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcDevice) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyPeerAsync_v4000_params_st),
            "::",
            stringify!(srcDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyPeerAsync_v4000_params_st),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyPeerAsync_v4000_params_st),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for cudaMemcpyPeerAsync_v4000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemcpyPeerAsync_v4000_params = cudaMemcpyPeerAsync_v4000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemcpy2DAsync_ptsz_v7000_params_st {
    pub dst: *mut ::std::os::raw::c_void,
    pub dpitch: usize,
    pub src: *const ::std::os::raw::c_void,
    pub spitch: usize,
    pub width: usize,
    pub height: usize,
    pub kind: cudaMemcpyKind,
    pub stream: cudaStream_t,
}
#[test]
fn bindgen_test_layout_cudaMemcpy2DAsync_ptsz_v7000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemcpy2DAsync_ptsz_v7000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemcpy2DAsync_ptsz_v7000_params_st>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(cudaMemcpy2DAsync_ptsz_v7000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemcpy2DAsync_ptsz_v7000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMemcpy2DAsync_ptsz_v7000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DAsync_ptsz_v7000_params_st),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dpitch) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DAsync_ptsz_v7000_params_st),
            "::",
            stringify!(dpitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DAsync_ptsz_v7000_params_st),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spitch) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DAsync_ptsz_v7000_params_st),
            "::",
            stringify!(spitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DAsync_ptsz_v7000_params_st),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DAsync_ptsz_v7000_params_st),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DAsync_ptsz_v7000_params_st),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DAsync_ptsz_v7000_params_st),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for cudaMemcpy2DAsync_ptsz_v7000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemcpy2DAsync_ptsz_v7000_params = cudaMemcpy2DAsync_ptsz_v7000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemcpy2DToArrayAsync_ptsz_v7000_params_st {
    pub dst: cudaArray_t,
    pub wOffset: usize,
    pub hOffset: usize,
    pub src: *const ::std::os::raw::c_void,
    pub spitch: usize,
    pub width: usize,
    pub height: usize,
    pub kind: cudaMemcpyKind,
    pub stream: cudaStream_t,
}
#[test]
fn bindgen_test_layout_cudaMemcpy2DToArrayAsync_ptsz_v7000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemcpy2DToArrayAsync_ptsz_v7000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemcpy2DToArrayAsync_ptsz_v7000_params_st>(),
        72usize,
        concat!(
            "Size of: ",
            stringify!(cudaMemcpy2DToArrayAsync_ptsz_v7000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemcpy2DToArrayAsync_ptsz_v7000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMemcpy2DToArrayAsync_ptsz_v7000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DToArrayAsync_ptsz_v7000_params_st),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wOffset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DToArrayAsync_ptsz_v7000_params_st),
            "::",
            stringify!(wOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hOffset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DToArrayAsync_ptsz_v7000_params_st),
            "::",
            stringify!(hOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DToArrayAsync_ptsz_v7000_params_st),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spitch) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DToArrayAsync_ptsz_v7000_params_st),
            "::",
            stringify!(spitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DToArrayAsync_ptsz_v7000_params_st),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DToArrayAsync_ptsz_v7000_params_st),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DToArrayAsync_ptsz_v7000_params_st),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DToArrayAsync_ptsz_v7000_params_st),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for cudaMemcpy2DToArrayAsync_ptsz_v7000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemcpy2DToArrayAsync_ptsz_v7000_params = cudaMemcpy2DToArrayAsync_ptsz_v7000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemcpy2DFromArrayAsync_ptsz_v7000_params_st {
    pub dst: *mut ::std::os::raw::c_void,
    pub dpitch: usize,
    pub src: cudaArray_const_t,
    pub wOffset: usize,
    pub hOffset: usize,
    pub width: usize,
    pub height: usize,
    pub kind: cudaMemcpyKind,
    pub stream: cudaStream_t,
}
#[test]
fn bindgen_test_layout_cudaMemcpy2DFromArrayAsync_ptsz_v7000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemcpy2DFromArrayAsync_ptsz_v7000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemcpy2DFromArrayAsync_ptsz_v7000_params_st>(),
        72usize,
        concat!(
            "Size of: ",
            stringify!(cudaMemcpy2DFromArrayAsync_ptsz_v7000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemcpy2DFromArrayAsync_ptsz_v7000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMemcpy2DFromArrayAsync_ptsz_v7000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DFromArrayAsync_ptsz_v7000_params_st),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dpitch) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DFromArrayAsync_ptsz_v7000_params_st),
            "::",
            stringify!(dpitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DFromArrayAsync_ptsz_v7000_params_st),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wOffset) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DFromArrayAsync_ptsz_v7000_params_st),
            "::",
            stringify!(wOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hOffset) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DFromArrayAsync_ptsz_v7000_params_st),
            "::",
            stringify!(hOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DFromArrayAsync_ptsz_v7000_params_st),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DFromArrayAsync_ptsz_v7000_params_st),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DFromArrayAsync_ptsz_v7000_params_st),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DFromArrayAsync_ptsz_v7000_params_st),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for cudaMemcpy2DFromArrayAsync_ptsz_v7000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemcpy2DFromArrayAsync_ptsz_v7000_params =
    cudaMemcpy2DFromArrayAsync_ptsz_v7000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemcpyToSymbolAsync_ptsz_v7000_params_st {
    pub symbol: *const ::std::os::raw::c_void,
    pub src: *const ::std::os::raw::c_void,
    pub count: usize,
    pub offset: usize,
    pub kind: cudaMemcpyKind,
    pub stream: cudaStream_t,
}
#[test]
fn bindgen_test_layout_cudaMemcpyToSymbolAsync_ptsz_v7000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemcpyToSymbolAsync_ptsz_v7000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemcpyToSymbolAsync_ptsz_v7000_params_st>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(cudaMemcpyToSymbolAsync_ptsz_v7000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemcpyToSymbolAsync_ptsz_v7000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMemcpyToSymbolAsync_ptsz_v7000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).symbol) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyToSymbolAsync_ptsz_v7000_params_st),
            "::",
            stringify!(symbol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyToSymbolAsync_ptsz_v7000_params_st),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyToSymbolAsync_ptsz_v7000_params_st),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyToSymbolAsync_ptsz_v7000_params_st),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyToSymbolAsync_ptsz_v7000_params_st),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyToSymbolAsync_ptsz_v7000_params_st),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for cudaMemcpyToSymbolAsync_ptsz_v7000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemcpyToSymbolAsync_ptsz_v7000_params = cudaMemcpyToSymbolAsync_ptsz_v7000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemcpyFromSymbolAsync_ptsz_v7000_params_st {
    pub dst: *mut ::std::os::raw::c_void,
    pub symbol: *const ::std::os::raw::c_void,
    pub count: usize,
    pub offset: usize,
    pub kind: cudaMemcpyKind,
    pub stream: cudaStream_t,
}
#[test]
fn bindgen_test_layout_cudaMemcpyFromSymbolAsync_ptsz_v7000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemcpyFromSymbolAsync_ptsz_v7000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemcpyFromSymbolAsync_ptsz_v7000_params_st>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(cudaMemcpyFromSymbolAsync_ptsz_v7000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemcpyFromSymbolAsync_ptsz_v7000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMemcpyFromSymbolAsync_ptsz_v7000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyFromSymbolAsync_ptsz_v7000_params_st),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).symbol) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyFromSymbolAsync_ptsz_v7000_params_st),
            "::",
            stringify!(symbol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyFromSymbolAsync_ptsz_v7000_params_st),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyFromSymbolAsync_ptsz_v7000_params_st),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyFromSymbolAsync_ptsz_v7000_params_st),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyFromSymbolAsync_ptsz_v7000_params_st),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for cudaMemcpyFromSymbolAsync_ptsz_v7000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemcpyFromSymbolAsync_ptsz_v7000_params =
    cudaMemcpyFromSymbolAsync_ptsz_v7000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemset_ptds_v7000_params_st {
    pub devPtr: *mut ::std::os::raw::c_void,
    pub value: ::std::os::raw::c_int,
    pub count: usize,
}
#[test]
fn bindgen_test_layout_cudaMemset_ptds_v7000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemset_ptds_v7000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemset_ptds_v7000_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cudaMemset_ptds_v7000_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemset_ptds_v7000_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaMemset_ptds_v7000_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).devPtr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemset_ptds_v7000_params_st),
            "::",
            stringify!(devPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemset_ptds_v7000_params_st),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemset_ptds_v7000_params_st),
            "::",
            stringify!(count)
        )
    );
}
impl Default for cudaMemset_ptds_v7000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemset_ptds_v7000_params = cudaMemset_ptds_v7000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemset2D_ptds_v7000_params_st {
    pub devPtr: *mut ::std::os::raw::c_void,
    pub pitch: usize,
    pub value: ::std::os::raw::c_int,
    pub width: usize,
    pub height: usize,
}
#[test]
fn bindgen_test_layout_cudaMemset2D_ptds_v7000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemset2D_ptds_v7000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemset2D_ptds_v7000_params_st>(),
        40usize,
        concat!("Size of: ", stringify!(cudaMemset2D_ptds_v7000_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemset2D_ptds_v7000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMemset2D_ptds_v7000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).devPtr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemset2D_ptds_v7000_params_st),
            "::",
            stringify!(devPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pitch) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemset2D_ptds_v7000_params_st),
            "::",
            stringify!(pitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemset2D_ptds_v7000_params_st),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemset2D_ptds_v7000_params_st),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemset2D_ptds_v7000_params_st),
            "::",
            stringify!(height)
        )
    );
}
impl Default for cudaMemset2D_ptds_v7000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemset2D_ptds_v7000_params = cudaMemset2D_ptds_v7000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemset3D_ptds_v7000_params_st {
    pub pitchedDevPtr: cudaPitchedPtr,
    pub value: ::std::os::raw::c_int,
    pub extent: cudaExtent,
}
#[test]
fn bindgen_test_layout_cudaMemset3D_ptds_v7000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemset3D_ptds_v7000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemset3D_ptds_v7000_params_st>(),
        64usize,
        concat!("Size of: ", stringify!(cudaMemset3D_ptds_v7000_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemset3D_ptds_v7000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMemset3D_ptds_v7000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pitchedDevPtr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemset3D_ptds_v7000_params_st),
            "::",
            stringify!(pitchedDevPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemset3D_ptds_v7000_params_st),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extent) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemset3D_ptds_v7000_params_st),
            "::",
            stringify!(extent)
        )
    );
}
impl Default for cudaMemset3D_ptds_v7000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemset3D_ptds_v7000_params = cudaMemset3D_ptds_v7000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemsetAsync_ptsz_v7000_params_st {
    pub devPtr: *mut ::std::os::raw::c_void,
    pub value: ::std::os::raw::c_int,
    pub count: usize,
    pub stream: cudaStream_t,
}
#[test]
fn bindgen_test_layout_cudaMemsetAsync_ptsz_v7000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemsetAsync_ptsz_v7000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemsetAsync_ptsz_v7000_params_st>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(cudaMemsetAsync_ptsz_v7000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemsetAsync_ptsz_v7000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMemsetAsync_ptsz_v7000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).devPtr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemsetAsync_ptsz_v7000_params_st),
            "::",
            stringify!(devPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemsetAsync_ptsz_v7000_params_st),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemsetAsync_ptsz_v7000_params_st),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemsetAsync_ptsz_v7000_params_st),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for cudaMemsetAsync_ptsz_v7000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemsetAsync_ptsz_v7000_params = cudaMemsetAsync_ptsz_v7000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemset2DAsync_ptsz_v7000_params_st {
    pub devPtr: *mut ::std::os::raw::c_void,
    pub pitch: usize,
    pub value: ::std::os::raw::c_int,
    pub width: usize,
    pub height: usize,
    pub stream: cudaStream_t,
}
#[test]
fn bindgen_test_layout_cudaMemset2DAsync_ptsz_v7000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemset2DAsync_ptsz_v7000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemset2DAsync_ptsz_v7000_params_st>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(cudaMemset2DAsync_ptsz_v7000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemset2DAsync_ptsz_v7000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMemset2DAsync_ptsz_v7000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).devPtr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemset2DAsync_ptsz_v7000_params_st),
            "::",
            stringify!(devPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pitch) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemset2DAsync_ptsz_v7000_params_st),
            "::",
            stringify!(pitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemset2DAsync_ptsz_v7000_params_st),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemset2DAsync_ptsz_v7000_params_st),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemset2DAsync_ptsz_v7000_params_st),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemset2DAsync_ptsz_v7000_params_st),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for cudaMemset2DAsync_ptsz_v7000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemset2DAsync_ptsz_v7000_params = cudaMemset2DAsync_ptsz_v7000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemset3DAsync_ptsz_v7000_params_st {
    pub pitchedDevPtr: cudaPitchedPtr,
    pub value: ::std::os::raw::c_int,
    pub extent: cudaExtent,
    pub stream: cudaStream_t,
}
#[test]
fn bindgen_test_layout_cudaMemset3DAsync_ptsz_v7000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemset3DAsync_ptsz_v7000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemset3DAsync_ptsz_v7000_params_st>(),
        72usize,
        concat!(
            "Size of: ",
            stringify!(cudaMemset3DAsync_ptsz_v7000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemset3DAsync_ptsz_v7000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMemset3DAsync_ptsz_v7000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pitchedDevPtr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemset3DAsync_ptsz_v7000_params_st),
            "::",
            stringify!(pitchedDevPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemset3DAsync_ptsz_v7000_params_st),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extent) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemset3DAsync_ptsz_v7000_params_st),
            "::",
            stringify!(extent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemset3DAsync_ptsz_v7000_params_st),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for cudaMemset3DAsync_ptsz_v7000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemset3DAsync_ptsz_v7000_params = cudaMemset3DAsync_ptsz_v7000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGetSymbolAddress_v3020_params_st {
    pub devPtr: *mut *mut ::std::os::raw::c_void,
    pub symbol: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_cudaGetSymbolAddress_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGetSymbolAddress_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGetSymbolAddress_v3020_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaGetSymbolAddress_v3020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGetSymbolAddress_v3020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGetSymbolAddress_v3020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).devPtr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGetSymbolAddress_v3020_params_st),
            "::",
            stringify!(devPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).symbol) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGetSymbolAddress_v3020_params_st),
            "::",
            stringify!(symbol)
        )
    );
}
impl Default for cudaGetSymbolAddress_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGetSymbolAddress_v3020_params = cudaGetSymbolAddress_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGetSymbolSize_v3020_params_st {
    pub size: *mut usize,
    pub symbol: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_cudaGetSymbolSize_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGetSymbolSize_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGetSymbolSize_v3020_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cudaGetSymbolSize_v3020_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGetSymbolSize_v3020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGetSymbolSize_v3020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGetSymbolSize_v3020_params_st),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).symbol) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGetSymbolSize_v3020_params_st),
            "::",
            stringify!(symbol)
        )
    );
}
impl Default for cudaGetSymbolSize_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGetSymbolSize_v3020_params = cudaGetSymbolSize_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemPrefetchAsync_ptsz_v8000_params_st {
    pub devPtr: *const ::std::os::raw::c_void,
    pub count: usize,
    pub dstDevice: ::std::os::raw::c_int,
    pub stream: cudaStream_t,
}
#[test]
fn bindgen_test_layout_cudaMemPrefetchAsync_ptsz_v8000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemPrefetchAsync_ptsz_v8000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemPrefetchAsync_ptsz_v8000_params_st>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(cudaMemPrefetchAsync_ptsz_v8000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemPrefetchAsync_ptsz_v8000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMemPrefetchAsync_ptsz_v8000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).devPtr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemPrefetchAsync_ptsz_v8000_params_st),
            "::",
            stringify!(devPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemPrefetchAsync_ptsz_v8000_params_st),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstDevice) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemPrefetchAsync_ptsz_v8000_params_st),
            "::",
            stringify!(dstDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemPrefetchAsync_ptsz_v8000_params_st),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for cudaMemPrefetchAsync_ptsz_v8000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemPrefetchAsync_ptsz_v8000_params = cudaMemPrefetchAsync_ptsz_v8000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemAdvise_v8000_params_st {
    pub devPtr: *const ::std::os::raw::c_void,
    pub count: usize,
    pub advice: cudaMemoryAdvise,
    pub device: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cudaMemAdvise_v8000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemAdvise_v8000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemAdvise_v8000_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cudaMemAdvise_v8000_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemAdvise_v8000_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaMemAdvise_v8000_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).devPtr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemAdvise_v8000_params_st),
            "::",
            stringify!(devPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemAdvise_v8000_params_st),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).advice) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemAdvise_v8000_params_st),
            "::",
            stringify!(advice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemAdvise_v8000_params_st),
            "::",
            stringify!(device)
        )
    );
}
impl Default for cudaMemAdvise_v8000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemAdvise_v8000_params = cudaMemAdvise_v8000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemRangeGetAttribute_v8000_params_st {
    pub data: *mut ::std::os::raw::c_void,
    pub dataSize: usize,
    pub attribute: cudaMemRangeAttribute,
    pub devPtr: *const ::std::os::raw::c_void,
    pub count: usize,
}
#[test]
fn bindgen_test_layout_cudaMemRangeGetAttribute_v8000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemRangeGetAttribute_v8000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemRangeGetAttribute_v8000_params_st>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(cudaMemRangeGetAttribute_v8000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemRangeGetAttribute_v8000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMemRangeGetAttribute_v8000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemRangeGetAttribute_v8000_params_st),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dataSize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemRangeGetAttribute_v8000_params_st),
            "::",
            stringify!(dataSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attribute) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemRangeGetAttribute_v8000_params_st),
            "::",
            stringify!(attribute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).devPtr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemRangeGetAttribute_v8000_params_st),
            "::",
            stringify!(devPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemRangeGetAttribute_v8000_params_st),
            "::",
            stringify!(count)
        )
    );
}
impl Default for cudaMemRangeGetAttribute_v8000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemRangeGetAttribute_v8000_params = cudaMemRangeGetAttribute_v8000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemRangeGetAttributes_v8000_params_st {
    pub data: *mut *mut ::std::os::raw::c_void,
    pub dataSizes: *mut usize,
    pub attributes: *mut cudaMemRangeAttribute,
    pub numAttributes: usize,
    pub devPtr: *const ::std::os::raw::c_void,
    pub count: usize,
}
#[test]
fn bindgen_test_layout_cudaMemRangeGetAttributes_v8000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemRangeGetAttributes_v8000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemRangeGetAttributes_v8000_params_st>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(cudaMemRangeGetAttributes_v8000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemRangeGetAttributes_v8000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMemRangeGetAttributes_v8000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemRangeGetAttributes_v8000_params_st),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dataSizes) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemRangeGetAttributes_v8000_params_st),
            "::",
            stringify!(dataSizes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attributes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemRangeGetAttributes_v8000_params_st),
            "::",
            stringify!(attributes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numAttributes) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemRangeGetAttributes_v8000_params_st),
            "::",
            stringify!(numAttributes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).devPtr) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemRangeGetAttributes_v8000_params_st),
            "::",
            stringify!(devPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemRangeGetAttributes_v8000_params_st),
            "::",
            stringify!(count)
        )
    );
}
impl Default for cudaMemRangeGetAttributes_v8000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemRangeGetAttributes_v8000_params = cudaMemRangeGetAttributes_v8000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemcpyToArray_ptds_v7000_params_st {
    pub dst: cudaArray_t,
    pub wOffset: usize,
    pub hOffset: usize,
    pub src: *const ::std::os::raw::c_void,
    pub count: usize,
    pub kind: cudaMemcpyKind,
}
#[test]
fn bindgen_test_layout_cudaMemcpyToArray_ptds_v7000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemcpyToArray_ptds_v7000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemcpyToArray_ptds_v7000_params_st>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(cudaMemcpyToArray_ptds_v7000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemcpyToArray_ptds_v7000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMemcpyToArray_ptds_v7000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyToArray_ptds_v7000_params_st),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wOffset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyToArray_ptds_v7000_params_st),
            "::",
            stringify!(wOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hOffset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyToArray_ptds_v7000_params_st),
            "::",
            stringify!(hOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyToArray_ptds_v7000_params_st),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyToArray_ptds_v7000_params_st),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyToArray_ptds_v7000_params_st),
            "::",
            stringify!(kind)
        )
    );
}
impl Default for cudaMemcpyToArray_ptds_v7000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemcpyToArray_ptds_v7000_params = cudaMemcpyToArray_ptds_v7000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemcpyFromArray_ptds_v7000_params_st {
    pub dst: *mut ::std::os::raw::c_void,
    pub src: cudaArray_const_t,
    pub wOffset: usize,
    pub hOffset: usize,
    pub count: usize,
    pub kind: cudaMemcpyKind,
}
#[test]
fn bindgen_test_layout_cudaMemcpyFromArray_ptds_v7000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemcpyFromArray_ptds_v7000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemcpyFromArray_ptds_v7000_params_st>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(cudaMemcpyFromArray_ptds_v7000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemcpyFromArray_ptds_v7000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMemcpyFromArray_ptds_v7000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyFromArray_ptds_v7000_params_st),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyFromArray_ptds_v7000_params_st),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wOffset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyFromArray_ptds_v7000_params_st),
            "::",
            stringify!(wOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hOffset) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyFromArray_ptds_v7000_params_st),
            "::",
            stringify!(hOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyFromArray_ptds_v7000_params_st),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyFromArray_ptds_v7000_params_st),
            "::",
            stringify!(kind)
        )
    );
}
impl Default for cudaMemcpyFromArray_ptds_v7000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemcpyFromArray_ptds_v7000_params = cudaMemcpyFromArray_ptds_v7000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemcpyArrayToArray_ptds_v7000_params_st {
    pub dst: cudaArray_t,
    pub wOffsetDst: usize,
    pub hOffsetDst: usize,
    pub src: cudaArray_const_t,
    pub wOffsetSrc: usize,
    pub hOffsetSrc: usize,
    pub count: usize,
    pub kind: cudaMemcpyKind,
}
#[test]
fn bindgen_test_layout_cudaMemcpyArrayToArray_ptds_v7000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemcpyArrayToArray_ptds_v7000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemcpyArrayToArray_ptds_v7000_params_st>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(cudaMemcpyArrayToArray_ptds_v7000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemcpyArrayToArray_ptds_v7000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMemcpyArrayToArray_ptds_v7000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyArrayToArray_ptds_v7000_params_st),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wOffsetDst) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyArrayToArray_ptds_v7000_params_st),
            "::",
            stringify!(wOffsetDst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hOffsetDst) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyArrayToArray_ptds_v7000_params_st),
            "::",
            stringify!(hOffsetDst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyArrayToArray_ptds_v7000_params_st),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wOffsetSrc) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyArrayToArray_ptds_v7000_params_st),
            "::",
            stringify!(wOffsetSrc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hOffsetSrc) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyArrayToArray_ptds_v7000_params_st),
            "::",
            stringify!(hOffsetSrc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyArrayToArray_ptds_v7000_params_st),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyArrayToArray_ptds_v7000_params_st),
            "::",
            stringify!(kind)
        )
    );
}
impl Default for cudaMemcpyArrayToArray_ptds_v7000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemcpyArrayToArray_ptds_v7000_params = cudaMemcpyArrayToArray_ptds_v7000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemcpyToArrayAsync_ptsz_v7000_params_st {
    pub dst: cudaArray_t,
    pub wOffset: usize,
    pub hOffset: usize,
    pub src: *const ::std::os::raw::c_void,
    pub count: usize,
    pub kind: cudaMemcpyKind,
    pub stream: cudaStream_t,
}
#[test]
fn bindgen_test_layout_cudaMemcpyToArrayAsync_ptsz_v7000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemcpyToArrayAsync_ptsz_v7000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemcpyToArrayAsync_ptsz_v7000_params_st>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(cudaMemcpyToArrayAsync_ptsz_v7000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemcpyToArrayAsync_ptsz_v7000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMemcpyToArrayAsync_ptsz_v7000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyToArrayAsync_ptsz_v7000_params_st),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wOffset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyToArrayAsync_ptsz_v7000_params_st),
            "::",
            stringify!(wOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hOffset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyToArrayAsync_ptsz_v7000_params_st),
            "::",
            stringify!(hOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyToArrayAsync_ptsz_v7000_params_st),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyToArrayAsync_ptsz_v7000_params_st),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyToArrayAsync_ptsz_v7000_params_st),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyToArrayAsync_ptsz_v7000_params_st),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for cudaMemcpyToArrayAsync_ptsz_v7000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemcpyToArrayAsync_ptsz_v7000_params = cudaMemcpyToArrayAsync_ptsz_v7000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemcpyFromArrayAsync_ptsz_v7000_params_st {
    pub dst: *mut ::std::os::raw::c_void,
    pub src: cudaArray_const_t,
    pub wOffset: usize,
    pub hOffset: usize,
    pub count: usize,
    pub kind: cudaMemcpyKind,
    pub stream: cudaStream_t,
}
#[test]
fn bindgen_test_layout_cudaMemcpyFromArrayAsync_ptsz_v7000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemcpyFromArrayAsync_ptsz_v7000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemcpyFromArrayAsync_ptsz_v7000_params_st>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(cudaMemcpyFromArrayAsync_ptsz_v7000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemcpyFromArrayAsync_ptsz_v7000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMemcpyFromArrayAsync_ptsz_v7000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyFromArrayAsync_ptsz_v7000_params_st),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyFromArrayAsync_ptsz_v7000_params_st),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wOffset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyFromArrayAsync_ptsz_v7000_params_st),
            "::",
            stringify!(wOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hOffset) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyFromArrayAsync_ptsz_v7000_params_st),
            "::",
            stringify!(hOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyFromArrayAsync_ptsz_v7000_params_st),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyFromArrayAsync_ptsz_v7000_params_st),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyFromArrayAsync_ptsz_v7000_params_st),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for cudaMemcpyFromArrayAsync_ptsz_v7000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemcpyFromArrayAsync_ptsz_v7000_params = cudaMemcpyFromArrayAsync_ptsz_v7000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMallocAsync_ptsz_v11020_params_st {
    pub devPtr: *mut *mut ::std::os::raw::c_void,
    pub size: usize,
    pub hStream: cudaStream_t,
}
#[test]
fn bindgen_test_layout_cudaMallocAsync_ptsz_v11020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMallocAsync_ptsz_v11020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMallocAsync_ptsz_v11020_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cudaMallocAsync_ptsz_v11020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMallocAsync_ptsz_v11020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMallocAsync_ptsz_v11020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).devPtr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMallocAsync_ptsz_v11020_params_st),
            "::",
            stringify!(devPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMallocAsync_ptsz_v11020_params_st),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMallocAsync_ptsz_v11020_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cudaMallocAsync_ptsz_v11020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMallocAsync_ptsz_v11020_params = cudaMallocAsync_ptsz_v11020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaFreeAsync_ptsz_v11020_params_st {
    pub devPtr: *mut ::std::os::raw::c_void,
    pub hStream: cudaStream_t,
}
#[test]
fn bindgen_test_layout_cudaFreeAsync_ptsz_v11020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaFreeAsync_ptsz_v11020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaFreeAsync_ptsz_v11020_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cudaFreeAsync_ptsz_v11020_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaFreeAsync_ptsz_v11020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaFreeAsync_ptsz_v11020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).devPtr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaFreeAsync_ptsz_v11020_params_st),
            "::",
            stringify!(devPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaFreeAsync_ptsz_v11020_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cudaFreeAsync_ptsz_v11020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaFreeAsync_ptsz_v11020_params = cudaFreeAsync_ptsz_v11020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemPoolTrimTo_v11020_params_st {
    pub memPool: cudaMemPool_t,
    pub minBytesToKeep: usize,
}
#[test]
fn bindgen_test_layout_cudaMemPoolTrimTo_v11020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemPoolTrimTo_v11020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemPoolTrimTo_v11020_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cudaMemPoolTrimTo_v11020_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemPoolTrimTo_v11020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMemPoolTrimTo_v11020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memPool) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemPoolTrimTo_v11020_params_st),
            "::",
            stringify!(memPool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minBytesToKeep) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemPoolTrimTo_v11020_params_st),
            "::",
            stringify!(minBytesToKeep)
        )
    );
}
impl Default for cudaMemPoolTrimTo_v11020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemPoolTrimTo_v11020_params = cudaMemPoolTrimTo_v11020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemPoolSetAttribute_v11020_params_st {
    pub memPool: cudaMemPool_t,
    pub attr: cudaMemPoolAttr,
    pub value: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_cudaMemPoolSetAttribute_v11020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemPoolSetAttribute_v11020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemPoolSetAttribute_v11020_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cudaMemPoolSetAttribute_v11020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemPoolSetAttribute_v11020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMemPoolSetAttribute_v11020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memPool) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemPoolSetAttribute_v11020_params_st),
            "::",
            stringify!(memPool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemPoolSetAttribute_v11020_params_st),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemPoolSetAttribute_v11020_params_st),
            "::",
            stringify!(value)
        )
    );
}
impl Default for cudaMemPoolSetAttribute_v11020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemPoolSetAttribute_v11020_params = cudaMemPoolSetAttribute_v11020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemPoolGetAttribute_v11020_params_st {
    pub memPool: cudaMemPool_t,
    pub attr: cudaMemPoolAttr,
    pub value: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_cudaMemPoolGetAttribute_v11020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemPoolGetAttribute_v11020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemPoolGetAttribute_v11020_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cudaMemPoolGetAttribute_v11020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemPoolGetAttribute_v11020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMemPoolGetAttribute_v11020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memPool) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemPoolGetAttribute_v11020_params_st),
            "::",
            stringify!(memPool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemPoolGetAttribute_v11020_params_st),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemPoolGetAttribute_v11020_params_st),
            "::",
            stringify!(value)
        )
    );
}
impl Default for cudaMemPoolGetAttribute_v11020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemPoolGetAttribute_v11020_params = cudaMemPoolGetAttribute_v11020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemPoolSetAccess_v11020_params_st {
    pub memPool: cudaMemPool_t,
    pub descList: *const cudaMemAccessDesc,
    pub count: usize,
}
#[test]
fn bindgen_test_layout_cudaMemPoolSetAccess_v11020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemPoolSetAccess_v11020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemPoolSetAccess_v11020_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cudaMemPoolSetAccess_v11020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemPoolSetAccess_v11020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMemPoolSetAccess_v11020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memPool) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemPoolSetAccess_v11020_params_st),
            "::",
            stringify!(memPool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).descList) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemPoolSetAccess_v11020_params_st),
            "::",
            stringify!(descList)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemPoolSetAccess_v11020_params_st),
            "::",
            stringify!(count)
        )
    );
}
impl Default for cudaMemPoolSetAccess_v11020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemPoolSetAccess_v11020_params = cudaMemPoolSetAccess_v11020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemPoolGetAccess_v11020_params_st {
    pub flags: *mut cudaMemAccessFlags,
    pub memPool: cudaMemPool_t,
    pub location: *mut cudaMemLocation,
}
#[test]
fn bindgen_test_layout_cudaMemPoolGetAccess_v11020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemPoolGetAccess_v11020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemPoolGetAccess_v11020_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cudaMemPoolGetAccess_v11020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemPoolGetAccess_v11020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMemPoolGetAccess_v11020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemPoolGetAccess_v11020_params_st),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memPool) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemPoolGetAccess_v11020_params_st),
            "::",
            stringify!(memPool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).location) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemPoolGetAccess_v11020_params_st),
            "::",
            stringify!(location)
        )
    );
}
impl Default for cudaMemPoolGetAccess_v11020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemPoolGetAccess_v11020_params = cudaMemPoolGetAccess_v11020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemPoolCreate_v11020_params_st {
    pub memPool: *mut cudaMemPool_t,
    pub poolProps: *const cudaMemPoolProps,
}
#[test]
fn bindgen_test_layout_cudaMemPoolCreate_v11020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemPoolCreate_v11020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemPoolCreate_v11020_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cudaMemPoolCreate_v11020_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemPoolCreate_v11020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMemPoolCreate_v11020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memPool) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemPoolCreate_v11020_params_st),
            "::",
            stringify!(memPool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).poolProps) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemPoolCreate_v11020_params_st),
            "::",
            stringify!(poolProps)
        )
    );
}
impl Default for cudaMemPoolCreate_v11020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemPoolCreate_v11020_params = cudaMemPoolCreate_v11020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemPoolDestroy_v11020_params_st {
    pub memPool: cudaMemPool_t,
}
#[test]
fn bindgen_test_layout_cudaMemPoolDestroy_v11020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemPoolDestroy_v11020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemPoolDestroy_v11020_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cudaMemPoolDestroy_v11020_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemPoolDestroy_v11020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMemPoolDestroy_v11020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memPool) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemPoolDestroy_v11020_params_st),
            "::",
            stringify!(memPool)
        )
    );
}
impl Default for cudaMemPoolDestroy_v11020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemPoolDestroy_v11020_params = cudaMemPoolDestroy_v11020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMallocFromPoolAsync_ptsz_v11020_params_st {
    pub ptr: *mut *mut ::std::os::raw::c_void,
    pub size: usize,
    pub memPool: cudaMemPool_t,
    pub stream: cudaStream_t,
}
#[test]
fn bindgen_test_layout_cudaMallocFromPoolAsync_ptsz_v11020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMallocFromPoolAsync_ptsz_v11020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMallocFromPoolAsync_ptsz_v11020_params_st>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(cudaMallocFromPoolAsync_ptsz_v11020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMallocFromPoolAsync_ptsz_v11020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMallocFromPoolAsync_ptsz_v11020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMallocFromPoolAsync_ptsz_v11020_params_st),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMallocFromPoolAsync_ptsz_v11020_params_st),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memPool) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMallocFromPoolAsync_ptsz_v11020_params_st),
            "::",
            stringify!(memPool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMallocFromPoolAsync_ptsz_v11020_params_st),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for cudaMallocFromPoolAsync_ptsz_v11020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMallocFromPoolAsync_ptsz_v11020_params = cudaMallocFromPoolAsync_ptsz_v11020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemPoolExportToShareableHandle_v11020_params_st {
    pub shareableHandle: *mut ::std::os::raw::c_void,
    pub memPool: cudaMemPool_t,
    pub handleType: cudaMemAllocationHandleType,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cudaMemPoolExportToShareableHandle_v11020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemPoolExportToShareableHandle_v11020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemPoolExportToShareableHandle_v11020_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cudaMemPoolExportToShareableHandle_v11020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemPoolExportToShareableHandle_v11020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMemPoolExportToShareableHandle_v11020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shareableHandle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemPoolExportToShareableHandle_v11020_params_st),
            "::",
            stringify!(shareableHandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memPool) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemPoolExportToShareableHandle_v11020_params_st),
            "::",
            stringify!(memPool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handleType) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemPoolExportToShareableHandle_v11020_params_st),
            "::",
            stringify!(handleType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemPoolExportToShareableHandle_v11020_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cudaMemPoolExportToShareableHandle_v11020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemPoolExportToShareableHandle_v11020_params =
    cudaMemPoolExportToShareableHandle_v11020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemPoolImportFromShareableHandle_v11020_params_st {
    pub memPool: *mut cudaMemPool_t,
    pub shareableHandle: *mut ::std::os::raw::c_void,
    pub handleType: cudaMemAllocationHandleType,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cudaMemPoolImportFromShareableHandle_v11020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemPoolImportFromShareableHandle_v11020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemPoolImportFromShareableHandle_v11020_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cudaMemPoolImportFromShareableHandle_v11020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemPoolImportFromShareableHandle_v11020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMemPoolImportFromShareableHandle_v11020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memPool) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemPoolImportFromShareableHandle_v11020_params_st),
            "::",
            stringify!(memPool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shareableHandle) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemPoolImportFromShareableHandle_v11020_params_st),
            "::",
            stringify!(shareableHandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handleType) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemPoolImportFromShareableHandle_v11020_params_st),
            "::",
            stringify!(handleType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemPoolImportFromShareableHandle_v11020_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cudaMemPoolImportFromShareableHandle_v11020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemPoolImportFromShareableHandle_v11020_params =
    cudaMemPoolImportFromShareableHandle_v11020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemPoolExportPointer_v11020_params_st {
    pub exportData: *mut cudaMemPoolPtrExportData,
    pub ptr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_cudaMemPoolExportPointer_v11020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemPoolExportPointer_v11020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemPoolExportPointer_v11020_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaMemPoolExportPointer_v11020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemPoolExportPointer_v11020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMemPoolExportPointer_v11020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exportData) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemPoolExportPointer_v11020_params_st),
            "::",
            stringify!(exportData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemPoolExportPointer_v11020_params_st),
            "::",
            stringify!(ptr)
        )
    );
}
impl Default for cudaMemPoolExportPointer_v11020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemPoolExportPointer_v11020_params = cudaMemPoolExportPointer_v11020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemPoolImportPointer_v11020_params_st {
    pub ptr: *mut *mut ::std::os::raw::c_void,
    pub memPool: cudaMemPool_t,
    pub exportData: *mut cudaMemPoolPtrExportData,
}
#[test]
fn bindgen_test_layout_cudaMemPoolImportPointer_v11020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemPoolImportPointer_v11020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemPoolImportPointer_v11020_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cudaMemPoolImportPointer_v11020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemPoolImportPointer_v11020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMemPoolImportPointer_v11020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemPoolImportPointer_v11020_params_st),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memPool) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemPoolImportPointer_v11020_params_st),
            "::",
            stringify!(memPool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exportData) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemPoolImportPointer_v11020_params_st),
            "::",
            stringify!(exportData)
        )
    );
}
impl Default for cudaMemPoolImportPointer_v11020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemPoolImportPointer_v11020_params = cudaMemPoolImportPointer_v11020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaPointerGetAttributes_v4000_params_st {
    pub attributes: *mut cudaPointerAttributes,
    pub ptr: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_cudaPointerGetAttributes_v4000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaPointerGetAttributes_v4000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaPointerGetAttributes_v4000_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaPointerGetAttributes_v4000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaPointerGetAttributes_v4000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaPointerGetAttributes_v4000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attributes) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaPointerGetAttributes_v4000_params_st),
            "::",
            stringify!(attributes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaPointerGetAttributes_v4000_params_st),
            "::",
            stringify!(ptr)
        )
    );
}
impl Default for cudaPointerGetAttributes_v4000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaPointerGetAttributes_v4000_params = cudaPointerGetAttributes_v4000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaDeviceCanAccessPeer_v4000_params_st {
    pub canAccessPeer: *mut ::std::os::raw::c_int,
    pub device: ::std::os::raw::c_int,
    pub peerDevice: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cudaDeviceCanAccessPeer_v4000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaDeviceCanAccessPeer_v4000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaDeviceCanAccessPeer_v4000_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaDeviceCanAccessPeer_v4000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaDeviceCanAccessPeer_v4000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaDeviceCanAccessPeer_v4000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).canAccessPeer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceCanAccessPeer_v4000_params_st),
            "::",
            stringify!(canAccessPeer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceCanAccessPeer_v4000_params_st),
            "::",
            stringify!(device)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).peerDevice) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceCanAccessPeer_v4000_params_st),
            "::",
            stringify!(peerDevice)
        )
    );
}
impl Default for cudaDeviceCanAccessPeer_v4000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaDeviceCanAccessPeer_v4000_params = cudaDeviceCanAccessPeer_v4000_params_st;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaDeviceEnablePeerAccess_v4000_params_st {
    pub peerDevice: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cudaDeviceEnablePeerAccess_v4000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaDeviceEnablePeerAccess_v4000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaDeviceEnablePeerAccess_v4000_params_st>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(cudaDeviceEnablePeerAccess_v4000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaDeviceEnablePeerAccess_v4000_params_st>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(cudaDeviceEnablePeerAccess_v4000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).peerDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceEnablePeerAccess_v4000_params_st),
            "::",
            stringify!(peerDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceEnablePeerAccess_v4000_params_st),
            "::",
            stringify!(flags)
        )
    );
}
pub type cudaDeviceEnablePeerAccess_v4000_params = cudaDeviceEnablePeerAccess_v4000_params_st;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaDeviceDisablePeerAccess_v4000_params_st {
    pub peerDevice: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cudaDeviceDisablePeerAccess_v4000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaDeviceDisablePeerAccess_v4000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaDeviceDisablePeerAccess_v4000_params_st>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(cudaDeviceDisablePeerAccess_v4000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaDeviceDisablePeerAccess_v4000_params_st>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(cudaDeviceDisablePeerAccess_v4000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).peerDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceDisablePeerAccess_v4000_params_st),
            "::",
            stringify!(peerDevice)
        )
    );
}
pub type cudaDeviceDisablePeerAccess_v4000_params = cudaDeviceDisablePeerAccess_v4000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphicsUnregisterResource_v3020_params_st {
    pub resource: cudaGraphicsResource_t,
}
#[test]
fn bindgen_test_layout_cudaGraphicsUnregisterResource_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphicsUnregisterResource_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphicsUnregisterResource_v3020_params_st>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphicsUnregisterResource_v3020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphicsUnregisterResource_v3020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphicsUnregisterResource_v3020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resource) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphicsUnregisterResource_v3020_params_st),
            "::",
            stringify!(resource)
        )
    );
}
impl Default for cudaGraphicsUnregisterResource_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphicsUnregisterResource_v3020_params =
    cudaGraphicsUnregisterResource_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphicsResourceSetMapFlags_v3020_params_st {
    pub resource: cudaGraphicsResource_t,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cudaGraphicsResourceSetMapFlags_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphicsResourceSetMapFlags_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphicsResourceSetMapFlags_v3020_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphicsResourceSetMapFlags_v3020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphicsResourceSetMapFlags_v3020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphicsResourceSetMapFlags_v3020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resource) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphicsResourceSetMapFlags_v3020_params_st),
            "::",
            stringify!(resource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphicsResourceSetMapFlags_v3020_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cudaGraphicsResourceSetMapFlags_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphicsResourceSetMapFlags_v3020_params =
    cudaGraphicsResourceSetMapFlags_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphicsMapResources_v3020_params_st {
    pub count: ::std::os::raw::c_int,
    pub resources: *mut cudaGraphicsResource_t,
    pub stream: cudaStream_t,
}
#[test]
fn bindgen_test_layout_cudaGraphicsMapResources_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphicsMapResources_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphicsMapResources_v3020_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphicsMapResources_v3020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphicsMapResources_v3020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphicsMapResources_v3020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphicsMapResources_v3020_params_st),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resources) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphicsMapResources_v3020_params_st),
            "::",
            stringify!(resources)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphicsMapResources_v3020_params_st),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for cudaGraphicsMapResources_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphicsMapResources_v3020_params = cudaGraphicsMapResources_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphicsUnmapResources_v3020_params_st {
    pub count: ::std::os::raw::c_int,
    pub resources: *mut cudaGraphicsResource_t,
    pub stream: cudaStream_t,
}
#[test]
fn bindgen_test_layout_cudaGraphicsUnmapResources_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphicsUnmapResources_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphicsUnmapResources_v3020_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphicsUnmapResources_v3020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphicsUnmapResources_v3020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphicsUnmapResources_v3020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphicsUnmapResources_v3020_params_st),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resources) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphicsUnmapResources_v3020_params_st),
            "::",
            stringify!(resources)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphicsUnmapResources_v3020_params_st),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for cudaGraphicsUnmapResources_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphicsUnmapResources_v3020_params = cudaGraphicsUnmapResources_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphicsResourceGetMappedPointer_v3020_params_st {
    pub devPtr: *mut *mut ::std::os::raw::c_void,
    pub size: *mut usize,
    pub resource: cudaGraphicsResource_t,
}
#[test]
fn bindgen_test_layout_cudaGraphicsResourceGetMappedPointer_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphicsResourceGetMappedPointer_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphicsResourceGetMappedPointer_v3020_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphicsResourceGetMappedPointer_v3020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphicsResourceGetMappedPointer_v3020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphicsResourceGetMappedPointer_v3020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).devPtr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphicsResourceGetMappedPointer_v3020_params_st),
            "::",
            stringify!(devPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphicsResourceGetMappedPointer_v3020_params_st),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resource) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphicsResourceGetMappedPointer_v3020_params_st),
            "::",
            stringify!(resource)
        )
    );
}
impl Default for cudaGraphicsResourceGetMappedPointer_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphicsResourceGetMappedPointer_v3020_params =
    cudaGraphicsResourceGetMappedPointer_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphicsSubResourceGetMappedArray_v3020_params_st {
    pub array: *mut cudaArray_t,
    pub resource: cudaGraphicsResource_t,
    pub arrayIndex: ::std::os::raw::c_uint,
    pub mipLevel: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cudaGraphicsSubResourceGetMappedArray_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphicsSubResourceGetMappedArray_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphicsSubResourceGetMappedArray_v3020_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphicsSubResourceGetMappedArray_v3020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphicsSubResourceGetMappedArray_v3020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphicsSubResourceGetMappedArray_v3020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).array) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphicsSubResourceGetMappedArray_v3020_params_st),
            "::",
            stringify!(array)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resource) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphicsSubResourceGetMappedArray_v3020_params_st),
            "::",
            stringify!(resource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arrayIndex) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphicsSubResourceGetMappedArray_v3020_params_st),
            "::",
            stringify!(arrayIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mipLevel) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphicsSubResourceGetMappedArray_v3020_params_st),
            "::",
            stringify!(mipLevel)
        )
    );
}
impl Default for cudaGraphicsSubResourceGetMappedArray_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphicsSubResourceGetMappedArray_v3020_params =
    cudaGraphicsSubResourceGetMappedArray_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphicsResourceGetMappedMipmappedArray_v5000_params_st {
    pub mipmappedArray: *mut cudaMipmappedArray_t,
    pub resource: cudaGraphicsResource_t,
}
#[test]
fn bindgen_test_layout_cudaGraphicsResourceGetMappedMipmappedArray_v5000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<
        cudaGraphicsResourceGetMappedMipmappedArray_v5000_params_st,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphicsResourceGetMappedMipmappedArray_v5000_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphicsResourceGetMappedMipmappedArray_v5000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphicsResourceGetMappedMipmappedArray_v5000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphicsResourceGetMappedMipmappedArray_v5000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mipmappedArray) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphicsResourceGetMappedMipmappedArray_v5000_params_st),
            "::",
            stringify!(mipmappedArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resource) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphicsResourceGetMappedMipmappedArray_v5000_params_st),
            "::",
            stringify!(resource)
        )
    );
}
impl Default for cudaGraphicsResourceGetMappedMipmappedArray_v5000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphicsResourceGetMappedMipmappedArray_v5000_params =
    cudaGraphicsResourceGetMappedMipmappedArray_v5000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGetChannelDesc_v3020_params_st {
    pub desc: *mut cudaChannelFormatDesc,
    pub array: cudaArray_const_t,
}
#[test]
fn bindgen_test_layout_cudaGetChannelDesc_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGetChannelDesc_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGetChannelDesc_v3020_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cudaGetChannelDesc_v3020_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGetChannelDesc_v3020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGetChannelDesc_v3020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).desc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGetChannelDesc_v3020_params_st),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).array) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGetChannelDesc_v3020_params_st),
            "::",
            stringify!(array)
        )
    );
}
impl Default for cudaGetChannelDesc_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGetChannelDesc_v3020_params = cudaGetChannelDesc_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaCreateChannelDesc_v3020_params_st {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub z: ::std::os::raw::c_int,
    pub w: ::std::os::raw::c_int,
    pub f: cudaChannelFormatKind,
}
#[test]
fn bindgen_test_layout_cudaCreateChannelDesc_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaCreateChannelDesc_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaCreateChannelDesc_v3020_params_st>(),
        20usize,
        concat!(
            "Size of: ",
            stringify!(cudaCreateChannelDesc_v3020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaCreateChannelDesc_v3020_params_st>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(cudaCreateChannelDesc_v3020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaCreateChannelDesc_v3020_params_st),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaCreateChannelDesc_v3020_params_st),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaCreateChannelDesc_v3020_params_st),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaCreateChannelDesc_v3020_params_st),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaCreateChannelDesc_v3020_params_st),
            "::",
            stringify!(f)
        )
    );
}
impl Default for cudaCreateChannelDesc_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaCreateChannelDesc_v3020_params = cudaCreateChannelDesc_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaCreateTextureObject_v5000_params_st {
    pub pTexObject: *mut cudaTextureObject_t,
    pub pResDesc: *const cudaResourceDesc,
    pub pTexDesc: *const cudaTextureDesc,
    pub pResViewDesc: *const cudaResourceViewDesc,
}
#[test]
fn bindgen_test_layout_cudaCreateTextureObject_v5000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaCreateTextureObject_v5000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaCreateTextureObject_v5000_params_st>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(cudaCreateTextureObject_v5000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaCreateTextureObject_v5000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaCreateTextureObject_v5000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pTexObject) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaCreateTextureObject_v5000_params_st),
            "::",
            stringify!(pTexObject)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pResDesc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaCreateTextureObject_v5000_params_st),
            "::",
            stringify!(pResDesc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pTexDesc) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaCreateTextureObject_v5000_params_st),
            "::",
            stringify!(pTexDesc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pResViewDesc) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaCreateTextureObject_v5000_params_st),
            "::",
            stringify!(pResViewDesc)
        )
    );
}
impl Default for cudaCreateTextureObject_v5000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaCreateTextureObject_v5000_params = cudaCreateTextureObject_v5000_params_st;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaDestroyTextureObject_v5000_params_st {
    pub texObject: cudaTextureObject_t,
}
#[test]
fn bindgen_test_layout_cudaDestroyTextureObject_v5000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaDestroyTextureObject_v5000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaDestroyTextureObject_v5000_params_st>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(cudaDestroyTextureObject_v5000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaDestroyTextureObject_v5000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaDestroyTextureObject_v5000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).texObject) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDestroyTextureObject_v5000_params_st),
            "::",
            stringify!(texObject)
        )
    );
}
pub type cudaDestroyTextureObject_v5000_params = cudaDestroyTextureObject_v5000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGetTextureObjectResourceDesc_v5000_params_st {
    pub pResDesc: *mut cudaResourceDesc,
    pub texObject: cudaTextureObject_t,
}
#[test]
fn bindgen_test_layout_cudaGetTextureObjectResourceDesc_v5000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGetTextureObjectResourceDesc_v5000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGetTextureObjectResourceDesc_v5000_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaGetTextureObjectResourceDesc_v5000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGetTextureObjectResourceDesc_v5000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGetTextureObjectResourceDesc_v5000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pResDesc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGetTextureObjectResourceDesc_v5000_params_st),
            "::",
            stringify!(pResDesc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).texObject) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGetTextureObjectResourceDesc_v5000_params_st),
            "::",
            stringify!(texObject)
        )
    );
}
impl Default for cudaGetTextureObjectResourceDesc_v5000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGetTextureObjectResourceDesc_v5000_params =
    cudaGetTextureObjectResourceDesc_v5000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGetTextureObjectTextureDesc_v5000_params_st {
    pub pTexDesc: *mut cudaTextureDesc,
    pub texObject: cudaTextureObject_t,
}
#[test]
fn bindgen_test_layout_cudaGetTextureObjectTextureDesc_v5000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGetTextureObjectTextureDesc_v5000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGetTextureObjectTextureDesc_v5000_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaGetTextureObjectTextureDesc_v5000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGetTextureObjectTextureDesc_v5000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGetTextureObjectTextureDesc_v5000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pTexDesc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGetTextureObjectTextureDesc_v5000_params_st),
            "::",
            stringify!(pTexDesc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).texObject) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGetTextureObjectTextureDesc_v5000_params_st),
            "::",
            stringify!(texObject)
        )
    );
}
impl Default for cudaGetTextureObjectTextureDesc_v5000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGetTextureObjectTextureDesc_v5000_params =
    cudaGetTextureObjectTextureDesc_v5000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGetTextureObjectResourceViewDesc_v5000_params_st {
    pub pResViewDesc: *mut cudaResourceViewDesc,
    pub texObject: cudaTextureObject_t,
}
#[test]
fn bindgen_test_layout_cudaGetTextureObjectResourceViewDesc_v5000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGetTextureObjectResourceViewDesc_v5000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGetTextureObjectResourceViewDesc_v5000_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaGetTextureObjectResourceViewDesc_v5000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGetTextureObjectResourceViewDesc_v5000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGetTextureObjectResourceViewDesc_v5000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pResViewDesc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGetTextureObjectResourceViewDesc_v5000_params_st),
            "::",
            stringify!(pResViewDesc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).texObject) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGetTextureObjectResourceViewDesc_v5000_params_st),
            "::",
            stringify!(texObject)
        )
    );
}
impl Default for cudaGetTextureObjectResourceViewDesc_v5000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGetTextureObjectResourceViewDesc_v5000_params =
    cudaGetTextureObjectResourceViewDesc_v5000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaCreateSurfaceObject_v5000_params_st {
    pub pSurfObject: *mut cudaSurfaceObject_t,
    pub pResDesc: *const cudaResourceDesc,
}
#[test]
fn bindgen_test_layout_cudaCreateSurfaceObject_v5000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaCreateSurfaceObject_v5000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaCreateSurfaceObject_v5000_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaCreateSurfaceObject_v5000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaCreateSurfaceObject_v5000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaCreateSurfaceObject_v5000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pSurfObject) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaCreateSurfaceObject_v5000_params_st),
            "::",
            stringify!(pSurfObject)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pResDesc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaCreateSurfaceObject_v5000_params_st),
            "::",
            stringify!(pResDesc)
        )
    );
}
impl Default for cudaCreateSurfaceObject_v5000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaCreateSurfaceObject_v5000_params = cudaCreateSurfaceObject_v5000_params_st;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaDestroySurfaceObject_v5000_params_st {
    pub surfObject: cudaSurfaceObject_t,
}
#[test]
fn bindgen_test_layout_cudaDestroySurfaceObject_v5000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaDestroySurfaceObject_v5000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaDestroySurfaceObject_v5000_params_st>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(cudaDestroySurfaceObject_v5000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaDestroySurfaceObject_v5000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaDestroySurfaceObject_v5000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).surfObject) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDestroySurfaceObject_v5000_params_st),
            "::",
            stringify!(surfObject)
        )
    );
}
pub type cudaDestroySurfaceObject_v5000_params = cudaDestroySurfaceObject_v5000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGetSurfaceObjectResourceDesc_v5000_params_st {
    pub pResDesc: *mut cudaResourceDesc,
    pub surfObject: cudaSurfaceObject_t,
}
#[test]
fn bindgen_test_layout_cudaGetSurfaceObjectResourceDesc_v5000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGetSurfaceObjectResourceDesc_v5000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGetSurfaceObjectResourceDesc_v5000_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaGetSurfaceObjectResourceDesc_v5000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGetSurfaceObjectResourceDesc_v5000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGetSurfaceObjectResourceDesc_v5000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pResDesc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGetSurfaceObjectResourceDesc_v5000_params_st),
            "::",
            stringify!(pResDesc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).surfObject) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGetSurfaceObjectResourceDesc_v5000_params_st),
            "::",
            stringify!(surfObject)
        )
    );
}
impl Default for cudaGetSurfaceObjectResourceDesc_v5000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGetSurfaceObjectResourceDesc_v5000_params =
    cudaGetSurfaceObjectResourceDesc_v5000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaDriverGetVersion_v3020_params_st {
    pub driverVersion: *mut ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cudaDriverGetVersion_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaDriverGetVersion_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaDriverGetVersion_v3020_params_st>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(cudaDriverGetVersion_v3020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaDriverGetVersion_v3020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaDriverGetVersion_v3020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).driverVersion) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDriverGetVersion_v3020_params_st),
            "::",
            stringify!(driverVersion)
        )
    );
}
impl Default for cudaDriverGetVersion_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaDriverGetVersion_v3020_params = cudaDriverGetVersion_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaRuntimeGetVersion_v3020_params_st {
    pub runtimeVersion: *mut ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cudaRuntimeGetVersion_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaRuntimeGetVersion_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaRuntimeGetVersion_v3020_params_st>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(cudaRuntimeGetVersion_v3020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaRuntimeGetVersion_v3020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaRuntimeGetVersion_v3020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).runtimeVersion) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaRuntimeGetVersion_v3020_params_st),
            "::",
            stringify!(runtimeVersion)
        )
    );
}
impl Default for cudaRuntimeGetVersion_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaRuntimeGetVersion_v3020_params = cudaRuntimeGetVersion_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphCreate_v10000_params_st {
    pub pGraph: *mut cudaGraph_t,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cudaGraphCreate_v10000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphCreate_v10000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphCreate_v10000_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cudaGraphCreate_v10000_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphCreate_v10000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphCreate_v10000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pGraph) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphCreate_v10000_params_st),
            "::",
            stringify!(pGraph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphCreate_v10000_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cudaGraphCreate_v10000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphCreate_v10000_params = cudaGraphCreate_v10000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphAddKernelNode_v10000_params_st {
    pub pGraphNode: *mut cudaGraphNode_t,
    pub graph: cudaGraph_t,
    pub pDependencies: *const cudaGraphNode_t,
    pub numDependencies: usize,
    pub pNodeParams: *const cudaKernelNodeParams,
}
#[test]
fn bindgen_test_layout_cudaGraphAddKernelNode_v10000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphAddKernelNode_v10000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphAddKernelNode_v10000_params_st>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphAddKernelNode_v10000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphAddKernelNode_v10000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphAddKernelNode_v10000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pGraphNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddKernelNode_v10000_params_st),
            "::",
            stringify!(pGraphNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graph) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddKernelNode_v10000_params_st),
            "::",
            stringify!(graph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDependencies) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddKernelNode_v10000_params_st),
            "::",
            stringify!(pDependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numDependencies) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddKernelNode_v10000_params_st),
            "::",
            stringify!(numDependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNodeParams) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddKernelNode_v10000_params_st),
            "::",
            stringify!(pNodeParams)
        )
    );
}
impl Default for cudaGraphAddKernelNode_v10000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphAddKernelNode_v10000_params = cudaGraphAddKernelNode_v10000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphKernelNodeGetParams_v10000_params_st {
    pub node: cudaGraphNode_t,
    pub pNodeParams: *mut cudaKernelNodeParams,
}
#[test]
fn bindgen_test_layout_cudaGraphKernelNodeGetParams_v10000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphKernelNodeGetParams_v10000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphKernelNodeGetParams_v10000_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphKernelNodeGetParams_v10000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphKernelNodeGetParams_v10000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphKernelNodeGetParams_v10000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphKernelNodeGetParams_v10000_params_st),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNodeParams) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphKernelNodeGetParams_v10000_params_st),
            "::",
            stringify!(pNodeParams)
        )
    );
}
impl Default for cudaGraphKernelNodeGetParams_v10000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphKernelNodeGetParams_v10000_params = cudaGraphKernelNodeGetParams_v10000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphKernelNodeSetParams_v10000_params_st {
    pub node: cudaGraphNode_t,
    pub pNodeParams: *const cudaKernelNodeParams,
}
#[test]
fn bindgen_test_layout_cudaGraphKernelNodeSetParams_v10000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphKernelNodeSetParams_v10000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphKernelNodeSetParams_v10000_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphKernelNodeSetParams_v10000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphKernelNodeSetParams_v10000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphKernelNodeSetParams_v10000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphKernelNodeSetParams_v10000_params_st),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNodeParams) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphKernelNodeSetParams_v10000_params_st),
            "::",
            stringify!(pNodeParams)
        )
    );
}
impl Default for cudaGraphKernelNodeSetParams_v10000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphKernelNodeSetParams_v10000_params = cudaGraphKernelNodeSetParams_v10000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphKernelNodeCopyAttributes_v11000_params_st {
    pub hSrc: cudaGraphNode_t,
    pub hDst: cudaGraphNode_t,
}
#[test]
fn bindgen_test_layout_cudaGraphKernelNodeCopyAttributes_v11000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphKernelNodeCopyAttributes_v11000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphKernelNodeCopyAttributes_v11000_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphKernelNodeCopyAttributes_v11000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphKernelNodeCopyAttributes_v11000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphKernelNodeCopyAttributes_v11000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hSrc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphKernelNodeCopyAttributes_v11000_params_st),
            "::",
            stringify!(hSrc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hDst) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphKernelNodeCopyAttributes_v11000_params_st),
            "::",
            stringify!(hDst)
        )
    );
}
impl Default for cudaGraphKernelNodeCopyAttributes_v11000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphKernelNodeCopyAttributes_v11000_params =
    cudaGraphKernelNodeCopyAttributes_v11000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphKernelNodeGetAttribute_v11000_params_st {
    pub hNode: cudaGraphNode_t,
    pub attr: cudaLaunchAttributeID,
    pub value_out: *mut cudaLaunchAttributeValue,
}
#[test]
fn bindgen_test_layout_cudaGraphKernelNodeGetAttribute_v11000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphKernelNodeGetAttribute_v11000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphKernelNodeGetAttribute_v11000_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphKernelNodeGetAttribute_v11000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphKernelNodeGetAttribute_v11000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphKernelNodeGetAttribute_v11000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphKernelNodeGetAttribute_v11000_params_st),
            "::",
            stringify!(hNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphKernelNodeGetAttribute_v11000_params_st),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value_out) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphKernelNodeGetAttribute_v11000_params_st),
            "::",
            stringify!(value_out)
        )
    );
}
impl Default for cudaGraphKernelNodeGetAttribute_v11000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphKernelNodeGetAttribute_v11000_params =
    cudaGraphKernelNodeGetAttribute_v11000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphKernelNodeSetAttribute_v11000_params_st {
    pub hNode: cudaGraphNode_t,
    pub attr: cudaLaunchAttributeID,
    pub value: *const cudaLaunchAttributeValue,
}
#[test]
fn bindgen_test_layout_cudaGraphKernelNodeSetAttribute_v11000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphKernelNodeSetAttribute_v11000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphKernelNodeSetAttribute_v11000_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphKernelNodeSetAttribute_v11000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphKernelNodeSetAttribute_v11000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphKernelNodeSetAttribute_v11000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphKernelNodeSetAttribute_v11000_params_st),
            "::",
            stringify!(hNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphKernelNodeSetAttribute_v11000_params_st),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphKernelNodeSetAttribute_v11000_params_st),
            "::",
            stringify!(value)
        )
    );
}
impl Default for cudaGraphKernelNodeSetAttribute_v11000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphKernelNodeSetAttribute_v11000_params =
    cudaGraphKernelNodeSetAttribute_v11000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphAddMemcpyNode_v10000_params_st {
    pub pGraphNode: *mut cudaGraphNode_t,
    pub graph: cudaGraph_t,
    pub pDependencies: *const cudaGraphNode_t,
    pub numDependencies: usize,
    pub pCopyParams: *const cudaMemcpy3DParms,
}
#[test]
fn bindgen_test_layout_cudaGraphAddMemcpyNode_v10000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphAddMemcpyNode_v10000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphAddMemcpyNode_v10000_params_st>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphAddMemcpyNode_v10000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphAddMemcpyNode_v10000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphAddMemcpyNode_v10000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pGraphNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddMemcpyNode_v10000_params_st),
            "::",
            stringify!(pGraphNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graph) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddMemcpyNode_v10000_params_st),
            "::",
            stringify!(graph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDependencies) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddMemcpyNode_v10000_params_st),
            "::",
            stringify!(pDependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numDependencies) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddMemcpyNode_v10000_params_st),
            "::",
            stringify!(numDependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCopyParams) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddMemcpyNode_v10000_params_st),
            "::",
            stringify!(pCopyParams)
        )
    );
}
impl Default for cudaGraphAddMemcpyNode_v10000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphAddMemcpyNode_v10000_params = cudaGraphAddMemcpyNode_v10000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphAddMemcpyNodeToSymbol_v11010_params_st {
    pub pGraphNode: *mut cudaGraphNode_t,
    pub graph: cudaGraph_t,
    pub pDependencies: *const cudaGraphNode_t,
    pub numDependencies: usize,
    pub symbol: *const ::std::os::raw::c_void,
    pub src: *const ::std::os::raw::c_void,
    pub count: usize,
    pub offset: usize,
    pub kind: cudaMemcpyKind,
}
#[test]
fn bindgen_test_layout_cudaGraphAddMemcpyNodeToSymbol_v11010_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphAddMemcpyNodeToSymbol_v11010_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphAddMemcpyNodeToSymbol_v11010_params_st>(),
        72usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphAddMemcpyNodeToSymbol_v11010_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphAddMemcpyNodeToSymbol_v11010_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphAddMemcpyNodeToSymbol_v11010_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pGraphNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddMemcpyNodeToSymbol_v11010_params_st),
            "::",
            stringify!(pGraphNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graph) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddMemcpyNodeToSymbol_v11010_params_st),
            "::",
            stringify!(graph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDependencies) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddMemcpyNodeToSymbol_v11010_params_st),
            "::",
            stringify!(pDependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numDependencies) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddMemcpyNodeToSymbol_v11010_params_st),
            "::",
            stringify!(numDependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).symbol) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddMemcpyNodeToSymbol_v11010_params_st),
            "::",
            stringify!(symbol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddMemcpyNodeToSymbol_v11010_params_st),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddMemcpyNodeToSymbol_v11010_params_st),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddMemcpyNodeToSymbol_v11010_params_st),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddMemcpyNodeToSymbol_v11010_params_st),
            "::",
            stringify!(kind)
        )
    );
}
impl Default for cudaGraphAddMemcpyNodeToSymbol_v11010_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphAddMemcpyNodeToSymbol_v11010_params =
    cudaGraphAddMemcpyNodeToSymbol_v11010_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphAddMemcpyNodeFromSymbol_v11010_params_st {
    pub pGraphNode: *mut cudaGraphNode_t,
    pub graph: cudaGraph_t,
    pub pDependencies: *const cudaGraphNode_t,
    pub numDependencies: usize,
    pub dst: *mut ::std::os::raw::c_void,
    pub symbol: *const ::std::os::raw::c_void,
    pub count: usize,
    pub offset: usize,
    pub kind: cudaMemcpyKind,
}
#[test]
fn bindgen_test_layout_cudaGraphAddMemcpyNodeFromSymbol_v11010_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphAddMemcpyNodeFromSymbol_v11010_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphAddMemcpyNodeFromSymbol_v11010_params_st>(),
        72usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphAddMemcpyNodeFromSymbol_v11010_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphAddMemcpyNodeFromSymbol_v11010_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphAddMemcpyNodeFromSymbol_v11010_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pGraphNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddMemcpyNodeFromSymbol_v11010_params_st),
            "::",
            stringify!(pGraphNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graph) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddMemcpyNodeFromSymbol_v11010_params_st),
            "::",
            stringify!(graph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDependencies) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddMemcpyNodeFromSymbol_v11010_params_st),
            "::",
            stringify!(pDependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numDependencies) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddMemcpyNodeFromSymbol_v11010_params_st),
            "::",
            stringify!(numDependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddMemcpyNodeFromSymbol_v11010_params_st),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).symbol) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddMemcpyNodeFromSymbol_v11010_params_st),
            "::",
            stringify!(symbol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddMemcpyNodeFromSymbol_v11010_params_st),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddMemcpyNodeFromSymbol_v11010_params_st),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddMemcpyNodeFromSymbol_v11010_params_st),
            "::",
            stringify!(kind)
        )
    );
}
impl Default for cudaGraphAddMemcpyNodeFromSymbol_v11010_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphAddMemcpyNodeFromSymbol_v11010_params =
    cudaGraphAddMemcpyNodeFromSymbol_v11010_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphAddMemcpyNode1D_v11010_params_st {
    pub pGraphNode: *mut cudaGraphNode_t,
    pub graph: cudaGraph_t,
    pub pDependencies: *const cudaGraphNode_t,
    pub numDependencies: usize,
    pub dst: *mut ::std::os::raw::c_void,
    pub src: *const ::std::os::raw::c_void,
    pub count: usize,
    pub kind: cudaMemcpyKind,
}
#[test]
fn bindgen_test_layout_cudaGraphAddMemcpyNode1D_v11010_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphAddMemcpyNode1D_v11010_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphAddMemcpyNode1D_v11010_params_st>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphAddMemcpyNode1D_v11010_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphAddMemcpyNode1D_v11010_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphAddMemcpyNode1D_v11010_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pGraphNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddMemcpyNode1D_v11010_params_st),
            "::",
            stringify!(pGraphNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graph) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddMemcpyNode1D_v11010_params_st),
            "::",
            stringify!(graph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDependencies) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddMemcpyNode1D_v11010_params_st),
            "::",
            stringify!(pDependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numDependencies) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddMemcpyNode1D_v11010_params_st),
            "::",
            stringify!(numDependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddMemcpyNode1D_v11010_params_st),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddMemcpyNode1D_v11010_params_st),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddMemcpyNode1D_v11010_params_st),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddMemcpyNode1D_v11010_params_st),
            "::",
            stringify!(kind)
        )
    );
}
impl Default for cudaGraphAddMemcpyNode1D_v11010_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphAddMemcpyNode1D_v11010_params = cudaGraphAddMemcpyNode1D_v11010_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphMemcpyNodeGetParams_v10000_params_st {
    pub node: cudaGraphNode_t,
    pub pNodeParams: *mut cudaMemcpy3DParms,
}
#[test]
fn bindgen_test_layout_cudaGraphMemcpyNodeGetParams_v10000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphMemcpyNodeGetParams_v10000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphMemcpyNodeGetParams_v10000_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphMemcpyNodeGetParams_v10000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphMemcpyNodeGetParams_v10000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphMemcpyNodeGetParams_v10000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphMemcpyNodeGetParams_v10000_params_st),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNodeParams) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphMemcpyNodeGetParams_v10000_params_st),
            "::",
            stringify!(pNodeParams)
        )
    );
}
impl Default for cudaGraphMemcpyNodeGetParams_v10000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphMemcpyNodeGetParams_v10000_params = cudaGraphMemcpyNodeGetParams_v10000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphMemcpyNodeSetParams_v10000_params_st {
    pub node: cudaGraphNode_t,
    pub pNodeParams: *const cudaMemcpy3DParms,
}
#[test]
fn bindgen_test_layout_cudaGraphMemcpyNodeSetParams_v10000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphMemcpyNodeSetParams_v10000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphMemcpyNodeSetParams_v10000_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphMemcpyNodeSetParams_v10000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphMemcpyNodeSetParams_v10000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphMemcpyNodeSetParams_v10000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphMemcpyNodeSetParams_v10000_params_st),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNodeParams) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphMemcpyNodeSetParams_v10000_params_st),
            "::",
            stringify!(pNodeParams)
        )
    );
}
impl Default for cudaGraphMemcpyNodeSetParams_v10000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphMemcpyNodeSetParams_v10000_params = cudaGraphMemcpyNodeSetParams_v10000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphMemcpyNodeSetParamsToSymbol_v11010_params_st {
    pub node: cudaGraphNode_t,
    pub symbol: *const ::std::os::raw::c_void,
    pub src: *const ::std::os::raw::c_void,
    pub count: usize,
    pub offset: usize,
    pub kind: cudaMemcpyKind,
}
#[test]
fn bindgen_test_layout_cudaGraphMemcpyNodeSetParamsToSymbol_v11010_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphMemcpyNodeSetParamsToSymbol_v11010_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphMemcpyNodeSetParamsToSymbol_v11010_params_st>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphMemcpyNodeSetParamsToSymbol_v11010_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphMemcpyNodeSetParamsToSymbol_v11010_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphMemcpyNodeSetParamsToSymbol_v11010_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphMemcpyNodeSetParamsToSymbol_v11010_params_st),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).symbol) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphMemcpyNodeSetParamsToSymbol_v11010_params_st),
            "::",
            stringify!(symbol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphMemcpyNodeSetParamsToSymbol_v11010_params_st),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphMemcpyNodeSetParamsToSymbol_v11010_params_st),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphMemcpyNodeSetParamsToSymbol_v11010_params_st),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphMemcpyNodeSetParamsToSymbol_v11010_params_st),
            "::",
            stringify!(kind)
        )
    );
}
impl Default for cudaGraphMemcpyNodeSetParamsToSymbol_v11010_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphMemcpyNodeSetParamsToSymbol_v11010_params =
    cudaGraphMemcpyNodeSetParamsToSymbol_v11010_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphMemcpyNodeSetParamsFromSymbol_v11010_params_st {
    pub node: cudaGraphNode_t,
    pub dst: *mut ::std::os::raw::c_void,
    pub symbol: *const ::std::os::raw::c_void,
    pub count: usize,
    pub offset: usize,
    pub kind: cudaMemcpyKind,
}
#[test]
fn bindgen_test_layout_cudaGraphMemcpyNodeSetParamsFromSymbol_v11010_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphMemcpyNodeSetParamsFromSymbol_v11010_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphMemcpyNodeSetParamsFromSymbol_v11010_params_st>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphMemcpyNodeSetParamsFromSymbol_v11010_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphMemcpyNodeSetParamsFromSymbol_v11010_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphMemcpyNodeSetParamsFromSymbol_v11010_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphMemcpyNodeSetParamsFromSymbol_v11010_params_st),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphMemcpyNodeSetParamsFromSymbol_v11010_params_st),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).symbol) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphMemcpyNodeSetParamsFromSymbol_v11010_params_st),
            "::",
            stringify!(symbol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphMemcpyNodeSetParamsFromSymbol_v11010_params_st),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphMemcpyNodeSetParamsFromSymbol_v11010_params_st),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphMemcpyNodeSetParamsFromSymbol_v11010_params_st),
            "::",
            stringify!(kind)
        )
    );
}
impl Default for cudaGraphMemcpyNodeSetParamsFromSymbol_v11010_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphMemcpyNodeSetParamsFromSymbol_v11010_params =
    cudaGraphMemcpyNodeSetParamsFromSymbol_v11010_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphMemcpyNodeSetParams1D_v11010_params_st {
    pub node: cudaGraphNode_t,
    pub dst: *mut ::std::os::raw::c_void,
    pub src: *const ::std::os::raw::c_void,
    pub count: usize,
    pub kind: cudaMemcpyKind,
}
#[test]
fn bindgen_test_layout_cudaGraphMemcpyNodeSetParams1D_v11010_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphMemcpyNodeSetParams1D_v11010_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphMemcpyNodeSetParams1D_v11010_params_st>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphMemcpyNodeSetParams1D_v11010_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphMemcpyNodeSetParams1D_v11010_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphMemcpyNodeSetParams1D_v11010_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphMemcpyNodeSetParams1D_v11010_params_st),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphMemcpyNodeSetParams1D_v11010_params_st),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphMemcpyNodeSetParams1D_v11010_params_st),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphMemcpyNodeSetParams1D_v11010_params_st),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphMemcpyNodeSetParams1D_v11010_params_st),
            "::",
            stringify!(kind)
        )
    );
}
impl Default for cudaGraphMemcpyNodeSetParams1D_v11010_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphMemcpyNodeSetParams1D_v11010_params =
    cudaGraphMemcpyNodeSetParams1D_v11010_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphAddMemsetNode_v10000_params_st {
    pub pGraphNode: *mut cudaGraphNode_t,
    pub graph: cudaGraph_t,
    pub pDependencies: *const cudaGraphNode_t,
    pub numDependencies: usize,
    pub pMemsetParams: *const cudaMemsetParams,
}
#[test]
fn bindgen_test_layout_cudaGraphAddMemsetNode_v10000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphAddMemsetNode_v10000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphAddMemsetNode_v10000_params_st>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphAddMemsetNode_v10000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphAddMemsetNode_v10000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphAddMemsetNode_v10000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pGraphNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddMemsetNode_v10000_params_st),
            "::",
            stringify!(pGraphNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graph) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddMemsetNode_v10000_params_st),
            "::",
            stringify!(graph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDependencies) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddMemsetNode_v10000_params_st),
            "::",
            stringify!(pDependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numDependencies) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddMemsetNode_v10000_params_st),
            "::",
            stringify!(numDependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pMemsetParams) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddMemsetNode_v10000_params_st),
            "::",
            stringify!(pMemsetParams)
        )
    );
}
impl Default for cudaGraphAddMemsetNode_v10000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphAddMemsetNode_v10000_params = cudaGraphAddMemsetNode_v10000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphMemsetNodeGetParams_v10000_params_st {
    pub node: cudaGraphNode_t,
    pub pNodeParams: *mut cudaMemsetParams,
}
#[test]
fn bindgen_test_layout_cudaGraphMemsetNodeGetParams_v10000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphMemsetNodeGetParams_v10000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphMemsetNodeGetParams_v10000_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphMemsetNodeGetParams_v10000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphMemsetNodeGetParams_v10000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphMemsetNodeGetParams_v10000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphMemsetNodeGetParams_v10000_params_st),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNodeParams) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphMemsetNodeGetParams_v10000_params_st),
            "::",
            stringify!(pNodeParams)
        )
    );
}
impl Default for cudaGraphMemsetNodeGetParams_v10000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphMemsetNodeGetParams_v10000_params = cudaGraphMemsetNodeGetParams_v10000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphMemsetNodeSetParams_v10000_params_st {
    pub node: cudaGraphNode_t,
    pub pNodeParams: *const cudaMemsetParams,
}
#[test]
fn bindgen_test_layout_cudaGraphMemsetNodeSetParams_v10000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphMemsetNodeSetParams_v10000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphMemsetNodeSetParams_v10000_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphMemsetNodeSetParams_v10000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphMemsetNodeSetParams_v10000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphMemsetNodeSetParams_v10000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphMemsetNodeSetParams_v10000_params_st),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNodeParams) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphMemsetNodeSetParams_v10000_params_st),
            "::",
            stringify!(pNodeParams)
        )
    );
}
impl Default for cudaGraphMemsetNodeSetParams_v10000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphMemsetNodeSetParams_v10000_params = cudaGraphMemsetNodeSetParams_v10000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphAddHostNode_v10000_params_st {
    pub pGraphNode: *mut cudaGraphNode_t,
    pub graph: cudaGraph_t,
    pub pDependencies: *const cudaGraphNode_t,
    pub numDependencies: usize,
    pub pNodeParams: *const cudaHostNodeParams,
}
#[test]
fn bindgen_test_layout_cudaGraphAddHostNode_v10000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphAddHostNode_v10000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphAddHostNode_v10000_params_st>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphAddHostNode_v10000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphAddHostNode_v10000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphAddHostNode_v10000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pGraphNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddHostNode_v10000_params_st),
            "::",
            stringify!(pGraphNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graph) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddHostNode_v10000_params_st),
            "::",
            stringify!(graph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDependencies) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddHostNode_v10000_params_st),
            "::",
            stringify!(pDependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numDependencies) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddHostNode_v10000_params_st),
            "::",
            stringify!(numDependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNodeParams) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddHostNode_v10000_params_st),
            "::",
            stringify!(pNodeParams)
        )
    );
}
impl Default for cudaGraphAddHostNode_v10000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphAddHostNode_v10000_params = cudaGraphAddHostNode_v10000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphHostNodeGetParams_v10000_params_st {
    pub node: cudaGraphNode_t,
    pub pNodeParams: *mut cudaHostNodeParams,
}
#[test]
fn bindgen_test_layout_cudaGraphHostNodeGetParams_v10000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphHostNodeGetParams_v10000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphHostNodeGetParams_v10000_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphHostNodeGetParams_v10000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphHostNodeGetParams_v10000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphHostNodeGetParams_v10000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphHostNodeGetParams_v10000_params_st),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNodeParams) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphHostNodeGetParams_v10000_params_st),
            "::",
            stringify!(pNodeParams)
        )
    );
}
impl Default for cudaGraphHostNodeGetParams_v10000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphHostNodeGetParams_v10000_params = cudaGraphHostNodeGetParams_v10000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphHostNodeSetParams_v10000_params_st {
    pub node: cudaGraphNode_t,
    pub pNodeParams: *const cudaHostNodeParams,
}
#[test]
fn bindgen_test_layout_cudaGraphHostNodeSetParams_v10000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphHostNodeSetParams_v10000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphHostNodeSetParams_v10000_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphHostNodeSetParams_v10000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphHostNodeSetParams_v10000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphHostNodeSetParams_v10000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphHostNodeSetParams_v10000_params_st),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNodeParams) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphHostNodeSetParams_v10000_params_st),
            "::",
            stringify!(pNodeParams)
        )
    );
}
impl Default for cudaGraphHostNodeSetParams_v10000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphHostNodeSetParams_v10000_params = cudaGraphHostNodeSetParams_v10000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphAddChildGraphNode_v10000_params_st {
    pub pGraphNode: *mut cudaGraphNode_t,
    pub graph: cudaGraph_t,
    pub pDependencies: *const cudaGraphNode_t,
    pub numDependencies: usize,
    pub childGraph: cudaGraph_t,
}
#[test]
fn bindgen_test_layout_cudaGraphAddChildGraphNode_v10000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphAddChildGraphNode_v10000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphAddChildGraphNode_v10000_params_st>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphAddChildGraphNode_v10000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphAddChildGraphNode_v10000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphAddChildGraphNode_v10000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pGraphNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddChildGraphNode_v10000_params_st),
            "::",
            stringify!(pGraphNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graph) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddChildGraphNode_v10000_params_st),
            "::",
            stringify!(graph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDependencies) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddChildGraphNode_v10000_params_st),
            "::",
            stringify!(pDependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numDependencies) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddChildGraphNode_v10000_params_st),
            "::",
            stringify!(numDependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).childGraph) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddChildGraphNode_v10000_params_st),
            "::",
            stringify!(childGraph)
        )
    );
}
impl Default for cudaGraphAddChildGraphNode_v10000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphAddChildGraphNode_v10000_params = cudaGraphAddChildGraphNode_v10000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphChildGraphNodeGetGraph_v10000_params_st {
    pub node: cudaGraphNode_t,
    pub pGraph: *mut cudaGraph_t,
}
#[test]
fn bindgen_test_layout_cudaGraphChildGraphNodeGetGraph_v10000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphChildGraphNodeGetGraph_v10000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphChildGraphNodeGetGraph_v10000_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphChildGraphNodeGetGraph_v10000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphChildGraphNodeGetGraph_v10000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphChildGraphNodeGetGraph_v10000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphChildGraphNodeGetGraph_v10000_params_st),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pGraph) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphChildGraphNodeGetGraph_v10000_params_st),
            "::",
            stringify!(pGraph)
        )
    );
}
impl Default for cudaGraphChildGraphNodeGetGraph_v10000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphChildGraphNodeGetGraph_v10000_params =
    cudaGraphChildGraphNodeGetGraph_v10000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphAddEmptyNode_v10000_params_st {
    pub pGraphNode: *mut cudaGraphNode_t,
    pub graph: cudaGraph_t,
    pub pDependencies: *const cudaGraphNode_t,
    pub numDependencies: usize,
}
#[test]
fn bindgen_test_layout_cudaGraphAddEmptyNode_v10000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphAddEmptyNode_v10000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphAddEmptyNode_v10000_params_st>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphAddEmptyNode_v10000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphAddEmptyNode_v10000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphAddEmptyNode_v10000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pGraphNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddEmptyNode_v10000_params_st),
            "::",
            stringify!(pGraphNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graph) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddEmptyNode_v10000_params_st),
            "::",
            stringify!(graph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDependencies) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddEmptyNode_v10000_params_st),
            "::",
            stringify!(pDependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numDependencies) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddEmptyNode_v10000_params_st),
            "::",
            stringify!(numDependencies)
        )
    );
}
impl Default for cudaGraphAddEmptyNode_v10000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphAddEmptyNode_v10000_params = cudaGraphAddEmptyNode_v10000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphAddEventRecordNode_v11010_params_st {
    pub pGraphNode: *mut cudaGraphNode_t,
    pub graph: cudaGraph_t,
    pub pDependencies: *const cudaGraphNode_t,
    pub numDependencies: usize,
    pub event: cudaEvent_t,
}
#[test]
fn bindgen_test_layout_cudaGraphAddEventRecordNode_v11010_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphAddEventRecordNode_v11010_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphAddEventRecordNode_v11010_params_st>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphAddEventRecordNode_v11010_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphAddEventRecordNode_v11010_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphAddEventRecordNode_v11010_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pGraphNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddEventRecordNode_v11010_params_st),
            "::",
            stringify!(pGraphNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graph) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddEventRecordNode_v11010_params_st),
            "::",
            stringify!(graph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDependencies) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddEventRecordNode_v11010_params_st),
            "::",
            stringify!(pDependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numDependencies) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddEventRecordNode_v11010_params_st),
            "::",
            stringify!(numDependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddEventRecordNode_v11010_params_st),
            "::",
            stringify!(event)
        )
    );
}
impl Default for cudaGraphAddEventRecordNode_v11010_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphAddEventRecordNode_v11010_params = cudaGraphAddEventRecordNode_v11010_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphEventRecordNodeGetEvent_v11010_params_st {
    pub node: cudaGraphNode_t,
    pub event_out: *mut cudaEvent_t,
}
#[test]
fn bindgen_test_layout_cudaGraphEventRecordNodeGetEvent_v11010_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphEventRecordNodeGetEvent_v11010_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphEventRecordNodeGetEvent_v11010_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphEventRecordNodeGetEvent_v11010_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphEventRecordNodeGetEvent_v11010_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphEventRecordNodeGetEvent_v11010_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphEventRecordNodeGetEvent_v11010_params_st),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event_out) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphEventRecordNodeGetEvent_v11010_params_st),
            "::",
            stringify!(event_out)
        )
    );
}
impl Default for cudaGraphEventRecordNodeGetEvent_v11010_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphEventRecordNodeGetEvent_v11010_params =
    cudaGraphEventRecordNodeGetEvent_v11010_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphEventRecordNodeSetEvent_v11010_params_st {
    pub node: cudaGraphNode_t,
    pub event: cudaEvent_t,
}
#[test]
fn bindgen_test_layout_cudaGraphEventRecordNodeSetEvent_v11010_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphEventRecordNodeSetEvent_v11010_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphEventRecordNodeSetEvent_v11010_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphEventRecordNodeSetEvent_v11010_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphEventRecordNodeSetEvent_v11010_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphEventRecordNodeSetEvent_v11010_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphEventRecordNodeSetEvent_v11010_params_st),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphEventRecordNodeSetEvent_v11010_params_st),
            "::",
            stringify!(event)
        )
    );
}
impl Default for cudaGraphEventRecordNodeSetEvent_v11010_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphEventRecordNodeSetEvent_v11010_params =
    cudaGraphEventRecordNodeSetEvent_v11010_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphAddEventWaitNode_v11010_params_st {
    pub pGraphNode: *mut cudaGraphNode_t,
    pub graph: cudaGraph_t,
    pub pDependencies: *const cudaGraphNode_t,
    pub numDependencies: usize,
    pub event: cudaEvent_t,
}
#[test]
fn bindgen_test_layout_cudaGraphAddEventWaitNode_v11010_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphAddEventWaitNode_v11010_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphAddEventWaitNode_v11010_params_st>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphAddEventWaitNode_v11010_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphAddEventWaitNode_v11010_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphAddEventWaitNode_v11010_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pGraphNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddEventWaitNode_v11010_params_st),
            "::",
            stringify!(pGraphNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graph) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddEventWaitNode_v11010_params_st),
            "::",
            stringify!(graph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDependencies) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddEventWaitNode_v11010_params_st),
            "::",
            stringify!(pDependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numDependencies) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddEventWaitNode_v11010_params_st),
            "::",
            stringify!(numDependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddEventWaitNode_v11010_params_st),
            "::",
            stringify!(event)
        )
    );
}
impl Default for cudaGraphAddEventWaitNode_v11010_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphAddEventWaitNode_v11010_params = cudaGraphAddEventWaitNode_v11010_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphEventWaitNodeGetEvent_v11010_params_st {
    pub node: cudaGraphNode_t,
    pub event_out: *mut cudaEvent_t,
}
#[test]
fn bindgen_test_layout_cudaGraphEventWaitNodeGetEvent_v11010_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphEventWaitNodeGetEvent_v11010_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphEventWaitNodeGetEvent_v11010_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphEventWaitNodeGetEvent_v11010_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphEventWaitNodeGetEvent_v11010_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphEventWaitNodeGetEvent_v11010_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphEventWaitNodeGetEvent_v11010_params_st),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event_out) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphEventWaitNodeGetEvent_v11010_params_st),
            "::",
            stringify!(event_out)
        )
    );
}
impl Default for cudaGraphEventWaitNodeGetEvent_v11010_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphEventWaitNodeGetEvent_v11010_params =
    cudaGraphEventWaitNodeGetEvent_v11010_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphEventWaitNodeSetEvent_v11010_params_st {
    pub node: cudaGraphNode_t,
    pub event: cudaEvent_t,
}
#[test]
fn bindgen_test_layout_cudaGraphEventWaitNodeSetEvent_v11010_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphEventWaitNodeSetEvent_v11010_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphEventWaitNodeSetEvent_v11010_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphEventWaitNodeSetEvent_v11010_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphEventWaitNodeSetEvent_v11010_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphEventWaitNodeSetEvent_v11010_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphEventWaitNodeSetEvent_v11010_params_st),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphEventWaitNodeSetEvent_v11010_params_st),
            "::",
            stringify!(event)
        )
    );
}
impl Default for cudaGraphEventWaitNodeSetEvent_v11010_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphEventWaitNodeSetEvent_v11010_params =
    cudaGraphEventWaitNodeSetEvent_v11010_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphAddExternalSemaphoresSignalNode_v11020_params_st {
    pub pGraphNode: *mut cudaGraphNode_t,
    pub graph: cudaGraph_t,
    pub pDependencies: *const cudaGraphNode_t,
    pub numDependencies: usize,
    pub nodeParams: *const cudaExternalSemaphoreSignalNodeParams,
}
#[test]
fn bindgen_test_layout_cudaGraphAddExternalSemaphoresSignalNode_v11020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<
        cudaGraphAddExternalSemaphoresSignalNode_v11020_params_st,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphAddExternalSemaphoresSignalNode_v11020_params_st>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphAddExternalSemaphoresSignalNode_v11020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphAddExternalSemaphoresSignalNode_v11020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphAddExternalSemaphoresSignalNode_v11020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pGraphNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddExternalSemaphoresSignalNode_v11020_params_st),
            "::",
            stringify!(pGraphNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graph) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddExternalSemaphoresSignalNode_v11020_params_st),
            "::",
            stringify!(graph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDependencies) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddExternalSemaphoresSignalNode_v11020_params_st),
            "::",
            stringify!(pDependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numDependencies) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddExternalSemaphoresSignalNode_v11020_params_st),
            "::",
            stringify!(numDependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeParams) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddExternalSemaphoresSignalNode_v11020_params_st),
            "::",
            stringify!(nodeParams)
        )
    );
}
impl Default for cudaGraphAddExternalSemaphoresSignalNode_v11020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphAddExternalSemaphoresSignalNode_v11020_params =
    cudaGraphAddExternalSemaphoresSignalNode_v11020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphExternalSemaphoresSignalNodeGetParams_v11020_params_st {
    pub hNode: cudaGraphNode_t,
    pub params_out: *mut cudaExternalSemaphoreSignalNodeParams,
}
#[test]
fn bindgen_test_layout_cudaGraphExternalSemaphoresSignalNodeGetParams_v11020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<
        cudaGraphExternalSemaphoresSignalNodeGetParams_v11020_params_st,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphExternalSemaphoresSignalNodeGetParams_v11020_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphExternalSemaphoresSignalNodeGetParams_v11020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphExternalSemaphoresSignalNodeGetParams_v11020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphExternalSemaphoresSignalNodeGetParams_v11020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphExternalSemaphoresSignalNodeGetParams_v11020_params_st),
            "::",
            stringify!(hNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).params_out) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphExternalSemaphoresSignalNodeGetParams_v11020_params_st),
            "::",
            stringify!(params_out)
        )
    );
}
impl Default for cudaGraphExternalSemaphoresSignalNodeGetParams_v11020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphExternalSemaphoresSignalNodeGetParams_v11020_params =
    cudaGraphExternalSemaphoresSignalNodeGetParams_v11020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphExternalSemaphoresSignalNodeSetParams_v11020_params_st {
    pub hNode: cudaGraphNode_t,
    pub nodeParams: *const cudaExternalSemaphoreSignalNodeParams,
}
#[test]
fn bindgen_test_layout_cudaGraphExternalSemaphoresSignalNodeSetParams_v11020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<
        cudaGraphExternalSemaphoresSignalNodeSetParams_v11020_params_st,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphExternalSemaphoresSignalNodeSetParams_v11020_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphExternalSemaphoresSignalNodeSetParams_v11020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphExternalSemaphoresSignalNodeSetParams_v11020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphExternalSemaphoresSignalNodeSetParams_v11020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphExternalSemaphoresSignalNodeSetParams_v11020_params_st),
            "::",
            stringify!(hNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeParams) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphExternalSemaphoresSignalNodeSetParams_v11020_params_st),
            "::",
            stringify!(nodeParams)
        )
    );
}
impl Default for cudaGraphExternalSemaphoresSignalNodeSetParams_v11020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphExternalSemaphoresSignalNodeSetParams_v11020_params =
    cudaGraphExternalSemaphoresSignalNodeSetParams_v11020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphAddExternalSemaphoresWaitNode_v11020_params_st {
    pub pGraphNode: *mut cudaGraphNode_t,
    pub graph: cudaGraph_t,
    pub pDependencies: *const cudaGraphNode_t,
    pub numDependencies: usize,
    pub nodeParams: *const cudaExternalSemaphoreWaitNodeParams,
}
#[test]
fn bindgen_test_layout_cudaGraphAddExternalSemaphoresWaitNode_v11020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphAddExternalSemaphoresWaitNode_v11020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphAddExternalSemaphoresWaitNode_v11020_params_st>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphAddExternalSemaphoresWaitNode_v11020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphAddExternalSemaphoresWaitNode_v11020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphAddExternalSemaphoresWaitNode_v11020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pGraphNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddExternalSemaphoresWaitNode_v11020_params_st),
            "::",
            stringify!(pGraphNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graph) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddExternalSemaphoresWaitNode_v11020_params_st),
            "::",
            stringify!(graph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDependencies) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddExternalSemaphoresWaitNode_v11020_params_st),
            "::",
            stringify!(pDependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numDependencies) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddExternalSemaphoresWaitNode_v11020_params_st),
            "::",
            stringify!(numDependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeParams) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddExternalSemaphoresWaitNode_v11020_params_st),
            "::",
            stringify!(nodeParams)
        )
    );
}
impl Default for cudaGraphAddExternalSemaphoresWaitNode_v11020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphAddExternalSemaphoresWaitNode_v11020_params =
    cudaGraphAddExternalSemaphoresWaitNode_v11020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphExternalSemaphoresWaitNodeGetParams_v11020_params_st {
    pub hNode: cudaGraphNode_t,
    pub params_out: *mut cudaExternalSemaphoreWaitNodeParams,
}
#[test]
fn bindgen_test_layout_cudaGraphExternalSemaphoresWaitNodeGetParams_v11020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<
        cudaGraphExternalSemaphoresWaitNodeGetParams_v11020_params_st,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphExternalSemaphoresWaitNodeGetParams_v11020_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphExternalSemaphoresWaitNodeGetParams_v11020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphExternalSemaphoresWaitNodeGetParams_v11020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphExternalSemaphoresWaitNodeGetParams_v11020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphExternalSemaphoresWaitNodeGetParams_v11020_params_st),
            "::",
            stringify!(hNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).params_out) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphExternalSemaphoresWaitNodeGetParams_v11020_params_st),
            "::",
            stringify!(params_out)
        )
    );
}
impl Default for cudaGraphExternalSemaphoresWaitNodeGetParams_v11020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphExternalSemaphoresWaitNodeGetParams_v11020_params =
    cudaGraphExternalSemaphoresWaitNodeGetParams_v11020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphExternalSemaphoresWaitNodeSetParams_v11020_params_st {
    pub hNode: cudaGraphNode_t,
    pub nodeParams: *const cudaExternalSemaphoreWaitNodeParams,
}
#[test]
fn bindgen_test_layout_cudaGraphExternalSemaphoresWaitNodeSetParams_v11020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<
        cudaGraphExternalSemaphoresWaitNodeSetParams_v11020_params_st,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphExternalSemaphoresWaitNodeSetParams_v11020_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphExternalSemaphoresWaitNodeSetParams_v11020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphExternalSemaphoresWaitNodeSetParams_v11020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphExternalSemaphoresWaitNodeSetParams_v11020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphExternalSemaphoresWaitNodeSetParams_v11020_params_st),
            "::",
            stringify!(hNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeParams) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphExternalSemaphoresWaitNodeSetParams_v11020_params_st),
            "::",
            stringify!(nodeParams)
        )
    );
}
impl Default for cudaGraphExternalSemaphoresWaitNodeSetParams_v11020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphExternalSemaphoresWaitNodeSetParams_v11020_params =
    cudaGraphExternalSemaphoresWaitNodeSetParams_v11020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphAddMemAllocNode_v11040_params_st {
    pub pGraphNode: *mut cudaGraphNode_t,
    pub graph: cudaGraph_t,
    pub pDependencies: *const cudaGraphNode_t,
    pub numDependencies: usize,
    pub nodeParams: *mut cudaMemAllocNodeParams,
}
#[test]
fn bindgen_test_layout_cudaGraphAddMemAllocNode_v11040_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphAddMemAllocNode_v11040_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphAddMemAllocNode_v11040_params_st>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphAddMemAllocNode_v11040_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphAddMemAllocNode_v11040_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphAddMemAllocNode_v11040_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pGraphNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddMemAllocNode_v11040_params_st),
            "::",
            stringify!(pGraphNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graph) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddMemAllocNode_v11040_params_st),
            "::",
            stringify!(graph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDependencies) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddMemAllocNode_v11040_params_st),
            "::",
            stringify!(pDependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numDependencies) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddMemAllocNode_v11040_params_st),
            "::",
            stringify!(numDependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeParams) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddMemAllocNode_v11040_params_st),
            "::",
            stringify!(nodeParams)
        )
    );
}
impl Default for cudaGraphAddMemAllocNode_v11040_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphAddMemAllocNode_v11040_params = cudaGraphAddMemAllocNode_v11040_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphMemAllocNodeGetParams_v11040_params_st {
    pub node: cudaGraphNode_t,
    pub params_out: *mut cudaMemAllocNodeParams,
}
#[test]
fn bindgen_test_layout_cudaGraphMemAllocNodeGetParams_v11040_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphMemAllocNodeGetParams_v11040_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphMemAllocNodeGetParams_v11040_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphMemAllocNodeGetParams_v11040_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphMemAllocNodeGetParams_v11040_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphMemAllocNodeGetParams_v11040_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphMemAllocNodeGetParams_v11040_params_st),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).params_out) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphMemAllocNodeGetParams_v11040_params_st),
            "::",
            stringify!(params_out)
        )
    );
}
impl Default for cudaGraphMemAllocNodeGetParams_v11040_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphMemAllocNodeGetParams_v11040_params =
    cudaGraphMemAllocNodeGetParams_v11040_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphAddMemFreeNode_v11040_params_st {
    pub pGraphNode: *mut cudaGraphNode_t,
    pub graph: cudaGraph_t,
    pub pDependencies: *const cudaGraphNode_t,
    pub numDependencies: usize,
    pub dptr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_cudaGraphAddMemFreeNode_v11040_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphAddMemFreeNode_v11040_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphAddMemFreeNode_v11040_params_st>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphAddMemFreeNode_v11040_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphAddMemFreeNode_v11040_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphAddMemFreeNode_v11040_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pGraphNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddMemFreeNode_v11040_params_st),
            "::",
            stringify!(pGraphNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graph) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddMemFreeNode_v11040_params_st),
            "::",
            stringify!(graph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDependencies) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddMemFreeNode_v11040_params_st),
            "::",
            stringify!(pDependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numDependencies) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddMemFreeNode_v11040_params_st),
            "::",
            stringify!(numDependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dptr) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddMemFreeNode_v11040_params_st),
            "::",
            stringify!(dptr)
        )
    );
}
impl Default for cudaGraphAddMemFreeNode_v11040_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphAddMemFreeNode_v11040_params = cudaGraphAddMemFreeNode_v11040_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphMemFreeNodeGetParams_v11040_params_st {
    pub node: cudaGraphNode_t,
    pub dptr_out: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_cudaGraphMemFreeNodeGetParams_v11040_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphMemFreeNodeGetParams_v11040_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphMemFreeNodeGetParams_v11040_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphMemFreeNodeGetParams_v11040_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphMemFreeNodeGetParams_v11040_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphMemFreeNodeGetParams_v11040_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphMemFreeNodeGetParams_v11040_params_st),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dptr_out) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphMemFreeNodeGetParams_v11040_params_st),
            "::",
            stringify!(dptr_out)
        )
    );
}
impl Default for cudaGraphMemFreeNodeGetParams_v11040_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphMemFreeNodeGetParams_v11040_params =
    cudaGraphMemFreeNodeGetParams_v11040_params_st;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaDeviceGraphMemTrim_v11040_params_st {
    pub device: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cudaDeviceGraphMemTrim_v11040_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaDeviceGraphMemTrim_v11040_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaDeviceGraphMemTrim_v11040_params_st>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(cudaDeviceGraphMemTrim_v11040_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaDeviceGraphMemTrim_v11040_params_st>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(cudaDeviceGraphMemTrim_v11040_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceGraphMemTrim_v11040_params_st),
            "::",
            stringify!(device)
        )
    );
}
pub type cudaDeviceGraphMemTrim_v11040_params = cudaDeviceGraphMemTrim_v11040_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaDeviceGetGraphMemAttribute_v11040_params_st {
    pub device: ::std::os::raw::c_int,
    pub attr: cudaGraphMemAttributeType,
    pub value: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_cudaDeviceGetGraphMemAttribute_v11040_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaDeviceGetGraphMemAttribute_v11040_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaDeviceGetGraphMemAttribute_v11040_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaDeviceGetGraphMemAttribute_v11040_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaDeviceGetGraphMemAttribute_v11040_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaDeviceGetGraphMemAttribute_v11040_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceGetGraphMemAttribute_v11040_params_st),
            "::",
            stringify!(device)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceGetGraphMemAttribute_v11040_params_st),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceGetGraphMemAttribute_v11040_params_st),
            "::",
            stringify!(value)
        )
    );
}
impl Default for cudaDeviceGetGraphMemAttribute_v11040_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaDeviceGetGraphMemAttribute_v11040_params =
    cudaDeviceGetGraphMemAttribute_v11040_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaDeviceSetGraphMemAttribute_v11040_params_st {
    pub device: ::std::os::raw::c_int,
    pub attr: cudaGraphMemAttributeType,
    pub value: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_cudaDeviceSetGraphMemAttribute_v11040_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaDeviceSetGraphMemAttribute_v11040_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaDeviceSetGraphMemAttribute_v11040_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaDeviceSetGraphMemAttribute_v11040_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaDeviceSetGraphMemAttribute_v11040_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaDeviceSetGraphMemAttribute_v11040_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceSetGraphMemAttribute_v11040_params_st),
            "::",
            stringify!(device)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceSetGraphMemAttribute_v11040_params_st),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaDeviceSetGraphMemAttribute_v11040_params_st),
            "::",
            stringify!(value)
        )
    );
}
impl Default for cudaDeviceSetGraphMemAttribute_v11040_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaDeviceSetGraphMemAttribute_v11040_params =
    cudaDeviceSetGraphMemAttribute_v11040_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphClone_v10000_params_st {
    pub pGraphClone: *mut cudaGraph_t,
    pub originalGraph: cudaGraph_t,
}
#[test]
fn bindgen_test_layout_cudaGraphClone_v10000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphClone_v10000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphClone_v10000_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cudaGraphClone_v10000_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphClone_v10000_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaGraphClone_v10000_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pGraphClone) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphClone_v10000_params_st),
            "::",
            stringify!(pGraphClone)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).originalGraph) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphClone_v10000_params_st),
            "::",
            stringify!(originalGraph)
        )
    );
}
impl Default for cudaGraphClone_v10000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphClone_v10000_params = cudaGraphClone_v10000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphNodeFindInClone_v10000_params_st {
    pub pNode: *mut cudaGraphNode_t,
    pub originalNode: cudaGraphNode_t,
    pub clonedGraph: cudaGraph_t,
}
#[test]
fn bindgen_test_layout_cudaGraphNodeFindInClone_v10000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphNodeFindInClone_v10000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphNodeFindInClone_v10000_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphNodeFindInClone_v10000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphNodeFindInClone_v10000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphNodeFindInClone_v10000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphNodeFindInClone_v10000_params_st),
            "::",
            stringify!(pNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).originalNode) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphNodeFindInClone_v10000_params_st),
            "::",
            stringify!(originalNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clonedGraph) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphNodeFindInClone_v10000_params_st),
            "::",
            stringify!(clonedGraph)
        )
    );
}
impl Default for cudaGraphNodeFindInClone_v10000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphNodeFindInClone_v10000_params = cudaGraphNodeFindInClone_v10000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphNodeGetType_v10000_params_st {
    pub node: cudaGraphNode_t,
    pub pType: *mut cudaGraphNodeType,
}
#[test]
fn bindgen_test_layout_cudaGraphNodeGetType_v10000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphNodeGetType_v10000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphNodeGetType_v10000_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphNodeGetType_v10000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphNodeGetType_v10000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphNodeGetType_v10000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphNodeGetType_v10000_params_st),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pType) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphNodeGetType_v10000_params_st),
            "::",
            stringify!(pType)
        )
    );
}
impl Default for cudaGraphNodeGetType_v10000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphNodeGetType_v10000_params = cudaGraphNodeGetType_v10000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphGetNodes_v10000_params_st {
    pub graph: cudaGraph_t,
    pub nodes: *mut cudaGraphNode_t,
    pub numNodes: *mut usize,
}
#[test]
fn bindgen_test_layout_cudaGraphGetNodes_v10000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphGetNodes_v10000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphGetNodes_v10000_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cudaGraphGetNodes_v10000_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphGetNodes_v10000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphGetNodes_v10000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graph) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphGetNodes_v10000_params_st),
            "::",
            stringify!(graph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodes) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphGetNodes_v10000_params_st),
            "::",
            stringify!(nodes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numNodes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphGetNodes_v10000_params_st),
            "::",
            stringify!(numNodes)
        )
    );
}
impl Default for cudaGraphGetNodes_v10000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphGetNodes_v10000_params = cudaGraphGetNodes_v10000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphGetRootNodes_v10000_params_st {
    pub graph: cudaGraph_t,
    pub pRootNodes: *mut cudaGraphNode_t,
    pub pNumRootNodes: *mut usize,
}
#[test]
fn bindgen_test_layout_cudaGraphGetRootNodes_v10000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphGetRootNodes_v10000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphGetRootNodes_v10000_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphGetRootNodes_v10000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphGetRootNodes_v10000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphGetRootNodes_v10000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graph) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphGetRootNodes_v10000_params_st),
            "::",
            stringify!(graph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pRootNodes) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphGetRootNodes_v10000_params_st),
            "::",
            stringify!(pRootNodes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNumRootNodes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphGetRootNodes_v10000_params_st),
            "::",
            stringify!(pNumRootNodes)
        )
    );
}
impl Default for cudaGraphGetRootNodes_v10000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphGetRootNodes_v10000_params = cudaGraphGetRootNodes_v10000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphGetEdges_v10000_params_st {
    pub graph: cudaGraph_t,
    pub from: *mut cudaGraphNode_t,
    pub to: *mut cudaGraphNode_t,
    pub numEdges: *mut usize,
}
#[test]
fn bindgen_test_layout_cudaGraphGetEdges_v10000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphGetEdges_v10000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphGetEdges_v10000_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cudaGraphGetEdges_v10000_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphGetEdges_v10000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphGetEdges_v10000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graph) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphGetEdges_v10000_params_st),
            "::",
            stringify!(graph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).from) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphGetEdges_v10000_params_st),
            "::",
            stringify!(from)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).to) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphGetEdges_v10000_params_st),
            "::",
            stringify!(to)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numEdges) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphGetEdges_v10000_params_st),
            "::",
            stringify!(numEdges)
        )
    );
}
impl Default for cudaGraphGetEdges_v10000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphGetEdges_v10000_params = cudaGraphGetEdges_v10000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphNodeGetDependencies_v10000_params_st {
    pub node: cudaGraphNode_t,
    pub pDependencies: *mut cudaGraphNode_t,
    pub pNumDependencies: *mut usize,
}
#[test]
fn bindgen_test_layout_cudaGraphNodeGetDependencies_v10000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphNodeGetDependencies_v10000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphNodeGetDependencies_v10000_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphNodeGetDependencies_v10000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphNodeGetDependencies_v10000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphNodeGetDependencies_v10000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphNodeGetDependencies_v10000_params_st),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDependencies) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphNodeGetDependencies_v10000_params_st),
            "::",
            stringify!(pDependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNumDependencies) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphNodeGetDependencies_v10000_params_st),
            "::",
            stringify!(pNumDependencies)
        )
    );
}
impl Default for cudaGraphNodeGetDependencies_v10000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphNodeGetDependencies_v10000_params = cudaGraphNodeGetDependencies_v10000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphNodeGetDependentNodes_v10000_params_st {
    pub node: cudaGraphNode_t,
    pub pDependentNodes: *mut cudaGraphNode_t,
    pub pNumDependentNodes: *mut usize,
}
#[test]
fn bindgen_test_layout_cudaGraphNodeGetDependentNodes_v10000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphNodeGetDependentNodes_v10000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphNodeGetDependentNodes_v10000_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphNodeGetDependentNodes_v10000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphNodeGetDependentNodes_v10000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphNodeGetDependentNodes_v10000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphNodeGetDependentNodes_v10000_params_st),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDependentNodes) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphNodeGetDependentNodes_v10000_params_st),
            "::",
            stringify!(pDependentNodes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNumDependentNodes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphNodeGetDependentNodes_v10000_params_st),
            "::",
            stringify!(pNumDependentNodes)
        )
    );
}
impl Default for cudaGraphNodeGetDependentNodes_v10000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphNodeGetDependentNodes_v10000_params =
    cudaGraphNodeGetDependentNodes_v10000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphAddDependencies_v10000_params_st {
    pub graph: cudaGraph_t,
    pub from: *const cudaGraphNode_t,
    pub to: *const cudaGraphNode_t,
    pub numDependencies: usize,
}
#[test]
fn bindgen_test_layout_cudaGraphAddDependencies_v10000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphAddDependencies_v10000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphAddDependencies_v10000_params_st>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphAddDependencies_v10000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphAddDependencies_v10000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphAddDependencies_v10000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graph) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddDependencies_v10000_params_st),
            "::",
            stringify!(graph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).from) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddDependencies_v10000_params_st),
            "::",
            stringify!(from)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).to) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddDependencies_v10000_params_st),
            "::",
            stringify!(to)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numDependencies) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphAddDependencies_v10000_params_st),
            "::",
            stringify!(numDependencies)
        )
    );
}
impl Default for cudaGraphAddDependencies_v10000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphAddDependencies_v10000_params = cudaGraphAddDependencies_v10000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphRemoveDependencies_v10000_params_st {
    pub graph: cudaGraph_t,
    pub from: *const cudaGraphNode_t,
    pub to: *const cudaGraphNode_t,
    pub numDependencies: usize,
}
#[test]
fn bindgen_test_layout_cudaGraphRemoveDependencies_v10000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphRemoveDependencies_v10000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphRemoveDependencies_v10000_params_st>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphRemoveDependencies_v10000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphRemoveDependencies_v10000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphRemoveDependencies_v10000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graph) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphRemoveDependencies_v10000_params_st),
            "::",
            stringify!(graph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).from) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphRemoveDependencies_v10000_params_st),
            "::",
            stringify!(from)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).to) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphRemoveDependencies_v10000_params_st),
            "::",
            stringify!(to)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numDependencies) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphRemoveDependencies_v10000_params_st),
            "::",
            stringify!(numDependencies)
        )
    );
}
impl Default for cudaGraphRemoveDependencies_v10000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphRemoveDependencies_v10000_params = cudaGraphRemoveDependencies_v10000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphDestroyNode_v10000_params_st {
    pub node: cudaGraphNode_t,
}
#[test]
fn bindgen_test_layout_cudaGraphDestroyNode_v10000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphDestroyNode_v10000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphDestroyNode_v10000_params_st>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphDestroyNode_v10000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphDestroyNode_v10000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphDestroyNode_v10000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphDestroyNode_v10000_params_st),
            "::",
            stringify!(node)
        )
    );
}
impl Default for cudaGraphDestroyNode_v10000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphDestroyNode_v10000_params = cudaGraphDestroyNode_v10000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphInstantiate_v12000_params_st {
    pub pGraphExec: *mut cudaGraphExec_t,
    pub graph: cudaGraph_t,
    pub flags: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_cudaGraphInstantiate_v12000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphInstantiate_v12000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphInstantiate_v12000_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphInstantiate_v12000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphInstantiate_v12000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphInstantiate_v12000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pGraphExec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphInstantiate_v12000_params_st),
            "::",
            stringify!(pGraphExec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graph) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphInstantiate_v12000_params_st),
            "::",
            stringify!(graph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphInstantiate_v12000_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cudaGraphInstantiate_v12000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphInstantiate_v12000_params = cudaGraphInstantiate_v12000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphInstantiateWithFlags_v11040_params_st {
    pub pGraphExec: *mut cudaGraphExec_t,
    pub graph: cudaGraph_t,
    pub flags: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_cudaGraphInstantiateWithFlags_v11040_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphInstantiateWithFlags_v11040_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphInstantiateWithFlags_v11040_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphInstantiateWithFlags_v11040_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphInstantiateWithFlags_v11040_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphInstantiateWithFlags_v11040_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pGraphExec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphInstantiateWithFlags_v11040_params_st),
            "::",
            stringify!(pGraphExec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graph) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphInstantiateWithFlags_v11040_params_st),
            "::",
            stringify!(graph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphInstantiateWithFlags_v11040_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cudaGraphInstantiateWithFlags_v11040_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphInstantiateWithFlags_v11040_params =
    cudaGraphInstantiateWithFlags_v11040_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphInstantiateWithParams_ptsz_v12000_params_st {
    pub pGraphExec: *mut cudaGraphExec_t,
    pub graph: cudaGraph_t,
    pub instantiateParams: *mut cudaGraphInstantiateParams,
}
#[test]
fn bindgen_test_layout_cudaGraphInstantiateWithParams_ptsz_v12000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphInstantiateWithParams_ptsz_v12000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphInstantiateWithParams_ptsz_v12000_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphInstantiateWithParams_ptsz_v12000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphInstantiateWithParams_ptsz_v12000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphInstantiateWithParams_ptsz_v12000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pGraphExec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphInstantiateWithParams_ptsz_v12000_params_st),
            "::",
            stringify!(pGraphExec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graph) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphInstantiateWithParams_ptsz_v12000_params_st),
            "::",
            stringify!(graph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).instantiateParams) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphInstantiateWithParams_ptsz_v12000_params_st),
            "::",
            stringify!(instantiateParams)
        )
    );
}
impl Default for cudaGraphInstantiateWithParams_ptsz_v12000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphInstantiateWithParams_ptsz_v12000_params =
    cudaGraphInstantiateWithParams_ptsz_v12000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphExecGetFlags_v12000_params_st {
    pub graphExec: cudaGraphExec_t,
    pub flags: *mut ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_cudaGraphExecGetFlags_v12000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphExecGetFlags_v12000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphExecGetFlags_v12000_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphExecGetFlags_v12000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphExecGetFlags_v12000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphExecGetFlags_v12000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graphExec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphExecGetFlags_v12000_params_st),
            "::",
            stringify!(graphExec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphExecGetFlags_v12000_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cudaGraphExecGetFlags_v12000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphExecGetFlags_v12000_params = cudaGraphExecGetFlags_v12000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphExecKernelNodeSetParams_v10010_params_st {
    pub hGraphExec: cudaGraphExec_t,
    pub node: cudaGraphNode_t,
    pub pNodeParams: *const cudaKernelNodeParams,
}
#[test]
fn bindgen_test_layout_cudaGraphExecKernelNodeSetParams_v10010_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphExecKernelNodeSetParams_v10010_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphExecKernelNodeSetParams_v10010_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphExecKernelNodeSetParams_v10010_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphExecKernelNodeSetParams_v10010_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphExecKernelNodeSetParams_v10010_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hGraphExec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphExecKernelNodeSetParams_v10010_params_st),
            "::",
            stringify!(hGraphExec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphExecKernelNodeSetParams_v10010_params_st),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNodeParams) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphExecKernelNodeSetParams_v10010_params_st),
            "::",
            stringify!(pNodeParams)
        )
    );
}
impl Default for cudaGraphExecKernelNodeSetParams_v10010_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphExecKernelNodeSetParams_v10010_params =
    cudaGraphExecKernelNodeSetParams_v10010_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphExecMemcpyNodeSetParams_v10020_params_st {
    pub hGraphExec: cudaGraphExec_t,
    pub node: cudaGraphNode_t,
    pub pNodeParams: *const cudaMemcpy3DParms,
}
#[test]
fn bindgen_test_layout_cudaGraphExecMemcpyNodeSetParams_v10020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphExecMemcpyNodeSetParams_v10020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphExecMemcpyNodeSetParams_v10020_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphExecMemcpyNodeSetParams_v10020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphExecMemcpyNodeSetParams_v10020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphExecMemcpyNodeSetParams_v10020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hGraphExec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphExecMemcpyNodeSetParams_v10020_params_st),
            "::",
            stringify!(hGraphExec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphExecMemcpyNodeSetParams_v10020_params_st),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNodeParams) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphExecMemcpyNodeSetParams_v10020_params_st),
            "::",
            stringify!(pNodeParams)
        )
    );
}
impl Default for cudaGraphExecMemcpyNodeSetParams_v10020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphExecMemcpyNodeSetParams_v10020_params =
    cudaGraphExecMemcpyNodeSetParams_v10020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphExecMemcpyNodeSetParamsToSymbol_v11010_params_st {
    pub hGraphExec: cudaGraphExec_t,
    pub node: cudaGraphNode_t,
    pub symbol: *const ::std::os::raw::c_void,
    pub src: *const ::std::os::raw::c_void,
    pub count: usize,
    pub offset: usize,
    pub kind: cudaMemcpyKind,
}
#[test]
fn bindgen_test_layout_cudaGraphExecMemcpyNodeSetParamsToSymbol_v11010_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<
        cudaGraphExecMemcpyNodeSetParamsToSymbol_v11010_params_st,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphExecMemcpyNodeSetParamsToSymbol_v11010_params_st>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphExecMemcpyNodeSetParamsToSymbol_v11010_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphExecMemcpyNodeSetParamsToSymbol_v11010_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphExecMemcpyNodeSetParamsToSymbol_v11010_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hGraphExec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphExecMemcpyNodeSetParamsToSymbol_v11010_params_st),
            "::",
            stringify!(hGraphExec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphExecMemcpyNodeSetParamsToSymbol_v11010_params_st),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).symbol) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphExecMemcpyNodeSetParamsToSymbol_v11010_params_st),
            "::",
            stringify!(symbol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphExecMemcpyNodeSetParamsToSymbol_v11010_params_st),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphExecMemcpyNodeSetParamsToSymbol_v11010_params_st),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphExecMemcpyNodeSetParamsToSymbol_v11010_params_st),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphExecMemcpyNodeSetParamsToSymbol_v11010_params_st),
            "::",
            stringify!(kind)
        )
    );
}
impl Default for cudaGraphExecMemcpyNodeSetParamsToSymbol_v11010_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphExecMemcpyNodeSetParamsToSymbol_v11010_params =
    cudaGraphExecMemcpyNodeSetParamsToSymbol_v11010_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphExecMemcpyNodeSetParamsFromSymbol_v11010_params_st {
    pub hGraphExec: cudaGraphExec_t,
    pub node: cudaGraphNode_t,
    pub dst: *mut ::std::os::raw::c_void,
    pub symbol: *const ::std::os::raw::c_void,
    pub count: usize,
    pub offset: usize,
    pub kind: cudaMemcpyKind,
}
#[test]
fn bindgen_test_layout_cudaGraphExecMemcpyNodeSetParamsFromSymbol_v11010_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<
        cudaGraphExecMemcpyNodeSetParamsFromSymbol_v11010_params_st,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphExecMemcpyNodeSetParamsFromSymbol_v11010_params_st>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphExecMemcpyNodeSetParamsFromSymbol_v11010_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphExecMemcpyNodeSetParamsFromSymbol_v11010_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphExecMemcpyNodeSetParamsFromSymbol_v11010_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hGraphExec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphExecMemcpyNodeSetParamsFromSymbol_v11010_params_st),
            "::",
            stringify!(hGraphExec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphExecMemcpyNodeSetParamsFromSymbol_v11010_params_st),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphExecMemcpyNodeSetParamsFromSymbol_v11010_params_st),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).symbol) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphExecMemcpyNodeSetParamsFromSymbol_v11010_params_st),
            "::",
            stringify!(symbol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphExecMemcpyNodeSetParamsFromSymbol_v11010_params_st),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphExecMemcpyNodeSetParamsFromSymbol_v11010_params_st),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphExecMemcpyNodeSetParamsFromSymbol_v11010_params_st),
            "::",
            stringify!(kind)
        )
    );
}
impl Default for cudaGraphExecMemcpyNodeSetParamsFromSymbol_v11010_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphExecMemcpyNodeSetParamsFromSymbol_v11010_params =
    cudaGraphExecMemcpyNodeSetParamsFromSymbol_v11010_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphExecMemcpyNodeSetParams1D_v11010_params_st {
    pub hGraphExec: cudaGraphExec_t,
    pub node: cudaGraphNode_t,
    pub dst: *mut ::std::os::raw::c_void,
    pub src: *const ::std::os::raw::c_void,
    pub count: usize,
    pub kind: cudaMemcpyKind,
}
#[test]
fn bindgen_test_layout_cudaGraphExecMemcpyNodeSetParams1D_v11010_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphExecMemcpyNodeSetParams1D_v11010_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphExecMemcpyNodeSetParams1D_v11010_params_st>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphExecMemcpyNodeSetParams1D_v11010_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphExecMemcpyNodeSetParams1D_v11010_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphExecMemcpyNodeSetParams1D_v11010_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hGraphExec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphExecMemcpyNodeSetParams1D_v11010_params_st),
            "::",
            stringify!(hGraphExec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphExecMemcpyNodeSetParams1D_v11010_params_st),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphExecMemcpyNodeSetParams1D_v11010_params_st),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphExecMemcpyNodeSetParams1D_v11010_params_st),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphExecMemcpyNodeSetParams1D_v11010_params_st),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphExecMemcpyNodeSetParams1D_v11010_params_st),
            "::",
            stringify!(kind)
        )
    );
}
impl Default for cudaGraphExecMemcpyNodeSetParams1D_v11010_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphExecMemcpyNodeSetParams1D_v11010_params =
    cudaGraphExecMemcpyNodeSetParams1D_v11010_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphExecMemsetNodeSetParams_v10020_params_st {
    pub hGraphExec: cudaGraphExec_t,
    pub node: cudaGraphNode_t,
    pub pNodeParams: *const cudaMemsetParams,
}
#[test]
fn bindgen_test_layout_cudaGraphExecMemsetNodeSetParams_v10020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphExecMemsetNodeSetParams_v10020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphExecMemsetNodeSetParams_v10020_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphExecMemsetNodeSetParams_v10020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphExecMemsetNodeSetParams_v10020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphExecMemsetNodeSetParams_v10020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hGraphExec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphExecMemsetNodeSetParams_v10020_params_st),
            "::",
            stringify!(hGraphExec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphExecMemsetNodeSetParams_v10020_params_st),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNodeParams) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphExecMemsetNodeSetParams_v10020_params_st),
            "::",
            stringify!(pNodeParams)
        )
    );
}
impl Default for cudaGraphExecMemsetNodeSetParams_v10020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphExecMemsetNodeSetParams_v10020_params =
    cudaGraphExecMemsetNodeSetParams_v10020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphExecHostNodeSetParams_v10020_params_st {
    pub hGraphExec: cudaGraphExec_t,
    pub node: cudaGraphNode_t,
    pub pNodeParams: *const cudaHostNodeParams,
}
#[test]
fn bindgen_test_layout_cudaGraphExecHostNodeSetParams_v10020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphExecHostNodeSetParams_v10020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphExecHostNodeSetParams_v10020_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphExecHostNodeSetParams_v10020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphExecHostNodeSetParams_v10020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphExecHostNodeSetParams_v10020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hGraphExec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphExecHostNodeSetParams_v10020_params_st),
            "::",
            stringify!(hGraphExec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphExecHostNodeSetParams_v10020_params_st),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNodeParams) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphExecHostNodeSetParams_v10020_params_st),
            "::",
            stringify!(pNodeParams)
        )
    );
}
impl Default for cudaGraphExecHostNodeSetParams_v10020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphExecHostNodeSetParams_v10020_params =
    cudaGraphExecHostNodeSetParams_v10020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphExecChildGraphNodeSetParams_v11010_params_st {
    pub hGraphExec: cudaGraphExec_t,
    pub node: cudaGraphNode_t,
    pub childGraph: cudaGraph_t,
}
#[test]
fn bindgen_test_layout_cudaGraphExecChildGraphNodeSetParams_v11010_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphExecChildGraphNodeSetParams_v11010_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphExecChildGraphNodeSetParams_v11010_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphExecChildGraphNodeSetParams_v11010_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphExecChildGraphNodeSetParams_v11010_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphExecChildGraphNodeSetParams_v11010_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hGraphExec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphExecChildGraphNodeSetParams_v11010_params_st),
            "::",
            stringify!(hGraphExec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphExecChildGraphNodeSetParams_v11010_params_st),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).childGraph) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphExecChildGraphNodeSetParams_v11010_params_st),
            "::",
            stringify!(childGraph)
        )
    );
}
impl Default for cudaGraphExecChildGraphNodeSetParams_v11010_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphExecChildGraphNodeSetParams_v11010_params =
    cudaGraphExecChildGraphNodeSetParams_v11010_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphExecEventRecordNodeSetEvent_v11010_params_st {
    pub hGraphExec: cudaGraphExec_t,
    pub hNode: cudaGraphNode_t,
    pub event: cudaEvent_t,
}
#[test]
fn bindgen_test_layout_cudaGraphExecEventRecordNodeSetEvent_v11010_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphExecEventRecordNodeSetEvent_v11010_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphExecEventRecordNodeSetEvent_v11010_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphExecEventRecordNodeSetEvent_v11010_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphExecEventRecordNodeSetEvent_v11010_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphExecEventRecordNodeSetEvent_v11010_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hGraphExec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphExecEventRecordNodeSetEvent_v11010_params_st),
            "::",
            stringify!(hGraphExec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hNode) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphExecEventRecordNodeSetEvent_v11010_params_st),
            "::",
            stringify!(hNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphExecEventRecordNodeSetEvent_v11010_params_st),
            "::",
            stringify!(event)
        )
    );
}
impl Default for cudaGraphExecEventRecordNodeSetEvent_v11010_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphExecEventRecordNodeSetEvent_v11010_params =
    cudaGraphExecEventRecordNodeSetEvent_v11010_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphExecEventWaitNodeSetEvent_v11010_params_st {
    pub hGraphExec: cudaGraphExec_t,
    pub hNode: cudaGraphNode_t,
    pub event: cudaEvent_t,
}
#[test]
fn bindgen_test_layout_cudaGraphExecEventWaitNodeSetEvent_v11010_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphExecEventWaitNodeSetEvent_v11010_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphExecEventWaitNodeSetEvent_v11010_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphExecEventWaitNodeSetEvent_v11010_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphExecEventWaitNodeSetEvent_v11010_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphExecEventWaitNodeSetEvent_v11010_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hGraphExec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphExecEventWaitNodeSetEvent_v11010_params_st),
            "::",
            stringify!(hGraphExec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hNode) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphExecEventWaitNodeSetEvent_v11010_params_st),
            "::",
            stringify!(hNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphExecEventWaitNodeSetEvent_v11010_params_st),
            "::",
            stringify!(event)
        )
    );
}
impl Default for cudaGraphExecEventWaitNodeSetEvent_v11010_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphExecEventWaitNodeSetEvent_v11010_params =
    cudaGraphExecEventWaitNodeSetEvent_v11010_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphExecExternalSemaphoresSignalNodeSetParams_v11020_params_st {
    pub hGraphExec: cudaGraphExec_t,
    pub hNode: cudaGraphNode_t,
    pub nodeParams: *const cudaExternalSemaphoreSignalNodeParams,
}
#[test]
fn bindgen_test_layout_cudaGraphExecExternalSemaphoresSignalNodeSetParams_v11020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<
        cudaGraphExecExternalSemaphoresSignalNodeSetParams_v11020_params_st,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphExecExternalSemaphoresSignalNodeSetParams_v11020_params_st>(
        ),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphExecExternalSemaphoresSignalNodeSetParams_v11020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphExecExternalSemaphoresSignalNodeSetParams_v11020_params_st>(
        ),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphExecExternalSemaphoresSignalNodeSetParams_v11020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hGraphExec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphExecExternalSemaphoresSignalNodeSetParams_v11020_params_st),
            "::",
            stringify!(hGraphExec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hNode) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphExecExternalSemaphoresSignalNodeSetParams_v11020_params_st),
            "::",
            stringify!(hNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeParams) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphExecExternalSemaphoresSignalNodeSetParams_v11020_params_st),
            "::",
            stringify!(nodeParams)
        )
    );
}
impl Default for cudaGraphExecExternalSemaphoresSignalNodeSetParams_v11020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphExecExternalSemaphoresSignalNodeSetParams_v11020_params =
    cudaGraphExecExternalSemaphoresSignalNodeSetParams_v11020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphExecExternalSemaphoresWaitNodeSetParams_v11020_params_st {
    pub hGraphExec: cudaGraphExec_t,
    pub hNode: cudaGraphNode_t,
    pub nodeParams: *const cudaExternalSemaphoreWaitNodeParams,
}
#[test]
fn bindgen_test_layout_cudaGraphExecExternalSemaphoresWaitNodeSetParams_v11020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<
        cudaGraphExecExternalSemaphoresWaitNodeSetParams_v11020_params_st,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphExecExternalSemaphoresWaitNodeSetParams_v11020_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphExecExternalSemaphoresWaitNodeSetParams_v11020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphExecExternalSemaphoresWaitNodeSetParams_v11020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphExecExternalSemaphoresWaitNodeSetParams_v11020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hGraphExec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphExecExternalSemaphoresWaitNodeSetParams_v11020_params_st),
            "::",
            stringify!(hGraphExec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hNode) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphExecExternalSemaphoresWaitNodeSetParams_v11020_params_st),
            "::",
            stringify!(hNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeParams) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphExecExternalSemaphoresWaitNodeSetParams_v11020_params_st),
            "::",
            stringify!(nodeParams)
        )
    );
}
impl Default for cudaGraphExecExternalSemaphoresWaitNodeSetParams_v11020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphExecExternalSemaphoresWaitNodeSetParams_v11020_params =
    cudaGraphExecExternalSemaphoresWaitNodeSetParams_v11020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphNodeSetEnabled_v11060_params_st {
    pub hGraphExec: cudaGraphExec_t,
    pub hNode: cudaGraphNode_t,
    pub isEnabled: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cudaGraphNodeSetEnabled_v11060_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphNodeSetEnabled_v11060_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphNodeSetEnabled_v11060_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphNodeSetEnabled_v11060_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphNodeSetEnabled_v11060_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphNodeSetEnabled_v11060_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hGraphExec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphNodeSetEnabled_v11060_params_st),
            "::",
            stringify!(hGraphExec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hNode) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphNodeSetEnabled_v11060_params_st),
            "::",
            stringify!(hNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isEnabled) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphNodeSetEnabled_v11060_params_st),
            "::",
            stringify!(isEnabled)
        )
    );
}
impl Default for cudaGraphNodeSetEnabled_v11060_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphNodeSetEnabled_v11060_params = cudaGraphNodeSetEnabled_v11060_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphNodeGetEnabled_v11060_params_st {
    pub hGraphExec: cudaGraphExec_t,
    pub hNode: cudaGraphNode_t,
    pub isEnabled: *mut ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cudaGraphNodeGetEnabled_v11060_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphNodeGetEnabled_v11060_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphNodeGetEnabled_v11060_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphNodeGetEnabled_v11060_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphNodeGetEnabled_v11060_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphNodeGetEnabled_v11060_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hGraphExec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphNodeGetEnabled_v11060_params_st),
            "::",
            stringify!(hGraphExec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hNode) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphNodeGetEnabled_v11060_params_st),
            "::",
            stringify!(hNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isEnabled) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphNodeGetEnabled_v11060_params_st),
            "::",
            stringify!(isEnabled)
        )
    );
}
impl Default for cudaGraphNodeGetEnabled_v11060_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphNodeGetEnabled_v11060_params = cudaGraphNodeGetEnabled_v11060_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphExecUpdate_v10020_params_st {
    pub hGraphExec: cudaGraphExec_t,
    pub hGraph: cudaGraph_t,
    pub resultInfo: *mut cudaGraphExecUpdateResultInfo,
}
#[test]
fn bindgen_test_layout_cudaGraphExecUpdate_v10020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphExecUpdate_v10020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphExecUpdate_v10020_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphExecUpdate_v10020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphExecUpdate_v10020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphExecUpdate_v10020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hGraphExec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphExecUpdate_v10020_params_st),
            "::",
            stringify!(hGraphExec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hGraph) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphExecUpdate_v10020_params_st),
            "::",
            stringify!(hGraph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resultInfo) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphExecUpdate_v10020_params_st),
            "::",
            stringify!(resultInfo)
        )
    );
}
impl Default for cudaGraphExecUpdate_v10020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphExecUpdate_v10020_params = cudaGraphExecUpdate_v10020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphUpload_ptsz_v10000_params_st {
    pub graphExec: cudaGraphExec_t,
    pub stream: cudaStream_t,
}
#[test]
fn bindgen_test_layout_cudaGraphUpload_ptsz_v10000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphUpload_ptsz_v10000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphUpload_ptsz_v10000_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphUpload_ptsz_v10000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphUpload_ptsz_v10000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphUpload_ptsz_v10000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graphExec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphUpload_ptsz_v10000_params_st),
            "::",
            stringify!(graphExec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphUpload_ptsz_v10000_params_st),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for cudaGraphUpload_ptsz_v10000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphUpload_ptsz_v10000_params = cudaGraphUpload_ptsz_v10000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphLaunch_ptsz_v10000_params_st {
    pub graphExec: cudaGraphExec_t,
    pub stream: cudaStream_t,
}
#[test]
fn bindgen_test_layout_cudaGraphLaunch_ptsz_v10000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphLaunch_ptsz_v10000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphLaunch_ptsz_v10000_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphLaunch_ptsz_v10000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphLaunch_ptsz_v10000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphLaunch_ptsz_v10000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graphExec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphLaunch_ptsz_v10000_params_st),
            "::",
            stringify!(graphExec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphLaunch_ptsz_v10000_params_st),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for cudaGraphLaunch_ptsz_v10000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphLaunch_ptsz_v10000_params = cudaGraphLaunch_ptsz_v10000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphExecDestroy_v10000_params_st {
    pub graphExec: cudaGraphExec_t,
}
#[test]
fn bindgen_test_layout_cudaGraphExecDestroy_v10000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphExecDestroy_v10000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphExecDestroy_v10000_params_st>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphExecDestroy_v10000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphExecDestroy_v10000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphExecDestroy_v10000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graphExec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphExecDestroy_v10000_params_st),
            "::",
            stringify!(graphExec)
        )
    );
}
impl Default for cudaGraphExecDestroy_v10000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphExecDestroy_v10000_params = cudaGraphExecDestroy_v10000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphDestroy_v10000_params_st {
    pub graph: cudaGraph_t,
}
#[test]
fn bindgen_test_layout_cudaGraphDestroy_v10000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphDestroy_v10000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphDestroy_v10000_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cudaGraphDestroy_v10000_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphDestroy_v10000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphDestroy_v10000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graph) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphDestroy_v10000_params_st),
            "::",
            stringify!(graph)
        )
    );
}
impl Default for cudaGraphDestroy_v10000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphDestroy_v10000_params = cudaGraphDestroy_v10000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphDebugDotPrint_v11030_params_st {
    pub graph: cudaGraph_t,
    pub path: *const ::std::os::raw::c_char,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cudaGraphDebugDotPrint_v11030_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphDebugDotPrint_v11030_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphDebugDotPrint_v11030_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphDebugDotPrint_v11030_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphDebugDotPrint_v11030_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphDebugDotPrint_v11030_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graph) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphDebugDotPrint_v11030_params_st),
            "::",
            stringify!(graph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphDebugDotPrint_v11030_params_st),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphDebugDotPrint_v11030_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cudaGraphDebugDotPrint_v11030_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphDebugDotPrint_v11030_params = cudaGraphDebugDotPrint_v11030_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaUserObjectCreate_v11030_params_st {
    pub object_out: *mut cudaUserObject_t,
    pub ptr: *mut ::std::os::raw::c_void,
    pub destroy: cudaHostFn_t,
    pub initialRefcount: ::std::os::raw::c_uint,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cudaUserObjectCreate_v11030_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaUserObjectCreate_v11030_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaUserObjectCreate_v11030_params_st>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(cudaUserObjectCreate_v11030_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaUserObjectCreate_v11030_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaUserObjectCreate_v11030_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object_out) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaUserObjectCreate_v11030_params_st),
            "::",
            stringify!(object_out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaUserObjectCreate_v11030_params_st),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).destroy) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaUserObjectCreate_v11030_params_st),
            "::",
            stringify!(destroy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).initialRefcount) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaUserObjectCreate_v11030_params_st),
            "::",
            stringify!(initialRefcount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaUserObjectCreate_v11030_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cudaUserObjectCreate_v11030_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaUserObjectCreate_v11030_params = cudaUserObjectCreate_v11030_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaUserObjectRetain_v11030_params_st {
    pub object: cudaUserObject_t,
    pub count: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cudaUserObjectRetain_v11030_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaUserObjectRetain_v11030_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaUserObjectRetain_v11030_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaUserObjectRetain_v11030_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaUserObjectRetain_v11030_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaUserObjectRetain_v11030_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaUserObjectRetain_v11030_params_st),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaUserObjectRetain_v11030_params_st),
            "::",
            stringify!(count)
        )
    );
}
impl Default for cudaUserObjectRetain_v11030_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaUserObjectRetain_v11030_params = cudaUserObjectRetain_v11030_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaUserObjectRelease_v11030_params_st {
    pub object: cudaUserObject_t,
    pub count: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cudaUserObjectRelease_v11030_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaUserObjectRelease_v11030_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaUserObjectRelease_v11030_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaUserObjectRelease_v11030_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaUserObjectRelease_v11030_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaUserObjectRelease_v11030_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaUserObjectRelease_v11030_params_st),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaUserObjectRelease_v11030_params_st),
            "::",
            stringify!(count)
        )
    );
}
impl Default for cudaUserObjectRelease_v11030_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaUserObjectRelease_v11030_params = cudaUserObjectRelease_v11030_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphRetainUserObject_v11030_params_st {
    pub graph: cudaGraph_t,
    pub object: cudaUserObject_t,
    pub count: ::std::os::raw::c_uint,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cudaGraphRetainUserObject_v11030_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphRetainUserObject_v11030_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphRetainUserObject_v11030_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphRetainUserObject_v11030_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphRetainUserObject_v11030_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphRetainUserObject_v11030_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graph) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphRetainUserObject_v11030_params_st),
            "::",
            stringify!(graph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphRetainUserObject_v11030_params_st),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphRetainUserObject_v11030_params_st),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphRetainUserObject_v11030_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cudaGraphRetainUserObject_v11030_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphRetainUserObject_v11030_params = cudaGraphRetainUserObject_v11030_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphReleaseUserObject_v11030_params_st {
    pub graph: cudaGraph_t,
    pub object: cudaUserObject_t,
    pub count: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cudaGraphReleaseUserObject_v11030_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphReleaseUserObject_v11030_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphReleaseUserObject_v11030_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphReleaseUserObject_v11030_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphReleaseUserObject_v11030_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphReleaseUserObject_v11030_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graph) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphReleaseUserObject_v11030_params_st),
            "::",
            stringify!(graph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphReleaseUserObject_v11030_params_st),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphReleaseUserObject_v11030_params_st),
            "::",
            stringify!(count)
        )
    );
}
impl Default for cudaGraphReleaseUserObject_v11030_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphReleaseUserObject_v11030_params = cudaGraphReleaseUserObject_v11030_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGetDriverEntryPoint_ptsz_v11030_params_st {
    pub symbol: *const ::std::os::raw::c_char,
    pub funcPtr: *mut *mut ::std::os::raw::c_void,
    pub flags: ::std::os::raw::c_ulonglong,
    pub driverStatus: *mut cudaDriverEntryPointQueryResult,
}
#[test]
fn bindgen_test_layout_cudaGetDriverEntryPoint_ptsz_v11030_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGetDriverEntryPoint_ptsz_v11030_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGetDriverEntryPoint_ptsz_v11030_params_st>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(cudaGetDriverEntryPoint_ptsz_v11030_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGetDriverEntryPoint_ptsz_v11030_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGetDriverEntryPoint_ptsz_v11030_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).symbol) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGetDriverEntryPoint_ptsz_v11030_params_st),
            "::",
            stringify!(symbol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).funcPtr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGetDriverEntryPoint_ptsz_v11030_params_st),
            "::",
            stringify!(funcPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGetDriverEntryPoint_ptsz_v11030_params_st),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).driverStatus) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGetDriverEntryPoint_ptsz_v11030_params_st),
            "::",
            stringify!(driverStatus)
        )
    );
}
impl Default for cudaGetDriverEntryPoint_ptsz_v11030_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGetDriverEntryPoint_ptsz_v11030_params = cudaGetDriverEntryPoint_ptsz_v11030_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGetFuncBySymbol_v11000_params_st {
    pub functionPtr: *mut cudaFunction_t,
    pub symbolPtr: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_cudaGetFuncBySymbol_v11000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGetFuncBySymbol_v11000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGetFuncBySymbol_v11000_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaGetFuncBySymbol_v11000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGetFuncBySymbol_v11000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGetFuncBySymbol_v11000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).functionPtr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGetFuncBySymbol_v11000_params_st),
            "::",
            stringify!(functionPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).symbolPtr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGetFuncBySymbol_v11000_params_st),
            "::",
            stringify!(symbolPtr)
        )
    );
}
impl Default for cudaGetFuncBySymbol_v11000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGetFuncBySymbol_v11000_params = cudaGetFuncBySymbol_v11000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemcpy_v3020_params_st {
    pub dst: *mut ::std::os::raw::c_void,
    pub src: *const ::std::os::raw::c_void,
    pub count: usize,
    pub kind: cudaMemcpyKind,
}
#[test]
fn bindgen_test_layout_cudaMemcpy_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemcpy_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemcpy_v3020_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cudaMemcpy_v3020_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemcpy_v3020_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaMemcpy_v3020_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy_v3020_params_st),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy_v3020_params_st),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy_v3020_params_st),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy_v3020_params_st),
            "::",
            stringify!(kind)
        )
    );
}
impl Default for cudaMemcpy_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemcpy_v3020_params = cudaMemcpy_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemcpyToSymbol_v3020_params_st {
    pub symbol: *const ::std::os::raw::c_void,
    pub src: *const ::std::os::raw::c_void,
    pub count: usize,
    pub offset: usize,
    pub kind: cudaMemcpyKind,
}
#[test]
fn bindgen_test_layout_cudaMemcpyToSymbol_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemcpyToSymbol_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemcpyToSymbol_v3020_params_st>(),
        40usize,
        concat!("Size of: ", stringify!(cudaMemcpyToSymbol_v3020_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemcpyToSymbol_v3020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMemcpyToSymbol_v3020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).symbol) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyToSymbol_v3020_params_st),
            "::",
            stringify!(symbol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyToSymbol_v3020_params_st),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyToSymbol_v3020_params_st),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyToSymbol_v3020_params_st),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyToSymbol_v3020_params_st),
            "::",
            stringify!(kind)
        )
    );
}
impl Default for cudaMemcpyToSymbol_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemcpyToSymbol_v3020_params = cudaMemcpyToSymbol_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemcpyFromSymbol_v3020_params_st {
    pub dst: *mut ::std::os::raw::c_void,
    pub symbol: *const ::std::os::raw::c_void,
    pub count: usize,
    pub offset: usize,
    pub kind: cudaMemcpyKind,
}
#[test]
fn bindgen_test_layout_cudaMemcpyFromSymbol_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemcpyFromSymbol_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemcpyFromSymbol_v3020_params_st>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(cudaMemcpyFromSymbol_v3020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemcpyFromSymbol_v3020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMemcpyFromSymbol_v3020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyFromSymbol_v3020_params_st),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).symbol) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyFromSymbol_v3020_params_st),
            "::",
            stringify!(symbol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyFromSymbol_v3020_params_st),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyFromSymbol_v3020_params_st),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyFromSymbol_v3020_params_st),
            "::",
            stringify!(kind)
        )
    );
}
impl Default for cudaMemcpyFromSymbol_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemcpyFromSymbol_v3020_params = cudaMemcpyFromSymbol_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemcpy2D_v3020_params_st {
    pub dst: *mut ::std::os::raw::c_void,
    pub dpitch: usize,
    pub src: *const ::std::os::raw::c_void,
    pub spitch: usize,
    pub width: usize,
    pub height: usize,
    pub kind: cudaMemcpyKind,
}
#[test]
fn bindgen_test_layout_cudaMemcpy2D_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemcpy2D_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemcpy2D_v3020_params_st>(),
        56usize,
        concat!("Size of: ", stringify!(cudaMemcpy2D_v3020_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemcpy2D_v3020_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaMemcpy2D_v3020_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2D_v3020_params_st),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dpitch) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2D_v3020_params_st),
            "::",
            stringify!(dpitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2D_v3020_params_st),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spitch) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2D_v3020_params_st),
            "::",
            stringify!(spitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2D_v3020_params_st),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2D_v3020_params_st),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2D_v3020_params_st),
            "::",
            stringify!(kind)
        )
    );
}
impl Default for cudaMemcpy2D_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemcpy2D_v3020_params = cudaMemcpy2D_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemcpyToArray_v3020_params_st {
    pub dst: cudaArray_t,
    pub wOffset: usize,
    pub hOffset: usize,
    pub src: *const ::std::os::raw::c_void,
    pub count: usize,
    pub kind: cudaMemcpyKind,
}
#[test]
fn bindgen_test_layout_cudaMemcpyToArray_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemcpyToArray_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemcpyToArray_v3020_params_st>(),
        48usize,
        concat!("Size of: ", stringify!(cudaMemcpyToArray_v3020_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemcpyToArray_v3020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMemcpyToArray_v3020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyToArray_v3020_params_st),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wOffset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyToArray_v3020_params_st),
            "::",
            stringify!(wOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hOffset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyToArray_v3020_params_st),
            "::",
            stringify!(hOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyToArray_v3020_params_st),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyToArray_v3020_params_st),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyToArray_v3020_params_st),
            "::",
            stringify!(kind)
        )
    );
}
impl Default for cudaMemcpyToArray_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemcpyToArray_v3020_params = cudaMemcpyToArray_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemcpy2DToArray_v3020_params_st {
    pub dst: cudaArray_t,
    pub wOffset: usize,
    pub hOffset: usize,
    pub src: *const ::std::os::raw::c_void,
    pub spitch: usize,
    pub width: usize,
    pub height: usize,
    pub kind: cudaMemcpyKind,
}
#[test]
fn bindgen_test_layout_cudaMemcpy2DToArray_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemcpy2DToArray_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemcpy2DToArray_v3020_params_st>(),
        64usize,
        concat!("Size of: ", stringify!(cudaMemcpy2DToArray_v3020_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemcpy2DToArray_v3020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMemcpy2DToArray_v3020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DToArray_v3020_params_st),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wOffset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DToArray_v3020_params_st),
            "::",
            stringify!(wOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hOffset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DToArray_v3020_params_st),
            "::",
            stringify!(hOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DToArray_v3020_params_st),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spitch) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DToArray_v3020_params_st),
            "::",
            stringify!(spitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DToArray_v3020_params_st),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DToArray_v3020_params_st),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DToArray_v3020_params_st),
            "::",
            stringify!(kind)
        )
    );
}
impl Default for cudaMemcpy2DToArray_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemcpy2DToArray_v3020_params = cudaMemcpy2DToArray_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemcpyFromArray_v3020_params_st {
    pub dst: *mut ::std::os::raw::c_void,
    pub src: cudaArray_const_t,
    pub wOffset: usize,
    pub hOffset: usize,
    pub count: usize,
    pub kind: cudaMemcpyKind,
}
#[test]
fn bindgen_test_layout_cudaMemcpyFromArray_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemcpyFromArray_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemcpyFromArray_v3020_params_st>(),
        48usize,
        concat!("Size of: ", stringify!(cudaMemcpyFromArray_v3020_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemcpyFromArray_v3020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMemcpyFromArray_v3020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyFromArray_v3020_params_st),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyFromArray_v3020_params_st),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wOffset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyFromArray_v3020_params_st),
            "::",
            stringify!(wOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hOffset) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyFromArray_v3020_params_st),
            "::",
            stringify!(hOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyFromArray_v3020_params_st),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyFromArray_v3020_params_st),
            "::",
            stringify!(kind)
        )
    );
}
impl Default for cudaMemcpyFromArray_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemcpyFromArray_v3020_params = cudaMemcpyFromArray_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemcpy2DFromArray_v3020_params_st {
    pub dst: *mut ::std::os::raw::c_void,
    pub dpitch: usize,
    pub src: cudaArray_const_t,
    pub wOffset: usize,
    pub hOffset: usize,
    pub width: usize,
    pub height: usize,
    pub kind: cudaMemcpyKind,
}
#[test]
fn bindgen_test_layout_cudaMemcpy2DFromArray_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemcpy2DFromArray_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemcpy2DFromArray_v3020_params_st>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(cudaMemcpy2DFromArray_v3020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemcpy2DFromArray_v3020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMemcpy2DFromArray_v3020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DFromArray_v3020_params_st),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dpitch) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DFromArray_v3020_params_st),
            "::",
            stringify!(dpitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DFromArray_v3020_params_st),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wOffset) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DFromArray_v3020_params_st),
            "::",
            stringify!(wOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hOffset) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DFromArray_v3020_params_st),
            "::",
            stringify!(hOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DFromArray_v3020_params_st),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DFromArray_v3020_params_st),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DFromArray_v3020_params_st),
            "::",
            stringify!(kind)
        )
    );
}
impl Default for cudaMemcpy2DFromArray_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemcpy2DFromArray_v3020_params = cudaMemcpy2DFromArray_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemcpyArrayToArray_v3020_params_st {
    pub dst: cudaArray_t,
    pub wOffsetDst: usize,
    pub hOffsetDst: usize,
    pub src: cudaArray_const_t,
    pub wOffsetSrc: usize,
    pub hOffsetSrc: usize,
    pub count: usize,
    pub kind: cudaMemcpyKind,
}
#[test]
fn bindgen_test_layout_cudaMemcpyArrayToArray_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemcpyArrayToArray_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemcpyArrayToArray_v3020_params_st>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(cudaMemcpyArrayToArray_v3020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemcpyArrayToArray_v3020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMemcpyArrayToArray_v3020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyArrayToArray_v3020_params_st),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wOffsetDst) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyArrayToArray_v3020_params_st),
            "::",
            stringify!(wOffsetDst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hOffsetDst) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyArrayToArray_v3020_params_st),
            "::",
            stringify!(hOffsetDst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyArrayToArray_v3020_params_st),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wOffsetSrc) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyArrayToArray_v3020_params_st),
            "::",
            stringify!(wOffsetSrc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hOffsetSrc) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyArrayToArray_v3020_params_st),
            "::",
            stringify!(hOffsetSrc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyArrayToArray_v3020_params_st),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyArrayToArray_v3020_params_st),
            "::",
            stringify!(kind)
        )
    );
}
impl Default for cudaMemcpyArrayToArray_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemcpyArrayToArray_v3020_params = cudaMemcpyArrayToArray_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemcpy2DArrayToArray_v3020_params_st {
    pub dst: cudaArray_t,
    pub wOffsetDst: usize,
    pub hOffsetDst: usize,
    pub src: cudaArray_const_t,
    pub wOffsetSrc: usize,
    pub hOffsetSrc: usize,
    pub width: usize,
    pub height: usize,
    pub kind: cudaMemcpyKind,
}
#[test]
fn bindgen_test_layout_cudaMemcpy2DArrayToArray_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemcpy2DArrayToArray_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemcpy2DArrayToArray_v3020_params_st>(),
        72usize,
        concat!(
            "Size of: ",
            stringify!(cudaMemcpy2DArrayToArray_v3020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemcpy2DArrayToArray_v3020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMemcpy2DArrayToArray_v3020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DArrayToArray_v3020_params_st),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wOffsetDst) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DArrayToArray_v3020_params_st),
            "::",
            stringify!(wOffsetDst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hOffsetDst) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DArrayToArray_v3020_params_st),
            "::",
            stringify!(hOffsetDst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DArrayToArray_v3020_params_st),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wOffsetSrc) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DArrayToArray_v3020_params_st),
            "::",
            stringify!(wOffsetSrc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hOffsetSrc) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DArrayToArray_v3020_params_st),
            "::",
            stringify!(hOffsetSrc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DArrayToArray_v3020_params_st),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DArrayToArray_v3020_params_st),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DArrayToArray_v3020_params_st),
            "::",
            stringify!(kind)
        )
    );
}
impl Default for cudaMemcpy2DArrayToArray_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemcpy2DArrayToArray_v3020_params = cudaMemcpy2DArrayToArray_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemcpy3D_v3020_params_st {
    pub p: *const cudaMemcpy3DParms,
}
#[test]
fn bindgen_test_layout_cudaMemcpy3D_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemcpy3D_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemcpy3D_v3020_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cudaMemcpy3D_v3020_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemcpy3D_v3020_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaMemcpy3D_v3020_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy3D_v3020_params_st),
            "::",
            stringify!(p)
        )
    );
}
impl Default for cudaMemcpy3D_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemcpy3D_v3020_params = cudaMemcpy3D_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemcpy3DPeer_v4000_params_st {
    pub p: *const cudaMemcpy3DPeerParms,
}
#[test]
fn bindgen_test_layout_cudaMemcpy3DPeer_v4000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemcpy3DPeer_v4000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemcpy3DPeer_v4000_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cudaMemcpy3DPeer_v4000_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemcpy3DPeer_v4000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMemcpy3DPeer_v4000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy3DPeer_v4000_params_st),
            "::",
            stringify!(p)
        )
    );
}
impl Default for cudaMemcpy3DPeer_v4000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemcpy3DPeer_v4000_params = cudaMemcpy3DPeer_v4000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemset_v3020_params_st {
    pub devPtr: *mut ::std::os::raw::c_void,
    pub value: ::std::os::raw::c_int,
    pub count: usize,
}
#[test]
fn bindgen_test_layout_cudaMemset_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemset_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemset_v3020_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cudaMemset_v3020_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemset_v3020_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaMemset_v3020_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).devPtr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemset_v3020_params_st),
            "::",
            stringify!(devPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemset_v3020_params_st),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemset_v3020_params_st),
            "::",
            stringify!(count)
        )
    );
}
impl Default for cudaMemset_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemset_v3020_params = cudaMemset_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemset2D_v3020_params_st {
    pub devPtr: *mut ::std::os::raw::c_void,
    pub pitch: usize,
    pub value: ::std::os::raw::c_int,
    pub width: usize,
    pub height: usize,
}
#[test]
fn bindgen_test_layout_cudaMemset2D_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemset2D_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemset2D_v3020_params_st>(),
        40usize,
        concat!("Size of: ", stringify!(cudaMemset2D_v3020_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemset2D_v3020_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaMemset2D_v3020_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).devPtr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemset2D_v3020_params_st),
            "::",
            stringify!(devPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pitch) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemset2D_v3020_params_st),
            "::",
            stringify!(pitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemset2D_v3020_params_st),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemset2D_v3020_params_st),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemset2D_v3020_params_st),
            "::",
            stringify!(height)
        )
    );
}
impl Default for cudaMemset2D_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemset2D_v3020_params = cudaMemset2D_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemset3D_v3020_params_st {
    pub pitchedDevPtr: cudaPitchedPtr,
    pub value: ::std::os::raw::c_int,
    pub extent: cudaExtent,
}
#[test]
fn bindgen_test_layout_cudaMemset3D_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemset3D_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemset3D_v3020_params_st>(),
        64usize,
        concat!("Size of: ", stringify!(cudaMemset3D_v3020_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemset3D_v3020_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaMemset3D_v3020_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pitchedDevPtr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemset3D_v3020_params_st),
            "::",
            stringify!(pitchedDevPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemset3D_v3020_params_st),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extent) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemset3D_v3020_params_st),
            "::",
            stringify!(extent)
        )
    );
}
impl Default for cudaMemset3D_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemset3D_v3020_params = cudaMemset3D_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemcpyAsync_v3020_params_st {
    pub dst: *mut ::std::os::raw::c_void,
    pub src: *const ::std::os::raw::c_void,
    pub count: usize,
    pub kind: cudaMemcpyKind,
    pub stream: cudaStream_t,
}
#[test]
fn bindgen_test_layout_cudaMemcpyAsync_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemcpyAsync_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemcpyAsync_v3020_params_st>(),
        40usize,
        concat!("Size of: ", stringify!(cudaMemcpyAsync_v3020_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemcpyAsync_v3020_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaMemcpyAsync_v3020_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyAsync_v3020_params_st),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyAsync_v3020_params_st),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyAsync_v3020_params_st),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyAsync_v3020_params_st),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyAsync_v3020_params_st),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for cudaMemcpyAsync_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemcpyAsync_v3020_params = cudaMemcpyAsync_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemcpyToSymbolAsync_v3020_params_st {
    pub symbol: *const ::std::os::raw::c_void,
    pub src: *const ::std::os::raw::c_void,
    pub count: usize,
    pub offset: usize,
    pub kind: cudaMemcpyKind,
    pub stream: cudaStream_t,
}
#[test]
fn bindgen_test_layout_cudaMemcpyToSymbolAsync_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemcpyToSymbolAsync_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemcpyToSymbolAsync_v3020_params_st>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(cudaMemcpyToSymbolAsync_v3020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemcpyToSymbolAsync_v3020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMemcpyToSymbolAsync_v3020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).symbol) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyToSymbolAsync_v3020_params_st),
            "::",
            stringify!(symbol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyToSymbolAsync_v3020_params_st),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyToSymbolAsync_v3020_params_st),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyToSymbolAsync_v3020_params_st),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyToSymbolAsync_v3020_params_st),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyToSymbolAsync_v3020_params_st),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for cudaMemcpyToSymbolAsync_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemcpyToSymbolAsync_v3020_params = cudaMemcpyToSymbolAsync_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemcpyFromSymbolAsync_v3020_params_st {
    pub dst: *mut ::std::os::raw::c_void,
    pub symbol: *const ::std::os::raw::c_void,
    pub count: usize,
    pub offset: usize,
    pub kind: cudaMemcpyKind,
    pub stream: cudaStream_t,
}
#[test]
fn bindgen_test_layout_cudaMemcpyFromSymbolAsync_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemcpyFromSymbolAsync_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemcpyFromSymbolAsync_v3020_params_st>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(cudaMemcpyFromSymbolAsync_v3020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemcpyFromSymbolAsync_v3020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMemcpyFromSymbolAsync_v3020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyFromSymbolAsync_v3020_params_st),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).symbol) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyFromSymbolAsync_v3020_params_st),
            "::",
            stringify!(symbol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyFromSymbolAsync_v3020_params_st),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyFromSymbolAsync_v3020_params_st),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyFromSymbolAsync_v3020_params_st),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyFromSymbolAsync_v3020_params_st),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for cudaMemcpyFromSymbolAsync_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemcpyFromSymbolAsync_v3020_params = cudaMemcpyFromSymbolAsync_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemcpy2DAsync_v3020_params_st {
    pub dst: *mut ::std::os::raw::c_void,
    pub dpitch: usize,
    pub src: *const ::std::os::raw::c_void,
    pub spitch: usize,
    pub width: usize,
    pub height: usize,
    pub kind: cudaMemcpyKind,
    pub stream: cudaStream_t,
}
#[test]
fn bindgen_test_layout_cudaMemcpy2DAsync_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemcpy2DAsync_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemcpy2DAsync_v3020_params_st>(),
        64usize,
        concat!("Size of: ", stringify!(cudaMemcpy2DAsync_v3020_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemcpy2DAsync_v3020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMemcpy2DAsync_v3020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DAsync_v3020_params_st),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dpitch) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DAsync_v3020_params_st),
            "::",
            stringify!(dpitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DAsync_v3020_params_st),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spitch) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DAsync_v3020_params_st),
            "::",
            stringify!(spitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DAsync_v3020_params_st),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DAsync_v3020_params_st),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DAsync_v3020_params_st),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DAsync_v3020_params_st),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for cudaMemcpy2DAsync_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemcpy2DAsync_v3020_params = cudaMemcpy2DAsync_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemcpyToArrayAsync_v3020_params_st {
    pub dst: cudaArray_t,
    pub wOffset: usize,
    pub hOffset: usize,
    pub src: *const ::std::os::raw::c_void,
    pub count: usize,
    pub kind: cudaMemcpyKind,
    pub stream: cudaStream_t,
}
#[test]
fn bindgen_test_layout_cudaMemcpyToArrayAsync_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemcpyToArrayAsync_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemcpyToArrayAsync_v3020_params_st>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(cudaMemcpyToArrayAsync_v3020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemcpyToArrayAsync_v3020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMemcpyToArrayAsync_v3020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyToArrayAsync_v3020_params_st),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wOffset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyToArrayAsync_v3020_params_st),
            "::",
            stringify!(wOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hOffset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyToArrayAsync_v3020_params_st),
            "::",
            stringify!(hOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyToArrayAsync_v3020_params_st),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyToArrayAsync_v3020_params_st),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyToArrayAsync_v3020_params_st),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyToArrayAsync_v3020_params_st),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for cudaMemcpyToArrayAsync_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemcpyToArrayAsync_v3020_params = cudaMemcpyToArrayAsync_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemcpy2DToArrayAsync_v3020_params_st {
    pub dst: cudaArray_t,
    pub wOffset: usize,
    pub hOffset: usize,
    pub src: *const ::std::os::raw::c_void,
    pub spitch: usize,
    pub width: usize,
    pub height: usize,
    pub kind: cudaMemcpyKind,
    pub stream: cudaStream_t,
}
#[test]
fn bindgen_test_layout_cudaMemcpy2DToArrayAsync_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemcpy2DToArrayAsync_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemcpy2DToArrayAsync_v3020_params_st>(),
        72usize,
        concat!(
            "Size of: ",
            stringify!(cudaMemcpy2DToArrayAsync_v3020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemcpy2DToArrayAsync_v3020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMemcpy2DToArrayAsync_v3020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DToArrayAsync_v3020_params_st),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wOffset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DToArrayAsync_v3020_params_st),
            "::",
            stringify!(wOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hOffset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DToArrayAsync_v3020_params_st),
            "::",
            stringify!(hOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DToArrayAsync_v3020_params_st),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spitch) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DToArrayAsync_v3020_params_st),
            "::",
            stringify!(spitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DToArrayAsync_v3020_params_st),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DToArrayAsync_v3020_params_st),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DToArrayAsync_v3020_params_st),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DToArrayAsync_v3020_params_st),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for cudaMemcpy2DToArrayAsync_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemcpy2DToArrayAsync_v3020_params = cudaMemcpy2DToArrayAsync_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemcpyFromArrayAsync_v3020_params_st {
    pub dst: *mut ::std::os::raw::c_void,
    pub src: cudaArray_const_t,
    pub wOffset: usize,
    pub hOffset: usize,
    pub count: usize,
    pub kind: cudaMemcpyKind,
    pub stream: cudaStream_t,
}
#[test]
fn bindgen_test_layout_cudaMemcpyFromArrayAsync_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemcpyFromArrayAsync_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemcpyFromArrayAsync_v3020_params_st>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(cudaMemcpyFromArrayAsync_v3020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemcpyFromArrayAsync_v3020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMemcpyFromArrayAsync_v3020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyFromArrayAsync_v3020_params_st),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyFromArrayAsync_v3020_params_st),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wOffset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyFromArrayAsync_v3020_params_st),
            "::",
            stringify!(wOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hOffset) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyFromArrayAsync_v3020_params_st),
            "::",
            stringify!(hOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyFromArrayAsync_v3020_params_st),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyFromArrayAsync_v3020_params_st),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpyFromArrayAsync_v3020_params_st),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for cudaMemcpyFromArrayAsync_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemcpyFromArrayAsync_v3020_params = cudaMemcpyFromArrayAsync_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemcpy2DFromArrayAsync_v3020_params_st {
    pub dst: *mut ::std::os::raw::c_void,
    pub dpitch: usize,
    pub src: cudaArray_const_t,
    pub wOffset: usize,
    pub hOffset: usize,
    pub width: usize,
    pub height: usize,
    pub kind: cudaMemcpyKind,
    pub stream: cudaStream_t,
}
#[test]
fn bindgen_test_layout_cudaMemcpy2DFromArrayAsync_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemcpy2DFromArrayAsync_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemcpy2DFromArrayAsync_v3020_params_st>(),
        72usize,
        concat!(
            "Size of: ",
            stringify!(cudaMemcpy2DFromArrayAsync_v3020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemcpy2DFromArrayAsync_v3020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMemcpy2DFromArrayAsync_v3020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DFromArrayAsync_v3020_params_st),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dpitch) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DFromArrayAsync_v3020_params_st),
            "::",
            stringify!(dpitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DFromArrayAsync_v3020_params_st),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wOffset) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DFromArrayAsync_v3020_params_st),
            "::",
            stringify!(wOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hOffset) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DFromArrayAsync_v3020_params_st),
            "::",
            stringify!(hOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DFromArrayAsync_v3020_params_st),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DFromArrayAsync_v3020_params_st),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kind) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DFromArrayAsync_v3020_params_st),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy2DFromArrayAsync_v3020_params_st),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for cudaMemcpy2DFromArrayAsync_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemcpy2DFromArrayAsync_v3020_params = cudaMemcpy2DFromArrayAsync_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemcpy3DAsync_v3020_params_st {
    pub p: *const cudaMemcpy3DParms,
    pub stream: cudaStream_t,
}
#[test]
fn bindgen_test_layout_cudaMemcpy3DAsync_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemcpy3DAsync_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemcpy3DAsync_v3020_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cudaMemcpy3DAsync_v3020_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemcpy3DAsync_v3020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMemcpy3DAsync_v3020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy3DAsync_v3020_params_st),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy3DAsync_v3020_params_st),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for cudaMemcpy3DAsync_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemcpy3DAsync_v3020_params = cudaMemcpy3DAsync_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemcpy3DPeerAsync_v4000_params_st {
    pub p: *const cudaMemcpy3DPeerParms,
    pub stream: cudaStream_t,
}
#[test]
fn bindgen_test_layout_cudaMemcpy3DPeerAsync_v4000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemcpy3DPeerAsync_v4000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemcpy3DPeerAsync_v4000_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaMemcpy3DPeerAsync_v4000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemcpy3DPeerAsync_v4000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMemcpy3DPeerAsync_v4000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy3DPeerAsync_v4000_params_st),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemcpy3DPeerAsync_v4000_params_st),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for cudaMemcpy3DPeerAsync_v4000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemcpy3DPeerAsync_v4000_params = cudaMemcpy3DPeerAsync_v4000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemsetAsync_v3020_params_st {
    pub devPtr: *mut ::std::os::raw::c_void,
    pub value: ::std::os::raw::c_int,
    pub count: usize,
    pub stream: cudaStream_t,
}
#[test]
fn bindgen_test_layout_cudaMemsetAsync_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemsetAsync_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemsetAsync_v3020_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cudaMemsetAsync_v3020_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemsetAsync_v3020_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaMemsetAsync_v3020_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).devPtr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemsetAsync_v3020_params_st),
            "::",
            stringify!(devPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemsetAsync_v3020_params_st),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemsetAsync_v3020_params_st),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemsetAsync_v3020_params_st),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for cudaMemsetAsync_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemsetAsync_v3020_params = cudaMemsetAsync_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemset2DAsync_v3020_params_st {
    pub devPtr: *mut ::std::os::raw::c_void,
    pub pitch: usize,
    pub value: ::std::os::raw::c_int,
    pub width: usize,
    pub height: usize,
    pub stream: cudaStream_t,
}
#[test]
fn bindgen_test_layout_cudaMemset2DAsync_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemset2DAsync_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemset2DAsync_v3020_params_st>(),
        48usize,
        concat!("Size of: ", stringify!(cudaMemset2DAsync_v3020_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemset2DAsync_v3020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMemset2DAsync_v3020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).devPtr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemset2DAsync_v3020_params_st),
            "::",
            stringify!(devPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pitch) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemset2DAsync_v3020_params_st),
            "::",
            stringify!(pitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemset2DAsync_v3020_params_st),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemset2DAsync_v3020_params_st),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemset2DAsync_v3020_params_st),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemset2DAsync_v3020_params_st),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for cudaMemset2DAsync_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemset2DAsync_v3020_params = cudaMemset2DAsync_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemset3DAsync_v3020_params_st {
    pub pitchedDevPtr: cudaPitchedPtr,
    pub value: ::std::os::raw::c_int,
    pub extent: cudaExtent,
    pub stream: cudaStream_t,
}
#[test]
fn bindgen_test_layout_cudaMemset3DAsync_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemset3DAsync_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemset3DAsync_v3020_params_st>(),
        72usize,
        concat!("Size of: ", stringify!(cudaMemset3DAsync_v3020_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemset3DAsync_v3020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMemset3DAsync_v3020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pitchedDevPtr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemset3DAsync_v3020_params_st),
            "::",
            stringify!(pitchedDevPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemset3DAsync_v3020_params_st),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extent) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemset3DAsync_v3020_params_st),
            "::",
            stringify!(extent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemset3DAsync_v3020_params_st),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for cudaMemset3DAsync_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemset3DAsync_v3020_params = cudaMemset3DAsync_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaStreamQuery_v3020_params_st {
    pub stream: cudaStream_t,
}
#[test]
fn bindgen_test_layout_cudaStreamQuery_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaStreamQuery_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaStreamQuery_v3020_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cudaStreamQuery_v3020_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaStreamQuery_v3020_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaStreamQuery_v3020_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamQuery_v3020_params_st),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for cudaStreamQuery_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaStreamQuery_v3020_params = cudaStreamQuery_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaStreamGetFlags_v5050_params_st {
    pub hStream: cudaStream_t,
    pub flags: *mut ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cudaStreamGetFlags_v5050_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaStreamGetFlags_v5050_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaStreamGetFlags_v5050_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cudaStreamGetFlags_v5050_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaStreamGetFlags_v5050_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaStreamGetFlags_v5050_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamGetFlags_v5050_params_st),
            "::",
            stringify!(hStream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamGetFlags_v5050_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cudaStreamGetFlags_v5050_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaStreamGetFlags_v5050_params = cudaStreamGetFlags_v5050_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaStreamGetId_v12000_params_st {
    pub hStream: cudaStream_t,
    pub streamId: *mut ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_cudaStreamGetId_v12000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaStreamGetId_v12000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaStreamGetId_v12000_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cudaStreamGetId_v12000_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaStreamGetId_v12000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaStreamGetId_v12000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamGetId_v12000_params_st),
            "::",
            stringify!(hStream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).streamId) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamGetId_v12000_params_st),
            "::",
            stringify!(streamId)
        )
    );
}
impl Default for cudaStreamGetId_v12000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaStreamGetId_v12000_params = cudaStreamGetId_v12000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaStreamGetPriority_v5050_params_st {
    pub hStream: cudaStream_t,
    pub priority: *mut ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cudaStreamGetPriority_v5050_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaStreamGetPriority_v5050_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaStreamGetPriority_v5050_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaStreamGetPriority_v5050_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaStreamGetPriority_v5050_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaStreamGetPriority_v5050_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamGetPriority_v5050_params_st),
            "::",
            stringify!(hStream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priority) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamGetPriority_v5050_params_st),
            "::",
            stringify!(priority)
        )
    );
}
impl Default for cudaStreamGetPriority_v5050_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaStreamGetPriority_v5050_params = cudaStreamGetPriority_v5050_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaEventRecord_v3020_params_st {
    pub event: cudaEvent_t,
    pub stream: cudaStream_t,
}
#[test]
fn bindgen_test_layout_cudaEventRecord_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaEventRecord_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaEventRecord_v3020_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cudaEventRecord_v3020_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaEventRecord_v3020_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaEventRecord_v3020_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaEventRecord_v3020_params_st),
            "::",
            stringify!(event)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaEventRecord_v3020_params_st),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for cudaEventRecord_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaEventRecord_v3020_params = cudaEventRecord_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaEventRecordWithFlags_v11010_params_st {
    pub event: cudaEvent_t,
    pub stream: cudaStream_t,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cudaEventRecordWithFlags_v11010_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaEventRecordWithFlags_v11010_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaEventRecordWithFlags_v11010_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cudaEventRecordWithFlags_v11010_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaEventRecordWithFlags_v11010_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaEventRecordWithFlags_v11010_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaEventRecordWithFlags_v11010_params_st),
            "::",
            stringify!(event)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaEventRecordWithFlags_v11010_params_st),
            "::",
            stringify!(stream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaEventRecordWithFlags_v11010_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cudaEventRecordWithFlags_v11010_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaEventRecordWithFlags_v11010_params = cudaEventRecordWithFlags_v11010_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaStreamWaitEvent_v3020_params_st {
    pub stream: cudaStream_t,
    pub event: cudaEvent_t,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cudaStreamWaitEvent_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaStreamWaitEvent_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaStreamWaitEvent_v3020_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cudaStreamWaitEvent_v3020_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaStreamWaitEvent_v3020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaStreamWaitEvent_v3020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamWaitEvent_v3020_params_st),
            "::",
            stringify!(stream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamWaitEvent_v3020_params_st),
            "::",
            stringify!(event)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamWaitEvent_v3020_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cudaStreamWaitEvent_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaStreamWaitEvent_v3020_params = cudaStreamWaitEvent_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaStreamAddCallback_v5000_params_st {
    pub stream: cudaStream_t,
    pub callback: cudaStreamCallback_t,
    pub userData: *mut ::std::os::raw::c_void,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cudaStreamAddCallback_v5000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaStreamAddCallback_v5000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaStreamAddCallback_v5000_params_st>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(cudaStreamAddCallback_v5000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaStreamAddCallback_v5000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaStreamAddCallback_v5000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamAddCallback_v5000_params_st),
            "::",
            stringify!(stream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).callback) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamAddCallback_v5000_params_st),
            "::",
            stringify!(callback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).userData) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamAddCallback_v5000_params_st),
            "::",
            stringify!(userData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamAddCallback_v5000_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cudaStreamAddCallback_v5000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaStreamAddCallback_v5000_params = cudaStreamAddCallback_v5000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaStreamAttachMemAsync_v6000_params_st {
    pub stream: cudaStream_t,
    pub devPtr: *mut ::std::os::raw::c_void,
    pub length: usize,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cudaStreamAttachMemAsync_v6000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaStreamAttachMemAsync_v6000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaStreamAttachMemAsync_v6000_params_st>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(cudaStreamAttachMemAsync_v6000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaStreamAttachMemAsync_v6000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaStreamAttachMemAsync_v6000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamAttachMemAsync_v6000_params_st),
            "::",
            stringify!(stream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).devPtr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamAttachMemAsync_v6000_params_st),
            "::",
            stringify!(devPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamAttachMemAsync_v6000_params_st),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamAttachMemAsync_v6000_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cudaStreamAttachMemAsync_v6000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaStreamAttachMemAsync_v6000_params = cudaStreamAttachMemAsync_v6000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaStreamSynchronize_v3020_params_st {
    pub stream: cudaStream_t,
}
#[test]
fn bindgen_test_layout_cudaStreamSynchronize_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaStreamSynchronize_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaStreamSynchronize_v3020_params_st>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(cudaStreamSynchronize_v3020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaStreamSynchronize_v3020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaStreamSynchronize_v3020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamSynchronize_v3020_params_st),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for cudaStreamSynchronize_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaStreamSynchronize_v3020_params = cudaStreamSynchronize_v3020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaLaunchKernel_v7000_params_st {
    pub func: *const ::std::os::raw::c_void,
    pub gridDim: dim3,
    pub blockDim: dim3,
    pub args: *mut *mut ::std::os::raw::c_void,
    pub sharedMem: usize,
    pub stream: cudaStream_t,
}
#[test]
fn bindgen_test_layout_cudaLaunchKernel_v7000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaLaunchKernel_v7000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaLaunchKernel_v7000_params_st>(),
        56usize,
        concat!("Size of: ", stringify!(cudaLaunchKernel_v7000_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaLaunchKernel_v7000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaLaunchKernel_v7000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchKernel_v7000_params_st),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gridDim) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchKernel_v7000_params_st),
            "::",
            stringify!(gridDim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blockDim) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchKernel_v7000_params_st),
            "::",
            stringify!(blockDim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).args) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchKernel_v7000_params_st),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sharedMem) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchKernel_v7000_params_st),
            "::",
            stringify!(sharedMem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchKernel_v7000_params_st),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for cudaLaunchKernel_v7000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaLaunchKernel_v7000_params = cudaLaunchKernel_v7000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaLaunchKernelExC_v11060_params_st {
    pub config: *const cudaLaunchConfig_t,
    pub func: *const ::std::os::raw::c_void,
    pub args: *mut *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_cudaLaunchKernelExC_v11060_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaLaunchKernelExC_v11060_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaLaunchKernelExC_v11060_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cudaLaunchKernelExC_v11060_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaLaunchKernelExC_v11060_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaLaunchKernelExC_v11060_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).config) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchKernelExC_v11060_params_st),
            "::",
            stringify!(config)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchKernelExC_v11060_params_st),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).args) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchKernelExC_v11060_params_st),
            "::",
            stringify!(args)
        )
    );
}
impl Default for cudaLaunchKernelExC_v11060_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaLaunchKernelExC_v11060_params = cudaLaunchKernelExC_v11060_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaLaunchCooperativeKernel_v9000_params_st {
    pub func: *const ::std::os::raw::c_void,
    pub gridDim: dim3,
    pub blockDim: dim3,
    pub args: *mut *mut ::std::os::raw::c_void,
    pub sharedMem: usize,
    pub stream: cudaStream_t,
}
#[test]
fn bindgen_test_layout_cudaLaunchCooperativeKernel_v9000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaLaunchCooperativeKernel_v9000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaLaunchCooperativeKernel_v9000_params_st>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(cudaLaunchCooperativeKernel_v9000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaLaunchCooperativeKernel_v9000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaLaunchCooperativeKernel_v9000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchCooperativeKernel_v9000_params_st),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gridDim) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchCooperativeKernel_v9000_params_st),
            "::",
            stringify!(gridDim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blockDim) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchCooperativeKernel_v9000_params_st),
            "::",
            stringify!(blockDim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).args) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchCooperativeKernel_v9000_params_st),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sharedMem) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchCooperativeKernel_v9000_params_st),
            "::",
            stringify!(sharedMem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchCooperativeKernel_v9000_params_st),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for cudaLaunchCooperativeKernel_v9000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaLaunchCooperativeKernel_v9000_params = cudaLaunchCooperativeKernel_v9000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaLaunchHostFunc_v10000_params_st {
    pub stream: cudaStream_t,
    pub fn_: cudaHostFn_t,
    pub userData: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_cudaLaunchHostFunc_v10000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaLaunchHostFunc_v10000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaLaunchHostFunc_v10000_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cudaLaunchHostFunc_v10000_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaLaunchHostFunc_v10000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaLaunchHostFunc_v10000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchHostFunc_v10000_params_st),
            "::",
            stringify!(stream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fn_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchHostFunc_v10000_params_st),
            "::",
            stringify!(fn_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).userData) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaLaunchHostFunc_v10000_params_st),
            "::",
            stringify!(userData)
        )
    );
}
impl Default for cudaLaunchHostFunc_v10000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaLaunchHostFunc_v10000_params = cudaLaunchHostFunc_v10000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMemPrefetchAsync_v8000_params_st {
    pub devPtr: *const ::std::os::raw::c_void,
    pub count: usize,
    pub dstDevice: ::std::os::raw::c_int,
    pub stream: cudaStream_t,
}
#[test]
fn bindgen_test_layout_cudaMemPrefetchAsync_v8000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMemPrefetchAsync_v8000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMemPrefetchAsync_v8000_params_st>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(cudaMemPrefetchAsync_v8000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMemPrefetchAsync_v8000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMemPrefetchAsync_v8000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).devPtr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemPrefetchAsync_v8000_params_st),
            "::",
            stringify!(devPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemPrefetchAsync_v8000_params_st),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstDevice) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemPrefetchAsync_v8000_params_st),
            "::",
            stringify!(dstDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMemPrefetchAsync_v8000_params_st),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for cudaMemPrefetchAsync_v8000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMemPrefetchAsync_v8000_params = cudaMemPrefetchAsync_v8000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaSignalExternalSemaphoresAsync_v10000_params_st {
    pub extSemArray: *const cudaExternalSemaphore_t,
    pub paramsArray: *const cudaExternalSemaphoreSignalParams_v1,
    pub numExtSems: ::std::os::raw::c_uint,
    pub stream: cudaStream_t,
}
#[test]
fn bindgen_test_layout_cudaSignalExternalSemaphoresAsync_v10000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaSignalExternalSemaphoresAsync_v10000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaSignalExternalSemaphoresAsync_v10000_params_st>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(cudaSignalExternalSemaphoresAsync_v10000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaSignalExternalSemaphoresAsync_v10000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaSignalExternalSemaphoresAsync_v10000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extSemArray) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaSignalExternalSemaphoresAsync_v10000_params_st),
            "::",
            stringify!(extSemArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paramsArray) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaSignalExternalSemaphoresAsync_v10000_params_st),
            "::",
            stringify!(paramsArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numExtSems) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaSignalExternalSemaphoresAsync_v10000_params_st),
            "::",
            stringify!(numExtSems)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaSignalExternalSemaphoresAsync_v10000_params_st),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for cudaSignalExternalSemaphoresAsync_v10000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaSignalExternalSemaphoresAsync_v10000_params =
    cudaSignalExternalSemaphoresAsync_v10000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaSignalExternalSemaphoresAsync_ptsz_v10000_params_st {
    pub extSemArray: *const cudaExternalSemaphore_t,
    pub paramsArray: *const cudaExternalSemaphoreSignalParams_v1,
    pub numExtSems: ::std::os::raw::c_uint,
    pub stream: cudaStream_t,
}
#[test]
fn bindgen_test_layout_cudaSignalExternalSemaphoresAsync_ptsz_v10000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaSignalExternalSemaphoresAsync_ptsz_v10000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaSignalExternalSemaphoresAsync_ptsz_v10000_params_st>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(cudaSignalExternalSemaphoresAsync_ptsz_v10000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaSignalExternalSemaphoresAsync_ptsz_v10000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaSignalExternalSemaphoresAsync_ptsz_v10000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extSemArray) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaSignalExternalSemaphoresAsync_ptsz_v10000_params_st),
            "::",
            stringify!(extSemArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paramsArray) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaSignalExternalSemaphoresAsync_ptsz_v10000_params_st),
            "::",
            stringify!(paramsArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numExtSems) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaSignalExternalSemaphoresAsync_ptsz_v10000_params_st),
            "::",
            stringify!(numExtSems)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaSignalExternalSemaphoresAsync_ptsz_v10000_params_st),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for cudaSignalExternalSemaphoresAsync_ptsz_v10000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaSignalExternalSemaphoresAsync_ptsz_v10000_params =
    cudaSignalExternalSemaphoresAsync_ptsz_v10000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaSignalExternalSemaphoresAsync_v2_v11020_params_st {
    pub extSemArray: *const cudaExternalSemaphore_t,
    pub paramsArray: *const cudaExternalSemaphoreSignalParams,
    pub numExtSems: ::std::os::raw::c_uint,
    pub stream: cudaStream_t,
}
#[test]
fn bindgen_test_layout_cudaSignalExternalSemaphoresAsync_v2_v11020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaSignalExternalSemaphoresAsync_v2_v11020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaSignalExternalSemaphoresAsync_v2_v11020_params_st>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(cudaSignalExternalSemaphoresAsync_v2_v11020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaSignalExternalSemaphoresAsync_v2_v11020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaSignalExternalSemaphoresAsync_v2_v11020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extSemArray) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaSignalExternalSemaphoresAsync_v2_v11020_params_st),
            "::",
            stringify!(extSemArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paramsArray) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaSignalExternalSemaphoresAsync_v2_v11020_params_st),
            "::",
            stringify!(paramsArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numExtSems) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaSignalExternalSemaphoresAsync_v2_v11020_params_st),
            "::",
            stringify!(numExtSems)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaSignalExternalSemaphoresAsync_v2_v11020_params_st),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for cudaSignalExternalSemaphoresAsync_v2_v11020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaSignalExternalSemaphoresAsync_v2_v11020_params =
    cudaSignalExternalSemaphoresAsync_v2_v11020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaWaitExternalSemaphoresAsync_v10000_params_st {
    pub extSemArray: *const cudaExternalSemaphore_t,
    pub paramsArray: *const cudaExternalSemaphoreWaitParams_v1,
    pub numExtSems: ::std::os::raw::c_uint,
    pub stream: cudaStream_t,
}
#[test]
fn bindgen_test_layout_cudaWaitExternalSemaphoresAsync_v10000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaWaitExternalSemaphoresAsync_v10000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaWaitExternalSemaphoresAsync_v10000_params_st>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(cudaWaitExternalSemaphoresAsync_v10000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaWaitExternalSemaphoresAsync_v10000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaWaitExternalSemaphoresAsync_v10000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extSemArray) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaWaitExternalSemaphoresAsync_v10000_params_st),
            "::",
            stringify!(extSemArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paramsArray) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaWaitExternalSemaphoresAsync_v10000_params_st),
            "::",
            stringify!(paramsArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numExtSems) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaWaitExternalSemaphoresAsync_v10000_params_st),
            "::",
            stringify!(numExtSems)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaWaitExternalSemaphoresAsync_v10000_params_st),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for cudaWaitExternalSemaphoresAsync_v10000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaWaitExternalSemaphoresAsync_v10000_params =
    cudaWaitExternalSemaphoresAsync_v10000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaWaitExternalSemaphoresAsync_ptsz_v10000_params_st {
    pub extSemArray: *const cudaExternalSemaphore_t,
    pub paramsArray: *const cudaExternalSemaphoreWaitParams_v1,
    pub numExtSems: ::std::os::raw::c_uint,
    pub stream: cudaStream_t,
}
#[test]
fn bindgen_test_layout_cudaWaitExternalSemaphoresAsync_ptsz_v10000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaWaitExternalSemaphoresAsync_ptsz_v10000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaWaitExternalSemaphoresAsync_ptsz_v10000_params_st>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(cudaWaitExternalSemaphoresAsync_ptsz_v10000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaWaitExternalSemaphoresAsync_ptsz_v10000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaWaitExternalSemaphoresAsync_ptsz_v10000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extSemArray) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaWaitExternalSemaphoresAsync_ptsz_v10000_params_st),
            "::",
            stringify!(extSemArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paramsArray) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaWaitExternalSemaphoresAsync_ptsz_v10000_params_st),
            "::",
            stringify!(paramsArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numExtSems) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaWaitExternalSemaphoresAsync_ptsz_v10000_params_st),
            "::",
            stringify!(numExtSems)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaWaitExternalSemaphoresAsync_ptsz_v10000_params_st),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for cudaWaitExternalSemaphoresAsync_ptsz_v10000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaWaitExternalSemaphoresAsync_ptsz_v10000_params =
    cudaWaitExternalSemaphoresAsync_ptsz_v10000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaWaitExternalSemaphoresAsync_v2_v11020_params_st {
    pub extSemArray: *const cudaExternalSemaphore_t,
    pub paramsArray: *const cudaExternalSemaphoreWaitParams,
    pub numExtSems: ::std::os::raw::c_uint,
    pub stream: cudaStream_t,
}
#[test]
fn bindgen_test_layout_cudaWaitExternalSemaphoresAsync_v2_v11020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaWaitExternalSemaphoresAsync_v2_v11020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaWaitExternalSemaphoresAsync_v2_v11020_params_st>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(cudaWaitExternalSemaphoresAsync_v2_v11020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaWaitExternalSemaphoresAsync_v2_v11020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaWaitExternalSemaphoresAsync_v2_v11020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extSemArray) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaWaitExternalSemaphoresAsync_v2_v11020_params_st),
            "::",
            stringify!(extSemArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paramsArray) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaWaitExternalSemaphoresAsync_v2_v11020_params_st),
            "::",
            stringify!(paramsArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numExtSems) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaWaitExternalSemaphoresAsync_v2_v11020_params_st),
            "::",
            stringify!(numExtSems)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaWaitExternalSemaphoresAsync_v2_v11020_params_st),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for cudaWaitExternalSemaphoresAsync_v2_v11020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaWaitExternalSemaphoresAsync_v2_v11020_params =
    cudaWaitExternalSemaphoresAsync_v2_v11020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphInstantiateWithParams_v12000_params_st {
    pub pGraphExec: *mut cudaGraphExec_t,
    pub graph: cudaGraph_t,
    pub instantiateParams: *mut cudaGraphInstantiateParams,
}
#[test]
fn bindgen_test_layout_cudaGraphInstantiateWithParams_v12000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphInstantiateWithParams_v12000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphInstantiateWithParams_v12000_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cudaGraphInstantiateWithParams_v12000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphInstantiateWithParams_v12000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphInstantiateWithParams_v12000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pGraphExec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphInstantiateWithParams_v12000_params_st),
            "::",
            stringify!(pGraphExec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graph) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphInstantiateWithParams_v12000_params_st),
            "::",
            stringify!(graph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).instantiateParams) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphInstantiateWithParams_v12000_params_st),
            "::",
            stringify!(instantiateParams)
        )
    );
}
impl Default for cudaGraphInstantiateWithParams_v12000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphInstantiateWithParams_v12000_params =
    cudaGraphInstantiateWithParams_v12000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphUpload_v10000_params_st {
    pub graphExec: cudaGraphExec_t,
    pub stream: cudaStream_t,
}
#[test]
fn bindgen_test_layout_cudaGraphUpload_v10000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphUpload_v10000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphUpload_v10000_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cudaGraphUpload_v10000_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphUpload_v10000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphUpload_v10000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graphExec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphUpload_v10000_params_st),
            "::",
            stringify!(graphExec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphUpload_v10000_params_st),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for cudaGraphUpload_v10000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphUpload_v10000_params = cudaGraphUpload_v10000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGraphLaunch_v10000_params_st {
    pub graphExec: cudaGraphExec_t,
    pub stream: cudaStream_t,
}
#[test]
fn bindgen_test_layout_cudaGraphLaunch_v10000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGraphLaunch_v10000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGraphLaunch_v10000_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cudaGraphLaunch_v10000_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGraphLaunch_v10000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGraphLaunch_v10000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graphExec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphLaunch_v10000_params_st),
            "::",
            stringify!(graphExec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGraphLaunch_v10000_params_st),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for cudaGraphLaunch_v10000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGraphLaunch_v10000_params = cudaGraphLaunch_v10000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaStreamBeginCapture_v10000_params_st {
    pub stream: cudaStream_t,
    pub mode: cudaStreamCaptureMode,
}
#[test]
fn bindgen_test_layout_cudaStreamBeginCapture_v10000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaStreamBeginCapture_v10000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaStreamBeginCapture_v10000_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaStreamBeginCapture_v10000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaStreamBeginCapture_v10000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaStreamBeginCapture_v10000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamBeginCapture_v10000_params_st),
            "::",
            stringify!(stream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamBeginCapture_v10000_params_st),
            "::",
            stringify!(mode)
        )
    );
}
impl Default for cudaStreamBeginCapture_v10000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaStreamBeginCapture_v10000_params = cudaStreamBeginCapture_v10000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaStreamEndCapture_v10000_params_st {
    pub stream: cudaStream_t,
    pub pGraph: *mut cudaGraph_t,
}
#[test]
fn bindgen_test_layout_cudaStreamEndCapture_v10000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaStreamEndCapture_v10000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaStreamEndCapture_v10000_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaStreamEndCapture_v10000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaStreamEndCapture_v10000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaStreamEndCapture_v10000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamEndCapture_v10000_params_st),
            "::",
            stringify!(stream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pGraph) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamEndCapture_v10000_params_st),
            "::",
            stringify!(pGraph)
        )
    );
}
impl Default for cudaStreamEndCapture_v10000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaStreamEndCapture_v10000_params = cudaStreamEndCapture_v10000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaStreamIsCapturing_v10000_params_st {
    pub stream: cudaStream_t,
    pub pCaptureStatus: *mut cudaStreamCaptureStatus,
}
#[test]
fn bindgen_test_layout_cudaStreamIsCapturing_v10000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaStreamIsCapturing_v10000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaStreamIsCapturing_v10000_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaStreamIsCapturing_v10000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaStreamIsCapturing_v10000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaStreamIsCapturing_v10000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamIsCapturing_v10000_params_st),
            "::",
            stringify!(stream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCaptureStatus) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamIsCapturing_v10000_params_st),
            "::",
            stringify!(pCaptureStatus)
        )
    );
}
impl Default for cudaStreamIsCapturing_v10000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaStreamIsCapturing_v10000_params = cudaStreamIsCapturing_v10000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaStreamGetCaptureInfo_v10010_params_st {
    pub stream: cudaStream_t,
    pub captureStatus_out: *mut cudaStreamCaptureStatus,
    pub id_out: *mut ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_cudaStreamGetCaptureInfo_v10010_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaStreamGetCaptureInfo_v10010_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaStreamGetCaptureInfo_v10010_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cudaStreamGetCaptureInfo_v10010_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaStreamGetCaptureInfo_v10010_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaStreamGetCaptureInfo_v10010_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamGetCaptureInfo_v10010_params_st),
            "::",
            stringify!(stream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).captureStatus_out) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamGetCaptureInfo_v10010_params_st),
            "::",
            stringify!(captureStatus_out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id_out) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamGetCaptureInfo_v10010_params_st),
            "::",
            stringify!(id_out)
        )
    );
}
impl Default for cudaStreamGetCaptureInfo_v10010_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaStreamGetCaptureInfo_v10010_params = cudaStreamGetCaptureInfo_v10010_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaStreamGetCaptureInfo_ptsz_v10010_params_st {
    pub stream: cudaStream_t,
    pub captureStatus_out: *mut cudaStreamCaptureStatus,
    pub id_out: *mut ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_cudaStreamGetCaptureInfo_ptsz_v10010_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaStreamGetCaptureInfo_ptsz_v10010_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaStreamGetCaptureInfo_ptsz_v10010_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cudaStreamGetCaptureInfo_ptsz_v10010_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaStreamGetCaptureInfo_ptsz_v10010_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaStreamGetCaptureInfo_ptsz_v10010_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamGetCaptureInfo_ptsz_v10010_params_st),
            "::",
            stringify!(stream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).captureStatus_out) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamGetCaptureInfo_ptsz_v10010_params_st),
            "::",
            stringify!(captureStatus_out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id_out) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamGetCaptureInfo_ptsz_v10010_params_st),
            "::",
            stringify!(id_out)
        )
    );
}
impl Default for cudaStreamGetCaptureInfo_ptsz_v10010_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaStreamGetCaptureInfo_ptsz_v10010_params =
    cudaStreamGetCaptureInfo_ptsz_v10010_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaStreamGetCaptureInfo_v2_v11030_params_st {
    pub stream: cudaStream_t,
    pub captureStatus_out: *mut cudaStreamCaptureStatus,
    pub id_out: *mut ::std::os::raw::c_ulonglong,
    pub graph_out: *mut cudaGraph_t,
    pub dependencies_out: *mut *const cudaGraphNode_t,
    pub numDependencies_out: *mut usize,
}
#[test]
fn bindgen_test_layout_cudaStreamGetCaptureInfo_v2_v11030_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaStreamGetCaptureInfo_v2_v11030_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaStreamGetCaptureInfo_v2_v11030_params_st>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(cudaStreamGetCaptureInfo_v2_v11030_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaStreamGetCaptureInfo_v2_v11030_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaStreamGetCaptureInfo_v2_v11030_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamGetCaptureInfo_v2_v11030_params_st),
            "::",
            stringify!(stream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).captureStatus_out) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamGetCaptureInfo_v2_v11030_params_st),
            "::",
            stringify!(captureStatus_out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id_out) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamGetCaptureInfo_v2_v11030_params_st),
            "::",
            stringify!(id_out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graph_out) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamGetCaptureInfo_v2_v11030_params_st),
            "::",
            stringify!(graph_out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dependencies_out) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamGetCaptureInfo_v2_v11030_params_st),
            "::",
            stringify!(dependencies_out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numDependencies_out) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamGetCaptureInfo_v2_v11030_params_st),
            "::",
            stringify!(numDependencies_out)
        )
    );
}
impl Default for cudaStreamGetCaptureInfo_v2_v11030_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaStreamGetCaptureInfo_v2_v11030_params = cudaStreamGetCaptureInfo_v2_v11030_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaStreamUpdateCaptureDependencies_ptsz_v11030_params_st {
    pub stream: cudaStream_t,
    pub dependencies: *mut cudaGraphNode_t,
    pub numDependencies: usize,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cudaStreamUpdateCaptureDependencies_ptsz_v11030_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<
        cudaStreamUpdateCaptureDependencies_ptsz_v11030_params_st,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaStreamUpdateCaptureDependencies_ptsz_v11030_params_st>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(cudaStreamUpdateCaptureDependencies_ptsz_v11030_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaStreamUpdateCaptureDependencies_ptsz_v11030_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaStreamUpdateCaptureDependencies_ptsz_v11030_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamUpdateCaptureDependencies_ptsz_v11030_params_st),
            "::",
            stringify!(stream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dependencies) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamUpdateCaptureDependencies_ptsz_v11030_params_st),
            "::",
            stringify!(dependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numDependencies) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamUpdateCaptureDependencies_ptsz_v11030_params_st),
            "::",
            stringify!(numDependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamUpdateCaptureDependencies_ptsz_v11030_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cudaStreamUpdateCaptureDependencies_ptsz_v11030_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaStreamUpdateCaptureDependencies_ptsz_v11030_params =
    cudaStreamUpdateCaptureDependencies_ptsz_v11030_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaStreamCopyAttributes_v11000_params_st {
    pub dstStream: cudaStream_t,
    pub srcStream: cudaStream_t,
}
#[test]
fn bindgen_test_layout_cudaStreamCopyAttributes_v11000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaStreamCopyAttributes_v11000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaStreamCopyAttributes_v11000_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaStreamCopyAttributes_v11000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaStreamCopyAttributes_v11000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaStreamCopyAttributes_v11000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstStream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamCopyAttributes_v11000_params_st),
            "::",
            stringify!(dstStream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcStream) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamCopyAttributes_v11000_params_st),
            "::",
            stringify!(srcStream)
        )
    );
}
impl Default for cudaStreamCopyAttributes_v11000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaStreamCopyAttributes_v11000_params = cudaStreamCopyAttributes_v11000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaStreamGetAttribute_v11000_params_st {
    pub stream: cudaStream_t,
    pub attr: cudaLaunchAttributeID,
    pub value: *mut cudaLaunchAttributeValue,
}
#[test]
fn bindgen_test_layout_cudaStreamGetAttribute_v11000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaStreamGetAttribute_v11000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaStreamGetAttribute_v11000_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cudaStreamGetAttribute_v11000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaStreamGetAttribute_v11000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaStreamGetAttribute_v11000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamGetAttribute_v11000_params_st),
            "::",
            stringify!(stream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamGetAttribute_v11000_params_st),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamGetAttribute_v11000_params_st),
            "::",
            stringify!(value)
        )
    );
}
impl Default for cudaStreamGetAttribute_v11000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaStreamGetAttribute_v11000_params = cudaStreamGetAttribute_v11000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaStreamSetAttribute_v11000_params_st {
    pub stream: cudaStream_t,
    pub attr: cudaLaunchAttributeID,
    pub param: *const cudaLaunchAttributeValue,
}
#[test]
fn bindgen_test_layout_cudaStreamSetAttribute_v11000_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaStreamSetAttribute_v11000_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaStreamSetAttribute_v11000_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cudaStreamSetAttribute_v11000_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaStreamSetAttribute_v11000_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaStreamSetAttribute_v11000_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamSetAttribute_v11000_params_st),
            "::",
            stringify!(stream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamSetAttribute_v11000_params_st),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaStreamSetAttribute_v11000_params_st),
            "::",
            stringify!(param)
        )
    );
}
impl Default for cudaStreamSetAttribute_v11000_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaStreamSetAttribute_v11000_params = cudaStreamSetAttribute_v11000_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMallocAsync_v11020_params_st {
    pub devPtr: *mut *mut ::std::os::raw::c_void,
    pub size: usize,
    pub hStream: cudaStream_t,
}
#[test]
fn bindgen_test_layout_cudaMallocAsync_v11020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMallocAsync_v11020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMallocAsync_v11020_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cudaMallocAsync_v11020_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMallocAsync_v11020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMallocAsync_v11020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).devPtr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMallocAsync_v11020_params_st),
            "::",
            stringify!(devPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMallocAsync_v11020_params_st),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMallocAsync_v11020_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cudaMallocAsync_v11020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMallocAsync_v11020_params = cudaMallocAsync_v11020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaFreeAsync_v11020_params_st {
    pub devPtr: *mut ::std::os::raw::c_void,
    pub hStream: cudaStream_t,
}
#[test]
fn bindgen_test_layout_cudaFreeAsync_v11020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaFreeAsync_v11020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaFreeAsync_v11020_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cudaFreeAsync_v11020_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cudaFreeAsync_v11020_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cudaFreeAsync_v11020_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).devPtr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaFreeAsync_v11020_params_st),
            "::",
            stringify!(devPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaFreeAsync_v11020_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cudaFreeAsync_v11020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaFreeAsync_v11020_params = cudaFreeAsync_v11020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaMallocFromPoolAsync_v11020_params_st {
    pub ptr: *mut *mut ::std::os::raw::c_void,
    pub size: usize,
    pub memPool: cudaMemPool_t,
    pub stream: cudaStream_t,
}
#[test]
fn bindgen_test_layout_cudaMallocFromPoolAsync_v11020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaMallocFromPoolAsync_v11020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaMallocFromPoolAsync_v11020_params_st>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(cudaMallocFromPoolAsync_v11020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaMallocFromPoolAsync_v11020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaMallocFromPoolAsync_v11020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMallocFromPoolAsync_v11020_params_st),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMallocFromPoolAsync_v11020_params_st),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memPool) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMallocFromPoolAsync_v11020_params_st),
            "::",
            stringify!(memPool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaMallocFromPoolAsync_v11020_params_st),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for cudaMallocFromPoolAsync_v11020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaMallocFromPoolAsync_v11020_params = cudaMallocFromPoolAsync_v11020_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGetDriverEntryPoint_v11030_params_st {
    pub symbol: *const ::std::os::raw::c_char,
    pub funcPtr: *mut *mut ::std::os::raw::c_void,
    pub flags: ::std::os::raw::c_ulonglong,
    pub driverStatus: *mut cudaDriverEntryPointQueryResult,
}
#[test]
fn bindgen_test_layout_cudaGetDriverEntryPoint_v11030_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGetDriverEntryPoint_v11030_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGetDriverEntryPoint_v11030_params_st>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(cudaGetDriverEntryPoint_v11030_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGetDriverEntryPoint_v11030_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGetDriverEntryPoint_v11030_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).symbol) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGetDriverEntryPoint_v11030_params_st),
            "::",
            stringify!(symbol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).funcPtr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGetDriverEntryPoint_v11030_params_st),
            "::",
            stringify!(funcPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGetDriverEntryPoint_v11030_params_st),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).driverStatus) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGetDriverEntryPoint_v11030_params_st),
            "::",
            stringify!(driverStatus)
        )
    );
}
impl Default for cudaGetDriverEntryPoint_v11030_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGetDriverEntryPoint_v11030_params = cudaGetDriverEntryPoint_v11030_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cudaGetDeviceProperties_v3020_params_st {
    pub prop: *mut cudaDeviceProp,
    pub device: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cudaGetDeviceProperties_v3020_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cudaGetDeviceProperties_v3020_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cudaGetDeviceProperties_v3020_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cudaGetDeviceProperties_v3020_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cudaGetDeviceProperties_v3020_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cudaGetDeviceProperties_v3020_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGetDeviceProperties_v3020_params_st),
            "::",
            stringify!(prop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cudaGetDeviceProperties_v3020_params_st),
            "::",
            stringify!(device)
        )
    );
}
impl Default for cudaGetDeviceProperties_v3020_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cudaGetDeviceProperties_v3020_params = cudaGetDeviceProperties_v3020_params_st;
#[repr(C)]
pub struct cuGetErrorString_params_st {
    pub error: CUresult,
    pub pStr: *mut *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_cuGetErrorString_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGetErrorString_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGetErrorString_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuGetErrorString_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuGetErrorString_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuGetErrorString_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGetErrorString_params_st),
            "::",
            stringify!(error)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pStr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGetErrorString_params_st),
            "::",
            stringify!(pStr)
        )
    );
}
impl Default for cuGetErrorString_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGetErrorString_params = cuGetErrorString_params_st;
#[repr(C)]
pub struct cuGetErrorName_params_st {
    pub error: CUresult,
    pub pStr: *mut *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_cuGetErrorName_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGetErrorName_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGetErrorName_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuGetErrorName_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuGetErrorName_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuGetErrorName_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGetErrorName_params_st),
            "::",
            stringify!(error)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pStr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGetErrorName_params_st),
            "::",
            stringify!(pStr)
        )
    );
}
impl Default for cuGetErrorName_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGetErrorName_params = cuGetErrorName_params_st;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuInit_params_st {
    pub Flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuInit_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuInit_params_st> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuInit_params_st>(),
        4usize,
        concat!("Size of: ", stringify!(cuInit_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuInit_params_st>(),
        4usize,
        concat!("Alignment of ", stringify!(cuInit_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuInit_params_st),
            "::",
            stringify!(Flags)
        )
    );
}
pub type cuInit_params = cuInit_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuDriverGetVersion_params_st {
    pub driverVersion: *mut ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cuDriverGetVersion_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuDriverGetVersion_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuDriverGetVersion_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cuDriverGetVersion_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuDriverGetVersion_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuDriverGetVersion_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).driverVersion) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDriverGetVersion_params_st),
            "::",
            stringify!(driverVersion)
        )
    );
}
impl Default for cuDriverGetVersion_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuDriverGetVersion_params = cuDriverGetVersion_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuDeviceGet_params_st {
    pub device: *mut CUdevice,
    pub ordinal: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cuDeviceGet_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuDeviceGet_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuDeviceGet_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuDeviceGet_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuDeviceGet_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuDeviceGet_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDeviceGet_params_st),
            "::",
            stringify!(device)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ordinal) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDeviceGet_params_st),
            "::",
            stringify!(ordinal)
        )
    );
}
impl Default for cuDeviceGet_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuDeviceGet_params = cuDeviceGet_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuDeviceGetCount_params_st {
    pub count: *mut ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cuDeviceGetCount_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuDeviceGetCount_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuDeviceGetCount_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cuDeviceGetCount_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuDeviceGetCount_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuDeviceGetCount_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDeviceGetCount_params_st),
            "::",
            stringify!(count)
        )
    );
}
impl Default for cuDeviceGetCount_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuDeviceGetCount_params = cuDeviceGetCount_params_st;
#[repr(C)]
pub struct cuDeviceGetName_params_st {
    pub name: *mut ::std::os::raw::c_char,
    pub len: ::std::os::raw::c_int,
    pub dev: CUdevice,
}
#[test]
fn bindgen_test_layout_cuDeviceGetName_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuDeviceGetName_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuDeviceGetName_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuDeviceGetName_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuDeviceGetName_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuDeviceGetName_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDeviceGetName_params_st),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDeviceGetName_params_st),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDeviceGetName_params_st),
            "::",
            stringify!(dev)
        )
    );
}
impl Default for cuDeviceGetName_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuDeviceGetName_params = cuDeviceGetName_params_st;
#[repr(C)]
pub struct cuDeviceGetUuid_params_st {
    pub uuid: *mut CUuuid,
    pub dev: CUdevice,
}
#[test]
fn bindgen_test_layout_cuDeviceGetUuid_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuDeviceGetUuid_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuDeviceGetUuid_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuDeviceGetUuid_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuDeviceGetUuid_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuDeviceGetUuid_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uuid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDeviceGetUuid_params_st),
            "::",
            stringify!(uuid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDeviceGetUuid_params_st),
            "::",
            stringify!(dev)
        )
    );
}
impl Default for cuDeviceGetUuid_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuDeviceGetUuid_params = cuDeviceGetUuid_params_st;
#[repr(C)]
pub struct cuDeviceGetUuid_v2_params_st {
    pub uuid: *mut CUuuid,
    pub dev: CUdevice,
}
#[test]
fn bindgen_test_layout_cuDeviceGetUuid_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuDeviceGetUuid_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuDeviceGetUuid_v2_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuDeviceGetUuid_v2_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuDeviceGetUuid_v2_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuDeviceGetUuid_v2_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uuid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDeviceGetUuid_v2_params_st),
            "::",
            stringify!(uuid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDeviceGetUuid_v2_params_st),
            "::",
            stringify!(dev)
        )
    );
}
impl Default for cuDeviceGetUuid_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuDeviceGetUuid_v2_params = cuDeviceGetUuid_v2_params_st;
#[repr(C)]
pub struct cuDeviceGetLuid_params_st {
    pub luid: *mut ::std::os::raw::c_char,
    pub deviceNodeMask: *mut ::std::os::raw::c_uint,
    pub dev: CUdevice,
}
#[test]
fn bindgen_test_layout_cuDeviceGetLuid_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuDeviceGetLuid_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuDeviceGetLuid_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuDeviceGetLuid_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuDeviceGetLuid_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuDeviceGetLuid_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).luid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDeviceGetLuid_params_st),
            "::",
            stringify!(luid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deviceNodeMask) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDeviceGetLuid_params_st),
            "::",
            stringify!(deviceNodeMask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDeviceGetLuid_params_st),
            "::",
            stringify!(dev)
        )
    );
}
impl Default for cuDeviceGetLuid_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuDeviceGetLuid_params = cuDeviceGetLuid_params_st;
#[repr(C)]
pub struct cuDeviceTotalMem_v2_params_st {
    pub bytes: *mut usize,
    pub dev: CUdevice,
}
#[test]
fn bindgen_test_layout_cuDeviceTotalMem_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuDeviceTotalMem_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuDeviceTotalMem_v2_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuDeviceTotalMem_v2_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuDeviceTotalMem_v2_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuDeviceTotalMem_v2_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytes) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDeviceTotalMem_v2_params_st),
            "::",
            stringify!(bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDeviceTotalMem_v2_params_st),
            "::",
            stringify!(dev)
        )
    );
}
impl Default for cuDeviceTotalMem_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuDeviceTotalMem_v2_params = cuDeviceTotalMem_v2_params_st;
#[repr(C)]
pub struct cuDeviceGetTexture1DLinearMaxWidth_params_st {
    pub maxWidthInElements: *mut usize,
    pub format: CUarray_format,
    pub numChannels: ::std::os::raw::c_uint,
    pub dev: CUdevice,
}
#[test]
fn bindgen_test_layout_cuDeviceGetTexture1DLinearMaxWidth_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuDeviceGetTexture1DLinearMaxWidth_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuDeviceGetTexture1DLinearMaxWidth_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cuDeviceGetTexture1DLinearMaxWidth_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuDeviceGetTexture1DLinearMaxWidth_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuDeviceGetTexture1DLinearMaxWidth_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxWidthInElements) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDeviceGetTexture1DLinearMaxWidth_params_st),
            "::",
            stringify!(maxWidthInElements)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDeviceGetTexture1DLinearMaxWidth_params_st),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numChannels) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDeviceGetTexture1DLinearMaxWidth_params_st),
            "::",
            stringify!(numChannels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDeviceGetTexture1DLinearMaxWidth_params_st),
            "::",
            stringify!(dev)
        )
    );
}
impl Default for cuDeviceGetTexture1DLinearMaxWidth_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuDeviceGetTexture1DLinearMaxWidth_params = cuDeviceGetTexture1DLinearMaxWidth_params_st;
#[repr(C)]
pub struct cuDeviceGetAttribute_params_st {
    pub pi: *mut ::std::os::raw::c_int,
    pub attrib: CUdevice_attribute,
    pub dev: CUdevice,
}
#[test]
fn bindgen_test_layout_cuDeviceGetAttribute_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuDeviceGetAttribute_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuDeviceGetAttribute_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuDeviceGetAttribute_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuDeviceGetAttribute_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuDeviceGetAttribute_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pi) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDeviceGetAttribute_params_st),
            "::",
            stringify!(pi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attrib) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDeviceGetAttribute_params_st),
            "::",
            stringify!(attrib)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDeviceGetAttribute_params_st),
            "::",
            stringify!(dev)
        )
    );
}
impl Default for cuDeviceGetAttribute_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuDeviceGetAttribute_params = cuDeviceGetAttribute_params_st;
#[repr(C)]
pub struct cuDeviceGetNvSciSyncAttributes_params_st {
    pub nvSciSyncAttrList: *mut ::std::os::raw::c_void,
    pub dev: CUdevice,
    pub flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cuDeviceGetNvSciSyncAttributes_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuDeviceGetNvSciSyncAttributes_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuDeviceGetNvSciSyncAttributes_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cuDeviceGetNvSciSyncAttributes_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuDeviceGetNvSciSyncAttributes_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuDeviceGetNvSciSyncAttributes_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nvSciSyncAttrList) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDeviceGetNvSciSyncAttributes_params_st),
            "::",
            stringify!(nvSciSyncAttrList)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDeviceGetNvSciSyncAttributes_params_st),
            "::",
            stringify!(dev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDeviceGetNvSciSyncAttributes_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cuDeviceGetNvSciSyncAttributes_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuDeviceGetNvSciSyncAttributes_params = cuDeviceGetNvSciSyncAttributes_params_st;
#[repr(C)]
pub struct cuDeviceSetMemPool_params_st {
    pub dev: CUdevice,
    pub pool: CUmemoryPool,
}
#[test]
fn bindgen_test_layout_cuDeviceSetMemPool_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuDeviceSetMemPool_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuDeviceSetMemPool_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuDeviceSetMemPool_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuDeviceSetMemPool_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuDeviceSetMemPool_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDeviceSetMemPool_params_st),
            "::",
            stringify!(dev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pool) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDeviceSetMemPool_params_st),
            "::",
            stringify!(pool)
        )
    );
}
impl Default for cuDeviceSetMemPool_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuDeviceSetMemPool_params = cuDeviceSetMemPool_params_st;
#[repr(C)]
pub struct cuDeviceGetMemPool_params_st {
    pub pool: *mut CUmemoryPool,
    pub dev: CUdevice,
}
#[test]
fn bindgen_test_layout_cuDeviceGetMemPool_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuDeviceGetMemPool_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuDeviceGetMemPool_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuDeviceGetMemPool_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuDeviceGetMemPool_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuDeviceGetMemPool_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pool) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDeviceGetMemPool_params_st),
            "::",
            stringify!(pool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDeviceGetMemPool_params_st),
            "::",
            stringify!(dev)
        )
    );
}
impl Default for cuDeviceGetMemPool_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuDeviceGetMemPool_params = cuDeviceGetMemPool_params_st;
#[repr(C)]
pub struct cuDeviceGetDefaultMemPool_params_st {
    pub pool_out: *mut CUmemoryPool,
    pub dev: CUdevice,
}
#[test]
fn bindgen_test_layout_cuDeviceGetDefaultMemPool_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuDeviceGetDefaultMemPool_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuDeviceGetDefaultMemPool_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuDeviceGetDefaultMemPool_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuDeviceGetDefaultMemPool_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuDeviceGetDefaultMemPool_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pool_out) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDeviceGetDefaultMemPool_params_st),
            "::",
            stringify!(pool_out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDeviceGetDefaultMemPool_params_st),
            "::",
            stringify!(dev)
        )
    );
}
impl Default for cuDeviceGetDefaultMemPool_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuDeviceGetDefaultMemPool_params = cuDeviceGetDefaultMemPool_params_st;
#[repr(C)]
pub struct cuFlushGPUDirectRDMAWrites_params_st {
    pub target: CUflushGPUDirectRDMAWritesTarget,
    pub scope: CUflushGPUDirectRDMAWritesScope,
}
#[test]
fn bindgen_test_layout_cuFlushGPUDirectRDMAWrites_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuFlushGPUDirectRDMAWrites_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuFlushGPUDirectRDMAWrites_params_st>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(cuFlushGPUDirectRDMAWrites_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuFlushGPUDirectRDMAWrites_params_st>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(cuFlushGPUDirectRDMAWrites_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuFlushGPUDirectRDMAWrites_params_st),
            "::",
            stringify!(target)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scope) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cuFlushGPUDirectRDMAWrites_params_st),
            "::",
            stringify!(scope)
        )
    );
}
impl Default for cuFlushGPUDirectRDMAWrites_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuFlushGPUDirectRDMAWrites_params = cuFlushGPUDirectRDMAWrites_params_st;
#[repr(C)]
pub struct cuDeviceGetProperties_params_st {
    pub prop: *mut CUdevprop,
    pub dev: CUdevice,
}
#[test]
fn bindgen_test_layout_cuDeviceGetProperties_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuDeviceGetProperties_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuDeviceGetProperties_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuDeviceGetProperties_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuDeviceGetProperties_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuDeviceGetProperties_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDeviceGetProperties_params_st),
            "::",
            stringify!(prop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDeviceGetProperties_params_st),
            "::",
            stringify!(dev)
        )
    );
}
impl Default for cuDeviceGetProperties_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuDeviceGetProperties_params = cuDeviceGetProperties_params_st;
#[repr(C)]
pub struct cuDeviceComputeCapability_params_st {
    pub major: *mut ::std::os::raw::c_int,
    pub minor: *mut ::std::os::raw::c_int,
    pub dev: CUdevice,
}
#[test]
fn bindgen_test_layout_cuDeviceComputeCapability_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuDeviceComputeCapability_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuDeviceComputeCapability_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuDeviceComputeCapability_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuDeviceComputeCapability_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuDeviceComputeCapability_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).major) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDeviceComputeCapability_params_st),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minor) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDeviceComputeCapability_params_st),
            "::",
            stringify!(minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDeviceComputeCapability_params_st),
            "::",
            stringify!(dev)
        )
    );
}
impl Default for cuDeviceComputeCapability_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuDeviceComputeCapability_params = cuDeviceComputeCapability_params_st;
#[repr(C)]
pub struct cuDevicePrimaryCtxRetain_params_st {
    pub pctx: *mut CUcontext,
    pub dev: CUdevice,
}
#[test]
fn bindgen_test_layout_cuDevicePrimaryCtxRetain_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuDevicePrimaryCtxRetain_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuDevicePrimaryCtxRetain_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuDevicePrimaryCtxRetain_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuDevicePrimaryCtxRetain_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuDevicePrimaryCtxRetain_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pctx) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDevicePrimaryCtxRetain_params_st),
            "::",
            stringify!(pctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDevicePrimaryCtxRetain_params_st),
            "::",
            stringify!(dev)
        )
    );
}
impl Default for cuDevicePrimaryCtxRetain_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuDevicePrimaryCtxRetain_params = cuDevicePrimaryCtxRetain_params_st;
#[repr(C)]
pub struct cuDevicePrimaryCtxRelease_v2_params_st {
    pub dev: CUdevice,
}
#[test]
fn bindgen_test_layout_cuDevicePrimaryCtxRelease_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuDevicePrimaryCtxRelease_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuDevicePrimaryCtxRelease_v2_params_st>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(cuDevicePrimaryCtxRelease_v2_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuDevicePrimaryCtxRelease_v2_params_st>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(cuDevicePrimaryCtxRelease_v2_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDevicePrimaryCtxRelease_v2_params_st),
            "::",
            stringify!(dev)
        )
    );
}
impl Default for cuDevicePrimaryCtxRelease_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuDevicePrimaryCtxRelease_v2_params = cuDevicePrimaryCtxRelease_v2_params_st;
#[repr(C)]
pub struct cuDevicePrimaryCtxSetFlags_v2_params_st {
    pub dev: CUdevice,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuDevicePrimaryCtxSetFlags_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuDevicePrimaryCtxSetFlags_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuDevicePrimaryCtxSetFlags_v2_params_st>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(cuDevicePrimaryCtxSetFlags_v2_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuDevicePrimaryCtxSetFlags_v2_params_st>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(cuDevicePrimaryCtxSetFlags_v2_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDevicePrimaryCtxSetFlags_v2_params_st),
            "::",
            stringify!(dev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDevicePrimaryCtxSetFlags_v2_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cuDevicePrimaryCtxSetFlags_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuDevicePrimaryCtxSetFlags_v2_params = cuDevicePrimaryCtxSetFlags_v2_params_st;
#[repr(C)]
pub struct cuDevicePrimaryCtxGetState_params_st {
    pub dev: CUdevice,
    pub flags: *mut ::std::os::raw::c_uint,
    pub active: *mut ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cuDevicePrimaryCtxGetState_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuDevicePrimaryCtxGetState_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuDevicePrimaryCtxGetState_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cuDevicePrimaryCtxGetState_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuDevicePrimaryCtxGetState_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuDevicePrimaryCtxGetState_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDevicePrimaryCtxGetState_params_st),
            "::",
            stringify!(dev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDevicePrimaryCtxGetState_params_st),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).active) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDevicePrimaryCtxGetState_params_st),
            "::",
            stringify!(active)
        )
    );
}
impl Default for cuDevicePrimaryCtxGetState_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuDevicePrimaryCtxGetState_params = cuDevicePrimaryCtxGetState_params_st;
#[repr(C)]
pub struct cuDevicePrimaryCtxReset_v2_params_st {
    pub dev: CUdevice,
}
#[test]
fn bindgen_test_layout_cuDevicePrimaryCtxReset_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuDevicePrimaryCtxReset_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuDevicePrimaryCtxReset_v2_params_st>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(cuDevicePrimaryCtxReset_v2_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuDevicePrimaryCtxReset_v2_params_st>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(cuDevicePrimaryCtxReset_v2_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDevicePrimaryCtxReset_v2_params_st),
            "::",
            stringify!(dev)
        )
    );
}
impl Default for cuDevicePrimaryCtxReset_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuDevicePrimaryCtxReset_v2_params = cuDevicePrimaryCtxReset_v2_params_st;
#[repr(C)]
pub struct cuDeviceGetExecAffinitySupport_params_st {
    pub pi: *mut ::std::os::raw::c_int,
    pub type_: CUexecAffinityType,
    pub dev: CUdevice,
}
#[test]
fn bindgen_test_layout_cuDeviceGetExecAffinitySupport_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuDeviceGetExecAffinitySupport_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuDeviceGetExecAffinitySupport_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cuDeviceGetExecAffinitySupport_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuDeviceGetExecAffinitySupport_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuDeviceGetExecAffinitySupport_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pi) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDeviceGetExecAffinitySupport_params_st),
            "::",
            stringify!(pi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDeviceGetExecAffinitySupport_params_st),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDeviceGetExecAffinitySupport_params_st),
            "::",
            stringify!(dev)
        )
    );
}
impl Default for cuDeviceGetExecAffinitySupport_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuDeviceGetExecAffinitySupport_params = cuDeviceGetExecAffinitySupport_params_st;
#[repr(C)]
pub struct cuCtxCreate_v2_params_st {
    pub pctx: *mut CUcontext,
    pub flags: ::std::os::raw::c_uint,
    pub dev: CUdevice,
}
#[test]
fn bindgen_test_layout_cuCtxCreate_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuCtxCreate_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuCtxCreate_v2_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuCtxCreate_v2_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuCtxCreate_v2_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuCtxCreate_v2_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pctx) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuCtxCreate_v2_params_st),
            "::",
            stringify!(pctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuCtxCreate_v2_params_st),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cuCtxCreate_v2_params_st),
            "::",
            stringify!(dev)
        )
    );
}
impl Default for cuCtxCreate_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuCtxCreate_v2_params = cuCtxCreate_v2_params_st;
#[repr(C)]
pub struct cuCtxCreate_v3_params_st {
    pub pctx: *mut CUcontext,
    pub paramsArray: *mut CUexecAffinityParam,
    pub numParams: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_uint,
    pub dev: CUdevice,
}
#[test]
fn bindgen_test_layout_cuCtxCreate_v3_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuCtxCreate_v3_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuCtxCreate_v3_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuCtxCreate_v3_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuCtxCreate_v3_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuCtxCreate_v3_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pctx) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuCtxCreate_v3_params_st),
            "::",
            stringify!(pctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paramsArray) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuCtxCreate_v3_params_st),
            "::",
            stringify!(paramsArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numParams) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuCtxCreate_v3_params_st),
            "::",
            stringify!(numParams)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cuCtxCreate_v3_params_st),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuCtxCreate_v3_params_st),
            "::",
            stringify!(dev)
        )
    );
}
impl Default for cuCtxCreate_v3_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuCtxCreate_v3_params = cuCtxCreate_v3_params_st;
#[repr(C)]
pub struct cuCtxDestroy_v2_params_st {
    pub ctx: CUcontext,
}
#[test]
fn bindgen_test_layout_cuCtxDestroy_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuCtxDestroy_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuCtxDestroy_v2_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cuCtxDestroy_v2_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuCtxDestroy_v2_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuCtxDestroy_v2_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuCtxDestroy_v2_params_st),
            "::",
            stringify!(ctx)
        )
    );
}
impl Default for cuCtxDestroy_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuCtxDestroy_v2_params = cuCtxDestroy_v2_params_st;
#[repr(C)]
pub struct cuCtxPushCurrent_v2_params_st {
    pub ctx: CUcontext,
}
#[test]
fn bindgen_test_layout_cuCtxPushCurrent_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuCtxPushCurrent_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuCtxPushCurrent_v2_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cuCtxPushCurrent_v2_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuCtxPushCurrent_v2_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuCtxPushCurrent_v2_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuCtxPushCurrent_v2_params_st),
            "::",
            stringify!(ctx)
        )
    );
}
impl Default for cuCtxPushCurrent_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuCtxPushCurrent_v2_params = cuCtxPushCurrent_v2_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuCtxPopCurrent_v2_params_st {
    pub pctx: *mut CUcontext,
}
#[test]
fn bindgen_test_layout_cuCtxPopCurrent_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuCtxPopCurrent_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuCtxPopCurrent_v2_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cuCtxPopCurrent_v2_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuCtxPopCurrent_v2_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuCtxPopCurrent_v2_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pctx) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuCtxPopCurrent_v2_params_st),
            "::",
            stringify!(pctx)
        )
    );
}
impl Default for cuCtxPopCurrent_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuCtxPopCurrent_v2_params = cuCtxPopCurrent_v2_params_st;
#[repr(C)]
pub struct cuCtxSetCurrent_params_st {
    pub ctx: CUcontext,
}
#[test]
fn bindgen_test_layout_cuCtxSetCurrent_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuCtxSetCurrent_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuCtxSetCurrent_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cuCtxSetCurrent_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuCtxSetCurrent_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuCtxSetCurrent_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuCtxSetCurrent_params_st),
            "::",
            stringify!(ctx)
        )
    );
}
impl Default for cuCtxSetCurrent_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuCtxSetCurrent_params = cuCtxSetCurrent_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuCtxGetCurrent_params_st {
    pub pctx: *mut CUcontext,
}
#[test]
fn bindgen_test_layout_cuCtxGetCurrent_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuCtxGetCurrent_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuCtxGetCurrent_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cuCtxGetCurrent_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuCtxGetCurrent_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuCtxGetCurrent_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pctx) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuCtxGetCurrent_params_st),
            "::",
            stringify!(pctx)
        )
    );
}
impl Default for cuCtxGetCurrent_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuCtxGetCurrent_params = cuCtxGetCurrent_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuCtxGetDevice_params_st {
    pub device: *mut CUdevice,
}
#[test]
fn bindgen_test_layout_cuCtxGetDevice_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuCtxGetDevice_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuCtxGetDevice_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cuCtxGetDevice_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuCtxGetDevice_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuCtxGetDevice_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuCtxGetDevice_params_st),
            "::",
            stringify!(device)
        )
    );
}
impl Default for cuCtxGetDevice_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuCtxGetDevice_params = cuCtxGetDevice_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuCtxGetFlags_params_st {
    pub flags: *mut ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuCtxGetFlags_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuCtxGetFlags_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuCtxGetFlags_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cuCtxGetFlags_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuCtxGetFlags_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuCtxGetFlags_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuCtxGetFlags_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cuCtxGetFlags_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuCtxGetFlags_params = cuCtxGetFlags_params_st;
#[repr(C)]
pub struct cuCtxGetId_params_st {
    pub ctx: CUcontext,
    pub ctxId: *mut ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_cuCtxGetId_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuCtxGetId_params_st> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuCtxGetId_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuCtxGetId_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuCtxGetId_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuCtxGetId_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuCtxGetId_params_st),
            "::",
            stringify!(ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctxId) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuCtxGetId_params_st),
            "::",
            stringify!(ctxId)
        )
    );
}
impl Default for cuCtxGetId_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuCtxGetId_params = cuCtxGetId_params_st;
#[repr(C)]
pub struct cuCtxSetLimit_params_st {
    pub limit: CUlimit,
    pub value: usize,
}
#[test]
fn bindgen_test_layout_cuCtxSetLimit_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuCtxSetLimit_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuCtxSetLimit_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuCtxSetLimit_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuCtxSetLimit_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuCtxSetLimit_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).limit) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuCtxSetLimit_params_st),
            "::",
            stringify!(limit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuCtxSetLimit_params_st),
            "::",
            stringify!(value)
        )
    );
}
impl Default for cuCtxSetLimit_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuCtxSetLimit_params = cuCtxSetLimit_params_st;
#[repr(C)]
pub struct cuCtxGetLimit_params_st {
    pub pvalue: *mut usize,
    pub limit: CUlimit,
}
#[test]
fn bindgen_test_layout_cuCtxGetLimit_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuCtxGetLimit_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuCtxGetLimit_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuCtxGetLimit_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuCtxGetLimit_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuCtxGetLimit_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pvalue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuCtxGetLimit_params_st),
            "::",
            stringify!(pvalue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).limit) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuCtxGetLimit_params_st),
            "::",
            stringify!(limit)
        )
    );
}
impl Default for cuCtxGetLimit_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuCtxGetLimit_params = cuCtxGetLimit_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuCtxGetCacheConfig_params_st {
    pub pconfig: *mut CUfunc_cache,
}
#[test]
fn bindgen_test_layout_cuCtxGetCacheConfig_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuCtxGetCacheConfig_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuCtxGetCacheConfig_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cuCtxGetCacheConfig_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuCtxGetCacheConfig_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuCtxGetCacheConfig_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pconfig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuCtxGetCacheConfig_params_st),
            "::",
            stringify!(pconfig)
        )
    );
}
impl Default for cuCtxGetCacheConfig_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuCtxGetCacheConfig_params = cuCtxGetCacheConfig_params_st;
#[repr(C)]
pub struct cuCtxSetCacheConfig_params_st {
    pub config: CUfunc_cache,
}
#[test]
fn bindgen_test_layout_cuCtxSetCacheConfig_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuCtxSetCacheConfig_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuCtxSetCacheConfig_params_st>(),
        4usize,
        concat!("Size of: ", stringify!(cuCtxSetCacheConfig_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuCtxSetCacheConfig_params_st>(),
        4usize,
        concat!("Alignment of ", stringify!(cuCtxSetCacheConfig_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).config) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuCtxSetCacheConfig_params_st),
            "::",
            stringify!(config)
        )
    );
}
impl Default for cuCtxSetCacheConfig_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuCtxSetCacheConfig_params = cuCtxSetCacheConfig_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuCtxGetSharedMemConfig_params_st {
    pub pConfig: *mut CUsharedconfig,
}
#[test]
fn bindgen_test_layout_cuCtxGetSharedMemConfig_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuCtxGetSharedMemConfig_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuCtxGetSharedMemConfig_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cuCtxGetSharedMemConfig_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuCtxGetSharedMemConfig_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuCtxGetSharedMemConfig_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pConfig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuCtxGetSharedMemConfig_params_st),
            "::",
            stringify!(pConfig)
        )
    );
}
impl Default for cuCtxGetSharedMemConfig_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuCtxGetSharedMemConfig_params = cuCtxGetSharedMemConfig_params_st;
#[repr(C)]
pub struct cuCtxSetSharedMemConfig_params_st {
    pub config: CUsharedconfig,
}
#[test]
fn bindgen_test_layout_cuCtxSetSharedMemConfig_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuCtxSetSharedMemConfig_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuCtxSetSharedMemConfig_params_st>(),
        4usize,
        concat!("Size of: ", stringify!(cuCtxSetSharedMemConfig_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuCtxSetSharedMemConfig_params_st>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(cuCtxSetSharedMemConfig_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).config) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuCtxSetSharedMemConfig_params_st),
            "::",
            stringify!(config)
        )
    );
}
impl Default for cuCtxSetSharedMemConfig_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuCtxSetSharedMemConfig_params = cuCtxSetSharedMemConfig_params_st;
#[repr(C)]
pub struct cuCtxGetApiVersion_params_st {
    pub ctx: CUcontext,
    pub version: *mut ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuCtxGetApiVersion_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuCtxGetApiVersion_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuCtxGetApiVersion_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuCtxGetApiVersion_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuCtxGetApiVersion_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuCtxGetApiVersion_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuCtxGetApiVersion_params_st),
            "::",
            stringify!(ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuCtxGetApiVersion_params_st),
            "::",
            stringify!(version)
        )
    );
}
impl Default for cuCtxGetApiVersion_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuCtxGetApiVersion_params = cuCtxGetApiVersion_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuCtxGetStreamPriorityRange_params_st {
    pub leastPriority: *mut ::std::os::raw::c_int,
    pub greatestPriority: *mut ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cuCtxGetStreamPriorityRange_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuCtxGetStreamPriorityRange_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuCtxGetStreamPriorityRange_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cuCtxGetStreamPriorityRange_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuCtxGetStreamPriorityRange_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuCtxGetStreamPriorityRange_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).leastPriority) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuCtxGetStreamPriorityRange_params_st),
            "::",
            stringify!(leastPriority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).greatestPriority) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuCtxGetStreamPriorityRange_params_st),
            "::",
            stringify!(greatestPriority)
        )
    );
}
impl Default for cuCtxGetStreamPriorityRange_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuCtxGetStreamPriorityRange_params = cuCtxGetStreamPriorityRange_params_st;
#[repr(C)]
pub struct cuCtxGetExecAffinity_params_st {
    pub pExecAffinity: *mut CUexecAffinityParam,
    pub type_: CUexecAffinityType,
}
#[test]
fn bindgen_test_layout_cuCtxGetExecAffinity_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuCtxGetExecAffinity_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuCtxGetExecAffinity_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuCtxGetExecAffinity_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuCtxGetExecAffinity_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuCtxGetExecAffinity_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pExecAffinity) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuCtxGetExecAffinity_params_st),
            "::",
            stringify!(pExecAffinity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuCtxGetExecAffinity_params_st),
            "::",
            stringify!(type_)
        )
    );
}
impl Default for cuCtxGetExecAffinity_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuCtxGetExecAffinity_params = cuCtxGetExecAffinity_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuCtxAttach_params_st {
    pub pctx: *mut CUcontext,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuCtxAttach_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuCtxAttach_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuCtxAttach_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuCtxAttach_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuCtxAttach_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuCtxAttach_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pctx) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuCtxAttach_params_st),
            "::",
            stringify!(pctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuCtxAttach_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cuCtxAttach_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuCtxAttach_params = cuCtxAttach_params_st;
#[repr(C)]
pub struct cuCtxDetach_params_st {
    pub ctx: CUcontext,
}
#[test]
fn bindgen_test_layout_cuCtxDetach_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuCtxDetach_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuCtxDetach_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cuCtxDetach_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuCtxDetach_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuCtxDetach_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuCtxDetach_params_st),
            "::",
            stringify!(ctx)
        )
    );
}
impl Default for cuCtxDetach_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuCtxDetach_params = cuCtxDetach_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuModuleLoad_params_st {
    pub module: *mut CUmodule,
    pub fname: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_cuModuleLoad_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuModuleLoad_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuModuleLoad_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuModuleLoad_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuModuleLoad_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuModuleLoad_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).module) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuModuleLoad_params_st),
            "::",
            stringify!(module)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fname) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuModuleLoad_params_st),
            "::",
            stringify!(fname)
        )
    );
}
impl Default for cuModuleLoad_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuModuleLoad_params = cuModuleLoad_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuModuleLoadData_params_st {
    pub module: *mut CUmodule,
    pub image: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_cuModuleLoadData_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuModuleLoadData_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuModuleLoadData_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuModuleLoadData_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuModuleLoadData_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuModuleLoadData_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).module) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuModuleLoadData_params_st),
            "::",
            stringify!(module)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).image) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuModuleLoadData_params_st),
            "::",
            stringify!(image)
        )
    );
}
impl Default for cuModuleLoadData_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuModuleLoadData_params = cuModuleLoadData_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuModuleLoadDataEx_params_st {
    pub module: *mut CUmodule,
    pub image: *const ::std::os::raw::c_void,
    pub numOptions: ::std::os::raw::c_uint,
    pub options: *mut CUjit_option,
    pub optionValues: *mut *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_cuModuleLoadDataEx_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuModuleLoadDataEx_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuModuleLoadDataEx_params_st>(),
        40usize,
        concat!("Size of: ", stringify!(cuModuleLoadDataEx_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuModuleLoadDataEx_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuModuleLoadDataEx_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).module) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuModuleLoadDataEx_params_st),
            "::",
            stringify!(module)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).image) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuModuleLoadDataEx_params_st),
            "::",
            stringify!(image)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numOptions) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuModuleLoadDataEx_params_st),
            "::",
            stringify!(numOptions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).options) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuModuleLoadDataEx_params_st),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).optionValues) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cuModuleLoadDataEx_params_st),
            "::",
            stringify!(optionValues)
        )
    );
}
impl Default for cuModuleLoadDataEx_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuModuleLoadDataEx_params = cuModuleLoadDataEx_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuModuleLoadFatBinary_params_st {
    pub module: *mut CUmodule,
    pub fatCubin: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_cuModuleLoadFatBinary_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuModuleLoadFatBinary_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuModuleLoadFatBinary_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuModuleLoadFatBinary_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuModuleLoadFatBinary_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuModuleLoadFatBinary_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).module) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuModuleLoadFatBinary_params_st),
            "::",
            stringify!(module)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fatCubin) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuModuleLoadFatBinary_params_st),
            "::",
            stringify!(fatCubin)
        )
    );
}
impl Default for cuModuleLoadFatBinary_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuModuleLoadFatBinary_params = cuModuleLoadFatBinary_params_st;
#[repr(C)]
pub struct cuModuleUnload_params_st {
    pub hmod: CUmodule,
}
#[test]
fn bindgen_test_layout_cuModuleUnload_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuModuleUnload_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuModuleUnload_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cuModuleUnload_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuModuleUnload_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuModuleUnload_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hmod) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuModuleUnload_params_st),
            "::",
            stringify!(hmod)
        )
    );
}
impl Default for cuModuleUnload_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuModuleUnload_params = cuModuleUnload_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuModuleGetLoadingMode_params_st {
    pub mode: *mut CUmoduleLoadingMode,
}
#[test]
fn bindgen_test_layout_cuModuleGetLoadingMode_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuModuleGetLoadingMode_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuModuleGetLoadingMode_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cuModuleGetLoadingMode_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuModuleGetLoadingMode_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuModuleGetLoadingMode_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuModuleGetLoadingMode_params_st),
            "::",
            stringify!(mode)
        )
    );
}
impl Default for cuModuleGetLoadingMode_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuModuleGetLoadingMode_params = cuModuleGetLoadingMode_params_st;
#[repr(C)]
pub struct cuModuleGetFunction_params_st {
    pub hfunc: *mut CUfunction,
    pub hmod: CUmodule,
    pub name: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_cuModuleGetFunction_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuModuleGetFunction_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuModuleGetFunction_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuModuleGetFunction_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuModuleGetFunction_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuModuleGetFunction_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hfunc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuModuleGetFunction_params_st),
            "::",
            stringify!(hfunc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hmod) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuModuleGetFunction_params_st),
            "::",
            stringify!(hmod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuModuleGetFunction_params_st),
            "::",
            stringify!(name)
        )
    );
}
impl Default for cuModuleGetFunction_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuModuleGetFunction_params = cuModuleGetFunction_params_st;
#[repr(C)]
pub struct cuModuleGetGlobal_v2_params_st {
    pub dptr: *mut CUdeviceptr,
    pub bytes: *mut usize,
    pub hmod: CUmodule,
    pub name: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_cuModuleGetGlobal_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuModuleGetGlobal_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuModuleGetGlobal_v2_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuModuleGetGlobal_v2_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuModuleGetGlobal_v2_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuModuleGetGlobal_v2_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuModuleGetGlobal_v2_params_st),
            "::",
            stringify!(dptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytes) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuModuleGetGlobal_v2_params_st),
            "::",
            stringify!(bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hmod) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuModuleGetGlobal_v2_params_st),
            "::",
            stringify!(hmod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuModuleGetGlobal_v2_params_st),
            "::",
            stringify!(name)
        )
    );
}
impl Default for cuModuleGetGlobal_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuModuleGetGlobal_v2_params = cuModuleGetGlobal_v2_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuLinkCreate_v2_params_st {
    pub numOptions: ::std::os::raw::c_uint,
    pub options: *mut CUjit_option,
    pub optionValues: *mut *mut ::std::os::raw::c_void,
    pub stateOut: *mut CUlinkState,
}
#[test]
fn bindgen_test_layout_cuLinkCreate_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuLinkCreate_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuLinkCreate_v2_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuLinkCreate_v2_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuLinkCreate_v2_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuLinkCreate_v2_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numOptions) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLinkCreate_v2_params_st),
            "::",
            stringify!(numOptions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).options) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLinkCreate_v2_params_st),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).optionValues) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLinkCreate_v2_params_st),
            "::",
            stringify!(optionValues)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stateOut) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLinkCreate_v2_params_st),
            "::",
            stringify!(stateOut)
        )
    );
}
impl Default for cuLinkCreate_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuLinkCreate_v2_params = cuLinkCreate_v2_params_st;
#[repr(C)]
pub struct cuLinkAddData_v2_params_st {
    pub state: CUlinkState,
    pub type_: CUjitInputType,
    pub data: *mut ::std::os::raw::c_void,
    pub size: usize,
    pub name: *const ::std::os::raw::c_char,
    pub numOptions: ::std::os::raw::c_uint,
    pub options: *mut CUjit_option,
    pub optionValues: *mut *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_cuLinkAddData_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuLinkAddData_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuLinkAddData_v2_params_st>(),
        64usize,
        concat!("Size of: ", stringify!(cuLinkAddData_v2_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuLinkAddData_v2_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuLinkAddData_v2_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLinkAddData_v2_params_st),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLinkAddData_v2_params_st),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLinkAddData_v2_params_st),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLinkAddData_v2_params_st),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLinkAddData_v2_params_st),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numOptions) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLinkAddData_v2_params_st),
            "::",
            stringify!(numOptions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).options) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLinkAddData_v2_params_st),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).optionValues) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLinkAddData_v2_params_st),
            "::",
            stringify!(optionValues)
        )
    );
}
impl Default for cuLinkAddData_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuLinkAddData_v2_params = cuLinkAddData_v2_params_st;
#[repr(C)]
pub struct cuLinkAddFile_v2_params_st {
    pub state: CUlinkState,
    pub type_: CUjitInputType,
    pub path: *const ::std::os::raw::c_char,
    pub numOptions: ::std::os::raw::c_uint,
    pub options: *mut CUjit_option,
    pub optionValues: *mut *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_cuLinkAddFile_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuLinkAddFile_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuLinkAddFile_v2_params_st>(),
        48usize,
        concat!("Size of: ", stringify!(cuLinkAddFile_v2_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuLinkAddFile_v2_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuLinkAddFile_v2_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLinkAddFile_v2_params_st),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLinkAddFile_v2_params_st),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLinkAddFile_v2_params_st),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numOptions) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLinkAddFile_v2_params_st),
            "::",
            stringify!(numOptions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).options) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLinkAddFile_v2_params_st),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).optionValues) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLinkAddFile_v2_params_st),
            "::",
            stringify!(optionValues)
        )
    );
}
impl Default for cuLinkAddFile_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuLinkAddFile_v2_params = cuLinkAddFile_v2_params_st;
#[repr(C)]
pub struct cuLinkComplete_params_st {
    pub state: CUlinkState,
    pub cubinOut: *mut *mut ::std::os::raw::c_void,
    pub sizeOut: *mut usize,
}
#[test]
fn bindgen_test_layout_cuLinkComplete_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuLinkComplete_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuLinkComplete_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuLinkComplete_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuLinkComplete_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuLinkComplete_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLinkComplete_params_st),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cubinOut) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLinkComplete_params_st),
            "::",
            stringify!(cubinOut)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sizeOut) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLinkComplete_params_st),
            "::",
            stringify!(sizeOut)
        )
    );
}
impl Default for cuLinkComplete_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuLinkComplete_params = cuLinkComplete_params_st;
#[repr(C)]
pub struct cuLinkDestroy_params_st {
    pub state: CUlinkState,
}
#[test]
fn bindgen_test_layout_cuLinkDestroy_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuLinkDestroy_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuLinkDestroy_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cuLinkDestroy_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuLinkDestroy_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuLinkDestroy_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLinkDestroy_params_st),
            "::",
            stringify!(state)
        )
    );
}
impl Default for cuLinkDestroy_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuLinkDestroy_params = cuLinkDestroy_params_st;
#[repr(C)]
pub struct cuModuleGetTexRef_params_st {
    pub pTexRef: *mut CUtexref,
    pub hmod: CUmodule,
    pub name: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_cuModuleGetTexRef_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuModuleGetTexRef_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuModuleGetTexRef_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuModuleGetTexRef_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuModuleGetTexRef_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuModuleGetTexRef_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pTexRef) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuModuleGetTexRef_params_st),
            "::",
            stringify!(pTexRef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hmod) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuModuleGetTexRef_params_st),
            "::",
            stringify!(hmod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuModuleGetTexRef_params_st),
            "::",
            stringify!(name)
        )
    );
}
impl Default for cuModuleGetTexRef_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuModuleGetTexRef_params = cuModuleGetTexRef_params_st;
#[repr(C)]
pub struct cuModuleGetSurfRef_params_st {
    pub pSurfRef: *mut CUsurfref,
    pub hmod: CUmodule,
    pub name: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_cuModuleGetSurfRef_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuModuleGetSurfRef_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuModuleGetSurfRef_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuModuleGetSurfRef_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuModuleGetSurfRef_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuModuleGetSurfRef_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pSurfRef) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuModuleGetSurfRef_params_st),
            "::",
            stringify!(pSurfRef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hmod) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuModuleGetSurfRef_params_st),
            "::",
            stringify!(hmod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuModuleGetSurfRef_params_st),
            "::",
            stringify!(name)
        )
    );
}
impl Default for cuModuleGetSurfRef_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuModuleGetSurfRef_params = cuModuleGetSurfRef_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuLibraryLoadData_params_st {
    pub library: *mut CUlibrary,
    pub code: *const ::std::os::raw::c_void,
    pub jitOptions: *mut CUjit_option,
    pub jitOptionsValues: *mut *mut ::std::os::raw::c_void,
    pub numJitOptions: ::std::os::raw::c_uint,
    pub libraryOptions: *mut CUlibraryOption,
    pub libraryOptionValues: *mut *mut ::std::os::raw::c_void,
    pub numLibraryOptions: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuLibraryLoadData_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuLibraryLoadData_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuLibraryLoadData_params_st>(),
        64usize,
        concat!("Size of: ", stringify!(cuLibraryLoadData_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuLibraryLoadData_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuLibraryLoadData_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).library) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLibraryLoadData_params_st),
            "::",
            stringify!(library)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).code) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLibraryLoadData_params_st),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jitOptions) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLibraryLoadData_params_st),
            "::",
            stringify!(jitOptions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jitOptionsValues) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLibraryLoadData_params_st),
            "::",
            stringify!(jitOptionsValues)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numJitOptions) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLibraryLoadData_params_st),
            "::",
            stringify!(numJitOptions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).libraryOptions) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLibraryLoadData_params_st),
            "::",
            stringify!(libraryOptions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).libraryOptionValues) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLibraryLoadData_params_st),
            "::",
            stringify!(libraryOptionValues)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numLibraryOptions) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLibraryLoadData_params_st),
            "::",
            stringify!(numLibraryOptions)
        )
    );
}
impl Default for cuLibraryLoadData_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuLibraryLoadData_params = cuLibraryLoadData_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuLibraryLoadFromFile_params_st {
    pub library: *mut CUlibrary,
    pub fileName: *const ::std::os::raw::c_char,
    pub jitOptions: *mut CUjit_option,
    pub jitOptionsValues: *mut *mut ::std::os::raw::c_void,
    pub numJitOptions: ::std::os::raw::c_uint,
    pub libraryOptions: *mut CUlibraryOption,
    pub libraryOptionValues: *mut *mut ::std::os::raw::c_void,
    pub numLibraryOptions: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuLibraryLoadFromFile_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuLibraryLoadFromFile_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuLibraryLoadFromFile_params_st>(),
        64usize,
        concat!("Size of: ", stringify!(cuLibraryLoadFromFile_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuLibraryLoadFromFile_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuLibraryLoadFromFile_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).library) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLibraryLoadFromFile_params_st),
            "::",
            stringify!(library)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fileName) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLibraryLoadFromFile_params_st),
            "::",
            stringify!(fileName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jitOptions) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLibraryLoadFromFile_params_st),
            "::",
            stringify!(jitOptions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jitOptionsValues) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLibraryLoadFromFile_params_st),
            "::",
            stringify!(jitOptionsValues)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numJitOptions) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLibraryLoadFromFile_params_st),
            "::",
            stringify!(numJitOptions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).libraryOptions) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLibraryLoadFromFile_params_st),
            "::",
            stringify!(libraryOptions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).libraryOptionValues) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLibraryLoadFromFile_params_st),
            "::",
            stringify!(libraryOptionValues)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numLibraryOptions) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLibraryLoadFromFile_params_st),
            "::",
            stringify!(numLibraryOptions)
        )
    );
}
impl Default for cuLibraryLoadFromFile_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuLibraryLoadFromFile_params = cuLibraryLoadFromFile_params_st;
#[repr(C)]
pub struct cuLibraryUnload_params_st {
    pub library: CUlibrary,
}
#[test]
fn bindgen_test_layout_cuLibraryUnload_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuLibraryUnload_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuLibraryUnload_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cuLibraryUnload_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuLibraryUnload_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuLibraryUnload_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).library) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLibraryUnload_params_st),
            "::",
            stringify!(library)
        )
    );
}
impl Default for cuLibraryUnload_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuLibraryUnload_params = cuLibraryUnload_params_st;
#[repr(C)]
pub struct cuLibraryGetKernel_params_st {
    pub pKernel: *mut CUkernel,
    pub library: CUlibrary,
    pub name: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_cuLibraryGetKernel_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuLibraryGetKernel_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuLibraryGetKernel_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuLibraryGetKernel_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuLibraryGetKernel_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuLibraryGetKernel_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pKernel) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLibraryGetKernel_params_st),
            "::",
            stringify!(pKernel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).library) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLibraryGetKernel_params_st),
            "::",
            stringify!(library)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLibraryGetKernel_params_st),
            "::",
            stringify!(name)
        )
    );
}
impl Default for cuLibraryGetKernel_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuLibraryGetKernel_params = cuLibraryGetKernel_params_st;
#[repr(C)]
pub struct cuLibraryGetModule_params_st {
    pub pMod: *mut CUmodule,
    pub library: CUlibrary,
}
#[test]
fn bindgen_test_layout_cuLibraryGetModule_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuLibraryGetModule_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuLibraryGetModule_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuLibraryGetModule_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuLibraryGetModule_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuLibraryGetModule_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pMod) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLibraryGetModule_params_st),
            "::",
            stringify!(pMod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).library) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLibraryGetModule_params_st),
            "::",
            stringify!(library)
        )
    );
}
impl Default for cuLibraryGetModule_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuLibraryGetModule_params = cuLibraryGetModule_params_st;
#[repr(C)]
pub struct cuKernelGetFunction_params_st {
    pub pFunc: *mut CUfunction,
    pub kernel: CUkernel,
}
#[test]
fn bindgen_test_layout_cuKernelGetFunction_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuKernelGetFunction_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuKernelGetFunction_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuKernelGetFunction_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuKernelGetFunction_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuKernelGetFunction_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pFunc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuKernelGetFunction_params_st),
            "::",
            stringify!(pFunc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kernel) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuKernelGetFunction_params_st),
            "::",
            stringify!(kernel)
        )
    );
}
impl Default for cuKernelGetFunction_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuKernelGetFunction_params = cuKernelGetFunction_params_st;
#[repr(C)]
pub struct cuLibraryGetGlobal_params_st {
    pub dptr: *mut CUdeviceptr,
    pub bytes: *mut usize,
    pub library: CUlibrary,
    pub name: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_cuLibraryGetGlobal_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuLibraryGetGlobal_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuLibraryGetGlobal_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuLibraryGetGlobal_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuLibraryGetGlobal_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuLibraryGetGlobal_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLibraryGetGlobal_params_st),
            "::",
            stringify!(dptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytes) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLibraryGetGlobal_params_st),
            "::",
            stringify!(bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).library) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLibraryGetGlobal_params_st),
            "::",
            stringify!(library)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLibraryGetGlobal_params_st),
            "::",
            stringify!(name)
        )
    );
}
impl Default for cuLibraryGetGlobal_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuLibraryGetGlobal_params = cuLibraryGetGlobal_params_st;
#[repr(C)]
pub struct cuLibraryGetManaged_params_st {
    pub dptr: *mut CUdeviceptr,
    pub bytes: *mut usize,
    pub library: CUlibrary,
    pub name: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_cuLibraryGetManaged_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuLibraryGetManaged_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuLibraryGetManaged_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuLibraryGetManaged_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuLibraryGetManaged_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuLibraryGetManaged_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLibraryGetManaged_params_st),
            "::",
            stringify!(dptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytes) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLibraryGetManaged_params_st),
            "::",
            stringify!(bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).library) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLibraryGetManaged_params_st),
            "::",
            stringify!(library)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLibraryGetManaged_params_st),
            "::",
            stringify!(name)
        )
    );
}
impl Default for cuLibraryGetManaged_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuLibraryGetManaged_params = cuLibraryGetManaged_params_st;
#[repr(C)]
pub struct cuLibraryGetUnifiedFunction_params_st {
    pub fptr: *mut *mut ::std::os::raw::c_void,
    pub library: CUlibrary,
    pub symbol: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_cuLibraryGetUnifiedFunction_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuLibraryGetUnifiedFunction_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuLibraryGetUnifiedFunction_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cuLibraryGetUnifiedFunction_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuLibraryGetUnifiedFunction_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuLibraryGetUnifiedFunction_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLibraryGetUnifiedFunction_params_st),
            "::",
            stringify!(fptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).library) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLibraryGetUnifiedFunction_params_st),
            "::",
            stringify!(library)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).symbol) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLibraryGetUnifiedFunction_params_st),
            "::",
            stringify!(symbol)
        )
    );
}
impl Default for cuLibraryGetUnifiedFunction_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuLibraryGetUnifiedFunction_params = cuLibraryGetUnifiedFunction_params_st;
#[repr(C)]
pub struct cuKernelGetAttribute_params_st {
    pub pi: *mut ::std::os::raw::c_int,
    pub attrib: CUfunction_attribute,
    pub kernel: CUkernel,
    pub dev: CUdevice,
}
#[test]
fn bindgen_test_layout_cuKernelGetAttribute_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuKernelGetAttribute_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuKernelGetAttribute_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuKernelGetAttribute_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuKernelGetAttribute_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuKernelGetAttribute_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pi) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuKernelGetAttribute_params_st),
            "::",
            stringify!(pi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attrib) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuKernelGetAttribute_params_st),
            "::",
            stringify!(attrib)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kernel) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuKernelGetAttribute_params_st),
            "::",
            stringify!(kernel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuKernelGetAttribute_params_st),
            "::",
            stringify!(dev)
        )
    );
}
impl Default for cuKernelGetAttribute_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuKernelGetAttribute_params = cuKernelGetAttribute_params_st;
#[repr(C)]
pub struct cuKernelSetAttribute_params_st {
    pub attrib: CUfunction_attribute,
    pub val: ::std::os::raw::c_int,
    pub kernel: CUkernel,
    pub dev: CUdevice,
}
#[test]
fn bindgen_test_layout_cuKernelSetAttribute_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuKernelSetAttribute_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuKernelSetAttribute_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuKernelSetAttribute_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuKernelSetAttribute_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuKernelSetAttribute_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attrib) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuKernelSetAttribute_params_st),
            "::",
            stringify!(attrib)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cuKernelSetAttribute_params_st),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kernel) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuKernelSetAttribute_params_st),
            "::",
            stringify!(kernel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuKernelSetAttribute_params_st),
            "::",
            stringify!(dev)
        )
    );
}
impl Default for cuKernelSetAttribute_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuKernelSetAttribute_params = cuKernelSetAttribute_params_st;
#[repr(C)]
pub struct cuKernelSetCacheConfig_params_st {
    pub kernel: CUkernel,
    pub config: CUfunc_cache,
    pub dev: CUdevice,
}
#[test]
fn bindgen_test_layout_cuKernelSetCacheConfig_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuKernelSetCacheConfig_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuKernelSetCacheConfig_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuKernelSetCacheConfig_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuKernelSetCacheConfig_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuKernelSetCacheConfig_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kernel) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuKernelSetCacheConfig_params_st),
            "::",
            stringify!(kernel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).config) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuKernelSetCacheConfig_params_st),
            "::",
            stringify!(config)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cuKernelSetCacheConfig_params_st),
            "::",
            stringify!(dev)
        )
    );
}
impl Default for cuKernelSetCacheConfig_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuKernelSetCacheConfig_params = cuKernelSetCacheConfig_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuMemGetInfo_v2_params_st {
    pub free: *mut usize,
    pub total: *mut usize,
}
#[test]
fn bindgen_test_layout_cuMemGetInfo_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemGetInfo_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemGetInfo_v2_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuMemGetInfo_v2_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemGetInfo_v2_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemGetInfo_v2_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemGetInfo_v2_params_st),
            "::",
            stringify!(free)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemGetInfo_v2_params_st),
            "::",
            stringify!(total)
        )
    );
}
impl Default for cuMemGetInfo_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemGetInfo_v2_params = cuMemGetInfo_v2_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuMemAlloc_v2_params_st {
    pub dptr: *mut CUdeviceptr,
    pub bytesize: usize,
}
#[test]
fn bindgen_test_layout_cuMemAlloc_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemAlloc_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemAlloc_v2_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuMemAlloc_v2_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemAlloc_v2_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemAlloc_v2_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemAlloc_v2_params_st),
            "::",
            stringify!(dptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytesize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemAlloc_v2_params_st),
            "::",
            stringify!(bytesize)
        )
    );
}
impl Default for cuMemAlloc_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemAlloc_v2_params = cuMemAlloc_v2_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuMemAllocPitch_v2_params_st {
    pub dptr: *mut CUdeviceptr,
    pub pPitch: *mut usize,
    pub WidthInBytes: usize,
    pub Height: usize,
    pub ElementSizeBytes: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuMemAllocPitch_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemAllocPitch_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemAllocPitch_v2_params_st>(),
        40usize,
        concat!("Size of: ", stringify!(cuMemAllocPitch_v2_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemAllocPitch_v2_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemAllocPitch_v2_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemAllocPitch_v2_params_st),
            "::",
            stringify!(dptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPitch) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemAllocPitch_v2_params_st),
            "::",
            stringify!(pPitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WidthInBytes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemAllocPitch_v2_params_st),
            "::",
            stringify!(WidthInBytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Height) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemAllocPitch_v2_params_st),
            "::",
            stringify!(Height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ElementSizeBytes) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemAllocPitch_v2_params_st),
            "::",
            stringify!(ElementSizeBytes)
        )
    );
}
impl Default for cuMemAllocPitch_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemAllocPitch_v2_params = cuMemAllocPitch_v2_params_st;
#[repr(C)]
pub struct cuMemFree_v2_params_st {
    pub dptr: CUdeviceptr,
}
#[test]
fn bindgen_test_layout_cuMemFree_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemFree_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemFree_v2_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cuMemFree_v2_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemFree_v2_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemFree_v2_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemFree_v2_params_st),
            "::",
            stringify!(dptr)
        )
    );
}
impl Default for cuMemFree_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemFree_v2_params = cuMemFree_v2_params_st;
#[repr(C)]
pub struct cuMemGetAddressRange_v2_params_st {
    pub pbase: *mut CUdeviceptr,
    pub psize: *mut usize,
    pub dptr: CUdeviceptr,
}
#[test]
fn bindgen_test_layout_cuMemGetAddressRange_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemGetAddressRange_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemGetAddressRange_v2_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuMemGetAddressRange_v2_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemGetAddressRange_v2_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuMemGetAddressRange_v2_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pbase) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemGetAddressRange_v2_params_st),
            "::",
            stringify!(pbase)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).psize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemGetAddressRange_v2_params_st),
            "::",
            stringify!(psize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dptr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemGetAddressRange_v2_params_st),
            "::",
            stringify!(dptr)
        )
    );
}
impl Default for cuMemGetAddressRange_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemGetAddressRange_v2_params = cuMemGetAddressRange_v2_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuMemAllocHost_v2_params_st {
    pub pp: *mut *mut ::std::os::raw::c_void,
    pub bytesize: usize,
}
#[test]
fn bindgen_test_layout_cuMemAllocHost_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemAllocHost_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemAllocHost_v2_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuMemAllocHost_v2_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemAllocHost_v2_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemAllocHost_v2_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemAllocHost_v2_params_st),
            "::",
            stringify!(pp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytesize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemAllocHost_v2_params_st),
            "::",
            stringify!(bytesize)
        )
    );
}
impl Default for cuMemAllocHost_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemAllocHost_v2_params = cuMemAllocHost_v2_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuMemFreeHost_params_st {
    pub p: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_cuMemFreeHost_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemFreeHost_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemFreeHost_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cuMemFreeHost_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemFreeHost_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemFreeHost_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemFreeHost_params_st),
            "::",
            stringify!(p)
        )
    );
}
impl Default for cuMemFreeHost_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemFreeHost_params = cuMemFreeHost_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuMemHostAlloc_params_st {
    pub pp: *mut *mut ::std::os::raw::c_void,
    pub bytesize: usize,
    pub Flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuMemHostAlloc_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemHostAlloc_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemHostAlloc_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuMemHostAlloc_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemHostAlloc_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemHostAlloc_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemHostAlloc_params_st),
            "::",
            stringify!(pp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytesize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemHostAlloc_params_st),
            "::",
            stringify!(bytesize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemHostAlloc_params_st),
            "::",
            stringify!(Flags)
        )
    );
}
impl Default for cuMemHostAlloc_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemHostAlloc_params = cuMemHostAlloc_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuMemHostGetDevicePointer_v2_params_st {
    pub pdptr: *mut CUdeviceptr,
    pub p: *mut ::std::os::raw::c_void,
    pub Flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuMemHostGetDevicePointer_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemHostGetDevicePointer_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemHostGetDevicePointer_v2_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cuMemHostGetDevicePointer_v2_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemHostGetDevicePointer_v2_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuMemHostGetDevicePointer_v2_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemHostGetDevicePointer_v2_params_st),
            "::",
            stringify!(pdptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemHostGetDevicePointer_v2_params_st),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemHostGetDevicePointer_v2_params_st),
            "::",
            stringify!(Flags)
        )
    );
}
impl Default for cuMemHostGetDevicePointer_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemHostGetDevicePointer_v2_params = cuMemHostGetDevicePointer_v2_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuMemHostGetFlags_params_st {
    pub pFlags: *mut ::std::os::raw::c_uint,
    pub p: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_cuMemHostGetFlags_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemHostGetFlags_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemHostGetFlags_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuMemHostGetFlags_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemHostGetFlags_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemHostGetFlags_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pFlags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemHostGetFlags_params_st),
            "::",
            stringify!(pFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemHostGetFlags_params_st),
            "::",
            stringify!(p)
        )
    );
}
impl Default for cuMemHostGetFlags_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemHostGetFlags_params = cuMemHostGetFlags_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuMemAllocManaged_params_st {
    pub dptr: *mut CUdeviceptr,
    pub bytesize: usize,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuMemAllocManaged_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemAllocManaged_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemAllocManaged_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuMemAllocManaged_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemAllocManaged_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemAllocManaged_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemAllocManaged_params_st),
            "::",
            stringify!(dptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytesize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemAllocManaged_params_st),
            "::",
            stringify!(bytesize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemAllocManaged_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cuMemAllocManaged_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemAllocManaged_params = cuMemAllocManaged_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuDeviceGetByPCIBusId_params_st {
    pub dev: *mut CUdevice,
    pub pciBusId: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_cuDeviceGetByPCIBusId_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuDeviceGetByPCIBusId_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuDeviceGetByPCIBusId_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuDeviceGetByPCIBusId_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuDeviceGetByPCIBusId_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuDeviceGetByPCIBusId_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDeviceGetByPCIBusId_params_st),
            "::",
            stringify!(dev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pciBusId) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDeviceGetByPCIBusId_params_st),
            "::",
            stringify!(pciBusId)
        )
    );
}
impl Default for cuDeviceGetByPCIBusId_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuDeviceGetByPCIBusId_params = cuDeviceGetByPCIBusId_params_st;
#[repr(C)]
pub struct cuDeviceGetPCIBusId_params_st {
    pub pciBusId: *mut ::std::os::raw::c_char,
    pub len: ::std::os::raw::c_int,
    pub dev: CUdevice,
}
#[test]
fn bindgen_test_layout_cuDeviceGetPCIBusId_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuDeviceGetPCIBusId_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuDeviceGetPCIBusId_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuDeviceGetPCIBusId_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuDeviceGetPCIBusId_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuDeviceGetPCIBusId_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pciBusId) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDeviceGetPCIBusId_params_st),
            "::",
            stringify!(pciBusId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDeviceGetPCIBusId_params_st),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDeviceGetPCIBusId_params_st),
            "::",
            stringify!(dev)
        )
    );
}
impl Default for cuDeviceGetPCIBusId_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuDeviceGetPCIBusId_params = cuDeviceGetPCIBusId_params_st;
#[repr(C)]
pub struct cuIpcGetEventHandle_params_st {
    pub pHandle: *mut CUipcEventHandle,
    pub event: CUevent,
}
#[test]
fn bindgen_test_layout_cuIpcGetEventHandle_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuIpcGetEventHandle_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuIpcGetEventHandle_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuIpcGetEventHandle_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuIpcGetEventHandle_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuIpcGetEventHandle_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pHandle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuIpcGetEventHandle_params_st),
            "::",
            stringify!(pHandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuIpcGetEventHandle_params_st),
            "::",
            stringify!(event)
        )
    );
}
impl Default for cuIpcGetEventHandle_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuIpcGetEventHandle_params = cuIpcGetEventHandle_params_st;
#[repr(C)]
pub struct cuIpcOpenEventHandle_params_st {
    pub phEvent: *mut CUevent,
    pub handle: CUipcEventHandle,
}
#[test]
fn bindgen_test_layout_cuIpcOpenEventHandle_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuIpcOpenEventHandle_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuIpcOpenEventHandle_params_st>(),
        72usize,
        concat!("Size of: ", stringify!(cuIpcOpenEventHandle_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuIpcOpenEventHandle_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuIpcOpenEventHandle_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phEvent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuIpcOpenEventHandle_params_st),
            "::",
            stringify!(phEvent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuIpcOpenEventHandle_params_st),
            "::",
            stringify!(handle)
        )
    );
}
impl Default for cuIpcOpenEventHandle_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuIpcOpenEventHandle_params = cuIpcOpenEventHandle_params_st;
#[repr(C)]
pub struct cuIpcGetMemHandle_params_st {
    pub pHandle: *mut CUipcMemHandle,
    pub dptr: CUdeviceptr,
}
#[test]
fn bindgen_test_layout_cuIpcGetMemHandle_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuIpcGetMemHandle_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuIpcGetMemHandle_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuIpcGetMemHandle_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuIpcGetMemHandle_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuIpcGetMemHandle_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pHandle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuIpcGetMemHandle_params_st),
            "::",
            stringify!(pHandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuIpcGetMemHandle_params_st),
            "::",
            stringify!(dptr)
        )
    );
}
impl Default for cuIpcGetMemHandle_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuIpcGetMemHandle_params = cuIpcGetMemHandle_params_st;
#[repr(C)]
pub struct cuIpcOpenMemHandle_v2_params_st {
    pub pdptr: *mut CUdeviceptr,
    pub handle: CUipcMemHandle,
    pub Flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuIpcOpenMemHandle_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuIpcOpenMemHandle_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuIpcOpenMemHandle_v2_params_st>(),
        80usize,
        concat!("Size of: ", stringify!(cuIpcOpenMemHandle_v2_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuIpcOpenMemHandle_v2_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuIpcOpenMemHandle_v2_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuIpcOpenMemHandle_v2_params_st),
            "::",
            stringify!(pdptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuIpcOpenMemHandle_v2_params_st),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(cuIpcOpenMemHandle_v2_params_st),
            "::",
            stringify!(Flags)
        )
    );
}
impl Default for cuIpcOpenMemHandle_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuIpcOpenMemHandle_v2_params = cuIpcOpenMemHandle_v2_params_st;
#[repr(C)]
pub struct cuIpcCloseMemHandle_params_st {
    pub dptr: CUdeviceptr,
}
#[test]
fn bindgen_test_layout_cuIpcCloseMemHandle_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuIpcCloseMemHandle_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuIpcCloseMemHandle_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cuIpcCloseMemHandle_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuIpcCloseMemHandle_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuIpcCloseMemHandle_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuIpcCloseMemHandle_params_st),
            "::",
            stringify!(dptr)
        )
    );
}
impl Default for cuIpcCloseMemHandle_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuIpcCloseMemHandle_params = cuIpcCloseMemHandle_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuMemHostRegister_v2_params_st {
    pub p: *mut ::std::os::raw::c_void,
    pub bytesize: usize,
    pub Flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuMemHostRegister_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemHostRegister_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemHostRegister_v2_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuMemHostRegister_v2_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemHostRegister_v2_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemHostRegister_v2_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemHostRegister_v2_params_st),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytesize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemHostRegister_v2_params_st),
            "::",
            stringify!(bytesize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemHostRegister_v2_params_st),
            "::",
            stringify!(Flags)
        )
    );
}
impl Default for cuMemHostRegister_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemHostRegister_v2_params = cuMemHostRegister_v2_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuMemHostUnregister_params_st {
    pub p: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_cuMemHostUnregister_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemHostUnregister_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemHostUnregister_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cuMemHostUnregister_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemHostUnregister_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemHostUnregister_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemHostUnregister_params_st),
            "::",
            stringify!(p)
        )
    );
}
impl Default for cuMemHostUnregister_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemHostUnregister_params = cuMemHostUnregister_params_st;
#[repr(C)]
pub struct cuMemcpy_ptds_params_st {
    pub dst: CUdeviceptr,
    pub src: CUdeviceptr,
    pub ByteCount: usize,
}
#[test]
fn bindgen_test_layout_cuMemcpy_ptds_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemcpy_ptds_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemcpy_ptds_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuMemcpy_ptds_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemcpy_ptds_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemcpy_ptds_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpy_ptds_params_st),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpy_ptds_params_st),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ByteCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpy_ptds_params_st),
            "::",
            stringify!(ByteCount)
        )
    );
}
impl Default for cuMemcpy_ptds_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemcpy_ptds_params = cuMemcpy_ptds_params_st;
#[repr(C)]
pub struct cuMemcpyPeer_ptds_params_st {
    pub dstDevice: CUdeviceptr,
    pub dstContext: CUcontext,
    pub srcDevice: CUdeviceptr,
    pub srcContext: CUcontext,
    pub ByteCount: usize,
}
#[test]
fn bindgen_test_layout_cuMemcpyPeer_ptds_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemcpyPeer_ptds_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemcpyPeer_ptds_params_st>(),
        40usize,
        concat!("Size of: ", stringify!(cuMemcpyPeer_ptds_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemcpyPeer_ptds_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemcpyPeer_ptds_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyPeer_ptds_params_st),
            "::",
            stringify!(dstDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstContext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyPeer_ptds_params_st),
            "::",
            stringify!(dstContext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcDevice) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyPeer_ptds_params_st),
            "::",
            stringify!(srcDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcContext) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyPeer_ptds_params_st),
            "::",
            stringify!(srcContext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ByteCount) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyPeer_ptds_params_st),
            "::",
            stringify!(ByteCount)
        )
    );
}
impl Default for cuMemcpyPeer_ptds_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemcpyPeer_ptds_params = cuMemcpyPeer_ptds_params_st;
#[repr(C)]
pub struct cuMemcpyHtoD_v2_ptds_params_st {
    pub dstDevice: CUdeviceptr,
    pub srcHost: *const ::std::os::raw::c_void,
    pub ByteCount: usize,
}
#[test]
fn bindgen_test_layout_cuMemcpyHtoD_v2_ptds_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemcpyHtoD_v2_ptds_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemcpyHtoD_v2_ptds_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuMemcpyHtoD_v2_ptds_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemcpyHtoD_v2_ptds_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemcpyHtoD_v2_ptds_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyHtoD_v2_ptds_params_st),
            "::",
            stringify!(dstDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcHost) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyHtoD_v2_ptds_params_st),
            "::",
            stringify!(srcHost)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ByteCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyHtoD_v2_ptds_params_st),
            "::",
            stringify!(ByteCount)
        )
    );
}
impl Default for cuMemcpyHtoD_v2_ptds_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemcpyHtoD_v2_ptds_params = cuMemcpyHtoD_v2_ptds_params_st;
#[repr(C)]
pub struct cuMemcpyDtoH_v2_ptds_params_st {
    pub dstHost: *mut ::std::os::raw::c_void,
    pub srcDevice: CUdeviceptr,
    pub ByteCount: usize,
}
#[test]
fn bindgen_test_layout_cuMemcpyDtoH_v2_ptds_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemcpyDtoH_v2_ptds_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemcpyDtoH_v2_ptds_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuMemcpyDtoH_v2_ptds_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemcpyDtoH_v2_ptds_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemcpyDtoH_v2_ptds_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstHost) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyDtoH_v2_ptds_params_st),
            "::",
            stringify!(dstHost)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcDevice) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyDtoH_v2_ptds_params_st),
            "::",
            stringify!(srcDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ByteCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyDtoH_v2_ptds_params_st),
            "::",
            stringify!(ByteCount)
        )
    );
}
impl Default for cuMemcpyDtoH_v2_ptds_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemcpyDtoH_v2_ptds_params = cuMemcpyDtoH_v2_ptds_params_st;
#[repr(C)]
pub struct cuMemcpyDtoD_v2_ptds_params_st {
    pub dstDevice: CUdeviceptr,
    pub srcDevice: CUdeviceptr,
    pub ByteCount: usize,
}
#[test]
fn bindgen_test_layout_cuMemcpyDtoD_v2_ptds_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemcpyDtoD_v2_ptds_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemcpyDtoD_v2_ptds_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuMemcpyDtoD_v2_ptds_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemcpyDtoD_v2_ptds_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemcpyDtoD_v2_ptds_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyDtoD_v2_ptds_params_st),
            "::",
            stringify!(dstDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcDevice) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyDtoD_v2_ptds_params_st),
            "::",
            stringify!(srcDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ByteCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyDtoD_v2_ptds_params_st),
            "::",
            stringify!(ByteCount)
        )
    );
}
impl Default for cuMemcpyDtoD_v2_ptds_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemcpyDtoD_v2_ptds_params = cuMemcpyDtoD_v2_ptds_params_st;
#[repr(C)]
pub struct cuMemcpyDtoA_v2_ptds_params_st {
    pub dstArray: CUarray,
    pub dstOffset: usize,
    pub srcDevice: CUdeviceptr,
    pub ByteCount: usize,
}
#[test]
fn bindgen_test_layout_cuMemcpyDtoA_v2_ptds_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemcpyDtoA_v2_ptds_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemcpyDtoA_v2_ptds_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuMemcpyDtoA_v2_ptds_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemcpyDtoA_v2_ptds_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemcpyDtoA_v2_ptds_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstArray) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyDtoA_v2_ptds_params_st),
            "::",
            stringify!(dstArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstOffset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyDtoA_v2_ptds_params_st),
            "::",
            stringify!(dstOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcDevice) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyDtoA_v2_ptds_params_st),
            "::",
            stringify!(srcDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ByteCount) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyDtoA_v2_ptds_params_st),
            "::",
            stringify!(ByteCount)
        )
    );
}
impl Default for cuMemcpyDtoA_v2_ptds_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemcpyDtoA_v2_ptds_params = cuMemcpyDtoA_v2_ptds_params_st;
#[repr(C)]
pub struct cuMemcpyAtoD_v2_ptds_params_st {
    pub dstDevice: CUdeviceptr,
    pub srcArray: CUarray,
    pub srcOffset: usize,
    pub ByteCount: usize,
}
#[test]
fn bindgen_test_layout_cuMemcpyAtoD_v2_ptds_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemcpyAtoD_v2_ptds_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemcpyAtoD_v2_ptds_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuMemcpyAtoD_v2_ptds_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemcpyAtoD_v2_ptds_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemcpyAtoD_v2_ptds_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyAtoD_v2_ptds_params_st),
            "::",
            stringify!(dstDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcArray) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyAtoD_v2_ptds_params_st),
            "::",
            stringify!(srcArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcOffset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyAtoD_v2_ptds_params_st),
            "::",
            stringify!(srcOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ByteCount) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyAtoD_v2_ptds_params_st),
            "::",
            stringify!(ByteCount)
        )
    );
}
impl Default for cuMemcpyAtoD_v2_ptds_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemcpyAtoD_v2_ptds_params = cuMemcpyAtoD_v2_ptds_params_st;
#[repr(C)]
pub struct cuMemcpyHtoA_v2_ptds_params_st {
    pub dstArray: CUarray,
    pub dstOffset: usize,
    pub srcHost: *const ::std::os::raw::c_void,
    pub ByteCount: usize,
}
#[test]
fn bindgen_test_layout_cuMemcpyHtoA_v2_ptds_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemcpyHtoA_v2_ptds_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemcpyHtoA_v2_ptds_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuMemcpyHtoA_v2_ptds_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemcpyHtoA_v2_ptds_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemcpyHtoA_v2_ptds_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstArray) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyHtoA_v2_ptds_params_st),
            "::",
            stringify!(dstArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstOffset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyHtoA_v2_ptds_params_st),
            "::",
            stringify!(dstOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcHost) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyHtoA_v2_ptds_params_st),
            "::",
            stringify!(srcHost)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ByteCount) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyHtoA_v2_ptds_params_st),
            "::",
            stringify!(ByteCount)
        )
    );
}
impl Default for cuMemcpyHtoA_v2_ptds_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemcpyHtoA_v2_ptds_params = cuMemcpyHtoA_v2_ptds_params_st;
#[repr(C)]
pub struct cuMemcpyAtoH_v2_ptds_params_st {
    pub dstHost: *mut ::std::os::raw::c_void,
    pub srcArray: CUarray,
    pub srcOffset: usize,
    pub ByteCount: usize,
}
#[test]
fn bindgen_test_layout_cuMemcpyAtoH_v2_ptds_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemcpyAtoH_v2_ptds_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemcpyAtoH_v2_ptds_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuMemcpyAtoH_v2_ptds_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemcpyAtoH_v2_ptds_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemcpyAtoH_v2_ptds_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstHost) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyAtoH_v2_ptds_params_st),
            "::",
            stringify!(dstHost)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcArray) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyAtoH_v2_ptds_params_st),
            "::",
            stringify!(srcArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcOffset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyAtoH_v2_ptds_params_st),
            "::",
            stringify!(srcOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ByteCount) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyAtoH_v2_ptds_params_st),
            "::",
            stringify!(ByteCount)
        )
    );
}
impl Default for cuMemcpyAtoH_v2_ptds_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemcpyAtoH_v2_ptds_params = cuMemcpyAtoH_v2_ptds_params_st;
#[repr(C)]
pub struct cuMemcpyAtoA_v2_ptds_params_st {
    pub dstArray: CUarray,
    pub dstOffset: usize,
    pub srcArray: CUarray,
    pub srcOffset: usize,
    pub ByteCount: usize,
}
#[test]
fn bindgen_test_layout_cuMemcpyAtoA_v2_ptds_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemcpyAtoA_v2_ptds_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemcpyAtoA_v2_ptds_params_st>(),
        40usize,
        concat!("Size of: ", stringify!(cuMemcpyAtoA_v2_ptds_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemcpyAtoA_v2_ptds_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemcpyAtoA_v2_ptds_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstArray) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyAtoA_v2_ptds_params_st),
            "::",
            stringify!(dstArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstOffset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyAtoA_v2_ptds_params_st),
            "::",
            stringify!(dstOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcArray) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyAtoA_v2_ptds_params_st),
            "::",
            stringify!(srcArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcOffset) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyAtoA_v2_ptds_params_st),
            "::",
            stringify!(srcOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ByteCount) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyAtoA_v2_ptds_params_st),
            "::",
            stringify!(ByteCount)
        )
    );
}
impl Default for cuMemcpyAtoA_v2_ptds_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemcpyAtoA_v2_ptds_params = cuMemcpyAtoA_v2_ptds_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuMemcpy2D_v2_ptds_params_st {
    pub pCopy: *const CUDA_MEMCPY2D,
}
#[test]
fn bindgen_test_layout_cuMemcpy2D_v2_ptds_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemcpy2D_v2_ptds_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemcpy2D_v2_ptds_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cuMemcpy2D_v2_ptds_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemcpy2D_v2_ptds_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemcpy2D_v2_ptds_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCopy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpy2D_v2_ptds_params_st),
            "::",
            stringify!(pCopy)
        )
    );
}
impl Default for cuMemcpy2D_v2_ptds_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemcpy2D_v2_ptds_params = cuMemcpy2D_v2_ptds_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuMemcpy2DUnaligned_v2_ptds_params_st {
    pub pCopy: *const CUDA_MEMCPY2D,
}
#[test]
fn bindgen_test_layout_cuMemcpy2DUnaligned_v2_ptds_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemcpy2DUnaligned_v2_ptds_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemcpy2DUnaligned_v2_ptds_params_st>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(cuMemcpy2DUnaligned_v2_ptds_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemcpy2DUnaligned_v2_ptds_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuMemcpy2DUnaligned_v2_ptds_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCopy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpy2DUnaligned_v2_ptds_params_st),
            "::",
            stringify!(pCopy)
        )
    );
}
impl Default for cuMemcpy2DUnaligned_v2_ptds_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemcpy2DUnaligned_v2_ptds_params = cuMemcpy2DUnaligned_v2_ptds_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuMemcpy3D_v2_ptds_params_st {
    pub pCopy: *const CUDA_MEMCPY3D,
}
#[test]
fn bindgen_test_layout_cuMemcpy3D_v2_ptds_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemcpy3D_v2_ptds_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemcpy3D_v2_ptds_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cuMemcpy3D_v2_ptds_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemcpy3D_v2_ptds_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemcpy3D_v2_ptds_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCopy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpy3D_v2_ptds_params_st),
            "::",
            stringify!(pCopy)
        )
    );
}
impl Default for cuMemcpy3D_v2_ptds_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemcpy3D_v2_ptds_params = cuMemcpy3D_v2_ptds_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuMemcpy3DPeer_ptds_params_st {
    pub pCopy: *const CUDA_MEMCPY3D_PEER,
}
#[test]
fn bindgen_test_layout_cuMemcpy3DPeer_ptds_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemcpy3DPeer_ptds_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemcpy3DPeer_ptds_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cuMemcpy3DPeer_ptds_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemcpy3DPeer_ptds_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemcpy3DPeer_ptds_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCopy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpy3DPeer_ptds_params_st),
            "::",
            stringify!(pCopy)
        )
    );
}
impl Default for cuMemcpy3DPeer_ptds_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemcpy3DPeer_ptds_params = cuMemcpy3DPeer_ptds_params_st;
#[repr(C)]
pub struct cuMemcpyAsync_ptsz_params_st {
    pub dst: CUdeviceptr,
    pub src: CUdeviceptr,
    pub ByteCount: usize,
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuMemcpyAsync_ptsz_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemcpyAsync_ptsz_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemcpyAsync_ptsz_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuMemcpyAsync_ptsz_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemcpyAsync_ptsz_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemcpyAsync_ptsz_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyAsync_ptsz_params_st),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyAsync_ptsz_params_st),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ByteCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyAsync_ptsz_params_st),
            "::",
            stringify!(ByteCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyAsync_ptsz_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuMemcpyAsync_ptsz_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemcpyAsync_ptsz_params = cuMemcpyAsync_ptsz_params_st;
#[repr(C)]
pub struct cuMemcpyPeerAsync_ptsz_params_st {
    pub dstDevice: CUdeviceptr,
    pub dstContext: CUcontext,
    pub srcDevice: CUdeviceptr,
    pub srcContext: CUcontext,
    pub ByteCount: usize,
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuMemcpyPeerAsync_ptsz_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemcpyPeerAsync_ptsz_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemcpyPeerAsync_ptsz_params_st>(),
        48usize,
        concat!("Size of: ", stringify!(cuMemcpyPeerAsync_ptsz_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemcpyPeerAsync_ptsz_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuMemcpyPeerAsync_ptsz_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyPeerAsync_ptsz_params_st),
            "::",
            stringify!(dstDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstContext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyPeerAsync_ptsz_params_st),
            "::",
            stringify!(dstContext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcDevice) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyPeerAsync_ptsz_params_st),
            "::",
            stringify!(srcDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcContext) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyPeerAsync_ptsz_params_st),
            "::",
            stringify!(srcContext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ByteCount) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyPeerAsync_ptsz_params_st),
            "::",
            stringify!(ByteCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyPeerAsync_ptsz_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuMemcpyPeerAsync_ptsz_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemcpyPeerAsync_ptsz_params = cuMemcpyPeerAsync_ptsz_params_st;
#[repr(C)]
pub struct cuMemcpyHtoDAsync_v2_ptsz_params_st {
    pub dstDevice: CUdeviceptr,
    pub srcHost: *const ::std::os::raw::c_void,
    pub ByteCount: usize,
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuMemcpyHtoDAsync_v2_ptsz_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemcpyHtoDAsync_v2_ptsz_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemcpyHtoDAsync_v2_ptsz_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuMemcpyHtoDAsync_v2_ptsz_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemcpyHtoDAsync_v2_ptsz_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuMemcpyHtoDAsync_v2_ptsz_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyHtoDAsync_v2_ptsz_params_st),
            "::",
            stringify!(dstDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcHost) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyHtoDAsync_v2_ptsz_params_st),
            "::",
            stringify!(srcHost)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ByteCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyHtoDAsync_v2_ptsz_params_st),
            "::",
            stringify!(ByteCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyHtoDAsync_v2_ptsz_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuMemcpyHtoDAsync_v2_ptsz_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemcpyHtoDAsync_v2_ptsz_params = cuMemcpyHtoDAsync_v2_ptsz_params_st;
#[repr(C)]
pub struct cuMemcpyDtoHAsync_v2_ptsz_params_st {
    pub dstHost: *mut ::std::os::raw::c_void,
    pub srcDevice: CUdeviceptr,
    pub ByteCount: usize,
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuMemcpyDtoHAsync_v2_ptsz_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemcpyDtoHAsync_v2_ptsz_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemcpyDtoHAsync_v2_ptsz_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuMemcpyDtoHAsync_v2_ptsz_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemcpyDtoHAsync_v2_ptsz_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuMemcpyDtoHAsync_v2_ptsz_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstHost) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyDtoHAsync_v2_ptsz_params_st),
            "::",
            stringify!(dstHost)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcDevice) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyDtoHAsync_v2_ptsz_params_st),
            "::",
            stringify!(srcDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ByteCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyDtoHAsync_v2_ptsz_params_st),
            "::",
            stringify!(ByteCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyDtoHAsync_v2_ptsz_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuMemcpyDtoHAsync_v2_ptsz_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemcpyDtoHAsync_v2_ptsz_params = cuMemcpyDtoHAsync_v2_ptsz_params_st;
#[repr(C)]
pub struct cuMemcpyDtoDAsync_v2_ptsz_params_st {
    pub dstDevice: CUdeviceptr,
    pub srcDevice: CUdeviceptr,
    pub ByteCount: usize,
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuMemcpyDtoDAsync_v2_ptsz_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemcpyDtoDAsync_v2_ptsz_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemcpyDtoDAsync_v2_ptsz_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuMemcpyDtoDAsync_v2_ptsz_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemcpyDtoDAsync_v2_ptsz_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuMemcpyDtoDAsync_v2_ptsz_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyDtoDAsync_v2_ptsz_params_st),
            "::",
            stringify!(dstDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcDevice) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyDtoDAsync_v2_ptsz_params_st),
            "::",
            stringify!(srcDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ByteCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyDtoDAsync_v2_ptsz_params_st),
            "::",
            stringify!(ByteCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyDtoDAsync_v2_ptsz_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuMemcpyDtoDAsync_v2_ptsz_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemcpyDtoDAsync_v2_ptsz_params = cuMemcpyDtoDAsync_v2_ptsz_params_st;
#[repr(C)]
pub struct cuMemcpyHtoAAsync_v2_ptsz_params_st {
    pub dstArray: CUarray,
    pub dstOffset: usize,
    pub srcHost: *const ::std::os::raw::c_void,
    pub ByteCount: usize,
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuMemcpyHtoAAsync_v2_ptsz_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemcpyHtoAAsync_v2_ptsz_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemcpyHtoAAsync_v2_ptsz_params_st>(),
        40usize,
        concat!("Size of: ", stringify!(cuMemcpyHtoAAsync_v2_ptsz_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemcpyHtoAAsync_v2_ptsz_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuMemcpyHtoAAsync_v2_ptsz_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstArray) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyHtoAAsync_v2_ptsz_params_st),
            "::",
            stringify!(dstArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstOffset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyHtoAAsync_v2_ptsz_params_st),
            "::",
            stringify!(dstOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcHost) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyHtoAAsync_v2_ptsz_params_st),
            "::",
            stringify!(srcHost)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ByteCount) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyHtoAAsync_v2_ptsz_params_st),
            "::",
            stringify!(ByteCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyHtoAAsync_v2_ptsz_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuMemcpyHtoAAsync_v2_ptsz_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemcpyHtoAAsync_v2_ptsz_params = cuMemcpyHtoAAsync_v2_ptsz_params_st;
#[repr(C)]
pub struct cuMemcpyAtoHAsync_v2_ptsz_params_st {
    pub dstHost: *mut ::std::os::raw::c_void,
    pub srcArray: CUarray,
    pub srcOffset: usize,
    pub ByteCount: usize,
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuMemcpyAtoHAsync_v2_ptsz_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemcpyAtoHAsync_v2_ptsz_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemcpyAtoHAsync_v2_ptsz_params_st>(),
        40usize,
        concat!("Size of: ", stringify!(cuMemcpyAtoHAsync_v2_ptsz_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemcpyAtoHAsync_v2_ptsz_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuMemcpyAtoHAsync_v2_ptsz_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstHost) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyAtoHAsync_v2_ptsz_params_st),
            "::",
            stringify!(dstHost)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcArray) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyAtoHAsync_v2_ptsz_params_st),
            "::",
            stringify!(srcArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcOffset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyAtoHAsync_v2_ptsz_params_st),
            "::",
            stringify!(srcOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ByteCount) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyAtoHAsync_v2_ptsz_params_st),
            "::",
            stringify!(ByteCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyAtoHAsync_v2_ptsz_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuMemcpyAtoHAsync_v2_ptsz_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemcpyAtoHAsync_v2_ptsz_params = cuMemcpyAtoHAsync_v2_ptsz_params_st;
#[repr(C)]
pub struct cuMemcpy2DAsync_v2_ptsz_params_st {
    pub pCopy: *const CUDA_MEMCPY2D,
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuMemcpy2DAsync_v2_ptsz_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemcpy2DAsync_v2_ptsz_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemcpy2DAsync_v2_ptsz_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuMemcpy2DAsync_v2_ptsz_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemcpy2DAsync_v2_ptsz_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuMemcpy2DAsync_v2_ptsz_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCopy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpy2DAsync_v2_ptsz_params_st),
            "::",
            stringify!(pCopy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpy2DAsync_v2_ptsz_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuMemcpy2DAsync_v2_ptsz_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemcpy2DAsync_v2_ptsz_params = cuMemcpy2DAsync_v2_ptsz_params_st;
#[repr(C)]
pub struct cuMemcpy3DAsync_v2_ptsz_params_st {
    pub pCopy: *const CUDA_MEMCPY3D,
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuMemcpy3DAsync_v2_ptsz_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemcpy3DAsync_v2_ptsz_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemcpy3DAsync_v2_ptsz_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuMemcpy3DAsync_v2_ptsz_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemcpy3DAsync_v2_ptsz_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuMemcpy3DAsync_v2_ptsz_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCopy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpy3DAsync_v2_ptsz_params_st),
            "::",
            stringify!(pCopy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpy3DAsync_v2_ptsz_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuMemcpy3DAsync_v2_ptsz_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemcpy3DAsync_v2_ptsz_params = cuMemcpy3DAsync_v2_ptsz_params_st;
#[repr(C)]
pub struct cuMemcpy3DPeerAsync_ptsz_params_st {
    pub pCopy: *const CUDA_MEMCPY3D_PEER,
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuMemcpy3DPeerAsync_ptsz_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemcpy3DPeerAsync_ptsz_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemcpy3DPeerAsync_ptsz_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuMemcpy3DPeerAsync_ptsz_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemcpy3DPeerAsync_ptsz_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuMemcpy3DPeerAsync_ptsz_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCopy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpy3DPeerAsync_ptsz_params_st),
            "::",
            stringify!(pCopy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpy3DPeerAsync_ptsz_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuMemcpy3DPeerAsync_ptsz_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemcpy3DPeerAsync_ptsz_params = cuMemcpy3DPeerAsync_ptsz_params_st;
#[repr(C)]
pub struct cuMemsetD8_v2_ptds_params_st {
    pub dstDevice: CUdeviceptr,
    pub uc: ::std::os::raw::c_uchar,
    pub N: usize,
}
#[test]
fn bindgen_test_layout_cuMemsetD8_v2_ptds_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemsetD8_v2_ptds_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemsetD8_v2_ptds_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuMemsetD8_v2_ptds_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemsetD8_v2_ptds_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemsetD8_v2_ptds_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD8_v2_ptds_params_st),
            "::",
            stringify!(dstDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD8_v2_ptds_params_st),
            "::",
            stringify!(uc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).N) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD8_v2_ptds_params_st),
            "::",
            stringify!(N)
        )
    );
}
impl Default for cuMemsetD8_v2_ptds_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemsetD8_v2_ptds_params = cuMemsetD8_v2_ptds_params_st;
#[repr(C)]
pub struct cuMemsetD16_v2_ptds_params_st {
    pub dstDevice: CUdeviceptr,
    pub us: ::std::os::raw::c_ushort,
    pub N: usize,
}
#[test]
fn bindgen_test_layout_cuMemsetD16_v2_ptds_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemsetD16_v2_ptds_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemsetD16_v2_ptds_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuMemsetD16_v2_ptds_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemsetD16_v2_ptds_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemsetD16_v2_ptds_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD16_v2_ptds_params_st),
            "::",
            stringify!(dstDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).us) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD16_v2_ptds_params_st),
            "::",
            stringify!(us)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).N) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD16_v2_ptds_params_st),
            "::",
            stringify!(N)
        )
    );
}
impl Default for cuMemsetD16_v2_ptds_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemsetD16_v2_ptds_params = cuMemsetD16_v2_ptds_params_st;
#[repr(C)]
pub struct cuMemsetD32_v2_ptds_params_st {
    pub dstDevice: CUdeviceptr,
    pub ui: ::std::os::raw::c_uint,
    pub N: usize,
}
#[test]
fn bindgen_test_layout_cuMemsetD32_v2_ptds_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemsetD32_v2_ptds_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemsetD32_v2_ptds_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuMemsetD32_v2_ptds_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemsetD32_v2_ptds_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemsetD32_v2_ptds_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD32_v2_ptds_params_st),
            "::",
            stringify!(dstDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ui) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD32_v2_ptds_params_st),
            "::",
            stringify!(ui)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).N) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD32_v2_ptds_params_st),
            "::",
            stringify!(N)
        )
    );
}
impl Default for cuMemsetD32_v2_ptds_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemsetD32_v2_ptds_params = cuMemsetD32_v2_ptds_params_st;
#[repr(C)]
pub struct cuMemsetD2D8_v2_ptds_params_st {
    pub dstDevice: CUdeviceptr,
    pub dstPitch: usize,
    pub uc: ::std::os::raw::c_uchar,
    pub Width: usize,
    pub Height: usize,
}
#[test]
fn bindgen_test_layout_cuMemsetD2D8_v2_ptds_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemsetD2D8_v2_ptds_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemsetD2D8_v2_ptds_params_st>(),
        40usize,
        concat!("Size of: ", stringify!(cuMemsetD2D8_v2_ptds_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemsetD2D8_v2_ptds_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemsetD2D8_v2_ptds_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D8_v2_ptds_params_st),
            "::",
            stringify!(dstDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstPitch) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D8_v2_ptds_params_st),
            "::",
            stringify!(dstPitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uc) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D8_v2_ptds_params_st),
            "::",
            stringify!(uc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Width) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D8_v2_ptds_params_st),
            "::",
            stringify!(Width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Height) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D8_v2_ptds_params_st),
            "::",
            stringify!(Height)
        )
    );
}
impl Default for cuMemsetD2D8_v2_ptds_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemsetD2D8_v2_ptds_params = cuMemsetD2D8_v2_ptds_params_st;
#[repr(C)]
pub struct cuMemsetD2D16_v2_ptds_params_st {
    pub dstDevice: CUdeviceptr,
    pub dstPitch: usize,
    pub us: ::std::os::raw::c_ushort,
    pub Width: usize,
    pub Height: usize,
}
#[test]
fn bindgen_test_layout_cuMemsetD2D16_v2_ptds_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemsetD2D16_v2_ptds_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemsetD2D16_v2_ptds_params_st>(),
        40usize,
        concat!("Size of: ", stringify!(cuMemsetD2D16_v2_ptds_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemsetD2D16_v2_ptds_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemsetD2D16_v2_ptds_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D16_v2_ptds_params_st),
            "::",
            stringify!(dstDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstPitch) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D16_v2_ptds_params_st),
            "::",
            stringify!(dstPitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).us) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D16_v2_ptds_params_st),
            "::",
            stringify!(us)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Width) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D16_v2_ptds_params_st),
            "::",
            stringify!(Width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Height) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D16_v2_ptds_params_st),
            "::",
            stringify!(Height)
        )
    );
}
impl Default for cuMemsetD2D16_v2_ptds_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemsetD2D16_v2_ptds_params = cuMemsetD2D16_v2_ptds_params_st;
#[repr(C)]
pub struct cuMemsetD2D32_v2_ptds_params_st {
    pub dstDevice: CUdeviceptr,
    pub dstPitch: usize,
    pub ui: ::std::os::raw::c_uint,
    pub Width: usize,
    pub Height: usize,
}
#[test]
fn bindgen_test_layout_cuMemsetD2D32_v2_ptds_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemsetD2D32_v2_ptds_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemsetD2D32_v2_ptds_params_st>(),
        40usize,
        concat!("Size of: ", stringify!(cuMemsetD2D32_v2_ptds_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemsetD2D32_v2_ptds_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemsetD2D32_v2_ptds_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D32_v2_ptds_params_st),
            "::",
            stringify!(dstDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstPitch) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D32_v2_ptds_params_st),
            "::",
            stringify!(dstPitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ui) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D32_v2_ptds_params_st),
            "::",
            stringify!(ui)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Width) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D32_v2_ptds_params_st),
            "::",
            stringify!(Width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Height) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D32_v2_ptds_params_st),
            "::",
            stringify!(Height)
        )
    );
}
impl Default for cuMemsetD2D32_v2_ptds_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemsetD2D32_v2_ptds_params = cuMemsetD2D32_v2_ptds_params_st;
#[repr(C)]
pub struct cuMemsetD8Async_ptsz_params_st {
    pub dstDevice: CUdeviceptr,
    pub uc: ::std::os::raw::c_uchar,
    pub N: usize,
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuMemsetD8Async_ptsz_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemsetD8Async_ptsz_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemsetD8Async_ptsz_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuMemsetD8Async_ptsz_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemsetD8Async_ptsz_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemsetD8Async_ptsz_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD8Async_ptsz_params_st),
            "::",
            stringify!(dstDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD8Async_ptsz_params_st),
            "::",
            stringify!(uc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).N) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD8Async_ptsz_params_st),
            "::",
            stringify!(N)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD8Async_ptsz_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuMemsetD8Async_ptsz_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemsetD8Async_ptsz_params = cuMemsetD8Async_ptsz_params_st;
#[repr(C)]
pub struct cuMemsetD16Async_ptsz_params_st {
    pub dstDevice: CUdeviceptr,
    pub us: ::std::os::raw::c_ushort,
    pub N: usize,
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuMemsetD16Async_ptsz_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemsetD16Async_ptsz_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemsetD16Async_ptsz_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuMemsetD16Async_ptsz_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemsetD16Async_ptsz_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemsetD16Async_ptsz_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD16Async_ptsz_params_st),
            "::",
            stringify!(dstDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).us) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD16Async_ptsz_params_st),
            "::",
            stringify!(us)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).N) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD16Async_ptsz_params_st),
            "::",
            stringify!(N)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD16Async_ptsz_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuMemsetD16Async_ptsz_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemsetD16Async_ptsz_params = cuMemsetD16Async_ptsz_params_st;
#[repr(C)]
pub struct cuMemsetD32Async_ptsz_params_st {
    pub dstDevice: CUdeviceptr,
    pub ui: ::std::os::raw::c_uint,
    pub N: usize,
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuMemsetD32Async_ptsz_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemsetD32Async_ptsz_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemsetD32Async_ptsz_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuMemsetD32Async_ptsz_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemsetD32Async_ptsz_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemsetD32Async_ptsz_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD32Async_ptsz_params_st),
            "::",
            stringify!(dstDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ui) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD32Async_ptsz_params_st),
            "::",
            stringify!(ui)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).N) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD32Async_ptsz_params_st),
            "::",
            stringify!(N)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD32Async_ptsz_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuMemsetD32Async_ptsz_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemsetD32Async_ptsz_params = cuMemsetD32Async_ptsz_params_st;
#[repr(C)]
pub struct cuMemsetD2D8Async_ptsz_params_st {
    pub dstDevice: CUdeviceptr,
    pub dstPitch: usize,
    pub uc: ::std::os::raw::c_uchar,
    pub Width: usize,
    pub Height: usize,
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuMemsetD2D8Async_ptsz_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemsetD2D8Async_ptsz_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemsetD2D8Async_ptsz_params_st>(),
        48usize,
        concat!("Size of: ", stringify!(cuMemsetD2D8Async_ptsz_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemsetD2D8Async_ptsz_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuMemsetD2D8Async_ptsz_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D8Async_ptsz_params_st),
            "::",
            stringify!(dstDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstPitch) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D8Async_ptsz_params_st),
            "::",
            stringify!(dstPitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uc) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D8Async_ptsz_params_st),
            "::",
            stringify!(uc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Width) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D8Async_ptsz_params_st),
            "::",
            stringify!(Width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Height) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D8Async_ptsz_params_st),
            "::",
            stringify!(Height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D8Async_ptsz_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuMemsetD2D8Async_ptsz_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemsetD2D8Async_ptsz_params = cuMemsetD2D8Async_ptsz_params_st;
#[repr(C)]
pub struct cuMemsetD2D16Async_ptsz_params_st {
    pub dstDevice: CUdeviceptr,
    pub dstPitch: usize,
    pub us: ::std::os::raw::c_ushort,
    pub Width: usize,
    pub Height: usize,
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuMemsetD2D16Async_ptsz_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemsetD2D16Async_ptsz_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemsetD2D16Async_ptsz_params_st>(),
        48usize,
        concat!("Size of: ", stringify!(cuMemsetD2D16Async_ptsz_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemsetD2D16Async_ptsz_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuMemsetD2D16Async_ptsz_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D16Async_ptsz_params_st),
            "::",
            stringify!(dstDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstPitch) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D16Async_ptsz_params_st),
            "::",
            stringify!(dstPitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).us) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D16Async_ptsz_params_st),
            "::",
            stringify!(us)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Width) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D16Async_ptsz_params_st),
            "::",
            stringify!(Width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Height) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D16Async_ptsz_params_st),
            "::",
            stringify!(Height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D16Async_ptsz_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuMemsetD2D16Async_ptsz_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemsetD2D16Async_ptsz_params = cuMemsetD2D16Async_ptsz_params_st;
#[repr(C)]
pub struct cuMemsetD2D32Async_ptsz_params_st {
    pub dstDevice: CUdeviceptr,
    pub dstPitch: usize,
    pub ui: ::std::os::raw::c_uint,
    pub Width: usize,
    pub Height: usize,
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuMemsetD2D32Async_ptsz_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemsetD2D32Async_ptsz_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemsetD2D32Async_ptsz_params_st>(),
        48usize,
        concat!("Size of: ", stringify!(cuMemsetD2D32Async_ptsz_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemsetD2D32Async_ptsz_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuMemsetD2D32Async_ptsz_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D32Async_ptsz_params_st),
            "::",
            stringify!(dstDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstPitch) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D32Async_ptsz_params_st),
            "::",
            stringify!(dstPitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ui) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D32Async_ptsz_params_st),
            "::",
            stringify!(ui)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Width) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D32Async_ptsz_params_st),
            "::",
            stringify!(Width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Height) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D32Async_ptsz_params_st),
            "::",
            stringify!(Height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D32Async_ptsz_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuMemsetD2D32Async_ptsz_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemsetD2D32Async_ptsz_params = cuMemsetD2D32Async_ptsz_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuArrayCreate_v2_params_st {
    pub pHandle: *mut CUarray,
    pub pAllocateArray: *const CUDA_ARRAY_DESCRIPTOR,
}
#[test]
fn bindgen_test_layout_cuArrayCreate_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuArrayCreate_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuArrayCreate_v2_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuArrayCreate_v2_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuArrayCreate_v2_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuArrayCreate_v2_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pHandle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuArrayCreate_v2_params_st),
            "::",
            stringify!(pHandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pAllocateArray) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuArrayCreate_v2_params_st),
            "::",
            stringify!(pAllocateArray)
        )
    );
}
impl Default for cuArrayCreate_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuArrayCreate_v2_params = cuArrayCreate_v2_params_st;
#[repr(C)]
pub struct cuArrayGetDescriptor_v2_params_st {
    pub pArrayDescriptor: *mut CUDA_ARRAY_DESCRIPTOR,
    pub hArray: CUarray,
}
#[test]
fn bindgen_test_layout_cuArrayGetDescriptor_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuArrayGetDescriptor_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuArrayGetDescriptor_v2_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuArrayGetDescriptor_v2_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuArrayGetDescriptor_v2_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuArrayGetDescriptor_v2_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pArrayDescriptor) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuArrayGetDescriptor_v2_params_st),
            "::",
            stringify!(pArrayDescriptor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hArray) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuArrayGetDescriptor_v2_params_st),
            "::",
            stringify!(hArray)
        )
    );
}
impl Default for cuArrayGetDescriptor_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuArrayGetDescriptor_v2_params = cuArrayGetDescriptor_v2_params_st;
#[repr(C)]
pub struct cuArrayGetSparseProperties_params_st {
    pub sparseProperties: *mut CUDA_ARRAY_SPARSE_PROPERTIES,
    pub array: CUarray,
}
#[test]
fn bindgen_test_layout_cuArrayGetSparseProperties_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuArrayGetSparseProperties_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuArrayGetSparseProperties_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cuArrayGetSparseProperties_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuArrayGetSparseProperties_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuArrayGetSparseProperties_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sparseProperties) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuArrayGetSparseProperties_params_st),
            "::",
            stringify!(sparseProperties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).array) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuArrayGetSparseProperties_params_st),
            "::",
            stringify!(array)
        )
    );
}
impl Default for cuArrayGetSparseProperties_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuArrayGetSparseProperties_params = cuArrayGetSparseProperties_params_st;
#[repr(C)]
pub struct cuMipmappedArrayGetSparseProperties_params_st {
    pub sparseProperties: *mut CUDA_ARRAY_SPARSE_PROPERTIES,
    pub mipmap: CUmipmappedArray,
}
#[test]
fn bindgen_test_layout_cuMipmappedArrayGetSparseProperties_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMipmappedArrayGetSparseProperties_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMipmappedArrayGetSparseProperties_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cuMipmappedArrayGetSparseProperties_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuMipmappedArrayGetSparseProperties_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuMipmappedArrayGetSparseProperties_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sparseProperties) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMipmappedArrayGetSparseProperties_params_st),
            "::",
            stringify!(sparseProperties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mipmap) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMipmappedArrayGetSparseProperties_params_st),
            "::",
            stringify!(mipmap)
        )
    );
}
impl Default for cuMipmappedArrayGetSparseProperties_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMipmappedArrayGetSparseProperties_params = cuMipmappedArrayGetSparseProperties_params_st;
#[repr(C)]
pub struct cuArrayGetMemoryRequirements_params_st {
    pub memoryRequirements: *mut CUDA_ARRAY_MEMORY_REQUIREMENTS,
    pub array: CUarray,
    pub device: CUdevice,
}
#[test]
fn bindgen_test_layout_cuArrayGetMemoryRequirements_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuArrayGetMemoryRequirements_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuArrayGetMemoryRequirements_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cuArrayGetMemoryRequirements_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuArrayGetMemoryRequirements_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuArrayGetMemoryRequirements_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memoryRequirements) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuArrayGetMemoryRequirements_params_st),
            "::",
            stringify!(memoryRequirements)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).array) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuArrayGetMemoryRequirements_params_st),
            "::",
            stringify!(array)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuArrayGetMemoryRequirements_params_st),
            "::",
            stringify!(device)
        )
    );
}
impl Default for cuArrayGetMemoryRequirements_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuArrayGetMemoryRequirements_params = cuArrayGetMemoryRequirements_params_st;
#[repr(C)]
pub struct cuMipmappedArrayGetMemoryRequirements_params_st {
    pub memoryRequirements: *mut CUDA_ARRAY_MEMORY_REQUIREMENTS,
    pub mipmap: CUmipmappedArray,
    pub device: CUdevice,
}
#[test]
fn bindgen_test_layout_cuMipmappedArrayGetMemoryRequirements_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMipmappedArrayGetMemoryRequirements_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMipmappedArrayGetMemoryRequirements_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cuMipmappedArrayGetMemoryRequirements_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuMipmappedArrayGetMemoryRequirements_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuMipmappedArrayGetMemoryRequirements_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memoryRequirements) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMipmappedArrayGetMemoryRequirements_params_st),
            "::",
            stringify!(memoryRequirements)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mipmap) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMipmappedArrayGetMemoryRequirements_params_st),
            "::",
            stringify!(mipmap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMipmappedArrayGetMemoryRequirements_params_st),
            "::",
            stringify!(device)
        )
    );
}
impl Default for cuMipmappedArrayGetMemoryRequirements_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMipmappedArrayGetMemoryRequirements_params =
    cuMipmappedArrayGetMemoryRequirements_params_st;
#[repr(C)]
pub struct cuArrayGetPlane_params_st {
    pub pPlaneArray: *mut CUarray,
    pub hArray: CUarray,
    pub planeIdx: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuArrayGetPlane_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuArrayGetPlane_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuArrayGetPlane_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuArrayGetPlane_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuArrayGetPlane_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuArrayGetPlane_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPlaneArray) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuArrayGetPlane_params_st),
            "::",
            stringify!(pPlaneArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hArray) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuArrayGetPlane_params_st),
            "::",
            stringify!(hArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).planeIdx) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuArrayGetPlane_params_st),
            "::",
            stringify!(planeIdx)
        )
    );
}
impl Default for cuArrayGetPlane_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuArrayGetPlane_params = cuArrayGetPlane_params_st;
#[repr(C)]
pub struct cuArrayDestroy_params_st {
    pub hArray: CUarray,
}
#[test]
fn bindgen_test_layout_cuArrayDestroy_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuArrayDestroy_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuArrayDestroy_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cuArrayDestroy_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuArrayDestroy_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuArrayDestroy_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hArray) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuArrayDestroy_params_st),
            "::",
            stringify!(hArray)
        )
    );
}
impl Default for cuArrayDestroy_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuArrayDestroy_params = cuArrayDestroy_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuArray3DCreate_v2_params_st {
    pub pHandle: *mut CUarray,
    pub pAllocateArray: *const CUDA_ARRAY3D_DESCRIPTOR,
}
#[test]
fn bindgen_test_layout_cuArray3DCreate_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuArray3DCreate_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuArray3DCreate_v2_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuArray3DCreate_v2_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuArray3DCreate_v2_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuArray3DCreate_v2_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pHandle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuArray3DCreate_v2_params_st),
            "::",
            stringify!(pHandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pAllocateArray) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuArray3DCreate_v2_params_st),
            "::",
            stringify!(pAllocateArray)
        )
    );
}
impl Default for cuArray3DCreate_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuArray3DCreate_v2_params = cuArray3DCreate_v2_params_st;
#[repr(C)]
pub struct cuArray3DGetDescriptor_v2_params_st {
    pub pArrayDescriptor: *mut CUDA_ARRAY3D_DESCRIPTOR,
    pub hArray: CUarray,
}
#[test]
fn bindgen_test_layout_cuArray3DGetDescriptor_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuArray3DGetDescriptor_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuArray3DGetDescriptor_v2_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuArray3DGetDescriptor_v2_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuArray3DGetDescriptor_v2_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuArray3DGetDescriptor_v2_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pArrayDescriptor) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuArray3DGetDescriptor_v2_params_st),
            "::",
            stringify!(pArrayDescriptor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hArray) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuArray3DGetDescriptor_v2_params_st),
            "::",
            stringify!(hArray)
        )
    );
}
impl Default for cuArray3DGetDescriptor_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuArray3DGetDescriptor_v2_params = cuArray3DGetDescriptor_v2_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuMipmappedArrayCreate_params_st {
    pub pHandle: *mut CUmipmappedArray,
    pub pMipmappedArrayDesc: *const CUDA_ARRAY3D_DESCRIPTOR,
    pub numMipmapLevels: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuMipmappedArrayCreate_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMipmappedArrayCreate_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMipmappedArrayCreate_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuMipmappedArrayCreate_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMipmappedArrayCreate_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuMipmappedArrayCreate_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pHandle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMipmappedArrayCreate_params_st),
            "::",
            stringify!(pHandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pMipmappedArrayDesc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMipmappedArrayCreate_params_st),
            "::",
            stringify!(pMipmappedArrayDesc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numMipmapLevels) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMipmappedArrayCreate_params_st),
            "::",
            stringify!(numMipmapLevels)
        )
    );
}
impl Default for cuMipmappedArrayCreate_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMipmappedArrayCreate_params = cuMipmappedArrayCreate_params_st;
#[repr(C)]
pub struct cuMipmappedArrayGetLevel_params_st {
    pub pLevelArray: *mut CUarray,
    pub hMipmappedArray: CUmipmappedArray,
    pub level: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuMipmappedArrayGetLevel_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMipmappedArrayGetLevel_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMipmappedArrayGetLevel_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuMipmappedArrayGetLevel_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMipmappedArrayGetLevel_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuMipmappedArrayGetLevel_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pLevelArray) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMipmappedArrayGetLevel_params_st),
            "::",
            stringify!(pLevelArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hMipmappedArray) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMipmappedArrayGetLevel_params_st),
            "::",
            stringify!(hMipmappedArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).level) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMipmappedArrayGetLevel_params_st),
            "::",
            stringify!(level)
        )
    );
}
impl Default for cuMipmappedArrayGetLevel_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMipmappedArrayGetLevel_params = cuMipmappedArrayGetLevel_params_st;
#[repr(C)]
pub struct cuMipmappedArrayDestroy_params_st {
    pub hMipmappedArray: CUmipmappedArray,
}
#[test]
fn bindgen_test_layout_cuMipmappedArrayDestroy_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMipmappedArrayDestroy_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMipmappedArrayDestroy_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cuMipmappedArrayDestroy_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMipmappedArrayDestroy_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuMipmappedArrayDestroy_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hMipmappedArray) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMipmappedArrayDestroy_params_st),
            "::",
            stringify!(hMipmappedArray)
        )
    );
}
impl Default for cuMipmappedArrayDestroy_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMipmappedArrayDestroy_params = cuMipmappedArrayDestroy_params_st;
#[repr(C)]
pub struct cuMemGetHandleForAddressRange_params_st {
    pub handle: *mut ::std::os::raw::c_void,
    pub dptr: CUdeviceptr,
    pub size: usize,
    pub handleType: CUmemRangeHandleType,
    pub flags: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_cuMemGetHandleForAddressRange_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemGetHandleForAddressRange_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemGetHandleForAddressRange_params_st>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(cuMemGetHandleForAddressRange_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemGetHandleForAddressRange_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuMemGetHandleForAddressRange_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemGetHandleForAddressRange_params_st),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemGetHandleForAddressRange_params_st),
            "::",
            stringify!(dptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemGetHandleForAddressRange_params_st),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handleType) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemGetHandleForAddressRange_params_st),
            "::",
            stringify!(handleType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemGetHandleForAddressRange_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cuMemGetHandleForAddressRange_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemGetHandleForAddressRange_params = cuMemGetHandleForAddressRange_params_st;
#[repr(C)]
pub struct cuMemAddressReserve_params_st {
    pub ptr: *mut CUdeviceptr,
    pub size: usize,
    pub alignment: usize,
    pub addr: CUdeviceptr,
    pub flags: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_cuMemAddressReserve_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemAddressReserve_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemAddressReserve_params_st>(),
        40usize,
        concat!("Size of: ", stringify!(cuMemAddressReserve_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemAddressReserve_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemAddressReserve_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemAddressReserve_params_st),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemAddressReserve_params_st),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alignment) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemAddressReserve_params_st),
            "::",
            stringify!(alignment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemAddressReserve_params_st),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemAddressReserve_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cuMemAddressReserve_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemAddressReserve_params = cuMemAddressReserve_params_st;
#[repr(C)]
pub struct cuMemAddressFree_params_st {
    pub ptr: CUdeviceptr,
    pub size: usize,
}
#[test]
fn bindgen_test_layout_cuMemAddressFree_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemAddressFree_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemAddressFree_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuMemAddressFree_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemAddressFree_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemAddressFree_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemAddressFree_params_st),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemAddressFree_params_st),
            "::",
            stringify!(size)
        )
    );
}
impl Default for cuMemAddressFree_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemAddressFree_params = cuMemAddressFree_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuMemCreate_params_st {
    pub handle: *mut CUmemGenericAllocationHandle,
    pub size: usize,
    pub prop: *const CUmemAllocationProp,
    pub flags: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_cuMemCreate_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemCreate_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemCreate_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuMemCreate_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemCreate_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemCreate_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemCreate_params_st),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemCreate_params_st),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemCreate_params_st),
            "::",
            stringify!(prop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemCreate_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cuMemCreate_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemCreate_params = cuMemCreate_params_st;
#[repr(C)]
pub struct cuMemRelease_params_st {
    pub handle: CUmemGenericAllocationHandle,
}
#[test]
fn bindgen_test_layout_cuMemRelease_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemRelease_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemRelease_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cuMemRelease_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemRelease_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemRelease_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemRelease_params_st),
            "::",
            stringify!(handle)
        )
    );
}
impl Default for cuMemRelease_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemRelease_params = cuMemRelease_params_st;
#[repr(C)]
pub struct cuMemMap_params_st {
    pub ptr: CUdeviceptr,
    pub size: usize,
    pub offset: usize,
    pub handle: CUmemGenericAllocationHandle,
    pub flags: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_cuMemMap_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemMap_params_st> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemMap_params_st>(),
        40usize,
        concat!("Size of: ", stringify!(cuMemMap_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemMap_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemMap_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemMap_params_st),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemMap_params_st),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemMap_params_st),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemMap_params_st),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemMap_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cuMemMap_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemMap_params = cuMemMap_params_st;
#[repr(C)]
pub struct cuMemMapArrayAsync_ptsz_params_st {
    pub mapInfoList: *mut CUarrayMapInfo,
    pub count: ::std::os::raw::c_uint,
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuMemMapArrayAsync_ptsz_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemMapArrayAsync_ptsz_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemMapArrayAsync_ptsz_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuMemMapArrayAsync_ptsz_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemMapArrayAsync_ptsz_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuMemMapArrayAsync_ptsz_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mapInfoList) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemMapArrayAsync_ptsz_params_st),
            "::",
            stringify!(mapInfoList)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemMapArrayAsync_ptsz_params_st),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemMapArrayAsync_ptsz_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuMemMapArrayAsync_ptsz_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemMapArrayAsync_ptsz_params = cuMemMapArrayAsync_ptsz_params_st;
#[repr(C)]
pub struct cuMemUnmap_params_st {
    pub ptr: CUdeviceptr,
    pub size: usize,
}
#[test]
fn bindgen_test_layout_cuMemUnmap_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemUnmap_params_st> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemUnmap_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuMemUnmap_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemUnmap_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemUnmap_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemUnmap_params_st),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemUnmap_params_st),
            "::",
            stringify!(size)
        )
    );
}
impl Default for cuMemUnmap_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemUnmap_params = cuMemUnmap_params_st;
#[repr(C)]
pub struct cuMemSetAccess_params_st {
    pub ptr: CUdeviceptr,
    pub size: usize,
    pub desc: *const CUmemAccessDesc,
    pub count: usize,
}
#[test]
fn bindgen_test_layout_cuMemSetAccess_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemSetAccess_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemSetAccess_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuMemSetAccess_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemSetAccess_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemSetAccess_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemSetAccess_params_st),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemSetAccess_params_st),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).desc) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemSetAccess_params_st),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemSetAccess_params_st),
            "::",
            stringify!(count)
        )
    );
}
impl Default for cuMemSetAccess_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemSetAccess_params = cuMemSetAccess_params_st;
#[repr(C)]
pub struct cuMemGetAccess_params_st {
    pub flags: *mut ::std::os::raw::c_ulonglong,
    pub location: *const CUmemLocation,
    pub ptr: CUdeviceptr,
}
#[test]
fn bindgen_test_layout_cuMemGetAccess_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemGetAccess_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemGetAccess_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuMemGetAccess_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemGetAccess_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemGetAccess_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemGetAccess_params_st),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).location) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemGetAccess_params_st),
            "::",
            stringify!(location)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemGetAccess_params_st),
            "::",
            stringify!(ptr)
        )
    );
}
impl Default for cuMemGetAccess_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemGetAccess_params = cuMemGetAccess_params_st;
#[repr(C)]
pub struct cuMemExportToShareableHandle_params_st {
    pub shareableHandle: *mut ::std::os::raw::c_void,
    pub handle: CUmemGenericAllocationHandle,
    pub handleType: CUmemAllocationHandleType,
    pub flags: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_cuMemExportToShareableHandle_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemExportToShareableHandle_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemExportToShareableHandle_params_st>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(cuMemExportToShareableHandle_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemExportToShareableHandle_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuMemExportToShareableHandle_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shareableHandle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemExportToShareableHandle_params_st),
            "::",
            stringify!(shareableHandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemExportToShareableHandle_params_st),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handleType) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemExportToShareableHandle_params_st),
            "::",
            stringify!(handleType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemExportToShareableHandle_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cuMemExportToShareableHandle_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemExportToShareableHandle_params = cuMemExportToShareableHandle_params_st;
#[repr(C)]
pub struct cuMemImportFromShareableHandle_params_st {
    pub handle: *mut CUmemGenericAllocationHandle,
    pub osHandle: *mut ::std::os::raw::c_void,
    pub shHandleType: CUmemAllocationHandleType,
}
#[test]
fn bindgen_test_layout_cuMemImportFromShareableHandle_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemImportFromShareableHandle_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemImportFromShareableHandle_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cuMemImportFromShareableHandle_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemImportFromShareableHandle_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuMemImportFromShareableHandle_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemImportFromShareableHandle_params_st),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).osHandle) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemImportFromShareableHandle_params_st),
            "::",
            stringify!(osHandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shHandleType) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemImportFromShareableHandle_params_st),
            "::",
            stringify!(shHandleType)
        )
    );
}
impl Default for cuMemImportFromShareableHandle_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemImportFromShareableHandle_params = cuMemImportFromShareableHandle_params_st;
#[repr(C)]
pub struct cuMemGetAllocationGranularity_params_st {
    pub granularity: *mut usize,
    pub prop: *const CUmemAllocationProp,
    pub option: CUmemAllocationGranularity_flags,
}
#[test]
fn bindgen_test_layout_cuMemGetAllocationGranularity_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemGetAllocationGranularity_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemGetAllocationGranularity_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cuMemGetAllocationGranularity_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemGetAllocationGranularity_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuMemGetAllocationGranularity_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).granularity) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemGetAllocationGranularity_params_st),
            "::",
            stringify!(granularity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemGetAllocationGranularity_params_st),
            "::",
            stringify!(prop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).option) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemGetAllocationGranularity_params_st),
            "::",
            stringify!(option)
        )
    );
}
impl Default for cuMemGetAllocationGranularity_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemGetAllocationGranularity_params = cuMemGetAllocationGranularity_params_st;
#[repr(C)]
pub struct cuMemGetAllocationPropertiesFromHandle_params_st {
    pub prop: *mut CUmemAllocationProp,
    pub handle: CUmemGenericAllocationHandle,
}
#[test]
fn bindgen_test_layout_cuMemGetAllocationPropertiesFromHandle_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemGetAllocationPropertiesFromHandle_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemGetAllocationPropertiesFromHandle_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cuMemGetAllocationPropertiesFromHandle_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemGetAllocationPropertiesFromHandle_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuMemGetAllocationPropertiesFromHandle_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prop) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemGetAllocationPropertiesFromHandle_params_st),
            "::",
            stringify!(prop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemGetAllocationPropertiesFromHandle_params_st),
            "::",
            stringify!(handle)
        )
    );
}
impl Default for cuMemGetAllocationPropertiesFromHandle_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemGetAllocationPropertiesFromHandle_params =
    cuMemGetAllocationPropertiesFromHandle_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuMemRetainAllocationHandle_params_st {
    pub handle: *mut CUmemGenericAllocationHandle,
    pub addr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_cuMemRetainAllocationHandle_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemRetainAllocationHandle_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemRetainAllocationHandle_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cuMemRetainAllocationHandle_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemRetainAllocationHandle_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuMemRetainAllocationHandle_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemRetainAllocationHandle_params_st),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemRetainAllocationHandle_params_st),
            "::",
            stringify!(addr)
        )
    );
}
impl Default for cuMemRetainAllocationHandle_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemRetainAllocationHandle_params = cuMemRetainAllocationHandle_params_st;
#[repr(C)]
pub struct cuMemFreeAsync_ptsz_params_st {
    pub dptr: CUdeviceptr,
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuMemFreeAsync_ptsz_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemFreeAsync_ptsz_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemFreeAsync_ptsz_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuMemFreeAsync_ptsz_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemFreeAsync_ptsz_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemFreeAsync_ptsz_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemFreeAsync_ptsz_params_st),
            "::",
            stringify!(dptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemFreeAsync_ptsz_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuMemFreeAsync_ptsz_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemFreeAsync_ptsz_params = cuMemFreeAsync_ptsz_params_st;
#[repr(C)]
pub struct cuMemAllocAsync_ptsz_params_st {
    pub dptr: *mut CUdeviceptr,
    pub bytesize: usize,
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuMemAllocAsync_ptsz_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemAllocAsync_ptsz_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemAllocAsync_ptsz_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuMemAllocAsync_ptsz_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemAllocAsync_ptsz_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemAllocAsync_ptsz_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemAllocAsync_ptsz_params_st),
            "::",
            stringify!(dptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytesize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemAllocAsync_ptsz_params_st),
            "::",
            stringify!(bytesize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemAllocAsync_ptsz_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuMemAllocAsync_ptsz_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemAllocAsync_ptsz_params = cuMemAllocAsync_ptsz_params_st;
#[repr(C)]
pub struct cuMemPoolTrimTo_params_st {
    pub pool: CUmemoryPool,
    pub minBytesToKeep: usize,
}
#[test]
fn bindgen_test_layout_cuMemPoolTrimTo_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemPoolTrimTo_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemPoolTrimTo_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuMemPoolTrimTo_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemPoolTrimTo_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemPoolTrimTo_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pool) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemPoolTrimTo_params_st),
            "::",
            stringify!(pool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minBytesToKeep) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemPoolTrimTo_params_st),
            "::",
            stringify!(minBytesToKeep)
        )
    );
}
impl Default for cuMemPoolTrimTo_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemPoolTrimTo_params = cuMemPoolTrimTo_params_st;
#[repr(C)]
pub struct cuMemPoolSetAttribute_params_st {
    pub pool: CUmemoryPool,
    pub attr: CUmemPool_attribute,
    pub value: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_cuMemPoolSetAttribute_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemPoolSetAttribute_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemPoolSetAttribute_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuMemPoolSetAttribute_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemPoolSetAttribute_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemPoolSetAttribute_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pool) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemPoolSetAttribute_params_st),
            "::",
            stringify!(pool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemPoolSetAttribute_params_st),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemPoolSetAttribute_params_st),
            "::",
            stringify!(value)
        )
    );
}
impl Default for cuMemPoolSetAttribute_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemPoolSetAttribute_params = cuMemPoolSetAttribute_params_st;
#[repr(C)]
pub struct cuMemPoolGetAttribute_params_st {
    pub pool: CUmemoryPool,
    pub attr: CUmemPool_attribute,
    pub value: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_cuMemPoolGetAttribute_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemPoolGetAttribute_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemPoolGetAttribute_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuMemPoolGetAttribute_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemPoolGetAttribute_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemPoolGetAttribute_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pool) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemPoolGetAttribute_params_st),
            "::",
            stringify!(pool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemPoolGetAttribute_params_st),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemPoolGetAttribute_params_st),
            "::",
            stringify!(value)
        )
    );
}
impl Default for cuMemPoolGetAttribute_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemPoolGetAttribute_params = cuMemPoolGetAttribute_params_st;
#[repr(C)]
pub struct cuMemPoolSetAccess_params_st {
    pub pool: CUmemoryPool,
    pub map: *const CUmemAccessDesc,
    pub count: usize,
}
#[test]
fn bindgen_test_layout_cuMemPoolSetAccess_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemPoolSetAccess_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemPoolSetAccess_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuMemPoolSetAccess_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemPoolSetAccess_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemPoolSetAccess_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pool) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemPoolSetAccess_params_st),
            "::",
            stringify!(pool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).map) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemPoolSetAccess_params_st),
            "::",
            stringify!(map)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemPoolSetAccess_params_st),
            "::",
            stringify!(count)
        )
    );
}
impl Default for cuMemPoolSetAccess_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemPoolSetAccess_params = cuMemPoolSetAccess_params_st;
#[repr(C)]
pub struct cuMemPoolGetAccess_params_st {
    pub flags: *mut CUmemAccess_flags,
    pub memPool: CUmemoryPool,
    pub location: *mut CUmemLocation,
}
#[test]
fn bindgen_test_layout_cuMemPoolGetAccess_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemPoolGetAccess_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemPoolGetAccess_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuMemPoolGetAccess_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemPoolGetAccess_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemPoolGetAccess_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemPoolGetAccess_params_st),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memPool) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemPoolGetAccess_params_st),
            "::",
            stringify!(memPool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).location) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemPoolGetAccess_params_st),
            "::",
            stringify!(location)
        )
    );
}
impl Default for cuMemPoolGetAccess_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemPoolGetAccess_params = cuMemPoolGetAccess_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuMemPoolCreate_params_st {
    pub pool: *mut CUmemoryPool,
    pub poolProps: *const CUmemPoolProps,
}
#[test]
fn bindgen_test_layout_cuMemPoolCreate_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemPoolCreate_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemPoolCreate_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuMemPoolCreate_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemPoolCreate_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemPoolCreate_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pool) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemPoolCreate_params_st),
            "::",
            stringify!(pool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).poolProps) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemPoolCreate_params_st),
            "::",
            stringify!(poolProps)
        )
    );
}
impl Default for cuMemPoolCreate_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemPoolCreate_params = cuMemPoolCreate_params_st;
#[repr(C)]
pub struct cuMemPoolDestroy_params_st {
    pub pool: CUmemoryPool,
}
#[test]
fn bindgen_test_layout_cuMemPoolDestroy_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemPoolDestroy_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemPoolDestroy_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cuMemPoolDestroy_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemPoolDestroy_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemPoolDestroy_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pool) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemPoolDestroy_params_st),
            "::",
            stringify!(pool)
        )
    );
}
impl Default for cuMemPoolDestroy_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemPoolDestroy_params = cuMemPoolDestroy_params_st;
#[repr(C)]
pub struct cuMemAllocFromPoolAsync_ptsz_params_st {
    pub dptr: *mut CUdeviceptr,
    pub bytesize: usize,
    pub pool: CUmemoryPool,
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuMemAllocFromPoolAsync_ptsz_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemAllocFromPoolAsync_ptsz_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemAllocFromPoolAsync_ptsz_params_st>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(cuMemAllocFromPoolAsync_ptsz_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemAllocFromPoolAsync_ptsz_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuMemAllocFromPoolAsync_ptsz_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemAllocFromPoolAsync_ptsz_params_st),
            "::",
            stringify!(dptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytesize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemAllocFromPoolAsync_ptsz_params_st),
            "::",
            stringify!(bytesize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pool) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemAllocFromPoolAsync_ptsz_params_st),
            "::",
            stringify!(pool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemAllocFromPoolAsync_ptsz_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuMemAllocFromPoolAsync_ptsz_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemAllocFromPoolAsync_ptsz_params = cuMemAllocFromPoolAsync_ptsz_params_st;
#[repr(C)]
pub struct cuMemPoolExportToShareableHandle_params_st {
    pub handle_out: *mut ::std::os::raw::c_void,
    pub pool: CUmemoryPool,
    pub handleType: CUmemAllocationHandleType,
    pub flags: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_cuMemPoolExportToShareableHandle_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemPoolExportToShareableHandle_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemPoolExportToShareableHandle_params_st>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(cuMemPoolExportToShareableHandle_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemPoolExportToShareableHandle_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuMemPoolExportToShareableHandle_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle_out) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemPoolExportToShareableHandle_params_st),
            "::",
            stringify!(handle_out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pool) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemPoolExportToShareableHandle_params_st),
            "::",
            stringify!(pool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handleType) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemPoolExportToShareableHandle_params_st),
            "::",
            stringify!(handleType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemPoolExportToShareableHandle_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cuMemPoolExportToShareableHandle_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemPoolExportToShareableHandle_params = cuMemPoolExportToShareableHandle_params_st;
#[repr(C)]
pub struct cuMemPoolImportFromShareableHandle_params_st {
    pub pool_out: *mut CUmemoryPool,
    pub handle: *mut ::std::os::raw::c_void,
    pub handleType: CUmemAllocationHandleType,
    pub flags: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_cuMemPoolImportFromShareableHandle_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemPoolImportFromShareableHandle_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemPoolImportFromShareableHandle_params_st>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(cuMemPoolImportFromShareableHandle_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemPoolImportFromShareableHandle_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuMemPoolImportFromShareableHandle_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pool_out) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemPoolImportFromShareableHandle_params_st),
            "::",
            stringify!(pool_out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemPoolImportFromShareableHandle_params_st),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handleType) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemPoolImportFromShareableHandle_params_st),
            "::",
            stringify!(handleType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemPoolImportFromShareableHandle_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cuMemPoolImportFromShareableHandle_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemPoolImportFromShareableHandle_params = cuMemPoolImportFromShareableHandle_params_st;
#[repr(C)]
pub struct cuMemPoolExportPointer_params_st {
    pub shareData_out: *mut CUmemPoolPtrExportData,
    pub ptr: CUdeviceptr,
}
#[test]
fn bindgen_test_layout_cuMemPoolExportPointer_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemPoolExportPointer_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemPoolExportPointer_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuMemPoolExportPointer_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemPoolExportPointer_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuMemPoolExportPointer_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shareData_out) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemPoolExportPointer_params_st),
            "::",
            stringify!(shareData_out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemPoolExportPointer_params_st),
            "::",
            stringify!(ptr)
        )
    );
}
impl Default for cuMemPoolExportPointer_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemPoolExportPointer_params = cuMemPoolExportPointer_params_st;
#[repr(C)]
pub struct cuMemPoolImportPointer_params_st {
    pub ptr_out: *mut CUdeviceptr,
    pub pool: CUmemoryPool,
    pub shareData: *mut CUmemPoolPtrExportData,
}
#[test]
fn bindgen_test_layout_cuMemPoolImportPointer_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemPoolImportPointer_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemPoolImportPointer_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuMemPoolImportPointer_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemPoolImportPointer_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuMemPoolImportPointer_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr_out) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemPoolImportPointer_params_st),
            "::",
            stringify!(ptr_out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pool) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemPoolImportPointer_params_st),
            "::",
            stringify!(pool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shareData) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemPoolImportPointer_params_st),
            "::",
            stringify!(shareData)
        )
    );
}
impl Default for cuMemPoolImportPointer_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemPoolImportPointer_params = cuMemPoolImportPointer_params_st;
#[repr(C)]
pub struct cuPointerGetAttribute_params_st {
    pub data: *mut ::std::os::raw::c_void,
    pub attribute: CUpointer_attribute,
    pub ptr: CUdeviceptr,
}
#[test]
fn bindgen_test_layout_cuPointerGetAttribute_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuPointerGetAttribute_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuPointerGetAttribute_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuPointerGetAttribute_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuPointerGetAttribute_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuPointerGetAttribute_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuPointerGetAttribute_params_st),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attribute) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuPointerGetAttribute_params_st),
            "::",
            stringify!(attribute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuPointerGetAttribute_params_st),
            "::",
            stringify!(ptr)
        )
    );
}
impl Default for cuPointerGetAttribute_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuPointerGetAttribute_params = cuPointerGetAttribute_params_st;
#[repr(C)]
pub struct cuMemPrefetchAsync_ptsz_params_st {
    pub devPtr: CUdeviceptr,
    pub count: usize,
    pub dstDevice: CUdevice,
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuMemPrefetchAsync_ptsz_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemPrefetchAsync_ptsz_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemPrefetchAsync_ptsz_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuMemPrefetchAsync_ptsz_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemPrefetchAsync_ptsz_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuMemPrefetchAsync_ptsz_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).devPtr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemPrefetchAsync_ptsz_params_st),
            "::",
            stringify!(devPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemPrefetchAsync_ptsz_params_st),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstDevice) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemPrefetchAsync_ptsz_params_st),
            "::",
            stringify!(dstDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemPrefetchAsync_ptsz_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuMemPrefetchAsync_ptsz_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemPrefetchAsync_ptsz_params = cuMemPrefetchAsync_ptsz_params_st;
#[repr(C)]
pub struct cuMemAdvise_params_st {
    pub devPtr: CUdeviceptr,
    pub count: usize,
    pub advice: CUmem_advise,
    pub device: CUdevice,
}
#[test]
fn bindgen_test_layout_cuMemAdvise_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemAdvise_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemAdvise_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuMemAdvise_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemAdvise_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemAdvise_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).devPtr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemAdvise_params_st),
            "::",
            stringify!(devPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemAdvise_params_st),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).advice) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemAdvise_params_st),
            "::",
            stringify!(advice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemAdvise_params_st),
            "::",
            stringify!(device)
        )
    );
}
impl Default for cuMemAdvise_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemAdvise_params = cuMemAdvise_params_st;
#[repr(C)]
pub struct cuMemRangeGetAttribute_params_st {
    pub data: *mut ::std::os::raw::c_void,
    pub dataSize: usize,
    pub attribute: CUmem_range_attribute,
    pub devPtr: CUdeviceptr,
    pub count: usize,
}
#[test]
fn bindgen_test_layout_cuMemRangeGetAttribute_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemRangeGetAttribute_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemRangeGetAttribute_params_st>(),
        40usize,
        concat!("Size of: ", stringify!(cuMemRangeGetAttribute_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemRangeGetAttribute_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuMemRangeGetAttribute_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemRangeGetAttribute_params_st),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dataSize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemRangeGetAttribute_params_st),
            "::",
            stringify!(dataSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attribute) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemRangeGetAttribute_params_st),
            "::",
            stringify!(attribute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).devPtr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemRangeGetAttribute_params_st),
            "::",
            stringify!(devPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemRangeGetAttribute_params_st),
            "::",
            stringify!(count)
        )
    );
}
impl Default for cuMemRangeGetAttribute_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemRangeGetAttribute_params = cuMemRangeGetAttribute_params_st;
#[repr(C)]
pub struct cuMemRangeGetAttributes_params_st {
    pub data: *mut *mut ::std::os::raw::c_void,
    pub dataSizes: *mut usize,
    pub attributes: *mut CUmem_range_attribute,
    pub numAttributes: usize,
    pub devPtr: CUdeviceptr,
    pub count: usize,
}
#[test]
fn bindgen_test_layout_cuMemRangeGetAttributes_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemRangeGetAttributes_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemRangeGetAttributes_params_st>(),
        48usize,
        concat!("Size of: ", stringify!(cuMemRangeGetAttributes_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemRangeGetAttributes_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuMemRangeGetAttributes_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemRangeGetAttributes_params_st),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dataSizes) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemRangeGetAttributes_params_st),
            "::",
            stringify!(dataSizes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attributes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemRangeGetAttributes_params_st),
            "::",
            stringify!(attributes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numAttributes) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemRangeGetAttributes_params_st),
            "::",
            stringify!(numAttributes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).devPtr) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemRangeGetAttributes_params_st),
            "::",
            stringify!(devPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemRangeGetAttributes_params_st),
            "::",
            stringify!(count)
        )
    );
}
impl Default for cuMemRangeGetAttributes_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemRangeGetAttributes_params = cuMemRangeGetAttributes_params_st;
#[repr(C)]
pub struct cuPointerSetAttribute_params_st {
    pub value: *const ::std::os::raw::c_void,
    pub attribute: CUpointer_attribute,
    pub ptr: CUdeviceptr,
}
#[test]
fn bindgen_test_layout_cuPointerSetAttribute_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuPointerSetAttribute_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuPointerSetAttribute_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuPointerSetAttribute_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuPointerSetAttribute_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuPointerSetAttribute_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuPointerSetAttribute_params_st),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attribute) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuPointerSetAttribute_params_st),
            "::",
            stringify!(attribute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuPointerSetAttribute_params_st),
            "::",
            stringify!(ptr)
        )
    );
}
impl Default for cuPointerSetAttribute_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuPointerSetAttribute_params = cuPointerSetAttribute_params_st;
#[repr(C)]
pub struct cuPointerGetAttributes_params_st {
    pub numAttributes: ::std::os::raw::c_uint,
    pub attributes: *mut CUpointer_attribute,
    pub data: *mut *mut ::std::os::raw::c_void,
    pub ptr: CUdeviceptr,
}
#[test]
fn bindgen_test_layout_cuPointerGetAttributes_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuPointerGetAttributes_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuPointerGetAttributes_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuPointerGetAttributes_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuPointerGetAttributes_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuPointerGetAttributes_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numAttributes) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuPointerGetAttributes_params_st),
            "::",
            stringify!(numAttributes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attributes) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuPointerGetAttributes_params_st),
            "::",
            stringify!(attributes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuPointerGetAttributes_params_st),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuPointerGetAttributes_params_st),
            "::",
            stringify!(ptr)
        )
    );
}
impl Default for cuPointerGetAttributes_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuPointerGetAttributes_params = cuPointerGetAttributes_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuStreamCreate_params_st {
    pub phStream: *mut CUstream,
    pub Flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuStreamCreate_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuStreamCreate_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuStreamCreate_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuStreamCreate_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuStreamCreate_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuStreamCreate_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phStream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamCreate_params_st),
            "::",
            stringify!(phStream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamCreate_params_st),
            "::",
            stringify!(Flags)
        )
    );
}
impl Default for cuStreamCreate_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuStreamCreate_params = cuStreamCreate_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuStreamCreateWithPriority_params_st {
    pub phStream: *mut CUstream,
    pub flags: ::std::os::raw::c_uint,
    pub priority: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cuStreamCreateWithPriority_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuStreamCreateWithPriority_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuStreamCreateWithPriority_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cuStreamCreateWithPriority_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuStreamCreateWithPriority_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuStreamCreateWithPriority_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phStream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamCreateWithPriority_params_st),
            "::",
            stringify!(phStream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamCreateWithPriority_params_st),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priority) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamCreateWithPriority_params_st),
            "::",
            stringify!(priority)
        )
    );
}
impl Default for cuStreamCreateWithPriority_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuStreamCreateWithPriority_params = cuStreamCreateWithPriority_params_st;
#[repr(C)]
pub struct cuStreamGetPriority_ptsz_params_st {
    pub hStream: CUstream,
    pub priority: *mut ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cuStreamGetPriority_ptsz_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuStreamGetPriority_ptsz_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuStreamGetPriority_ptsz_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuStreamGetPriority_ptsz_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuStreamGetPriority_ptsz_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuStreamGetPriority_ptsz_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamGetPriority_ptsz_params_st),
            "::",
            stringify!(hStream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priority) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamGetPriority_ptsz_params_st),
            "::",
            stringify!(priority)
        )
    );
}
impl Default for cuStreamGetPriority_ptsz_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuStreamGetPriority_ptsz_params = cuStreamGetPriority_ptsz_params_st;
#[repr(C)]
pub struct cuStreamGetFlags_ptsz_params_st {
    pub hStream: CUstream,
    pub flags: *mut ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuStreamGetFlags_ptsz_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuStreamGetFlags_ptsz_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuStreamGetFlags_ptsz_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuStreamGetFlags_ptsz_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuStreamGetFlags_ptsz_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuStreamGetFlags_ptsz_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamGetFlags_ptsz_params_st),
            "::",
            stringify!(hStream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamGetFlags_ptsz_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cuStreamGetFlags_ptsz_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuStreamGetFlags_ptsz_params = cuStreamGetFlags_ptsz_params_st;
#[repr(C)]
pub struct cuStreamGetId_ptsz_params_st {
    pub hStream: CUstream,
    pub streamId: *mut ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_cuStreamGetId_ptsz_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuStreamGetId_ptsz_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuStreamGetId_ptsz_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuStreamGetId_ptsz_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuStreamGetId_ptsz_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuStreamGetId_ptsz_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamGetId_ptsz_params_st),
            "::",
            stringify!(hStream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).streamId) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamGetId_ptsz_params_st),
            "::",
            stringify!(streamId)
        )
    );
}
impl Default for cuStreamGetId_ptsz_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuStreamGetId_ptsz_params = cuStreamGetId_ptsz_params_st;
#[repr(C)]
pub struct cuStreamGetCtx_ptsz_params_st {
    pub hStream: CUstream,
    pub pctx: *mut CUcontext,
}
#[test]
fn bindgen_test_layout_cuStreamGetCtx_ptsz_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuStreamGetCtx_ptsz_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuStreamGetCtx_ptsz_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuStreamGetCtx_ptsz_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuStreamGetCtx_ptsz_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuStreamGetCtx_ptsz_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamGetCtx_ptsz_params_st),
            "::",
            stringify!(hStream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pctx) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamGetCtx_ptsz_params_st),
            "::",
            stringify!(pctx)
        )
    );
}
impl Default for cuStreamGetCtx_ptsz_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuStreamGetCtx_ptsz_params = cuStreamGetCtx_ptsz_params_st;
#[repr(C)]
pub struct cuStreamWaitEvent_ptsz_params_st {
    pub hStream: CUstream,
    pub hEvent: CUevent,
    pub Flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuStreamWaitEvent_ptsz_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuStreamWaitEvent_ptsz_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuStreamWaitEvent_ptsz_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuStreamWaitEvent_ptsz_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuStreamWaitEvent_ptsz_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuStreamWaitEvent_ptsz_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWaitEvent_ptsz_params_st),
            "::",
            stringify!(hStream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hEvent) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWaitEvent_ptsz_params_st),
            "::",
            stringify!(hEvent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWaitEvent_ptsz_params_st),
            "::",
            stringify!(Flags)
        )
    );
}
impl Default for cuStreamWaitEvent_ptsz_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuStreamWaitEvent_ptsz_params = cuStreamWaitEvent_ptsz_params_st;
#[repr(C)]
pub struct cuStreamAddCallback_ptsz_params_st {
    pub hStream: CUstream,
    pub callback: CUstreamCallback,
    pub userData: *mut ::std::os::raw::c_void,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuStreamAddCallback_ptsz_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuStreamAddCallback_ptsz_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuStreamAddCallback_ptsz_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuStreamAddCallback_ptsz_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuStreamAddCallback_ptsz_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuStreamAddCallback_ptsz_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamAddCallback_ptsz_params_st),
            "::",
            stringify!(hStream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).callback) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamAddCallback_ptsz_params_st),
            "::",
            stringify!(callback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).userData) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamAddCallback_ptsz_params_st),
            "::",
            stringify!(userData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamAddCallback_ptsz_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cuStreamAddCallback_ptsz_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuStreamAddCallback_ptsz_params = cuStreamAddCallback_ptsz_params_st;
#[repr(C)]
pub struct cuStreamBeginCapture_v2_ptsz_params_st {
    pub hStream: CUstream,
    pub mode: CUstreamCaptureMode,
}
#[test]
fn bindgen_test_layout_cuStreamBeginCapture_v2_ptsz_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuStreamBeginCapture_v2_ptsz_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuStreamBeginCapture_v2_ptsz_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cuStreamBeginCapture_v2_ptsz_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuStreamBeginCapture_v2_ptsz_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuStreamBeginCapture_v2_ptsz_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamBeginCapture_v2_ptsz_params_st),
            "::",
            stringify!(hStream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamBeginCapture_v2_ptsz_params_st),
            "::",
            stringify!(mode)
        )
    );
}
impl Default for cuStreamBeginCapture_v2_ptsz_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuStreamBeginCapture_v2_ptsz_params = cuStreamBeginCapture_v2_ptsz_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuThreadExchangeStreamCaptureMode_params_st {
    pub mode: *mut CUstreamCaptureMode,
}
#[test]
fn bindgen_test_layout_cuThreadExchangeStreamCaptureMode_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuThreadExchangeStreamCaptureMode_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuThreadExchangeStreamCaptureMode_params_st>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(cuThreadExchangeStreamCaptureMode_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuThreadExchangeStreamCaptureMode_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuThreadExchangeStreamCaptureMode_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuThreadExchangeStreamCaptureMode_params_st),
            "::",
            stringify!(mode)
        )
    );
}
impl Default for cuThreadExchangeStreamCaptureMode_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuThreadExchangeStreamCaptureMode_params = cuThreadExchangeStreamCaptureMode_params_st;
#[repr(C)]
pub struct cuStreamEndCapture_ptsz_params_st {
    pub hStream: CUstream,
    pub phGraph: *mut CUgraph,
}
#[test]
fn bindgen_test_layout_cuStreamEndCapture_ptsz_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuStreamEndCapture_ptsz_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuStreamEndCapture_ptsz_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuStreamEndCapture_ptsz_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuStreamEndCapture_ptsz_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuStreamEndCapture_ptsz_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamEndCapture_ptsz_params_st),
            "::",
            stringify!(hStream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phGraph) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamEndCapture_ptsz_params_st),
            "::",
            stringify!(phGraph)
        )
    );
}
impl Default for cuStreamEndCapture_ptsz_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuStreamEndCapture_ptsz_params = cuStreamEndCapture_ptsz_params_st;
#[repr(C)]
pub struct cuStreamIsCapturing_ptsz_params_st {
    pub hStream: CUstream,
    pub captureStatus: *mut CUstreamCaptureStatus,
}
#[test]
fn bindgen_test_layout_cuStreamIsCapturing_ptsz_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuStreamIsCapturing_ptsz_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuStreamIsCapturing_ptsz_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuStreamIsCapturing_ptsz_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuStreamIsCapturing_ptsz_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuStreamIsCapturing_ptsz_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamIsCapturing_ptsz_params_st),
            "::",
            stringify!(hStream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).captureStatus) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamIsCapturing_ptsz_params_st),
            "::",
            stringify!(captureStatus)
        )
    );
}
impl Default for cuStreamIsCapturing_ptsz_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuStreamIsCapturing_ptsz_params = cuStreamIsCapturing_ptsz_params_st;
#[repr(C)]
pub struct cuStreamGetCaptureInfo_v2_ptsz_params_st {
    pub hStream: CUstream,
    pub captureStatus_out: *mut CUstreamCaptureStatus,
    pub id_out: *mut cuuint64_t,
    pub graph_out: *mut CUgraph,
    pub dependencies_out: *mut *const CUgraphNode,
    pub numDependencies_out: *mut usize,
}
#[test]
fn bindgen_test_layout_cuStreamGetCaptureInfo_v2_ptsz_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuStreamGetCaptureInfo_v2_ptsz_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuStreamGetCaptureInfo_v2_ptsz_params_st>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(cuStreamGetCaptureInfo_v2_ptsz_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuStreamGetCaptureInfo_v2_ptsz_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuStreamGetCaptureInfo_v2_ptsz_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamGetCaptureInfo_v2_ptsz_params_st),
            "::",
            stringify!(hStream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).captureStatus_out) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamGetCaptureInfo_v2_ptsz_params_st),
            "::",
            stringify!(captureStatus_out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id_out) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamGetCaptureInfo_v2_ptsz_params_st),
            "::",
            stringify!(id_out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graph_out) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamGetCaptureInfo_v2_ptsz_params_st),
            "::",
            stringify!(graph_out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dependencies_out) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamGetCaptureInfo_v2_ptsz_params_st),
            "::",
            stringify!(dependencies_out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numDependencies_out) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamGetCaptureInfo_v2_ptsz_params_st),
            "::",
            stringify!(numDependencies_out)
        )
    );
}
impl Default for cuStreamGetCaptureInfo_v2_ptsz_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuStreamGetCaptureInfo_v2_ptsz_params = cuStreamGetCaptureInfo_v2_ptsz_params_st;
#[repr(C)]
pub struct cuStreamUpdateCaptureDependencies_ptsz_params_st {
    pub hStream: CUstream,
    pub dependencies: *mut CUgraphNode,
    pub numDependencies: usize,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuStreamUpdateCaptureDependencies_ptsz_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuStreamUpdateCaptureDependencies_ptsz_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuStreamUpdateCaptureDependencies_ptsz_params_st>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(cuStreamUpdateCaptureDependencies_ptsz_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuStreamUpdateCaptureDependencies_ptsz_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuStreamUpdateCaptureDependencies_ptsz_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamUpdateCaptureDependencies_ptsz_params_st),
            "::",
            stringify!(hStream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dependencies) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamUpdateCaptureDependencies_ptsz_params_st),
            "::",
            stringify!(dependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numDependencies) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamUpdateCaptureDependencies_ptsz_params_st),
            "::",
            stringify!(numDependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamUpdateCaptureDependencies_ptsz_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cuStreamUpdateCaptureDependencies_ptsz_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuStreamUpdateCaptureDependencies_ptsz_params =
    cuStreamUpdateCaptureDependencies_ptsz_params_st;
#[repr(C)]
pub struct cuStreamAttachMemAsync_ptsz_params_st {
    pub hStream: CUstream,
    pub dptr: CUdeviceptr,
    pub length: usize,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuStreamAttachMemAsync_ptsz_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuStreamAttachMemAsync_ptsz_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuStreamAttachMemAsync_ptsz_params_st>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(cuStreamAttachMemAsync_ptsz_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuStreamAttachMemAsync_ptsz_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuStreamAttachMemAsync_ptsz_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamAttachMemAsync_ptsz_params_st),
            "::",
            stringify!(hStream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamAttachMemAsync_ptsz_params_st),
            "::",
            stringify!(dptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamAttachMemAsync_ptsz_params_st),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamAttachMemAsync_ptsz_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cuStreamAttachMemAsync_ptsz_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuStreamAttachMemAsync_ptsz_params = cuStreamAttachMemAsync_ptsz_params_st;
#[repr(C)]
pub struct cuStreamQuery_ptsz_params_st {
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuStreamQuery_ptsz_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuStreamQuery_ptsz_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuStreamQuery_ptsz_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cuStreamQuery_ptsz_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuStreamQuery_ptsz_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuStreamQuery_ptsz_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamQuery_ptsz_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuStreamQuery_ptsz_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuStreamQuery_ptsz_params = cuStreamQuery_ptsz_params_st;
#[repr(C)]
pub struct cuStreamSynchronize_ptsz_params_st {
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuStreamSynchronize_ptsz_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuStreamSynchronize_ptsz_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuStreamSynchronize_ptsz_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cuStreamSynchronize_ptsz_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuStreamSynchronize_ptsz_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuStreamSynchronize_ptsz_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamSynchronize_ptsz_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuStreamSynchronize_ptsz_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuStreamSynchronize_ptsz_params = cuStreamSynchronize_ptsz_params_st;
#[repr(C)]
pub struct cuStreamDestroy_v2_params_st {
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuStreamDestroy_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuStreamDestroy_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuStreamDestroy_v2_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cuStreamDestroy_v2_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuStreamDestroy_v2_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuStreamDestroy_v2_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamDestroy_v2_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuStreamDestroy_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuStreamDestroy_v2_params = cuStreamDestroy_v2_params_st;
#[repr(C)]
pub struct cuStreamCopyAttributes_ptsz_params_st {
    pub dst: CUstream,
    pub src: CUstream,
}
#[test]
fn bindgen_test_layout_cuStreamCopyAttributes_ptsz_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuStreamCopyAttributes_ptsz_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuStreamCopyAttributes_ptsz_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cuStreamCopyAttributes_ptsz_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuStreamCopyAttributes_ptsz_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuStreamCopyAttributes_ptsz_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamCopyAttributes_ptsz_params_st),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamCopyAttributes_ptsz_params_st),
            "::",
            stringify!(src)
        )
    );
}
impl Default for cuStreamCopyAttributes_ptsz_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuStreamCopyAttributes_ptsz_params = cuStreamCopyAttributes_ptsz_params_st;
#[repr(C)]
pub struct cuStreamGetAttribute_ptsz_params_st {
    pub hStream: CUstream,
    pub attr: CUstreamAttrID,
    pub value_out: *mut CUstreamAttrValue,
}
#[test]
fn bindgen_test_layout_cuStreamGetAttribute_ptsz_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuStreamGetAttribute_ptsz_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuStreamGetAttribute_ptsz_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuStreamGetAttribute_ptsz_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuStreamGetAttribute_ptsz_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuStreamGetAttribute_ptsz_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamGetAttribute_ptsz_params_st),
            "::",
            stringify!(hStream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamGetAttribute_ptsz_params_st),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value_out) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamGetAttribute_ptsz_params_st),
            "::",
            stringify!(value_out)
        )
    );
}
impl Default for cuStreamGetAttribute_ptsz_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuStreamGetAttribute_ptsz_params = cuStreamGetAttribute_ptsz_params_st;
#[repr(C)]
pub struct cuStreamSetAttribute_ptsz_params_st {
    pub hStream: CUstream,
    pub attr: CUstreamAttrID,
    pub value: *const CUstreamAttrValue,
}
#[test]
fn bindgen_test_layout_cuStreamSetAttribute_ptsz_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuStreamSetAttribute_ptsz_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuStreamSetAttribute_ptsz_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuStreamSetAttribute_ptsz_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuStreamSetAttribute_ptsz_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuStreamSetAttribute_ptsz_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamSetAttribute_ptsz_params_st),
            "::",
            stringify!(hStream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamSetAttribute_ptsz_params_st),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamSetAttribute_ptsz_params_st),
            "::",
            stringify!(value)
        )
    );
}
impl Default for cuStreamSetAttribute_ptsz_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuStreamSetAttribute_ptsz_params = cuStreamSetAttribute_ptsz_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuEventCreate_params_st {
    pub phEvent: *mut CUevent,
    pub Flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuEventCreate_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuEventCreate_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuEventCreate_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuEventCreate_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuEventCreate_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuEventCreate_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phEvent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuEventCreate_params_st),
            "::",
            stringify!(phEvent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuEventCreate_params_st),
            "::",
            stringify!(Flags)
        )
    );
}
impl Default for cuEventCreate_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuEventCreate_params = cuEventCreate_params_st;
#[repr(C)]
pub struct cuEventRecord_ptsz_params_st {
    pub hEvent: CUevent,
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuEventRecord_ptsz_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuEventRecord_ptsz_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuEventRecord_ptsz_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuEventRecord_ptsz_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuEventRecord_ptsz_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuEventRecord_ptsz_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hEvent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuEventRecord_ptsz_params_st),
            "::",
            stringify!(hEvent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuEventRecord_ptsz_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuEventRecord_ptsz_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuEventRecord_ptsz_params = cuEventRecord_ptsz_params_st;
#[repr(C)]
pub struct cuEventRecordWithFlags_ptsz_params_st {
    pub hEvent: CUevent,
    pub hStream: CUstream,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuEventRecordWithFlags_ptsz_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuEventRecordWithFlags_ptsz_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuEventRecordWithFlags_ptsz_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cuEventRecordWithFlags_ptsz_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuEventRecordWithFlags_ptsz_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuEventRecordWithFlags_ptsz_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hEvent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuEventRecordWithFlags_ptsz_params_st),
            "::",
            stringify!(hEvent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuEventRecordWithFlags_ptsz_params_st),
            "::",
            stringify!(hStream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuEventRecordWithFlags_ptsz_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cuEventRecordWithFlags_ptsz_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuEventRecordWithFlags_ptsz_params = cuEventRecordWithFlags_ptsz_params_st;
#[repr(C)]
pub struct cuEventQuery_params_st {
    pub hEvent: CUevent,
}
#[test]
fn bindgen_test_layout_cuEventQuery_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuEventQuery_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuEventQuery_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cuEventQuery_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuEventQuery_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuEventQuery_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hEvent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuEventQuery_params_st),
            "::",
            stringify!(hEvent)
        )
    );
}
impl Default for cuEventQuery_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuEventQuery_params = cuEventQuery_params_st;
#[repr(C)]
pub struct cuEventSynchronize_params_st {
    pub hEvent: CUevent,
}
#[test]
fn bindgen_test_layout_cuEventSynchronize_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuEventSynchronize_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuEventSynchronize_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cuEventSynchronize_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuEventSynchronize_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuEventSynchronize_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hEvent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuEventSynchronize_params_st),
            "::",
            stringify!(hEvent)
        )
    );
}
impl Default for cuEventSynchronize_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuEventSynchronize_params = cuEventSynchronize_params_st;
#[repr(C)]
pub struct cuEventDestroy_v2_params_st {
    pub hEvent: CUevent,
}
#[test]
fn bindgen_test_layout_cuEventDestroy_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuEventDestroy_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuEventDestroy_v2_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cuEventDestroy_v2_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuEventDestroy_v2_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuEventDestroy_v2_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hEvent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuEventDestroy_v2_params_st),
            "::",
            stringify!(hEvent)
        )
    );
}
impl Default for cuEventDestroy_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuEventDestroy_v2_params = cuEventDestroy_v2_params_st;
#[repr(C)]
pub struct cuEventElapsedTime_params_st {
    pub pMilliseconds: *mut f32,
    pub hStart: CUevent,
    pub hEnd: CUevent,
}
#[test]
fn bindgen_test_layout_cuEventElapsedTime_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuEventElapsedTime_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuEventElapsedTime_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuEventElapsedTime_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuEventElapsedTime_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuEventElapsedTime_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pMilliseconds) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuEventElapsedTime_params_st),
            "::",
            stringify!(pMilliseconds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStart) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuEventElapsedTime_params_st),
            "::",
            stringify!(hStart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hEnd) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuEventElapsedTime_params_st),
            "::",
            stringify!(hEnd)
        )
    );
}
impl Default for cuEventElapsedTime_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuEventElapsedTime_params = cuEventElapsedTime_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuImportExternalMemory_params_st {
    pub extMem_out: *mut CUexternalMemory,
    pub memHandleDesc: *const CUDA_EXTERNAL_MEMORY_HANDLE_DESC,
}
#[test]
fn bindgen_test_layout_cuImportExternalMemory_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuImportExternalMemory_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuImportExternalMemory_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuImportExternalMemory_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuImportExternalMemory_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuImportExternalMemory_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extMem_out) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuImportExternalMemory_params_st),
            "::",
            stringify!(extMem_out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memHandleDesc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuImportExternalMemory_params_st),
            "::",
            stringify!(memHandleDesc)
        )
    );
}
impl Default for cuImportExternalMemory_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuImportExternalMemory_params = cuImportExternalMemory_params_st;
#[repr(C)]
pub struct cuExternalMemoryGetMappedBuffer_params_st {
    pub devPtr: *mut CUdeviceptr,
    pub extMem: CUexternalMemory,
    pub bufferDesc: *const CUDA_EXTERNAL_MEMORY_BUFFER_DESC,
}
#[test]
fn bindgen_test_layout_cuExternalMemoryGetMappedBuffer_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuExternalMemoryGetMappedBuffer_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuExternalMemoryGetMappedBuffer_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cuExternalMemoryGetMappedBuffer_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuExternalMemoryGetMappedBuffer_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuExternalMemoryGetMappedBuffer_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).devPtr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuExternalMemoryGetMappedBuffer_params_st),
            "::",
            stringify!(devPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extMem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuExternalMemoryGetMappedBuffer_params_st),
            "::",
            stringify!(extMem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufferDesc) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuExternalMemoryGetMappedBuffer_params_st),
            "::",
            stringify!(bufferDesc)
        )
    );
}
impl Default for cuExternalMemoryGetMappedBuffer_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuExternalMemoryGetMappedBuffer_params = cuExternalMemoryGetMappedBuffer_params_st;
#[repr(C)]
pub struct cuExternalMemoryGetMappedMipmappedArray_params_st {
    pub mipmap: *mut CUmipmappedArray,
    pub extMem: CUexternalMemory,
    pub mipmapDesc: *const CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC,
}
#[test]
fn bindgen_test_layout_cuExternalMemoryGetMappedMipmappedArray_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuExternalMemoryGetMappedMipmappedArray_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuExternalMemoryGetMappedMipmappedArray_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cuExternalMemoryGetMappedMipmappedArray_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuExternalMemoryGetMappedMipmappedArray_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuExternalMemoryGetMappedMipmappedArray_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mipmap) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuExternalMemoryGetMappedMipmappedArray_params_st),
            "::",
            stringify!(mipmap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extMem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuExternalMemoryGetMappedMipmappedArray_params_st),
            "::",
            stringify!(extMem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mipmapDesc) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuExternalMemoryGetMappedMipmappedArray_params_st),
            "::",
            stringify!(mipmapDesc)
        )
    );
}
impl Default for cuExternalMemoryGetMappedMipmappedArray_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuExternalMemoryGetMappedMipmappedArray_params =
    cuExternalMemoryGetMappedMipmappedArray_params_st;
#[repr(C)]
pub struct cuDestroyExternalMemory_params_st {
    pub extMem: CUexternalMemory,
}
#[test]
fn bindgen_test_layout_cuDestroyExternalMemory_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuDestroyExternalMemory_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuDestroyExternalMemory_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cuDestroyExternalMemory_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuDestroyExternalMemory_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuDestroyExternalMemory_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extMem) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDestroyExternalMemory_params_st),
            "::",
            stringify!(extMem)
        )
    );
}
impl Default for cuDestroyExternalMemory_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuDestroyExternalMemory_params = cuDestroyExternalMemory_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuImportExternalSemaphore_params_st {
    pub extSem_out: *mut CUexternalSemaphore,
    pub semHandleDesc: *const CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC,
}
#[test]
fn bindgen_test_layout_cuImportExternalSemaphore_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuImportExternalSemaphore_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuImportExternalSemaphore_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuImportExternalSemaphore_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuImportExternalSemaphore_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuImportExternalSemaphore_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extSem_out) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuImportExternalSemaphore_params_st),
            "::",
            stringify!(extSem_out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).semHandleDesc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuImportExternalSemaphore_params_st),
            "::",
            stringify!(semHandleDesc)
        )
    );
}
impl Default for cuImportExternalSemaphore_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuImportExternalSemaphore_params = cuImportExternalSemaphore_params_st;
#[repr(C)]
pub struct cuSignalExternalSemaphoresAsync_ptsz_params_st {
    pub extSemArray: *const CUexternalSemaphore,
    pub paramsArray: *const CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS,
    pub numExtSems: ::std::os::raw::c_uint,
    pub stream: CUstream,
}
#[test]
fn bindgen_test_layout_cuSignalExternalSemaphoresAsync_ptsz_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuSignalExternalSemaphoresAsync_ptsz_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuSignalExternalSemaphoresAsync_ptsz_params_st>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(cuSignalExternalSemaphoresAsync_ptsz_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuSignalExternalSemaphoresAsync_ptsz_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuSignalExternalSemaphoresAsync_ptsz_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extSemArray) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuSignalExternalSemaphoresAsync_ptsz_params_st),
            "::",
            stringify!(extSemArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paramsArray) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuSignalExternalSemaphoresAsync_ptsz_params_st),
            "::",
            stringify!(paramsArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numExtSems) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuSignalExternalSemaphoresAsync_ptsz_params_st),
            "::",
            stringify!(numExtSems)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuSignalExternalSemaphoresAsync_ptsz_params_st),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for cuSignalExternalSemaphoresAsync_ptsz_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuSignalExternalSemaphoresAsync_ptsz_params =
    cuSignalExternalSemaphoresAsync_ptsz_params_st;
#[repr(C)]
pub struct cuWaitExternalSemaphoresAsync_ptsz_params_st {
    pub extSemArray: *const CUexternalSemaphore,
    pub paramsArray: *const CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS,
    pub numExtSems: ::std::os::raw::c_uint,
    pub stream: CUstream,
}
#[test]
fn bindgen_test_layout_cuWaitExternalSemaphoresAsync_ptsz_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuWaitExternalSemaphoresAsync_ptsz_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuWaitExternalSemaphoresAsync_ptsz_params_st>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(cuWaitExternalSemaphoresAsync_ptsz_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuWaitExternalSemaphoresAsync_ptsz_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuWaitExternalSemaphoresAsync_ptsz_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extSemArray) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuWaitExternalSemaphoresAsync_ptsz_params_st),
            "::",
            stringify!(extSemArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paramsArray) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuWaitExternalSemaphoresAsync_ptsz_params_st),
            "::",
            stringify!(paramsArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numExtSems) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuWaitExternalSemaphoresAsync_ptsz_params_st),
            "::",
            stringify!(numExtSems)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuWaitExternalSemaphoresAsync_ptsz_params_st),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for cuWaitExternalSemaphoresAsync_ptsz_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuWaitExternalSemaphoresAsync_ptsz_params = cuWaitExternalSemaphoresAsync_ptsz_params_st;
#[repr(C)]
pub struct cuDestroyExternalSemaphore_params_st {
    pub extSem: CUexternalSemaphore,
}
#[test]
fn bindgen_test_layout_cuDestroyExternalSemaphore_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuDestroyExternalSemaphore_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuDestroyExternalSemaphore_params_st>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(cuDestroyExternalSemaphore_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuDestroyExternalSemaphore_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuDestroyExternalSemaphore_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extSem) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDestroyExternalSemaphore_params_st),
            "::",
            stringify!(extSem)
        )
    );
}
impl Default for cuDestroyExternalSemaphore_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuDestroyExternalSemaphore_params = cuDestroyExternalSemaphore_params_st;
#[repr(C)]
pub struct cuStreamWaitValue32_v2_ptsz_params_st {
    pub stream: CUstream,
    pub addr: CUdeviceptr,
    pub value: cuuint32_t,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuStreamWaitValue32_v2_ptsz_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuStreamWaitValue32_v2_ptsz_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuStreamWaitValue32_v2_ptsz_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cuStreamWaitValue32_v2_ptsz_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuStreamWaitValue32_v2_ptsz_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuStreamWaitValue32_v2_ptsz_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWaitValue32_v2_ptsz_params_st),
            "::",
            stringify!(stream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWaitValue32_v2_ptsz_params_st),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWaitValue32_v2_ptsz_params_st),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWaitValue32_v2_ptsz_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cuStreamWaitValue32_v2_ptsz_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuStreamWaitValue32_v2_ptsz_params = cuStreamWaitValue32_v2_ptsz_params_st;
#[repr(C)]
pub struct cuStreamWaitValue64_v2_ptsz_params_st {
    pub stream: CUstream,
    pub addr: CUdeviceptr,
    pub value: cuuint64_t,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuStreamWaitValue64_v2_ptsz_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuStreamWaitValue64_v2_ptsz_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuStreamWaitValue64_v2_ptsz_params_st>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(cuStreamWaitValue64_v2_ptsz_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuStreamWaitValue64_v2_ptsz_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuStreamWaitValue64_v2_ptsz_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWaitValue64_v2_ptsz_params_st),
            "::",
            stringify!(stream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWaitValue64_v2_ptsz_params_st),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWaitValue64_v2_ptsz_params_st),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWaitValue64_v2_ptsz_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cuStreamWaitValue64_v2_ptsz_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuStreamWaitValue64_v2_ptsz_params = cuStreamWaitValue64_v2_ptsz_params_st;
#[repr(C)]
pub struct cuStreamWriteValue32_v2_ptsz_params_st {
    pub stream: CUstream,
    pub addr: CUdeviceptr,
    pub value: cuuint32_t,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuStreamWriteValue32_v2_ptsz_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuStreamWriteValue32_v2_ptsz_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuStreamWriteValue32_v2_ptsz_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cuStreamWriteValue32_v2_ptsz_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuStreamWriteValue32_v2_ptsz_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuStreamWriteValue32_v2_ptsz_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWriteValue32_v2_ptsz_params_st),
            "::",
            stringify!(stream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWriteValue32_v2_ptsz_params_st),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWriteValue32_v2_ptsz_params_st),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWriteValue32_v2_ptsz_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cuStreamWriteValue32_v2_ptsz_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuStreamWriteValue32_v2_ptsz_params = cuStreamWriteValue32_v2_ptsz_params_st;
#[repr(C)]
pub struct cuStreamWriteValue64_v2_ptsz_params_st {
    pub stream: CUstream,
    pub addr: CUdeviceptr,
    pub value: cuuint64_t,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuStreamWriteValue64_v2_ptsz_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuStreamWriteValue64_v2_ptsz_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuStreamWriteValue64_v2_ptsz_params_st>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(cuStreamWriteValue64_v2_ptsz_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuStreamWriteValue64_v2_ptsz_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuStreamWriteValue64_v2_ptsz_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWriteValue64_v2_ptsz_params_st),
            "::",
            stringify!(stream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWriteValue64_v2_ptsz_params_st),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWriteValue64_v2_ptsz_params_st),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWriteValue64_v2_ptsz_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cuStreamWriteValue64_v2_ptsz_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuStreamWriteValue64_v2_ptsz_params = cuStreamWriteValue64_v2_ptsz_params_st;
#[repr(C)]
pub struct cuStreamBatchMemOp_v2_ptsz_params_st {
    pub stream: CUstream,
    pub count: ::std::os::raw::c_uint,
    pub paramArray: *mut CUstreamBatchMemOpParams,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuStreamBatchMemOp_v2_ptsz_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuStreamBatchMemOp_v2_ptsz_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuStreamBatchMemOp_v2_ptsz_params_st>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(cuStreamBatchMemOp_v2_ptsz_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuStreamBatchMemOp_v2_ptsz_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuStreamBatchMemOp_v2_ptsz_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamBatchMemOp_v2_ptsz_params_st),
            "::",
            stringify!(stream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamBatchMemOp_v2_ptsz_params_st),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paramArray) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamBatchMemOp_v2_ptsz_params_st),
            "::",
            stringify!(paramArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamBatchMemOp_v2_ptsz_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cuStreamBatchMemOp_v2_ptsz_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuStreamBatchMemOp_v2_ptsz_params = cuStreamBatchMemOp_v2_ptsz_params_st;
#[repr(C)]
pub struct cuFuncGetAttribute_params_st {
    pub pi: *mut ::std::os::raw::c_int,
    pub attrib: CUfunction_attribute,
    pub hfunc: CUfunction,
}
#[test]
fn bindgen_test_layout_cuFuncGetAttribute_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuFuncGetAttribute_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuFuncGetAttribute_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuFuncGetAttribute_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuFuncGetAttribute_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuFuncGetAttribute_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pi) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuFuncGetAttribute_params_st),
            "::",
            stringify!(pi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attrib) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuFuncGetAttribute_params_st),
            "::",
            stringify!(attrib)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hfunc) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuFuncGetAttribute_params_st),
            "::",
            stringify!(hfunc)
        )
    );
}
impl Default for cuFuncGetAttribute_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuFuncGetAttribute_params = cuFuncGetAttribute_params_st;
#[repr(C)]
pub struct cuFuncSetAttribute_params_st {
    pub hfunc: CUfunction,
    pub attrib: CUfunction_attribute,
    pub value: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cuFuncSetAttribute_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuFuncSetAttribute_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuFuncSetAttribute_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuFuncSetAttribute_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuFuncSetAttribute_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuFuncSetAttribute_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hfunc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuFuncSetAttribute_params_st),
            "::",
            stringify!(hfunc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attrib) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuFuncSetAttribute_params_st),
            "::",
            stringify!(attrib)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cuFuncSetAttribute_params_st),
            "::",
            stringify!(value)
        )
    );
}
impl Default for cuFuncSetAttribute_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuFuncSetAttribute_params = cuFuncSetAttribute_params_st;
#[repr(C)]
pub struct cuFuncSetCacheConfig_params_st {
    pub hfunc: CUfunction,
    pub config: CUfunc_cache,
}
#[test]
fn bindgen_test_layout_cuFuncSetCacheConfig_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuFuncSetCacheConfig_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuFuncSetCacheConfig_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuFuncSetCacheConfig_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuFuncSetCacheConfig_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuFuncSetCacheConfig_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hfunc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuFuncSetCacheConfig_params_st),
            "::",
            stringify!(hfunc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).config) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuFuncSetCacheConfig_params_st),
            "::",
            stringify!(config)
        )
    );
}
impl Default for cuFuncSetCacheConfig_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuFuncSetCacheConfig_params = cuFuncSetCacheConfig_params_st;
#[repr(C)]
pub struct cuFuncSetSharedMemConfig_params_st {
    pub hfunc: CUfunction,
    pub config: CUsharedconfig,
}
#[test]
fn bindgen_test_layout_cuFuncSetSharedMemConfig_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuFuncSetSharedMemConfig_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuFuncSetSharedMemConfig_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuFuncSetSharedMemConfig_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuFuncSetSharedMemConfig_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuFuncSetSharedMemConfig_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hfunc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuFuncSetSharedMemConfig_params_st),
            "::",
            stringify!(hfunc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).config) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuFuncSetSharedMemConfig_params_st),
            "::",
            stringify!(config)
        )
    );
}
impl Default for cuFuncSetSharedMemConfig_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuFuncSetSharedMemConfig_params = cuFuncSetSharedMemConfig_params_st;
#[repr(C)]
pub struct cuFuncGetModule_params_st {
    pub hmod: *mut CUmodule,
    pub hfunc: CUfunction,
}
#[test]
fn bindgen_test_layout_cuFuncGetModule_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuFuncGetModule_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuFuncGetModule_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuFuncGetModule_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuFuncGetModule_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuFuncGetModule_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hmod) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuFuncGetModule_params_st),
            "::",
            stringify!(hmod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hfunc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuFuncGetModule_params_st),
            "::",
            stringify!(hfunc)
        )
    );
}
impl Default for cuFuncGetModule_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuFuncGetModule_params = cuFuncGetModule_params_st;
#[repr(C)]
pub struct cuLaunchKernel_ptsz_params_st {
    pub f: CUfunction,
    pub gridDimX: ::std::os::raw::c_uint,
    pub gridDimY: ::std::os::raw::c_uint,
    pub gridDimZ: ::std::os::raw::c_uint,
    pub blockDimX: ::std::os::raw::c_uint,
    pub blockDimY: ::std::os::raw::c_uint,
    pub blockDimZ: ::std::os::raw::c_uint,
    pub sharedMemBytes: ::std::os::raw::c_uint,
    pub hStream: CUstream,
    pub kernelParams: *mut *mut ::std::os::raw::c_void,
    pub extra: *mut *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_cuLaunchKernel_ptsz_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuLaunchKernel_ptsz_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuLaunchKernel_ptsz_params_st>(),
        64usize,
        concat!("Size of: ", stringify!(cuLaunchKernel_ptsz_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuLaunchKernel_ptsz_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuLaunchKernel_ptsz_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunchKernel_ptsz_params_st),
            "::",
            stringify!(f)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gridDimX) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunchKernel_ptsz_params_st),
            "::",
            stringify!(gridDimX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gridDimY) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunchKernel_ptsz_params_st),
            "::",
            stringify!(gridDimY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gridDimZ) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunchKernel_ptsz_params_st),
            "::",
            stringify!(gridDimZ)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blockDimX) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunchKernel_ptsz_params_st),
            "::",
            stringify!(blockDimX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blockDimY) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunchKernel_ptsz_params_st),
            "::",
            stringify!(blockDimY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blockDimZ) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunchKernel_ptsz_params_st),
            "::",
            stringify!(blockDimZ)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sharedMemBytes) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunchKernel_ptsz_params_st),
            "::",
            stringify!(sharedMemBytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunchKernel_ptsz_params_st),
            "::",
            stringify!(hStream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kernelParams) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunchKernel_ptsz_params_st),
            "::",
            stringify!(kernelParams)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extra) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunchKernel_ptsz_params_st),
            "::",
            stringify!(extra)
        )
    );
}
impl Default for cuLaunchKernel_ptsz_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuLaunchKernel_ptsz_params = cuLaunchKernel_ptsz_params_st;
#[repr(C)]
pub struct cuLaunchKernelEx_ptsz_params_st {
    pub config: *const CUlaunchConfig,
    pub f: CUfunction,
    pub kernelParams: *mut *mut ::std::os::raw::c_void,
    pub extra: *mut *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_cuLaunchKernelEx_ptsz_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuLaunchKernelEx_ptsz_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuLaunchKernelEx_ptsz_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuLaunchKernelEx_ptsz_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuLaunchKernelEx_ptsz_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuLaunchKernelEx_ptsz_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).config) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunchKernelEx_ptsz_params_st),
            "::",
            stringify!(config)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunchKernelEx_ptsz_params_st),
            "::",
            stringify!(f)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kernelParams) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunchKernelEx_ptsz_params_st),
            "::",
            stringify!(kernelParams)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extra) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunchKernelEx_ptsz_params_st),
            "::",
            stringify!(extra)
        )
    );
}
impl Default for cuLaunchKernelEx_ptsz_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuLaunchKernelEx_ptsz_params = cuLaunchKernelEx_ptsz_params_st;
#[repr(C)]
pub struct cuLaunchCooperativeKernel_ptsz_params_st {
    pub f: CUfunction,
    pub gridDimX: ::std::os::raw::c_uint,
    pub gridDimY: ::std::os::raw::c_uint,
    pub gridDimZ: ::std::os::raw::c_uint,
    pub blockDimX: ::std::os::raw::c_uint,
    pub blockDimY: ::std::os::raw::c_uint,
    pub blockDimZ: ::std::os::raw::c_uint,
    pub sharedMemBytes: ::std::os::raw::c_uint,
    pub hStream: CUstream,
    pub kernelParams: *mut *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_cuLaunchCooperativeKernel_ptsz_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuLaunchCooperativeKernel_ptsz_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuLaunchCooperativeKernel_ptsz_params_st>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(cuLaunchCooperativeKernel_ptsz_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuLaunchCooperativeKernel_ptsz_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuLaunchCooperativeKernel_ptsz_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunchCooperativeKernel_ptsz_params_st),
            "::",
            stringify!(f)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gridDimX) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunchCooperativeKernel_ptsz_params_st),
            "::",
            stringify!(gridDimX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gridDimY) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunchCooperativeKernel_ptsz_params_st),
            "::",
            stringify!(gridDimY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gridDimZ) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunchCooperativeKernel_ptsz_params_st),
            "::",
            stringify!(gridDimZ)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blockDimX) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunchCooperativeKernel_ptsz_params_st),
            "::",
            stringify!(blockDimX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blockDimY) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunchCooperativeKernel_ptsz_params_st),
            "::",
            stringify!(blockDimY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blockDimZ) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunchCooperativeKernel_ptsz_params_st),
            "::",
            stringify!(blockDimZ)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sharedMemBytes) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunchCooperativeKernel_ptsz_params_st),
            "::",
            stringify!(sharedMemBytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunchCooperativeKernel_ptsz_params_st),
            "::",
            stringify!(hStream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kernelParams) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunchCooperativeKernel_ptsz_params_st),
            "::",
            stringify!(kernelParams)
        )
    );
}
impl Default for cuLaunchCooperativeKernel_ptsz_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuLaunchCooperativeKernel_ptsz_params = cuLaunchCooperativeKernel_ptsz_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuLaunchCooperativeKernelMultiDevice_params_st {
    pub launchParamsList: *mut CUDA_LAUNCH_PARAMS,
    pub numDevices: ::std::os::raw::c_uint,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuLaunchCooperativeKernelMultiDevice_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuLaunchCooperativeKernelMultiDevice_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuLaunchCooperativeKernelMultiDevice_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cuLaunchCooperativeKernelMultiDevice_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuLaunchCooperativeKernelMultiDevice_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuLaunchCooperativeKernelMultiDevice_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).launchParamsList) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunchCooperativeKernelMultiDevice_params_st),
            "::",
            stringify!(launchParamsList)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numDevices) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunchCooperativeKernelMultiDevice_params_st),
            "::",
            stringify!(numDevices)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunchCooperativeKernelMultiDevice_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cuLaunchCooperativeKernelMultiDevice_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuLaunchCooperativeKernelMultiDevice_params =
    cuLaunchCooperativeKernelMultiDevice_params_st;
#[repr(C)]
pub struct cuLaunchHostFunc_ptsz_params_st {
    pub hStream: CUstream,
    pub fn_: CUhostFn,
    pub userData: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_cuLaunchHostFunc_ptsz_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuLaunchHostFunc_ptsz_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuLaunchHostFunc_ptsz_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuLaunchHostFunc_ptsz_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuLaunchHostFunc_ptsz_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuLaunchHostFunc_ptsz_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunchHostFunc_ptsz_params_st),
            "::",
            stringify!(hStream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fn_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunchHostFunc_ptsz_params_st),
            "::",
            stringify!(fn_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).userData) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunchHostFunc_ptsz_params_st),
            "::",
            stringify!(userData)
        )
    );
}
impl Default for cuLaunchHostFunc_ptsz_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuLaunchHostFunc_ptsz_params = cuLaunchHostFunc_ptsz_params_st;
#[repr(C)]
pub struct cuFuncSetBlockShape_params_st {
    pub hfunc: CUfunction,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub z: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cuFuncSetBlockShape_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuFuncSetBlockShape_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuFuncSetBlockShape_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuFuncSetBlockShape_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuFuncSetBlockShape_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuFuncSetBlockShape_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hfunc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuFuncSetBlockShape_params_st),
            "::",
            stringify!(hfunc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuFuncSetBlockShape_params_st),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cuFuncSetBlockShape_params_st),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuFuncSetBlockShape_params_st),
            "::",
            stringify!(z)
        )
    );
}
impl Default for cuFuncSetBlockShape_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuFuncSetBlockShape_params = cuFuncSetBlockShape_params_st;
#[repr(C)]
pub struct cuFuncSetSharedSize_params_st {
    pub hfunc: CUfunction,
    pub bytes: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuFuncSetSharedSize_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuFuncSetSharedSize_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuFuncSetSharedSize_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuFuncSetSharedSize_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuFuncSetSharedSize_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuFuncSetSharedSize_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hfunc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuFuncSetSharedSize_params_st),
            "::",
            stringify!(hfunc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytes) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuFuncSetSharedSize_params_st),
            "::",
            stringify!(bytes)
        )
    );
}
impl Default for cuFuncSetSharedSize_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuFuncSetSharedSize_params = cuFuncSetSharedSize_params_st;
#[repr(C)]
pub struct cuParamSetSize_params_st {
    pub hfunc: CUfunction,
    pub numbytes: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuParamSetSize_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuParamSetSize_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuParamSetSize_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuParamSetSize_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuParamSetSize_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuParamSetSize_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hfunc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuParamSetSize_params_st),
            "::",
            stringify!(hfunc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numbytes) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuParamSetSize_params_st),
            "::",
            stringify!(numbytes)
        )
    );
}
impl Default for cuParamSetSize_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuParamSetSize_params = cuParamSetSize_params_st;
#[repr(C)]
pub struct cuParamSeti_params_st {
    pub hfunc: CUfunction,
    pub offset: ::std::os::raw::c_int,
    pub value: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuParamSeti_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuParamSeti_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuParamSeti_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuParamSeti_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuParamSeti_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuParamSeti_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hfunc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuParamSeti_params_st),
            "::",
            stringify!(hfunc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuParamSeti_params_st),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cuParamSeti_params_st),
            "::",
            stringify!(value)
        )
    );
}
impl Default for cuParamSeti_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuParamSeti_params = cuParamSeti_params_st;
#[repr(C)]
pub struct cuParamSetf_params_st {
    pub hfunc: CUfunction,
    pub offset: ::std::os::raw::c_int,
    pub value: f32,
}
#[test]
fn bindgen_test_layout_cuParamSetf_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuParamSetf_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuParamSetf_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuParamSetf_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuParamSetf_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuParamSetf_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hfunc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuParamSetf_params_st),
            "::",
            stringify!(hfunc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuParamSetf_params_st),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cuParamSetf_params_st),
            "::",
            stringify!(value)
        )
    );
}
impl Default for cuParamSetf_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuParamSetf_params = cuParamSetf_params_st;
#[repr(C)]
pub struct cuParamSetv_params_st {
    pub hfunc: CUfunction,
    pub offset: ::std::os::raw::c_int,
    pub ptr: *mut ::std::os::raw::c_void,
    pub numbytes: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuParamSetv_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuParamSetv_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuParamSetv_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuParamSetv_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuParamSetv_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuParamSetv_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hfunc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuParamSetv_params_st),
            "::",
            stringify!(hfunc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuParamSetv_params_st),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuParamSetv_params_st),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numbytes) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuParamSetv_params_st),
            "::",
            stringify!(numbytes)
        )
    );
}
impl Default for cuParamSetv_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuParamSetv_params = cuParamSetv_params_st;
#[repr(C)]
pub struct cuLaunch_params_st {
    pub f: CUfunction,
}
#[test]
fn bindgen_test_layout_cuLaunch_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuLaunch_params_st> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuLaunch_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cuLaunch_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuLaunch_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuLaunch_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunch_params_st),
            "::",
            stringify!(f)
        )
    );
}
impl Default for cuLaunch_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuLaunch_params = cuLaunch_params_st;
#[repr(C)]
pub struct cuLaunchGrid_params_st {
    pub f: CUfunction,
    pub grid_width: ::std::os::raw::c_int,
    pub grid_height: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cuLaunchGrid_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuLaunchGrid_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuLaunchGrid_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuLaunchGrid_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuLaunchGrid_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuLaunchGrid_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunchGrid_params_st),
            "::",
            stringify!(f)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).grid_width) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunchGrid_params_st),
            "::",
            stringify!(grid_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).grid_height) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunchGrid_params_st),
            "::",
            stringify!(grid_height)
        )
    );
}
impl Default for cuLaunchGrid_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuLaunchGrid_params = cuLaunchGrid_params_st;
#[repr(C)]
pub struct cuLaunchGridAsync_params_st {
    pub f: CUfunction,
    pub grid_width: ::std::os::raw::c_int,
    pub grid_height: ::std::os::raw::c_int,
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuLaunchGridAsync_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuLaunchGridAsync_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuLaunchGridAsync_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuLaunchGridAsync_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuLaunchGridAsync_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuLaunchGridAsync_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunchGridAsync_params_st),
            "::",
            stringify!(f)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).grid_width) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunchGridAsync_params_st),
            "::",
            stringify!(grid_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).grid_height) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunchGridAsync_params_st),
            "::",
            stringify!(grid_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunchGridAsync_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuLaunchGridAsync_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuLaunchGridAsync_params = cuLaunchGridAsync_params_st;
#[repr(C)]
pub struct cuParamSetTexRef_params_st {
    pub hfunc: CUfunction,
    pub texunit: ::std::os::raw::c_int,
    pub hTexRef: CUtexref,
}
#[test]
fn bindgen_test_layout_cuParamSetTexRef_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuParamSetTexRef_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuParamSetTexRef_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuParamSetTexRef_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuParamSetTexRef_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuParamSetTexRef_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hfunc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuParamSetTexRef_params_st),
            "::",
            stringify!(hfunc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).texunit) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuParamSetTexRef_params_st),
            "::",
            stringify!(texunit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hTexRef) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuParamSetTexRef_params_st),
            "::",
            stringify!(hTexRef)
        )
    );
}
impl Default for cuParamSetTexRef_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuParamSetTexRef_params = cuParamSetTexRef_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuGraphCreate_params_st {
    pub phGraph: *mut CUgraph,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuGraphCreate_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphCreate_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphCreate_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuGraphCreate_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphCreate_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuGraphCreate_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phGraph) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphCreate_params_st),
            "::",
            stringify!(phGraph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphCreate_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cuGraphCreate_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphCreate_params = cuGraphCreate_params_st;
#[repr(C)]
pub struct cuGraphAddKernelNode_v2_params_st {
    pub phGraphNode: *mut CUgraphNode,
    pub hGraph: CUgraph,
    pub dependencies: *const CUgraphNode,
    pub numDependencies: usize,
    pub nodeParams: *const CUDA_KERNEL_NODE_PARAMS,
}
#[test]
fn bindgen_test_layout_cuGraphAddKernelNode_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphAddKernelNode_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphAddKernelNode_v2_params_st>(),
        40usize,
        concat!("Size of: ", stringify!(cuGraphAddKernelNode_v2_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphAddKernelNode_v2_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuGraphAddKernelNode_v2_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phGraphNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddKernelNode_v2_params_st),
            "::",
            stringify!(phGraphNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hGraph) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddKernelNode_v2_params_st),
            "::",
            stringify!(hGraph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dependencies) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddKernelNode_v2_params_st),
            "::",
            stringify!(dependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numDependencies) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddKernelNode_v2_params_st),
            "::",
            stringify!(numDependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeParams) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddKernelNode_v2_params_st),
            "::",
            stringify!(nodeParams)
        )
    );
}
impl Default for cuGraphAddKernelNode_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphAddKernelNode_v2_params = cuGraphAddKernelNode_v2_params_st;
#[repr(C)]
pub struct cuGraphKernelNodeGetParams_v2_params_st {
    pub hNode: CUgraphNode,
    pub nodeParams: *mut CUDA_KERNEL_NODE_PARAMS,
}
#[test]
fn bindgen_test_layout_cuGraphKernelNodeGetParams_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphKernelNodeGetParams_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphKernelNodeGetParams_v2_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cuGraphKernelNodeGetParams_v2_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphKernelNodeGetParams_v2_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuGraphKernelNodeGetParams_v2_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphKernelNodeGetParams_v2_params_st),
            "::",
            stringify!(hNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeParams) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphKernelNodeGetParams_v2_params_st),
            "::",
            stringify!(nodeParams)
        )
    );
}
impl Default for cuGraphKernelNodeGetParams_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphKernelNodeGetParams_v2_params = cuGraphKernelNodeGetParams_v2_params_st;
#[repr(C)]
pub struct cuGraphKernelNodeSetParams_v2_params_st {
    pub hNode: CUgraphNode,
    pub nodeParams: *const CUDA_KERNEL_NODE_PARAMS,
}
#[test]
fn bindgen_test_layout_cuGraphKernelNodeSetParams_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphKernelNodeSetParams_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphKernelNodeSetParams_v2_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cuGraphKernelNodeSetParams_v2_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphKernelNodeSetParams_v2_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuGraphKernelNodeSetParams_v2_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphKernelNodeSetParams_v2_params_st),
            "::",
            stringify!(hNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeParams) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphKernelNodeSetParams_v2_params_st),
            "::",
            stringify!(nodeParams)
        )
    );
}
impl Default for cuGraphKernelNodeSetParams_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphKernelNodeSetParams_v2_params = cuGraphKernelNodeSetParams_v2_params_st;
#[repr(C)]
pub struct cuGraphAddMemcpyNode_params_st {
    pub phGraphNode: *mut CUgraphNode,
    pub hGraph: CUgraph,
    pub dependencies: *const CUgraphNode,
    pub numDependencies: usize,
    pub copyParams: *const CUDA_MEMCPY3D,
    pub ctx: CUcontext,
}
#[test]
fn bindgen_test_layout_cuGraphAddMemcpyNode_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphAddMemcpyNode_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphAddMemcpyNode_params_st>(),
        48usize,
        concat!("Size of: ", stringify!(cuGraphAddMemcpyNode_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphAddMemcpyNode_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuGraphAddMemcpyNode_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phGraphNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddMemcpyNode_params_st),
            "::",
            stringify!(phGraphNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hGraph) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddMemcpyNode_params_st),
            "::",
            stringify!(hGraph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dependencies) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddMemcpyNode_params_st),
            "::",
            stringify!(dependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numDependencies) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddMemcpyNode_params_st),
            "::",
            stringify!(numDependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).copyParams) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddMemcpyNode_params_st),
            "::",
            stringify!(copyParams)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddMemcpyNode_params_st),
            "::",
            stringify!(ctx)
        )
    );
}
impl Default for cuGraphAddMemcpyNode_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphAddMemcpyNode_params = cuGraphAddMemcpyNode_params_st;
#[repr(C)]
pub struct cuGraphMemcpyNodeGetParams_params_st {
    pub hNode: CUgraphNode,
    pub nodeParams: *mut CUDA_MEMCPY3D,
}
#[test]
fn bindgen_test_layout_cuGraphMemcpyNodeGetParams_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphMemcpyNodeGetParams_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphMemcpyNodeGetParams_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cuGraphMemcpyNodeGetParams_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphMemcpyNodeGetParams_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuGraphMemcpyNodeGetParams_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphMemcpyNodeGetParams_params_st),
            "::",
            stringify!(hNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeParams) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphMemcpyNodeGetParams_params_st),
            "::",
            stringify!(nodeParams)
        )
    );
}
impl Default for cuGraphMemcpyNodeGetParams_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphMemcpyNodeGetParams_params = cuGraphMemcpyNodeGetParams_params_st;
#[repr(C)]
pub struct cuGraphMemcpyNodeSetParams_params_st {
    pub hNode: CUgraphNode,
    pub nodeParams: *const CUDA_MEMCPY3D,
}
#[test]
fn bindgen_test_layout_cuGraphMemcpyNodeSetParams_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphMemcpyNodeSetParams_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphMemcpyNodeSetParams_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cuGraphMemcpyNodeSetParams_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphMemcpyNodeSetParams_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuGraphMemcpyNodeSetParams_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphMemcpyNodeSetParams_params_st),
            "::",
            stringify!(hNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeParams) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphMemcpyNodeSetParams_params_st),
            "::",
            stringify!(nodeParams)
        )
    );
}
impl Default for cuGraphMemcpyNodeSetParams_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphMemcpyNodeSetParams_params = cuGraphMemcpyNodeSetParams_params_st;
#[repr(C)]
pub struct cuGraphAddMemsetNode_params_st {
    pub phGraphNode: *mut CUgraphNode,
    pub hGraph: CUgraph,
    pub dependencies: *const CUgraphNode,
    pub numDependencies: usize,
    pub memsetParams: *const CUDA_MEMSET_NODE_PARAMS,
    pub ctx: CUcontext,
}
#[test]
fn bindgen_test_layout_cuGraphAddMemsetNode_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphAddMemsetNode_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphAddMemsetNode_params_st>(),
        48usize,
        concat!("Size of: ", stringify!(cuGraphAddMemsetNode_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphAddMemsetNode_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuGraphAddMemsetNode_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phGraphNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddMemsetNode_params_st),
            "::",
            stringify!(phGraphNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hGraph) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddMemsetNode_params_st),
            "::",
            stringify!(hGraph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dependencies) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddMemsetNode_params_st),
            "::",
            stringify!(dependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numDependencies) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddMemsetNode_params_st),
            "::",
            stringify!(numDependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memsetParams) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddMemsetNode_params_st),
            "::",
            stringify!(memsetParams)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddMemsetNode_params_st),
            "::",
            stringify!(ctx)
        )
    );
}
impl Default for cuGraphAddMemsetNode_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphAddMemsetNode_params = cuGraphAddMemsetNode_params_st;
#[repr(C)]
pub struct cuGraphMemsetNodeGetParams_params_st {
    pub hNode: CUgraphNode,
    pub nodeParams: *mut CUDA_MEMSET_NODE_PARAMS,
}
#[test]
fn bindgen_test_layout_cuGraphMemsetNodeGetParams_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphMemsetNodeGetParams_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphMemsetNodeGetParams_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cuGraphMemsetNodeGetParams_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphMemsetNodeGetParams_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuGraphMemsetNodeGetParams_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphMemsetNodeGetParams_params_st),
            "::",
            stringify!(hNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeParams) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphMemsetNodeGetParams_params_st),
            "::",
            stringify!(nodeParams)
        )
    );
}
impl Default for cuGraphMemsetNodeGetParams_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphMemsetNodeGetParams_params = cuGraphMemsetNodeGetParams_params_st;
#[repr(C)]
pub struct cuGraphMemsetNodeSetParams_params_st {
    pub hNode: CUgraphNode,
    pub nodeParams: *const CUDA_MEMSET_NODE_PARAMS,
}
#[test]
fn bindgen_test_layout_cuGraphMemsetNodeSetParams_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphMemsetNodeSetParams_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphMemsetNodeSetParams_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cuGraphMemsetNodeSetParams_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphMemsetNodeSetParams_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuGraphMemsetNodeSetParams_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphMemsetNodeSetParams_params_st),
            "::",
            stringify!(hNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeParams) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphMemsetNodeSetParams_params_st),
            "::",
            stringify!(nodeParams)
        )
    );
}
impl Default for cuGraphMemsetNodeSetParams_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphMemsetNodeSetParams_params = cuGraphMemsetNodeSetParams_params_st;
#[repr(C)]
pub struct cuGraphAddHostNode_params_st {
    pub phGraphNode: *mut CUgraphNode,
    pub hGraph: CUgraph,
    pub dependencies: *const CUgraphNode,
    pub numDependencies: usize,
    pub nodeParams: *const CUDA_HOST_NODE_PARAMS,
}
#[test]
fn bindgen_test_layout_cuGraphAddHostNode_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphAddHostNode_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphAddHostNode_params_st>(),
        40usize,
        concat!("Size of: ", stringify!(cuGraphAddHostNode_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphAddHostNode_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuGraphAddHostNode_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phGraphNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddHostNode_params_st),
            "::",
            stringify!(phGraphNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hGraph) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddHostNode_params_st),
            "::",
            stringify!(hGraph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dependencies) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddHostNode_params_st),
            "::",
            stringify!(dependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numDependencies) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddHostNode_params_st),
            "::",
            stringify!(numDependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeParams) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddHostNode_params_st),
            "::",
            stringify!(nodeParams)
        )
    );
}
impl Default for cuGraphAddHostNode_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphAddHostNode_params = cuGraphAddHostNode_params_st;
#[repr(C)]
pub struct cuGraphHostNodeGetParams_params_st {
    pub hNode: CUgraphNode,
    pub nodeParams: *mut CUDA_HOST_NODE_PARAMS,
}
#[test]
fn bindgen_test_layout_cuGraphHostNodeGetParams_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphHostNodeGetParams_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphHostNodeGetParams_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuGraphHostNodeGetParams_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphHostNodeGetParams_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuGraphHostNodeGetParams_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphHostNodeGetParams_params_st),
            "::",
            stringify!(hNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeParams) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphHostNodeGetParams_params_st),
            "::",
            stringify!(nodeParams)
        )
    );
}
impl Default for cuGraphHostNodeGetParams_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphHostNodeGetParams_params = cuGraphHostNodeGetParams_params_st;
#[repr(C)]
pub struct cuGraphHostNodeSetParams_params_st {
    pub hNode: CUgraphNode,
    pub nodeParams: *const CUDA_HOST_NODE_PARAMS,
}
#[test]
fn bindgen_test_layout_cuGraphHostNodeSetParams_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphHostNodeSetParams_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphHostNodeSetParams_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuGraphHostNodeSetParams_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphHostNodeSetParams_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuGraphHostNodeSetParams_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphHostNodeSetParams_params_st),
            "::",
            stringify!(hNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeParams) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphHostNodeSetParams_params_st),
            "::",
            stringify!(nodeParams)
        )
    );
}
impl Default for cuGraphHostNodeSetParams_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphHostNodeSetParams_params = cuGraphHostNodeSetParams_params_st;
#[repr(C)]
pub struct cuGraphAddChildGraphNode_params_st {
    pub phGraphNode: *mut CUgraphNode,
    pub hGraph: CUgraph,
    pub dependencies: *const CUgraphNode,
    pub numDependencies: usize,
    pub childGraph: CUgraph,
}
#[test]
fn bindgen_test_layout_cuGraphAddChildGraphNode_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphAddChildGraphNode_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphAddChildGraphNode_params_st>(),
        40usize,
        concat!("Size of: ", stringify!(cuGraphAddChildGraphNode_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphAddChildGraphNode_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuGraphAddChildGraphNode_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phGraphNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddChildGraphNode_params_st),
            "::",
            stringify!(phGraphNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hGraph) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddChildGraphNode_params_st),
            "::",
            stringify!(hGraph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dependencies) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddChildGraphNode_params_st),
            "::",
            stringify!(dependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numDependencies) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddChildGraphNode_params_st),
            "::",
            stringify!(numDependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).childGraph) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddChildGraphNode_params_st),
            "::",
            stringify!(childGraph)
        )
    );
}
impl Default for cuGraphAddChildGraphNode_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphAddChildGraphNode_params = cuGraphAddChildGraphNode_params_st;
#[repr(C)]
pub struct cuGraphChildGraphNodeGetGraph_params_st {
    pub hNode: CUgraphNode,
    pub phGraph: *mut CUgraph,
}
#[test]
fn bindgen_test_layout_cuGraphChildGraphNodeGetGraph_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphChildGraphNodeGetGraph_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphChildGraphNodeGetGraph_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cuGraphChildGraphNodeGetGraph_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphChildGraphNodeGetGraph_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuGraphChildGraphNodeGetGraph_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphChildGraphNodeGetGraph_params_st),
            "::",
            stringify!(hNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phGraph) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphChildGraphNodeGetGraph_params_st),
            "::",
            stringify!(phGraph)
        )
    );
}
impl Default for cuGraphChildGraphNodeGetGraph_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphChildGraphNodeGetGraph_params = cuGraphChildGraphNodeGetGraph_params_st;
#[repr(C)]
pub struct cuGraphAddEmptyNode_params_st {
    pub phGraphNode: *mut CUgraphNode,
    pub hGraph: CUgraph,
    pub dependencies: *const CUgraphNode,
    pub numDependencies: usize,
}
#[test]
fn bindgen_test_layout_cuGraphAddEmptyNode_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphAddEmptyNode_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphAddEmptyNode_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuGraphAddEmptyNode_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphAddEmptyNode_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuGraphAddEmptyNode_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phGraphNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddEmptyNode_params_st),
            "::",
            stringify!(phGraphNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hGraph) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddEmptyNode_params_st),
            "::",
            stringify!(hGraph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dependencies) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddEmptyNode_params_st),
            "::",
            stringify!(dependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numDependencies) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddEmptyNode_params_st),
            "::",
            stringify!(numDependencies)
        )
    );
}
impl Default for cuGraphAddEmptyNode_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphAddEmptyNode_params = cuGraphAddEmptyNode_params_st;
#[repr(C)]
pub struct cuGraphAddEventRecordNode_params_st {
    pub phGraphNode: *mut CUgraphNode,
    pub hGraph: CUgraph,
    pub dependencies: *const CUgraphNode,
    pub numDependencies: usize,
    pub event: CUevent,
}
#[test]
fn bindgen_test_layout_cuGraphAddEventRecordNode_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphAddEventRecordNode_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphAddEventRecordNode_params_st>(),
        40usize,
        concat!("Size of: ", stringify!(cuGraphAddEventRecordNode_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphAddEventRecordNode_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuGraphAddEventRecordNode_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phGraphNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddEventRecordNode_params_st),
            "::",
            stringify!(phGraphNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hGraph) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddEventRecordNode_params_st),
            "::",
            stringify!(hGraph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dependencies) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddEventRecordNode_params_st),
            "::",
            stringify!(dependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numDependencies) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddEventRecordNode_params_st),
            "::",
            stringify!(numDependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddEventRecordNode_params_st),
            "::",
            stringify!(event)
        )
    );
}
impl Default for cuGraphAddEventRecordNode_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphAddEventRecordNode_params = cuGraphAddEventRecordNode_params_st;
#[repr(C)]
pub struct cuGraphEventRecordNodeGetEvent_params_st {
    pub hNode: CUgraphNode,
    pub event_out: *mut CUevent,
}
#[test]
fn bindgen_test_layout_cuGraphEventRecordNodeGetEvent_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphEventRecordNodeGetEvent_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphEventRecordNodeGetEvent_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cuGraphEventRecordNodeGetEvent_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphEventRecordNodeGetEvent_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuGraphEventRecordNodeGetEvent_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphEventRecordNodeGetEvent_params_st),
            "::",
            stringify!(hNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event_out) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphEventRecordNodeGetEvent_params_st),
            "::",
            stringify!(event_out)
        )
    );
}
impl Default for cuGraphEventRecordNodeGetEvent_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphEventRecordNodeGetEvent_params = cuGraphEventRecordNodeGetEvent_params_st;
#[repr(C)]
pub struct cuGraphEventRecordNodeSetEvent_params_st {
    pub hNode: CUgraphNode,
    pub event: CUevent,
}
#[test]
fn bindgen_test_layout_cuGraphEventRecordNodeSetEvent_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphEventRecordNodeSetEvent_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphEventRecordNodeSetEvent_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cuGraphEventRecordNodeSetEvent_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphEventRecordNodeSetEvent_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuGraphEventRecordNodeSetEvent_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphEventRecordNodeSetEvent_params_st),
            "::",
            stringify!(hNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphEventRecordNodeSetEvent_params_st),
            "::",
            stringify!(event)
        )
    );
}
impl Default for cuGraphEventRecordNodeSetEvent_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphEventRecordNodeSetEvent_params = cuGraphEventRecordNodeSetEvent_params_st;
#[repr(C)]
pub struct cuGraphAddEventWaitNode_params_st {
    pub phGraphNode: *mut CUgraphNode,
    pub hGraph: CUgraph,
    pub dependencies: *const CUgraphNode,
    pub numDependencies: usize,
    pub event: CUevent,
}
#[test]
fn bindgen_test_layout_cuGraphAddEventWaitNode_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphAddEventWaitNode_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphAddEventWaitNode_params_st>(),
        40usize,
        concat!("Size of: ", stringify!(cuGraphAddEventWaitNode_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphAddEventWaitNode_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuGraphAddEventWaitNode_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phGraphNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddEventWaitNode_params_st),
            "::",
            stringify!(phGraphNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hGraph) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddEventWaitNode_params_st),
            "::",
            stringify!(hGraph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dependencies) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddEventWaitNode_params_st),
            "::",
            stringify!(dependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numDependencies) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddEventWaitNode_params_st),
            "::",
            stringify!(numDependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddEventWaitNode_params_st),
            "::",
            stringify!(event)
        )
    );
}
impl Default for cuGraphAddEventWaitNode_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphAddEventWaitNode_params = cuGraphAddEventWaitNode_params_st;
#[repr(C)]
pub struct cuGraphEventWaitNodeGetEvent_params_st {
    pub hNode: CUgraphNode,
    pub event_out: *mut CUevent,
}
#[test]
fn bindgen_test_layout_cuGraphEventWaitNodeGetEvent_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphEventWaitNodeGetEvent_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphEventWaitNodeGetEvent_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cuGraphEventWaitNodeGetEvent_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphEventWaitNodeGetEvent_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuGraphEventWaitNodeGetEvent_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphEventWaitNodeGetEvent_params_st),
            "::",
            stringify!(hNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event_out) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphEventWaitNodeGetEvent_params_st),
            "::",
            stringify!(event_out)
        )
    );
}
impl Default for cuGraphEventWaitNodeGetEvent_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphEventWaitNodeGetEvent_params = cuGraphEventWaitNodeGetEvent_params_st;
#[repr(C)]
pub struct cuGraphEventWaitNodeSetEvent_params_st {
    pub hNode: CUgraphNode,
    pub event: CUevent,
}
#[test]
fn bindgen_test_layout_cuGraphEventWaitNodeSetEvent_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphEventWaitNodeSetEvent_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphEventWaitNodeSetEvent_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cuGraphEventWaitNodeSetEvent_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphEventWaitNodeSetEvent_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuGraphEventWaitNodeSetEvent_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphEventWaitNodeSetEvent_params_st),
            "::",
            stringify!(hNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphEventWaitNodeSetEvent_params_st),
            "::",
            stringify!(event)
        )
    );
}
impl Default for cuGraphEventWaitNodeSetEvent_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphEventWaitNodeSetEvent_params = cuGraphEventWaitNodeSetEvent_params_st;
#[repr(C)]
pub struct cuGraphAddExternalSemaphoresSignalNode_params_st {
    pub phGraphNode: *mut CUgraphNode,
    pub hGraph: CUgraph,
    pub dependencies: *const CUgraphNode,
    pub numDependencies: usize,
    pub nodeParams: *const CUDA_EXT_SEM_SIGNAL_NODE_PARAMS,
}
#[test]
fn bindgen_test_layout_cuGraphAddExternalSemaphoresSignalNode_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphAddExternalSemaphoresSignalNode_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphAddExternalSemaphoresSignalNode_params_st>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(cuGraphAddExternalSemaphoresSignalNode_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphAddExternalSemaphoresSignalNode_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuGraphAddExternalSemaphoresSignalNode_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phGraphNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddExternalSemaphoresSignalNode_params_st),
            "::",
            stringify!(phGraphNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hGraph) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddExternalSemaphoresSignalNode_params_st),
            "::",
            stringify!(hGraph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dependencies) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddExternalSemaphoresSignalNode_params_st),
            "::",
            stringify!(dependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numDependencies) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddExternalSemaphoresSignalNode_params_st),
            "::",
            stringify!(numDependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeParams) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddExternalSemaphoresSignalNode_params_st),
            "::",
            stringify!(nodeParams)
        )
    );
}
impl Default for cuGraphAddExternalSemaphoresSignalNode_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphAddExternalSemaphoresSignalNode_params =
    cuGraphAddExternalSemaphoresSignalNode_params_st;
#[repr(C)]
pub struct cuGraphExternalSemaphoresSignalNodeGetParams_params_st {
    pub hNode: CUgraphNode,
    pub params_out: *mut CUDA_EXT_SEM_SIGNAL_NODE_PARAMS,
}
#[test]
fn bindgen_test_layout_cuGraphExternalSemaphoresSignalNodeGetParams_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphExternalSemaphoresSignalNodeGetParams_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphExternalSemaphoresSignalNodeGetParams_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cuGraphExternalSemaphoresSignalNodeGetParams_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphExternalSemaphoresSignalNodeGetParams_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuGraphExternalSemaphoresSignalNodeGetParams_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphExternalSemaphoresSignalNodeGetParams_params_st),
            "::",
            stringify!(hNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).params_out) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphExternalSemaphoresSignalNodeGetParams_params_st),
            "::",
            stringify!(params_out)
        )
    );
}
impl Default for cuGraphExternalSemaphoresSignalNodeGetParams_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphExternalSemaphoresSignalNodeGetParams_params =
    cuGraphExternalSemaphoresSignalNodeGetParams_params_st;
#[repr(C)]
pub struct cuGraphExternalSemaphoresSignalNodeSetParams_params_st {
    pub hNode: CUgraphNode,
    pub nodeParams: *const CUDA_EXT_SEM_SIGNAL_NODE_PARAMS,
}
#[test]
fn bindgen_test_layout_cuGraphExternalSemaphoresSignalNodeSetParams_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphExternalSemaphoresSignalNodeSetParams_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphExternalSemaphoresSignalNodeSetParams_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cuGraphExternalSemaphoresSignalNodeSetParams_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphExternalSemaphoresSignalNodeSetParams_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuGraphExternalSemaphoresSignalNodeSetParams_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphExternalSemaphoresSignalNodeSetParams_params_st),
            "::",
            stringify!(hNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeParams) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphExternalSemaphoresSignalNodeSetParams_params_st),
            "::",
            stringify!(nodeParams)
        )
    );
}
impl Default for cuGraphExternalSemaphoresSignalNodeSetParams_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphExternalSemaphoresSignalNodeSetParams_params =
    cuGraphExternalSemaphoresSignalNodeSetParams_params_st;
#[repr(C)]
pub struct cuGraphAddExternalSemaphoresWaitNode_params_st {
    pub phGraphNode: *mut CUgraphNode,
    pub hGraph: CUgraph,
    pub dependencies: *const CUgraphNode,
    pub numDependencies: usize,
    pub nodeParams: *const CUDA_EXT_SEM_WAIT_NODE_PARAMS,
}
#[test]
fn bindgen_test_layout_cuGraphAddExternalSemaphoresWaitNode_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphAddExternalSemaphoresWaitNode_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphAddExternalSemaphoresWaitNode_params_st>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(cuGraphAddExternalSemaphoresWaitNode_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphAddExternalSemaphoresWaitNode_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuGraphAddExternalSemaphoresWaitNode_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phGraphNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddExternalSemaphoresWaitNode_params_st),
            "::",
            stringify!(phGraphNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hGraph) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddExternalSemaphoresWaitNode_params_st),
            "::",
            stringify!(hGraph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dependencies) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddExternalSemaphoresWaitNode_params_st),
            "::",
            stringify!(dependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numDependencies) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddExternalSemaphoresWaitNode_params_st),
            "::",
            stringify!(numDependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeParams) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddExternalSemaphoresWaitNode_params_st),
            "::",
            stringify!(nodeParams)
        )
    );
}
impl Default for cuGraphAddExternalSemaphoresWaitNode_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphAddExternalSemaphoresWaitNode_params =
    cuGraphAddExternalSemaphoresWaitNode_params_st;
#[repr(C)]
pub struct cuGraphExternalSemaphoresWaitNodeGetParams_params_st {
    pub hNode: CUgraphNode,
    pub params_out: *mut CUDA_EXT_SEM_WAIT_NODE_PARAMS,
}
#[test]
fn bindgen_test_layout_cuGraphExternalSemaphoresWaitNodeGetParams_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphExternalSemaphoresWaitNodeGetParams_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphExternalSemaphoresWaitNodeGetParams_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cuGraphExternalSemaphoresWaitNodeGetParams_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphExternalSemaphoresWaitNodeGetParams_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuGraphExternalSemaphoresWaitNodeGetParams_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphExternalSemaphoresWaitNodeGetParams_params_st),
            "::",
            stringify!(hNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).params_out) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphExternalSemaphoresWaitNodeGetParams_params_st),
            "::",
            stringify!(params_out)
        )
    );
}
impl Default for cuGraphExternalSemaphoresWaitNodeGetParams_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphExternalSemaphoresWaitNodeGetParams_params =
    cuGraphExternalSemaphoresWaitNodeGetParams_params_st;
#[repr(C)]
pub struct cuGraphExternalSemaphoresWaitNodeSetParams_params_st {
    pub hNode: CUgraphNode,
    pub nodeParams: *const CUDA_EXT_SEM_WAIT_NODE_PARAMS,
}
#[test]
fn bindgen_test_layout_cuGraphExternalSemaphoresWaitNodeSetParams_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphExternalSemaphoresWaitNodeSetParams_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphExternalSemaphoresWaitNodeSetParams_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cuGraphExternalSemaphoresWaitNodeSetParams_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphExternalSemaphoresWaitNodeSetParams_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuGraphExternalSemaphoresWaitNodeSetParams_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphExternalSemaphoresWaitNodeSetParams_params_st),
            "::",
            stringify!(hNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeParams) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphExternalSemaphoresWaitNodeSetParams_params_st),
            "::",
            stringify!(nodeParams)
        )
    );
}
impl Default for cuGraphExternalSemaphoresWaitNodeSetParams_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphExternalSemaphoresWaitNodeSetParams_params =
    cuGraphExternalSemaphoresWaitNodeSetParams_params_st;
#[repr(C)]
pub struct cuGraphAddBatchMemOpNode_params_st {
    pub phGraphNode: *mut CUgraphNode,
    pub hGraph: CUgraph,
    pub dependencies: *const CUgraphNode,
    pub numDependencies: usize,
    pub nodeParams: *const CUDA_BATCH_MEM_OP_NODE_PARAMS,
}
#[test]
fn bindgen_test_layout_cuGraphAddBatchMemOpNode_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphAddBatchMemOpNode_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphAddBatchMemOpNode_params_st>(),
        40usize,
        concat!("Size of: ", stringify!(cuGraphAddBatchMemOpNode_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphAddBatchMemOpNode_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuGraphAddBatchMemOpNode_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phGraphNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddBatchMemOpNode_params_st),
            "::",
            stringify!(phGraphNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hGraph) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddBatchMemOpNode_params_st),
            "::",
            stringify!(hGraph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dependencies) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddBatchMemOpNode_params_st),
            "::",
            stringify!(dependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numDependencies) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddBatchMemOpNode_params_st),
            "::",
            stringify!(numDependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeParams) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddBatchMemOpNode_params_st),
            "::",
            stringify!(nodeParams)
        )
    );
}
impl Default for cuGraphAddBatchMemOpNode_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphAddBatchMemOpNode_params = cuGraphAddBatchMemOpNode_params_st;
#[repr(C)]
pub struct cuGraphBatchMemOpNodeGetParams_params_st {
    pub hNode: CUgraphNode,
    pub nodeParams_out: *mut CUDA_BATCH_MEM_OP_NODE_PARAMS,
}
#[test]
fn bindgen_test_layout_cuGraphBatchMemOpNodeGetParams_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphBatchMemOpNodeGetParams_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphBatchMemOpNodeGetParams_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cuGraphBatchMemOpNodeGetParams_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphBatchMemOpNodeGetParams_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuGraphBatchMemOpNodeGetParams_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphBatchMemOpNodeGetParams_params_st),
            "::",
            stringify!(hNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeParams_out) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphBatchMemOpNodeGetParams_params_st),
            "::",
            stringify!(nodeParams_out)
        )
    );
}
impl Default for cuGraphBatchMemOpNodeGetParams_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphBatchMemOpNodeGetParams_params = cuGraphBatchMemOpNodeGetParams_params_st;
#[repr(C)]
pub struct cuGraphBatchMemOpNodeSetParams_params_st {
    pub hNode: CUgraphNode,
    pub nodeParams: *const CUDA_BATCH_MEM_OP_NODE_PARAMS,
}
#[test]
fn bindgen_test_layout_cuGraphBatchMemOpNodeSetParams_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphBatchMemOpNodeSetParams_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphBatchMemOpNodeSetParams_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cuGraphBatchMemOpNodeSetParams_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphBatchMemOpNodeSetParams_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuGraphBatchMemOpNodeSetParams_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphBatchMemOpNodeSetParams_params_st),
            "::",
            stringify!(hNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeParams) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphBatchMemOpNodeSetParams_params_st),
            "::",
            stringify!(nodeParams)
        )
    );
}
impl Default for cuGraphBatchMemOpNodeSetParams_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphBatchMemOpNodeSetParams_params = cuGraphBatchMemOpNodeSetParams_params_st;
#[repr(C)]
pub struct cuGraphExecBatchMemOpNodeSetParams_params_st {
    pub hGraphExec: CUgraphExec,
    pub hNode: CUgraphNode,
    pub nodeParams: *const CUDA_BATCH_MEM_OP_NODE_PARAMS,
}
#[test]
fn bindgen_test_layout_cuGraphExecBatchMemOpNodeSetParams_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphExecBatchMemOpNodeSetParams_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphExecBatchMemOpNodeSetParams_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cuGraphExecBatchMemOpNodeSetParams_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphExecBatchMemOpNodeSetParams_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuGraphExecBatchMemOpNodeSetParams_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hGraphExec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphExecBatchMemOpNodeSetParams_params_st),
            "::",
            stringify!(hGraphExec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hNode) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphExecBatchMemOpNodeSetParams_params_st),
            "::",
            stringify!(hNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeParams) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphExecBatchMemOpNodeSetParams_params_st),
            "::",
            stringify!(nodeParams)
        )
    );
}
impl Default for cuGraphExecBatchMemOpNodeSetParams_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphExecBatchMemOpNodeSetParams_params = cuGraphExecBatchMemOpNodeSetParams_params_st;
#[repr(C)]
pub struct cuGraphAddMemAllocNode_params_st {
    pub phGraphNode: *mut CUgraphNode,
    pub hGraph: CUgraph,
    pub dependencies: *const CUgraphNode,
    pub numDependencies: usize,
    pub nodeParams: *mut CUDA_MEM_ALLOC_NODE_PARAMS,
}
#[test]
fn bindgen_test_layout_cuGraphAddMemAllocNode_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphAddMemAllocNode_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphAddMemAllocNode_params_st>(),
        40usize,
        concat!("Size of: ", stringify!(cuGraphAddMemAllocNode_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphAddMemAllocNode_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuGraphAddMemAllocNode_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phGraphNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddMemAllocNode_params_st),
            "::",
            stringify!(phGraphNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hGraph) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddMemAllocNode_params_st),
            "::",
            stringify!(hGraph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dependencies) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddMemAllocNode_params_st),
            "::",
            stringify!(dependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numDependencies) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddMemAllocNode_params_st),
            "::",
            stringify!(numDependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeParams) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddMemAllocNode_params_st),
            "::",
            stringify!(nodeParams)
        )
    );
}
impl Default for cuGraphAddMemAllocNode_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphAddMemAllocNode_params = cuGraphAddMemAllocNode_params_st;
#[repr(C)]
pub struct cuGraphMemAllocNodeGetParams_params_st {
    pub hNode: CUgraphNode,
    pub params_out: *mut CUDA_MEM_ALLOC_NODE_PARAMS,
}
#[test]
fn bindgen_test_layout_cuGraphMemAllocNodeGetParams_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphMemAllocNodeGetParams_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphMemAllocNodeGetParams_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cuGraphMemAllocNodeGetParams_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphMemAllocNodeGetParams_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuGraphMemAllocNodeGetParams_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphMemAllocNodeGetParams_params_st),
            "::",
            stringify!(hNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).params_out) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphMemAllocNodeGetParams_params_st),
            "::",
            stringify!(params_out)
        )
    );
}
impl Default for cuGraphMemAllocNodeGetParams_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphMemAllocNodeGetParams_params = cuGraphMemAllocNodeGetParams_params_st;
#[repr(C)]
pub struct cuGraphAddMemFreeNode_params_st {
    pub phGraphNode: *mut CUgraphNode,
    pub hGraph: CUgraph,
    pub dependencies: *const CUgraphNode,
    pub numDependencies: usize,
    pub dptr: CUdeviceptr,
}
#[test]
fn bindgen_test_layout_cuGraphAddMemFreeNode_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphAddMemFreeNode_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphAddMemFreeNode_params_st>(),
        40usize,
        concat!("Size of: ", stringify!(cuGraphAddMemFreeNode_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphAddMemFreeNode_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuGraphAddMemFreeNode_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phGraphNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddMemFreeNode_params_st),
            "::",
            stringify!(phGraphNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hGraph) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddMemFreeNode_params_st),
            "::",
            stringify!(hGraph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dependencies) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddMemFreeNode_params_st),
            "::",
            stringify!(dependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numDependencies) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddMemFreeNode_params_st),
            "::",
            stringify!(numDependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dptr) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddMemFreeNode_params_st),
            "::",
            stringify!(dptr)
        )
    );
}
impl Default for cuGraphAddMemFreeNode_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphAddMemFreeNode_params = cuGraphAddMemFreeNode_params_st;
#[repr(C)]
pub struct cuGraphMemFreeNodeGetParams_params_st {
    pub hNode: CUgraphNode,
    pub dptr_out: *mut CUdeviceptr,
}
#[test]
fn bindgen_test_layout_cuGraphMemFreeNodeGetParams_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphMemFreeNodeGetParams_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphMemFreeNodeGetParams_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cuGraphMemFreeNodeGetParams_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphMemFreeNodeGetParams_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuGraphMemFreeNodeGetParams_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphMemFreeNodeGetParams_params_st),
            "::",
            stringify!(hNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dptr_out) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphMemFreeNodeGetParams_params_st),
            "::",
            stringify!(dptr_out)
        )
    );
}
impl Default for cuGraphMemFreeNodeGetParams_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphMemFreeNodeGetParams_params = cuGraphMemFreeNodeGetParams_params_st;
#[repr(C)]
pub struct cuDeviceGraphMemTrim_params_st {
    pub device: CUdevice,
}
#[test]
fn bindgen_test_layout_cuDeviceGraphMemTrim_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuDeviceGraphMemTrim_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuDeviceGraphMemTrim_params_st>(),
        4usize,
        concat!("Size of: ", stringify!(cuDeviceGraphMemTrim_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuDeviceGraphMemTrim_params_st>(),
        4usize,
        concat!("Alignment of ", stringify!(cuDeviceGraphMemTrim_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDeviceGraphMemTrim_params_st),
            "::",
            stringify!(device)
        )
    );
}
impl Default for cuDeviceGraphMemTrim_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuDeviceGraphMemTrim_params = cuDeviceGraphMemTrim_params_st;
#[repr(C)]
pub struct cuDeviceGetGraphMemAttribute_params_st {
    pub device: CUdevice,
    pub attr: CUgraphMem_attribute,
    pub value: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_cuDeviceGetGraphMemAttribute_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuDeviceGetGraphMemAttribute_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuDeviceGetGraphMemAttribute_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cuDeviceGetGraphMemAttribute_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuDeviceGetGraphMemAttribute_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuDeviceGetGraphMemAttribute_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDeviceGetGraphMemAttribute_params_st),
            "::",
            stringify!(device)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDeviceGetGraphMemAttribute_params_st),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDeviceGetGraphMemAttribute_params_st),
            "::",
            stringify!(value)
        )
    );
}
impl Default for cuDeviceGetGraphMemAttribute_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuDeviceGetGraphMemAttribute_params = cuDeviceGetGraphMemAttribute_params_st;
#[repr(C)]
pub struct cuDeviceSetGraphMemAttribute_params_st {
    pub device: CUdevice,
    pub attr: CUgraphMem_attribute,
    pub value: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_cuDeviceSetGraphMemAttribute_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuDeviceSetGraphMemAttribute_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuDeviceSetGraphMemAttribute_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cuDeviceSetGraphMemAttribute_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuDeviceSetGraphMemAttribute_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuDeviceSetGraphMemAttribute_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDeviceSetGraphMemAttribute_params_st),
            "::",
            stringify!(device)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDeviceSetGraphMemAttribute_params_st),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDeviceSetGraphMemAttribute_params_st),
            "::",
            stringify!(value)
        )
    );
}
impl Default for cuDeviceSetGraphMemAttribute_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuDeviceSetGraphMemAttribute_params = cuDeviceSetGraphMemAttribute_params_st;
#[repr(C)]
pub struct cuGraphClone_params_st {
    pub phGraphClone: *mut CUgraph,
    pub originalGraph: CUgraph,
}
#[test]
fn bindgen_test_layout_cuGraphClone_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphClone_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphClone_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuGraphClone_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphClone_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuGraphClone_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phGraphClone) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphClone_params_st),
            "::",
            stringify!(phGraphClone)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).originalGraph) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphClone_params_st),
            "::",
            stringify!(originalGraph)
        )
    );
}
impl Default for cuGraphClone_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphClone_params = cuGraphClone_params_st;
#[repr(C)]
pub struct cuGraphNodeFindInClone_params_st {
    pub phNode: *mut CUgraphNode,
    pub hOriginalNode: CUgraphNode,
    pub hClonedGraph: CUgraph,
}
#[test]
fn bindgen_test_layout_cuGraphNodeFindInClone_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphNodeFindInClone_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphNodeFindInClone_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuGraphNodeFindInClone_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphNodeFindInClone_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuGraphNodeFindInClone_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphNodeFindInClone_params_st),
            "::",
            stringify!(phNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hOriginalNode) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphNodeFindInClone_params_st),
            "::",
            stringify!(hOriginalNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hClonedGraph) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphNodeFindInClone_params_st),
            "::",
            stringify!(hClonedGraph)
        )
    );
}
impl Default for cuGraphNodeFindInClone_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphNodeFindInClone_params = cuGraphNodeFindInClone_params_st;
#[repr(C)]
pub struct cuGraphNodeGetType_params_st {
    pub hNode: CUgraphNode,
    pub type_: *mut CUgraphNodeType,
}
#[test]
fn bindgen_test_layout_cuGraphNodeGetType_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphNodeGetType_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphNodeGetType_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuGraphNodeGetType_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphNodeGetType_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuGraphNodeGetType_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphNodeGetType_params_st),
            "::",
            stringify!(hNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphNodeGetType_params_st),
            "::",
            stringify!(type_)
        )
    );
}
impl Default for cuGraphNodeGetType_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphNodeGetType_params = cuGraphNodeGetType_params_st;
#[repr(C)]
pub struct cuGraphGetNodes_params_st {
    pub hGraph: CUgraph,
    pub nodes: *mut CUgraphNode,
    pub numNodes: *mut usize,
}
#[test]
fn bindgen_test_layout_cuGraphGetNodes_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphGetNodes_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphGetNodes_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuGraphGetNodes_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphGetNodes_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuGraphGetNodes_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hGraph) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphGetNodes_params_st),
            "::",
            stringify!(hGraph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodes) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphGetNodes_params_st),
            "::",
            stringify!(nodes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numNodes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphGetNodes_params_st),
            "::",
            stringify!(numNodes)
        )
    );
}
impl Default for cuGraphGetNodes_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphGetNodes_params = cuGraphGetNodes_params_st;
#[repr(C)]
pub struct cuGraphGetRootNodes_params_st {
    pub hGraph: CUgraph,
    pub rootNodes: *mut CUgraphNode,
    pub numRootNodes: *mut usize,
}
#[test]
fn bindgen_test_layout_cuGraphGetRootNodes_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphGetRootNodes_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphGetRootNodes_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuGraphGetRootNodes_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphGetRootNodes_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuGraphGetRootNodes_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hGraph) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphGetRootNodes_params_st),
            "::",
            stringify!(hGraph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rootNodes) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphGetRootNodes_params_st),
            "::",
            stringify!(rootNodes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numRootNodes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphGetRootNodes_params_st),
            "::",
            stringify!(numRootNodes)
        )
    );
}
impl Default for cuGraphGetRootNodes_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphGetRootNodes_params = cuGraphGetRootNodes_params_st;
#[repr(C)]
pub struct cuGraphGetEdges_params_st {
    pub hGraph: CUgraph,
    pub from: *mut CUgraphNode,
    pub to: *mut CUgraphNode,
    pub numEdges: *mut usize,
}
#[test]
fn bindgen_test_layout_cuGraphGetEdges_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphGetEdges_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphGetEdges_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuGraphGetEdges_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphGetEdges_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuGraphGetEdges_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hGraph) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphGetEdges_params_st),
            "::",
            stringify!(hGraph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).from) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphGetEdges_params_st),
            "::",
            stringify!(from)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).to) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphGetEdges_params_st),
            "::",
            stringify!(to)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numEdges) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphGetEdges_params_st),
            "::",
            stringify!(numEdges)
        )
    );
}
impl Default for cuGraphGetEdges_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphGetEdges_params = cuGraphGetEdges_params_st;
#[repr(C)]
pub struct cuGraphNodeGetDependencies_params_st {
    pub hNode: CUgraphNode,
    pub dependencies: *mut CUgraphNode,
    pub numDependencies: *mut usize,
}
#[test]
fn bindgen_test_layout_cuGraphNodeGetDependencies_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphNodeGetDependencies_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphNodeGetDependencies_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cuGraphNodeGetDependencies_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphNodeGetDependencies_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuGraphNodeGetDependencies_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphNodeGetDependencies_params_st),
            "::",
            stringify!(hNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dependencies) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphNodeGetDependencies_params_st),
            "::",
            stringify!(dependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numDependencies) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphNodeGetDependencies_params_st),
            "::",
            stringify!(numDependencies)
        )
    );
}
impl Default for cuGraphNodeGetDependencies_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphNodeGetDependencies_params = cuGraphNodeGetDependencies_params_st;
#[repr(C)]
pub struct cuGraphNodeGetDependentNodes_params_st {
    pub hNode: CUgraphNode,
    pub dependentNodes: *mut CUgraphNode,
    pub numDependentNodes: *mut usize,
}
#[test]
fn bindgen_test_layout_cuGraphNodeGetDependentNodes_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphNodeGetDependentNodes_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphNodeGetDependentNodes_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cuGraphNodeGetDependentNodes_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphNodeGetDependentNodes_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuGraphNodeGetDependentNodes_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphNodeGetDependentNodes_params_st),
            "::",
            stringify!(hNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dependentNodes) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphNodeGetDependentNodes_params_st),
            "::",
            stringify!(dependentNodes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numDependentNodes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphNodeGetDependentNodes_params_st),
            "::",
            stringify!(numDependentNodes)
        )
    );
}
impl Default for cuGraphNodeGetDependentNodes_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphNodeGetDependentNodes_params = cuGraphNodeGetDependentNodes_params_st;
#[repr(C)]
pub struct cuGraphAddDependencies_params_st {
    pub hGraph: CUgraph,
    pub from: *const CUgraphNode,
    pub to: *const CUgraphNode,
    pub numDependencies: usize,
}
#[test]
fn bindgen_test_layout_cuGraphAddDependencies_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphAddDependencies_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphAddDependencies_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuGraphAddDependencies_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphAddDependencies_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuGraphAddDependencies_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hGraph) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddDependencies_params_st),
            "::",
            stringify!(hGraph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).from) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddDependencies_params_st),
            "::",
            stringify!(from)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).to) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddDependencies_params_st),
            "::",
            stringify!(to)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numDependencies) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddDependencies_params_st),
            "::",
            stringify!(numDependencies)
        )
    );
}
impl Default for cuGraphAddDependencies_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphAddDependencies_params = cuGraphAddDependencies_params_st;
#[repr(C)]
pub struct cuGraphRemoveDependencies_params_st {
    pub hGraph: CUgraph,
    pub from: *const CUgraphNode,
    pub to: *const CUgraphNode,
    pub numDependencies: usize,
}
#[test]
fn bindgen_test_layout_cuGraphRemoveDependencies_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphRemoveDependencies_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphRemoveDependencies_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuGraphRemoveDependencies_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphRemoveDependencies_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuGraphRemoveDependencies_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hGraph) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphRemoveDependencies_params_st),
            "::",
            stringify!(hGraph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).from) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphRemoveDependencies_params_st),
            "::",
            stringify!(from)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).to) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphRemoveDependencies_params_st),
            "::",
            stringify!(to)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numDependencies) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphRemoveDependencies_params_st),
            "::",
            stringify!(numDependencies)
        )
    );
}
impl Default for cuGraphRemoveDependencies_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphRemoveDependencies_params = cuGraphRemoveDependencies_params_st;
#[repr(C)]
pub struct cuGraphDestroyNode_params_st {
    pub hNode: CUgraphNode,
}
#[test]
fn bindgen_test_layout_cuGraphDestroyNode_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphDestroyNode_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphDestroyNode_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cuGraphDestroyNode_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphDestroyNode_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuGraphDestroyNode_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphDestroyNode_params_st),
            "::",
            stringify!(hNode)
        )
    );
}
impl Default for cuGraphDestroyNode_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphDestroyNode_params = cuGraphDestroyNode_params_st;
#[repr(C)]
pub struct cuGraphInstantiateWithFlags_params_st {
    pub phGraphExec: *mut CUgraphExec,
    pub hGraph: CUgraph,
    pub flags: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_cuGraphInstantiateWithFlags_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphInstantiateWithFlags_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphInstantiateWithFlags_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cuGraphInstantiateWithFlags_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphInstantiateWithFlags_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuGraphInstantiateWithFlags_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phGraphExec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphInstantiateWithFlags_params_st),
            "::",
            stringify!(phGraphExec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hGraph) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphInstantiateWithFlags_params_st),
            "::",
            stringify!(hGraph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphInstantiateWithFlags_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cuGraphInstantiateWithFlags_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphInstantiateWithFlags_params = cuGraphInstantiateWithFlags_params_st;
#[repr(C)]
pub struct cuGraphInstantiateWithParams_ptsz_params_st {
    pub phGraphExec: *mut CUgraphExec,
    pub hGraph: CUgraph,
    pub instantiateParams: *mut CUDA_GRAPH_INSTANTIATE_PARAMS,
}
#[test]
fn bindgen_test_layout_cuGraphInstantiateWithParams_ptsz_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphInstantiateWithParams_ptsz_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphInstantiateWithParams_ptsz_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cuGraphInstantiateWithParams_ptsz_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphInstantiateWithParams_ptsz_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuGraphInstantiateWithParams_ptsz_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phGraphExec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphInstantiateWithParams_ptsz_params_st),
            "::",
            stringify!(phGraphExec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hGraph) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphInstantiateWithParams_ptsz_params_st),
            "::",
            stringify!(hGraph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).instantiateParams) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphInstantiateWithParams_ptsz_params_st),
            "::",
            stringify!(instantiateParams)
        )
    );
}
impl Default for cuGraphInstantiateWithParams_ptsz_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphInstantiateWithParams_ptsz_params = cuGraphInstantiateWithParams_ptsz_params_st;
#[repr(C)]
pub struct cuGraphExecGetFlags_params_st {
    pub hGraphExec: CUgraphExec,
    pub flags: *mut cuuint64_t,
}
#[test]
fn bindgen_test_layout_cuGraphExecGetFlags_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphExecGetFlags_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphExecGetFlags_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuGraphExecGetFlags_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphExecGetFlags_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuGraphExecGetFlags_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hGraphExec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphExecGetFlags_params_st),
            "::",
            stringify!(hGraphExec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphExecGetFlags_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cuGraphExecGetFlags_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphExecGetFlags_params = cuGraphExecGetFlags_params_st;
#[repr(C)]
pub struct cuGraphExecKernelNodeSetParams_v2_params_st {
    pub hGraphExec: CUgraphExec,
    pub hNode: CUgraphNode,
    pub nodeParams: *const CUDA_KERNEL_NODE_PARAMS,
}
#[test]
fn bindgen_test_layout_cuGraphExecKernelNodeSetParams_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphExecKernelNodeSetParams_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphExecKernelNodeSetParams_v2_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cuGraphExecKernelNodeSetParams_v2_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphExecKernelNodeSetParams_v2_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuGraphExecKernelNodeSetParams_v2_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hGraphExec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphExecKernelNodeSetParams_v2_params_st),
            "::",
            stringify!(hGraphExec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hNode) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphExecKernelNodeSetParams_v2_params_st),
            "::",
            stringify!(hNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeParams) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphExecKernelNodeSetParams_v2_params_st),
            "::",
            stringify!(nodeParams)
        )
    );
}
impl Default for cuGraphExecKernelNodeSetParams_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphExecKernelNodeSetParams_v2_params = cuGraphExecKernelNodeSetParams_v2_params_st;
#[repr(C)]
pub struct cuGraphExecMemcpyNodeSetParams_params_st {
    pub hGraphExec: CUgraphExec,
    pub hNode: CUgraphNode,
    pub copyParams: *const CUDA_MEMCPY3D,
    pub ctx: CUcontext,
}
#[test]
fn bindgen_test_layout_cuGraphExecMemcpyNodeSetParams_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphExecMemcpyNodeSetParams_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphExecMemcpyNodeSetParams_params_st>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(cuGraphExecMemcpyNodeSetParams_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphExecMemcpyNodeSetParams_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuGraphExecMemcpyNodeSetParams_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hGraphExec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphExecMemcpyNodeSetParams_params_st),
            "::",
            stringify!(hGraphExec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hNode) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphExecMemcpyNodeSetParams_params_st),
            "::",
            stringify!(hNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).copyParams) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphExecMemcpyNodeSetParams_params_st),
            "::",
            stringify!(copyParams)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphExecMemcpyNodeSetParams_params_st),
            "::",
            stringify!(ctx)
        )
    );
}
impl Default for cuGraphExecMemcpyNodeSetParams_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphExecMemcpyNodeSetParams_params = cuGraphExecMemcpyNodeSetParams_params_st;
#[repr(C)]
pub struct cuGraphExecMemsetNodeSetParams_params_st {
    pub hGraphExec: CUgraphExec,
    pub hNode: CUgraphNode,
    pub memsetParams: *const CUDA_MEMSET_NODE_PARAMS,
    pub ctx: CUcontext,
}
#[test]
fn bindgen_test_layout_cuGraphExecMemsetNodeSetParams_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphExecMemsetNodeSetParams_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphExecMemsetNodeSetParams_params_st>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(cuGraphExecMemsetNodeSetParams_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphExecMemsetNodeSetParams_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuGraphExecMemsetNodeSetParams_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hGraphExec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphExecMemsetNodeSetParams_params_st),
            "::",
            stringify!(hGraphExec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hNode) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphExecMemsetNodeSetParams_params_st),
            "::",
            stringify!(hNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memsetParams) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphExecMemsetNodeSetParams_params_st),
            "::",
            stringify!(memsetParams)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphExecMemsetNodeSetParams_params_st),
            "::",
            stringify!(ctx)
        )
    );
}
impl Default for cuGraphExecMemsetNodeSetParams_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphExecMemsetNodeSetParams_params = cuGraphExecMemsetNodeSetParams_params_st;
#[repr(C)]
pub struct cuGraphExecHostNodeSetParams_params_st {
    pub hGraphExec: CUgraphExec,
    pub hNode: CUgraphNode,
    pub nodeParams: *const CUDA_HOST_NODE_PARAMS,
}
#[test]
fn bindgen_test_layout_cuGraphExecHostNodeSetParams_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphExecHostNodeSetParams_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphExecHostNodeSetParams_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cuGraphExecHostNodeSetParams_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphExecHostNodeSetParams_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuGraphExecHostNodeSetParams_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hGraphExec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphExecHostNodeSetParams_params_st),
            "::",
            stringify!(hGraphExec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hNode) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphExecHostNodeSetParams_params_st),
            "::",
            stringify!(hNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeParams) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphExecHostNodeSetParams_params_st),
            "::",
            stringify!(nodeParams)
        )
    );
}
impl Default for cuGraphExecHostNodeSetParams_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphExecHostNodeSetParams_params = cuGraphExecHostNodeSetParams_params_st;
#[repr(C)]
pub struct cuGraphExecChildGraphNodeSetParams_params_st {
    pub hGraphExec: CUgraphExec,
    pub hNode: CUgraphNode,
    pub childGraph: CUgraph,
}
#[test]
fn bindgen_test_layout_cuGraphExecChildGraphNodeSetParams_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphExecChildGraphNodeSetParams_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphExecChildGraphNodeSetParams_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cuGraphExecChildGraphNodeSetParams_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphExecChildGraphNodeSetParams_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuGraphExecChildGraphNodeSetParams_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hGraphExec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphExecChildGraphNodeSetParams_params_st),
            "::",
            stringify!(hGraphExec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hNode) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphExecChildGraphNodeSetParams_params_st),
            "::",
            stringify!(hNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).childGraph) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphExecChildGraphNodeSetParams_params_st),
            "::",
            stringify!(childGraph)
        )
    );
}
impl Default for cuGraphExecChildGraphNodeSetParams_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphExecChildGraphNodeSetParams_params = cuGraphExecChildGraphNodeSetParams_params_st;
#[repr(C)]
pub struct cuGraphExecEventRecordNodeSetEvent_params_st {
    pub hGraphExec: CUgraphExec,
    pub hNode: CUgraphNode,
    pub event: CUevent,
}
#[test]
fn bindgen_test_layout_cuGraphExecEventRecordNodeSetEvent_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphExecEventRecordNodeSetEvent_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphExecEventRecordNodeSetEvent_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cuGraphExecEventRecordNodeSetEvent_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphExecEventRecordNodeSetEvent_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuGraphExecEventRecordNodeSetEvent_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hGraphExec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphExecEventRecordNodeSetEvent_params_st),
            "::",
            stringify!(hGraphExec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hNode) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphExecEventRecordNodeSetEvent_params_st),
            "::",
            stringify!(hNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphExecEventRecordNodeSetEvent_params_st),
            "::",
            stringify!(event)
        )
    );
}
impl Default for cuGraphExecEventRecordNodeSetEvent_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphExecEventRecordNodeSetEvent_params = cuGraphExecEventRecordNodeSetEvent_params_st;
#[repr(C)]
pub struct cuGraphExecEventWaitNodeSetEvent_params_st {
    pub hGraphExec: CUgraphExec,
    pub hNode: CUgraphNode,
    pub event: CUevent,
}
#[test]
fn bindgen_test_layout_cuGraphExecEventWaitNodeSetEvent_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphExecEventWaitNodeSetEvent_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphExecEventWaitNodeSetEvent_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cuGraphExecEventWaitNodeSetEvent_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphExecEventWaitNodeSetEvent_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuGraphExecEventWaitNodeSetEvent_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hGraphExec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphExecEventWaitNodeSetEvent_params_st),
            "::",
            stringify!(hGraphExec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hNode) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphExecEventWaitNodeSetEvent_params_st),
            "::",
            stringify!(hNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphExecEventWaitNodeSetEvent_params_st),
            "::",
            stringify!(event)
        )
    );
}
impl Default for cuGraphExecEventWaitNodeSetEvent_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphExecEventWaitNodeSetEvent_params = cuGraphExecEventWaitNodeSetEvent_params_st;
#[repr(C)]
pub struct cuGraphExecExternalSemaphoresSignalNodeSetParams_params_st {
    pub hGraphExec: CUgraphExec,
    pub hNode: CUgraphNode,
    pub nodeParams: *const CUDA_EXT_SEM_SIGNAL_NODE_PARAMS,
}
#[test]
fn bindgen_test_layout_cuGraphExecExternalSemaphoresSignalNodeSetParams_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<
        cuGraphExecExternalSemaphoresSignalNodeSetParams_params_st,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphExecExternalSemaphoresSignalNodeSetParams_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cuGraphExecExternalSemaphoresSignalNodeSetParams_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphExecExternalSemaphoresSignalNodeSetParams_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuGraphExecExternalSemaphoresSignalNodeSetParams_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hGraphExec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphExecExternalSemaphoresSignalNodeSetParams_params_st),
            "::",
            stringify!(hGraphExec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hNode) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphExecExternalSemaphoresSignalNodeSetParams_params_st),
            "::",
            stringify!(hNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeParams) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphExecExternalSemaphoresSignalNodeSetParams_params_st),
            "::",
            stringify!(nodeParams)
        )
    );
}
impl Default for cuGraphExecExternalSemaphoresSignalNodeSetParams_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphExecExternalSemaphoresSignalNodeSetParams_params =
    cuGraphExecExternalSemaphoresSignalNodeSetParams_params_st;
#[repr(C)]
pub struct cuGraphExecExternalSemaphoresWaitNodeSetParams_params_st {
    pub hGraphExec: CUgraphExec,
    pub hNode: CUgraphNode,
    pub nodeParams: *const CUDA_EXT_SEM_WAIT_NODE_PARAMS,
}
#[test]
fn bindgen_test_layout_cuGraphExecExternalSemaphoresWaitNodeSetParams_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<
        cuGraphExecExternalSemaphoresWaitNodeSetParams_params_st,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphExecExternalSemaphoresWaitNodeSetParams_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cuGraphExecExternalSemaphoresWaitNodeSetParams_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphExecExternalSemaphoresWaitNodeSetParams_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuGraphExecExternalSemaphoresWaitNodeSetParams_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hGraphExec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphExecExternalSemaphoresWaitNodeSetParams_params_st),
            "::",
            stringify!(hGraphExec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hNode) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphExecExternalSemaphoresWaitNodeSetParams_params_st),
            "::",
            stringify!(hNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeParams) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphExecExternalSemaphoresWaitNodeSetParams_params_st),
            "::",
            stringify!(nodeParams)
        )
    );
}
impl Default for cuGraphExecExternalSemaphoresWaitNodeSetParams_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphExecExternalSemaphoresWaitNodeSetParams_params =
    cuGraphExecExternalSemaphoresWaitNodeSetParams_params_st;
#[repr(C)]
pub struct cuGraphNodeSetEnabled_params_st {
    pub hGraphExec: CUgraphExec,
    pub hNode: CUgraphNode,
    pub isEnabled: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuGraphNodeSetEnabled_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphNodeSetEnabled_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphNodeSetEnabled_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuGraphNodeSetEnabled_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphNodeSetEnabled_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuGraphNodeSetEnabled_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hGraphExec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphNodeSetEnabled_params_st),
            "::",
            stringify!(hGraphExec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hNode) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphNodeSetEnabled_params_st),
            "::",
            stringify!(hNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isEnabled) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphNodeSetEnabled_params_st),
            "::",
            stringify!(isEnabled)
        )
    );
}
impl Default for cuGraphNodeSetEnabled_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphNodeSetEnabled_params = cuGraphNodeSetEnabled_params_st;
#[repr(C)]
pub struct cuGraphNodeGetEnabled_params_st {
    pub hGraphExec: CUgraphExec,
    pub hNode: CUgraphNode,
    pub isEnabled: *mut ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuGraphNodeGetEnabled_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphNodeGetEnabled_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphNodeGetEnabled_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuGraphNodeGetEnabled_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphNodeGetEnabled_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuGraphNodeGetEnabled_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hGraphExec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphNodeGetEnabled_params_st),
            "::",
            stringify!(hGraphExec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hNode) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphNodeGetEnabled_params_st),
            "::",
            stringify!(hNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isEnabled) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphNodeGetEnabled_params_st),
            "::",
            stringify!(isEnabled)
        )
    );
}
impl Default for cuGraphNodeGetEnabled_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphNodeGetEnabled_params = cuGraphNodeGetEnabled_params_st;
#[repr(C)]
pub struct cuGraphUpload_ptsz_params_st {
    pub hGraphExec: CUgraphExec,
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuGraphUpload_ptsz_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphUpload_ptsz_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphUpload_ptsz_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuGraphUpload_ptsz_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphUpload_ptsz_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuGraphUpload_ptsz_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hGraphExec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphUpload_ptsz_params_st),
            "::",
            stringify!(hGraphExec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphUpload_ptsz_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuGraphUpload_ptsz_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphUpload_ptsz_params = cuGraphUpload_ptsz_params_st;
#[repr(C)]
pub struct cuGraphLaunch_ptsz_params_st {
    pub hGraphExec: CUgraphExec,
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuGraphLaunch_ptsz_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphLaunch_ptsz_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphLaunch_ptsz_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuGraphLaunch_ptsz_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphLaunch_ptsz_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuGraphLaunch_ptsz_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hGraphExec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphLaunch_ptsz_params_st),
            "::",
            stringify!(hGraphExec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphLaunch_ptsz_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuGraphLaunch_ptsz_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphLaunch_ptsz_params = cuGraphLaunch_ptsz_params_st;
#[repr(C)]
pub struct cuGraphExecDestroy_params_st {
    pub hGraphExec: CUgraphExec,
}
#[test]
fn bindgen_test_layout_cuGraphExecDestroy_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphExecDestroy_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphExecDestroy_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cuGraphExecDestroy_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphExecDestroy_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuGraphExecDestroy_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hGraphExec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphExecDestroy_params_st),
            "::",
            stringify!(hGraphExec)
        )
    );
}
impl Default for cuGraphExecDestroy_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphExecDestroy_params = cuGraphExecDestroy_params_st;
#[repr(C)]
pub struct cuGraphDestroy_params_st {
    pub hGraph: CUgraph,
}
#[test]
fn bindgen_test_layout_cuGraphDestroy_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphDestroy_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphDestroy_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cuGraphDestroy_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphDestroy_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuGraphDestroy_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hGraph) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphDestroy_params_st),
            "::",
            stringify!(hGraph)
        )
    );
}
impl Default for cuGraphDestroy_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphDestroy_params = cuGraphDestroy_params_st;
#[repr(C)]
pub struct cuGraphExecUpdate_v2_params_st {
    pub hGraphExec: CUgraphExec,
    pub hGraph: CUgraph,
    pub resultInfo: *mut CUgraphExecUpdateResultInfo,
}
#[test]
fn bindgen_test_layout_cuGraphExecUpdate_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphExecUpdate_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphExecUpdate_v2_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuGraphExecUpdate_v2_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphExecUpdate_v2_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuGraphExecUpdate_v2_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hGraphExec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphExecUpdate_v2_params_st),
            "::",
            stringify!(hGraphExec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hGraph) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphExecUpdate_v2_params_st),
            "::",
            stringify!(hGraph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resultInfo) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphExecUpdate_v2_params_st),
            "::",
            stringify!(resultInfo)
        )
    );
}
impl Default for cuGraphExecUpdate_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphExecUpdate_v2_params = cuGraphExecUpdate_v2_params_st;
#[repr(C)]
pub struct cuGraphKernelNodeCopyAttributes_params_st {
    pub dst: CUgraphNode,
    pub src: CUgraphNode,
}
#[test]
fn bindgen_test_layout_cuGraphKernelNodeCopyAttributes_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphKernelNodeCopyAttributes_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphKernelNodeCopyAttributes_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cuGraphKernelNodeCopyAttributes_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphKernelNodeCopyAttributes_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuGraphKernelNodeCopyAttributes_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphKernelNodeCopyAttributes_params_st),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphKernelNodeCopyAttributes_params_st),
            "::",
            stringify!(src)
        )
    );
}
impl Default for cuGraphKernelNodeCopyAttributes_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphKernelNodeCopyAttributes_params = cuGraphKernelNodeCopyAttributes_params_st;
#[repr(C)]
pub struct cuGraphKernelNodeGetAttribute_params_st {
    pub hNode: CUgraphNode,
    pub attr: CUkernelNodeAttrID,
    pub value_out: *mut CUkernelNodeAttrValue,
}
#[test]
fn bindgen_test_layout_cuGraphKernelNodeGetAttribute_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphKernelNodeGetAttribute_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphKernelNodeGetAttribute_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cuGraphKernelNodeGetAttribute_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphKernelNodeGetAttribute_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuGraphKernelNodeGetAttribute_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphKernelNodeGetAttribute_params_st),
            "::",
            stringify!(hNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphKernelNodeGetAttribute_params_st),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value_out) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphKernelNodeGetAttribute_params_st),
            "::",
            stringify!(value_out)
        )
    );
}
impl Default for cuGraphKernelNodeGetAttribute_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphKernelNodeGetAttribute_params = cuGraphKernelNodeGetAttribute_params_st;
#[repr(C)]
pub struct cuGraphKernelNodeSetAttribute_params_st {
    pub hNode: CUgraphNode,
    pub attr: CUkernelNodeAttrID,
    pub value: *const CUkernelNodeAttrValue,
}
#[test]
fn bindgen_test_layout_cuGraphKernelNodeSetAttribute_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphKernelNodeSetAttribute_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphKernelNodeSetAttribute_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cuGraphKernelNodeSetAttribute_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphKernelNodeSetAttribute_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuGraphKernelNodeSetAttribute_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphKernelNodeSetAttribute_params_st),
            "::",
            stringify!(hNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphKernelNodeSetAttribute_params_st),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphKernelNodeSetAttribute_params_st),
            "::",
            stringify!(value)
        )
    );
}
impl Default for cuGraphKernelNodeSetAttribute_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphKernelNodeSetAttribute_params = cuGraphKernelNodeSetAttribute_params_st;
#[repr(C)]
pub struct cuGraphDebugDotPrint_params_st {
    pub hGraph: CUgraph,
    pub path: *const ::std::os::raw::c_char,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuGraphDebugDotPrint_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphDebugDotPrint_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphDebugDotPrint_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuGraphDebugDotPrint_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphDebugDotPrint_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuGraphDebugDotPrint_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hGraph) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphDebugDotPrint_params_st),
            "::",
            stringify!(hGraph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphDebugDotPrint_params_st),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphDebugDotPrint_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cuGraphDebugDotPrint_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphDebugDotPrint_params = cuGraphDebugDotPrint_params_st;
#[repr(C)]
pub struct cuUserObjectCreate_params_st {
    pub object_out: *mut CUuserObject,
    pub ptr: *mut ::std::os::raw::c_void,
    pub destroy: CUhostFn,
    pub initialRefcount: ::std::os::raw::c_uint,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuUserObjectCreate_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuUserObjectCreate_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuUserObjectCreate_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuUserObjectCreate_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuUserObjectCreate_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuUserObjectCreate_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object_out) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuUserObjectCreate_params_st),
            "::",
            stringify!(object_out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuUserObjectCreate_params_st),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).destroy) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuUserObjectCreate_params_st),
            "::",
            stringify!(destroy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).initialRefcount) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuUserObjectCreate_params_st),
            "::",
            stringify!(initialRefcount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(cuUserObjectCreate_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cuUserObjectCreate_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuUserObjectCreate_params = cuUserObjectCreate_params_st;
#[repr(C)]
pub struct cuUserObjectRetain_params_st {
    pub object: CUuserObject,
    pub count: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuUserObjectRetain_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuUserObjectRetain_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuUserObjectRetain_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuUserObjectRetain_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuUserObjectRetain_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuUserObjectRetain_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuUserObjectRetain_params_st),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuUserObjectRetain_params_st),
            "::",
            stringify!(count)
        )
    );
}
impl Default for cuUserObjectRetain_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuUserObjectRetain_params = cuUserObjectRetain_params_st;
#[repr(C)]
pub struct cuUserObjectRelease_params_st {
    pub object: CUuserObject,
    pub count: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuUserObjectRelease_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuUserObjectRelease_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuUserObjectRelease_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuUserObjectRelease_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuUserObjectRelease_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuUserObjectRelease_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuUserObjectRelease_params_st),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuUserObjectRelease_params_st),
            "::",
            stringify!(count)
        )
    );
}
impl Default for cuUserObjectRelease_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuUserObjectRelease_params = cuUserObjectRelease_params_st;
#[repr(C)]
pub struct cuGraphRetainUserObject_params_st {
    pub graph: CUgraph,
    pub object: CUuserObject,
    pub count: ::std::os::raw::c_uint,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuGraphRetainUserObject_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphRetainUserObject_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphRetainUserObject_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuGraphRetainUserObject_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphRetainUserObject_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuGraphRetainUserObject_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graph) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphRetainUserObject_params_st),
            "::",
            stringify!(graph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphRetainUserObject_params_st),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphRetainUserObject_params_st),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphRetainUserObject_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cuGraphRetainUserObject_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphRetainUserObject_params = cuGraphRetainUserObject_params_st;
#[repr(C)]
pub struct cuGraphReleaseUserObject_params_st {
    pub graph: CUgraph,
    pub object: CUuserObject,
    pub count: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuGraphReleaseUserObject_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphReleaseUserObject_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphReleaseUserObject_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuGraphReleaseUserObject_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphReleaseUserObject_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuGraphReleaseUserObject_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graph) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphReleaseUserObject_params_st),
            "::",
            stringify!(graph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphReleaseUserObject_params_st),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphReleaseUserObject_params_st),
            "::",
            stringify!(count)
        )
    );
}
impl Default for cuGraphReleaseUserObject_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphReleaseUserObject_params = cuGraphReleaseUserObject_params_st;
#[repr(C)]
pub struct cuOccupancyMaxActiveBlocksPerMultiprocessor_params_st {
    pub numBlocks: *mut ::std::os::raw::c_int,
    pub func: CUfunction,
    pub blockSize: ::std::os::raw::c_int,
    pub dynamicSMemSize: usize,
}
#[test]
fn bindgen_test_layout_cuOccupancyMaxActiveBlocksPerMultiprocessor_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuOccupancyMaxActiveBlocksPerMultiprocessor_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuOccupancyMaxActiveBlocksPerMultiprocessor_params_st>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(cuOccupancyMaxActiveBlocksPerMultiprocessor_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuOccupancyMaxActiveBlocksPerMultiprocessor_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuOccupancyMaxActiveBlocksPerMultiprocessor_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numBlocks) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuOccupancyMaxActiveBlocksPerMultiprocessor_params_st),
            "::",
            stringify!(numBlocks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuOccupancyMaxActiveBlocksPerMultiprocessor_params_st),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blockSize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuOccupancyMaxActiveBlocksPerMultiprocessor_params_st),
            "::",
            stringify!(blockSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dynamicSMemSize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuOccupancyMaxActiveBlocksPerMultiprocessor_params_st),
            "::",
            stringify!(dynamicSMemSize)
        )
    );
}
impl Default for cuOccupancyMaxActiveBlocksPerMultiprocessor_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuOccupancyMaxActiveBlocksPerMultiprocessor_params =
    cuOccupancyMaxActiveBlocksPerMultiprocessor_params_st;
#[repr(C)]
pub struct cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_params_st {
    pub numBlocks: *mut ::std::os::raw::c_int,
    pub func: CUfunction,
    pub blockSize: ::std::os::raw::c_int,
    pub dynamicSMemSize: usize,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<
        cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_params_st,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_params_st>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numBlocks) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_params_st),
            "::",
            stringify!(numBlocks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_params_st),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blockSize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_params_st),
            "::",
            stringify!(blockSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dynamicSMemSize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_params_st),
            "::",
            stringify!(dynamicSMemSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_params =
    cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_params_st;
#[repr(C)]
pub struct cuOccupancyMaxPotentialBlockSize_params_st {
    pub minGridSize: *mut ::std::os::raw::c_int,
    pub blockSize: *mut ::std::os::raw::c_int,
    pub func: CUfunction,
    pub blockSizeToDynamicSMemSize: CUoccupancyB2DSize,
    pub dynamicSMemSize: usize,
    pub blockSizeLimit: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cuOccupancyMaxPotentialBlockSize_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuOccupancyMaxPotentialBlockSize_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuOccupancyMaxPotentialBlockSize_params_st>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(cuOccupancyMaxPotentialBlockSize_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuOccupancyMaxPotentialBlockSize_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuOccupancyMaxPotentialBlockSize_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minGridSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuOccupancyMaxPotentialBlockSize_params_st),
            "::",
            stringify!(minGridSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blockSize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuOccupancyMaxPotentialBlockSize_params_st),
            "::",
            stringify!(blockSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuOccupancyMaxPotentialBlockSize_params_st),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blockSizeToDynamicSMemSize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuOccupancyMaxPotentialBlockSize_params_st),
            "::",
            stringify!(blockSizeToDynamicSMemSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dynamicSMemSize) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cuOccupancyMaxPotentialBlockSize_params_st),
            "::",
            stringify!(dynamicSMemSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blockSizeLimit) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cuOccupancyMaxPotentialBlockSize_params_st),
            "::",
            stringify!(blockSizeLimit)
        )
    );
}
impl Default for cuOccupancyMaxPotentialBlockSize_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuOccupancyMaxPotentialBlockSize_params = cuOccupancyMaxPotentialBlockSize_params_st;
#[repr(C)]
pub struct cuOccupancyMaxPotentialBlockSizeWithFlags_params_st {
    pub minGridSize: *mut ::std::os::raw::c_int,
    pub blockSize: *mut ::std::os::raw::c_int,
    pub func: CUfunction,
    pub blockSizeToDynamicSMemSize: CUoccupancyB2DSize,
    pub dynamicSMemSize: usize,
    pub blockSizeLimit: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuOccupancyMaxPotentialBlockSizeWithFlags_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuOccupancyMaxPotentialBlockSizeWithFlags_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuOccupancyMaxPotentialBlockSizeWithFlags_params_st>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(cuOccupancyMaxPotentialBlockSizeWithFlags_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuOccupancyMaxPotentialBlockSizeWithFlags_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuOccupancyMaxPotentialBlockSizeWithFlags_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minGridSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuOccupancyMaxPotentialBlockSizeWithFlags_params_st),
            "::",
            stringify!(minGridSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blockSize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuOccupancyMaxPotentialBlockSizeWithFlags_params_st),
            "::",
            stringify!(blockSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuOccupancyMaxPotentialBlockSizeWithFlags_params_st),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blockSizeToDynamicSMemSize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuOccupancyMaxPotentialBlockSizeWithFlags_params_st),
            "::",
            stringify!(blockSizeToDynamicSMemSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dynamicSMemSize) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cuOccupancyMaxPotentialBlockSizeWithFlags_params_st),
            "::",
            stringify!(dynamicSMemSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blockSizeLimit) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cuOccupancyMaxPotentialBlockSizeWithFlags_params_st),
            "::",
            stringify!(blockSizeLimit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(cuOccupancyMaxPotentialBlockSizeWithFlags_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cuOccupancyMaxPotentialBlockSizeWithFlags_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuOccupancyMaxPotentialBlockSizeWithFlags_params =
    cuOccupancyMaxPotentialBlockSizeWithFlags_params_st;
#[repr(C)]
pub struct cuOccupancyAvailableDynamicSMemPerBlock_params_st {
    pub dynamicSmemSize: *mut usize,
    pub func: CUfunction,
    pub numBlocks: ::std::os::raw::c_int,
    pub blockSize: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cuOccupancyAvailableDynamicSMemPerBlock_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuOccupancyAvailableDynamicSMemPerBlock_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuOccupancyAvailableDynamicSMemPerBlock_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cuOccupancyAvailableDynamicSMemPerBlock_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuOccupancyAvailableDynamicSMemPerBlock_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuOccupancyAvailableDynamicSMemPerBlock_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dynamicSmemSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuOccupancyAvailableDynamicSMemPerBlock_params_st),
            "::",
            stringify!(dynamicSmemSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuOccupancyAvailableDynamicSMemPerBlock_params_st),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numBlocks) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuOccupancyAvailableDynamicSMemPerBlock_params_st),
            "::",
            stringify!(numBlocks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blockSize) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cuOccupancyAvailableDynamicSMemPerBlock_params_st),
            "::",
            stringify!(blockSize)
        )
    );
}
impl Default for cuOccupancyAvailableDynamicSMemPerBlock_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuOccupancyAvailableDynamicSMemPerBlock_params =
    cuOccupancyAvailableDynamicSMemPerBlock_params_st;
#[repr(C)]
pub struct cuOccupancyMaxPotentialClusterSize_params_st {
    pub clusterSize: *mut ::std::os::raw::c_int,
    pub func: CUfunction,
    pub config: *const CUlaunchConfig,
}
#[test]
fn bindgen_test_layout_cuOccupancyMaxPotentialClusterSize_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuOccupancyMaxPotentialClusterSize_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuOccupancyMaxPotentialClusterSize_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cuOccupancyMaxPotentialClusterSize_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuOccupancyMaxPotentialClusterSize_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuOccupancyMaxPotentialClusterSize_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clusterSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuOccupancyMaxPotentialClusterSize_params_st),
            "::",
            stringify!(clusterSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuOccupancyMaxPotentialClusterSize_params_st),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).config) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuOccupancyMaxPotentialClusterSize_params_st),
            "::",
            stringify!(config)
        )
    );
}
impl Default for cuOccupancyMaxPotentialClusterSize_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuOccupancyMaxPotentialClusterSize_params = cuOccupancyMaxPotentialClusterSize_params_st;
#[repr(C)]
pub struct cuOccupancyMaxActiveClusters_params_st {
    pub numClusters: *mut ::std::os::raw::c_int,
    pub func: CUfunction,
    pub config: *const CUlaunchConfig,
}
#[test]
fn bindgen_test_layout_cuOccupancyMaxActiveClusters_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuOccupancyMaxActiveClusters_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuOccupancyMaxActiveClusters_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cuOccupancyMaxActiveClusters_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuOccupancyMaxActiveClusters_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuOccupancyMaxActiveClusters_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numClusters) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuOccupancyMaxActiveClusters_params_st),
            "::",
            stringify!(numClusters)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuOccupancyMaxActiveClusters_params_st),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).config) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuOccupancyMaxActiveClusters_params_st),
            "::",
            stringify!(config)
        )
    );
}
impl Default for cuOccupancyMaxActiveClusters_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuOccupancyMaxActiveClusters_params = cuOccupancyMaxActiveClusters_params_st;
#[repr(C)]
pub struct cuTexRefSetArray_params_st {
    pub hTexRef: CUtexref,
    pub hArray: CUarray,
    pub Flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuTexRefSetArray_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuTexRefSetArray_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuTexRefSetArray_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuTexRefSetArray_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuTexRefSetArray_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuTexRefSetArray_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hTexRef) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefSetArray_params_st),
            "::",
            stringify!(hTexRef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hArray) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefSetArray_params_st),
            "::",
            stringify!(hArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefSetArray_params_st),
            "::",
            stringify!(Flags)
        )
    );
}
impl Default for cuTexRefSetArray_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuTexRefSetArray_params = cuTexRefSetArray_params_st;
#[repr(C)]
pub struct cuTexRefSetMipmappedArray_params_st {
    pub hTexRef: CUtexref,
    pub hMipmappedArray: CUmipmappedArray,
    pub Flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuTexRefSetMipmappedArray_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuTexRefSetMipmappedArray_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuTexRefSetMipmappedArray_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuTexRefSetMipmappedArray_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuTexRefSetMipmappedArray_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuTexRefSetMipmappedArray_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hTexRef) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefSetMipmappedArray_params_st),
            "::",
            stringify!(hTexRef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hMipmappedArray) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefSetMipmappedArray_params_st),
            "::",
            stringify!(hMipmappedArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefSetMipmappedArray_params_st),
            "::",
            stringify!(Flags)
        )
    );
}
impl Default for cuTexRefSetMipmappedArray_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuTexRefSetMipmappedArray_params = cuTexRefSetMipmappedArray_params_st;
#[repr(C)]
pub struct cuTexRefSetAddress_v2_params_st {
    pub ByteOffset: *mut usize,
    pub hTexRef: CUtexref,
    pub dptr: CUdeviceptr,
    pub bytes: usize,
}
#[test]
fn bindgen_test_layout_cuTexRefSetAddress_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuTexRefSetAddress_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuTexRefSetAddress_v2_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuTexRefSetAddress_v2_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuTexRefSetAddress_v2_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuTexRefSetAddress_v2_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ByteOffset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefSetAddress_v2_params_st),
            "::",
            stringify!(ByteOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hTexRef) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefSetAddress_v2_params_st),
            "::",
            stringify!(hTexRef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dptr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefSetAddress_v2_params_st),
            "::",
            stringify!(dptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytes) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefSetAddress_v2_params_st),
            "::",
            stringify!(bytes)
        )
    );
}
impl Default for cuTexRefSetAddress_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuTexRefSetAddress_v2_params = cuTexRefSetAddress_v2_params_st;
#[repr(C)]
pub struct cuTexRefSetAddress2D_v3_params_st {
    pub hTexRef: CUtexref,
    pub desc: *const CUDA_ARRAY_DESCRIPTOR,
    pub dptr: CUdeviceptr,
    pub Pitch: usize,
}
#[test]
fn bindgen_test_layout_cuTexRefSetAddress2D_v3_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuTexRefSetAddress2D_v3_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuTexRefSetAddress2D_v3_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuTexRefSetAddress2D_v3_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuTexRefSetAddress2D_v3_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuTexRefSetAddress2D_v3_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hTexRef) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefSetAddress2D_v3_params_st),
            "::",
            stringify!(hTexRef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).desc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefSetAddress2D_v3_params_st),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dptr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefSetAddress2D_v3_params_st),
            "::",
            stringify!(dptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Pitch) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefSetAddress2D_v3_params_st),
            "::",
            stringify!(Pitch)
        )
    );
}
impl Default for cuTexRefSetAddress2D_v3_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuTexRefSetAddress2D_v3_params = cuTexRefSetAddress2D_v3_params_st;
#[repr(C)]
pub struct cuTexRefSetFormat_params_st {
    pub hTexRef: CUtexref,
    pub fmt: CUarray_format,
    pub NumPackedComponents: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cuTexRefSetFormat_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuTexRefSetFormat_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuTexRefSetFormat_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuTexRefSetFormat_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuTexRefSetFormat_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuTexRefSetFormat_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hTexRef) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefSetFormat_params_st),
            "::",
            stringify!(hTexRef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fmt) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefSetFormat_params_st),
            "::",
            stringify!(fmt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NumPackedComponents) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefSetFormat_params_st),
            "::",
            stringify!(NumPackedComponents)
        )
    );
}
impl Default for cuTexRefSetFormat_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuTexRefSetFormat_params = cuTexRefSetFormat_params_st;
#[repr(C)]
pub struct cuTexRefSetAddressMode_params_st {
    pub hTexRef: CUtexref,
    pub dim: ::std::os::raw::c_int,
    pub am: CUaddress_mode,
}
#[test]
fn bindgen_test_layout_cuTexRefSetAddressMode_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuTexRefSetAddressMode_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuTexRefSetAddressMode_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuTexRefSetAddressMode_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuTexRefSetAddressMode_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuTexRefSetAddressMode_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hTexRef) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefSetAddressMode_params_st),
            "::",
            stringify!(hTexRef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dim) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefSetAddressMode_params_st),
            "::",
            stringify!(dim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).am) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefSetAddressMode_params_st),
            "::",
            stringify!(am)
        )
    );
}
impl Default for cuTexRefSetAddressMode_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuTexRefSetAddressMode_params = cuTexRefSetAddressMode_params_st;
#[repr(C)]
pub struct cuTexRefSetFilterMode_params_st {
    pub hTexRef: CUtexref,
    pub fm: CUfilter_mode,
}
#[test]
fn bindgen_test_layout_cuTexRefSetFilterMode_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuTexRefSetFilterMode_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuTexRefSetFilterMode_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuTexRefSetFilterMode_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuTexRefSetFilterMode_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuTexRefSetFilterMode_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hTexRef) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefSetFilterMode_params_st),
            "::",
            stringify!(hTexRef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fm) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefSetFilterMode_params_st),
            "::",
            stringify!(fm)
        )
    );
}
impl Default for cuTexRefSetFilterMode_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuTexRefSetFilterMode_params = cuTexRefSetFilterMode_params_st;
#[repr(C)]
pub struct cuTexRefSetMipmapFilterMode_params_st {
    pub hTexRef: CUtexref,
    pub fm: CUfilter_mode,
}
#[test]
fn bindgen_test_layout_cuTexRefSetMipmapFilterMode_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuTexRefSetMipmapFilterMode_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuTexRefSetMipmapFilterMode_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cuTexRefSetMipmapFilterMode_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuTexRefSetMipmapFilterMode_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuTexRefSetMipmapFilterMode_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hTexRef) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefSetMipmapFilterMode_params_st),
            "::",
            stringify!(hTexRef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fm) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefSetMipmapFilterMode_params_st),
            "::",
            stringify!(fm)
        )
    );
}
impl Default for cuTexRefSetMipmapFilterMode_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuTexRefSetMipmapFilterMode_params = cuTexRefSetMipmapFilterMode_params_st;
#[repr(C)]
pub struct cuTexRefSetMipmapLevelBias_params_st {
    pub hTexRef: CUtexref,
    pub bias: f32,
}
#[test]
fn bindgen_test_layout_cuTexRefSetMipmapLevelBias_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuTexRefSetMipmapLevelBias_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuTexRefSetMipmapLevelBias_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cuTexRefSetMipmapLevelBias_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuTexRefSetMipmapLevelBias_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuTexRefSetMipmapLevelBias_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hTexRef) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefSetMipmapLevelBias_params_st),
            "::",
            stringify!(hTexRef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bias) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefSetMipmapLevelBias_params_st),
            "::",
            stringify!(bias)
        )
    );
}
impl Default for cuTexRefSetMipmapLevelBias_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuTexRefSetMipmapLevelBias_params = cuTexRefSetMipmapLevelBias_params_st;
#[repr(C)]
pub struct cuTexRefSetMipmapLevelClamp_params_st {
    pub hTexRef: CUtexref,
    pub minMipmapLevelClamp: f32,
    pub maxMipmapLevelClamp: f32,
}
#[test]
fn bindgen_test_layout_cuTexRefSetMipmapLevelClamp_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuTexRefSetMipmapLevelClamp_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuTexRefSetMipmapLevelClamp_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cuTexRefSetMipmapLevelClamp_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuTexRefSetMipmapLevelClamp_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuTexRefSetMipmapLevelClamp_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hTexRef) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefSetMipmapLevelClamp_params_st),
            "::",
            stringify!(hTexRef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minMipmapLevelClamp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefSetMipmapLevelClamp_params_st),
            "::",
            stringify!(minMipmapLevelClamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxMipmapLevelClamp) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefSetMipmapLevelClamp_params_st),
            "::",
            stringify!(maxMipmapLevelClamp)
        )
    );
}
impl Default for cuTexRefSetMipmapLevelClamp_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuTexRefSetMipmapLevelClamp_params = cuTexRefSetMipmapLevelClamp_params_st;
#[repr(C)]
pub struct cuTexRefSetMaxAnisotropy_params_st {
    pub hTexRef: CUtexref,
    pub maxAniso: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuTexRefSetMaxAnisotropy_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuTexRefSetMaxAnisotropy_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuTexRefSetMaxAnisotropy_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuTexRefSetMaxAnisotropy_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuTexRefSetMaxAnisotropy_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuTexRefSetMaxAnisotropy_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hTexRef) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefSetMaxAnisotropy_params_st),
            "::",
            stringify!(hTexRef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxAniso) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefSetMaxAnisotropy_params_st),
            "::",
            stringify!(maxAniso)
        )
    );
}
impl Default for cuTexRefSetMaxAnisotropy_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuTexRefSetMaxAnisotropy_params = cuTexRefSetMaxAnisotropy_params_st;
#[repr(C)]
pub struct cuTexRefSetBorderColor_params_st {
    pub hTexRef: CUtexref,
    pub pBorderColor: *mut f32,
}
#[test]
fn bindgen_test_layout_cuTexRefSetBorderColor_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuTexRefSetBorderColor_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuTexRefSetBorderColor_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuTexRefSetBorderColor_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuTexRefSetBorderColor_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuTexRefSetBorderColor_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hTexRef) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefSetBorderColor_params_st),
            "::",
            stringify!(hTexRef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pBorderColor) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefSetBorderColor_params_st),
            "::",
            stringify!(pBorderColor)
        )
    );
}
impl Default for cuTexRefSetBorderColor_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuTexRefSetBorderColor_params = cuTexRefSetBorderColor_params_st;
#[repr(C)]
pub struct cuTexRefSetFlags_params_st {
    pub hTexRef: CUtexref,
    pub Flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuTexRefSetFlags_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuTexRefSetFlags_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuTexRefSetFlags_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuTexRefSetFlags_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuTexRefSetFlags_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuTexRefSetFlags_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hTexRef) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefSetFlags_params_st),
            "::",
            stringify!(hTexRef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefSetFlags_params_st),
            "::",
            stringify!(Flags)
        )
    );
}
impl Default for cuTexRefSetFlags_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuTexRefSetFlags_params = cuTexRefSetFlags_params_st;
#[repr(C)]
pub struct cuTexRefGetAddress_v2_params_st {
    pub pdptr: *mut CUdeviceptr,
    pub hTexRef: CUtexref,
}
#[test]
fn bindgen_test_layout_cuTexRefGetAddress_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuTexRefGetAddress_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuTexRefGetAddress_v2_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuTexRefGetAddress_v2_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuTexRefGetAddress_v2_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuTexRefGetAddress_v2_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefGetAddress_v2_params_st),
            "::",
            stringify!(pdptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hTexRef) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefGetAddress_v2_params_st),
            "::",
            stringify!(hTexRef)
        )
    );
}
impl Default for cuTexRefGetAddress_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuTexRefGetAddress_v2_params = cuTexRefGetAddress_v2_params_st;
#[repr(C)]
pub struct cuTexRefGetArray_params_st {
    pub phArray: *mut CUarray,
    pub hTexRef: CUtexref,
}
#[test]
fn bindgen_test_layout_cuTexRefGetArray_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuTexRefGetArray_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuTexRefGetArray_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuTexRefGetArray_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuTexRefGetArray_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuTexRefGetArray_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phArray) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefGetArray_params_st),
            "::",
            stringify!(phArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hTexRef) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefGetArray_params_st),
            "::",
            stringify!(hTexRef)
        )
    );
}
impl Default for cuTexRefGetArray_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuTexRefGetArray_params = cuTexRefGetArray_params_st;
#[repr(C)]
pub struct cuTexRefGetMipmappedArray_params_st {
    pub phMipmappedArray: *mut CUmipmappedArray,
    pub hTexRef: CUtexref,
}
#[test]
fn bindgen_test_layout_cuTexRefGetMipmappedArray_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuTexRefGetMipmappedArray_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuTexRefGetMipmappedArray_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuTexRefGetMipmappedArray_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuTexRefGetMipmappedArray_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuTexRefGetMipmappedArray_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phMipmappedArray) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefGetMipmappedArray_params_st),
            "::",
            stringify!(phMipmappedArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hTexRef) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefGetMipmappedArray_params_st),
            "::",
            stringify!(hTexRef)
        )
    );
}
impl Default for cuTexRefGetMipmappedArray_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuTexRefGetMipmappedArray_params = cuTexRefGetMipmappedArray_params_st;
#[repr(C)]
pub struct cuTexRefGetAddressMode_params_st {
    pub pam: *mut CUaddress_mode,
    pub hTexRef: CUtexref,
    pub dim: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cuTexRefGetAddressMode_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuTexRefGetAddressMode_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuTexRefGetAddressMode_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuTexRefGetAddressMode_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuTexRefGetAddressMode_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuTexRefGetAddressMode_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pam) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefGetAddressMode_params_st),
            "::",
            stringify!(pam)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hTexRef) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefGetAddressMode_params_st),
            "::",
            stringify!(hTexRef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dim) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefGetAddressMode_params_st),
            "::",
            stringify!(dim)
        )
    );
}
impl Default for cuTexRefGetAddressMode_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuTexRefGetAddressMode_params = cuTexRefGetAddressMode_params_st;
#[repr(C)]
pub struct cuTexRefGetFilterMode_params_st {
    pub pfm: *mut CUfilter_mode,
    pub hTexRef: CUtexref,
}
#[test]
fn bindgen_test_layout_cuTexRefGetFilterMode_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuTexRefGetFilterMode_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuTexRefGetFilterMode_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuTexRefGetFilterMode_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuTexRefGetFilterMode_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuTexRefGetFilterMode_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfm) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefGetFilterMode_params_st),
            "::",
            stringify!(pfm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hTexRef) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefGetFilterMode_params_st),
            "::",
            stringify!(hTexRef)
        )
    );
}
impl Default for cuTexRefGetFilterMode_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuTexRefGetFilterMode_params = cuTexRefGetFilterMode_params_st;
#[repr(C)]
pub struct cuTexRefGetFormat_params_st {
    pub pFormat: *mut CUarray_format,
    pub pNumChannels: *mut ::std::os::raw::c_int,
    pub hTexRef: CUtexref,
}
#[test]
fn bindgen_test_layout_cuTexRefGetFormat_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuTexRefGetFormat_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuTexRefGetFormat_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuTexRefGetFormat_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuTexRefGetFormat_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuTexRefGetFormat_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pFormat) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefGetFormat_params_st),
            "::",
            stringify!(pFormat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNumChannels) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefGetFormat_params_st),
            "::",
            stringify!(pNumChannels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hTexRef) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefGetFormat_params_st),
            "::",
            stringify!(hTexRef)
        )
    );
}
impl Default for cuTexRefGetFormat_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuTexRefGetFormat_params = cuTexRefGetFormat_params_st;
#[repr(C)]
pub struct cuTexRefGetMipmapFilterMode_params_st {
    pub pfm: *mut CUfilter_mode,
    pub hTexRef: CUtexref,
}
#[test]
fn bindgen_test_layout_cuTexRefGetMipmapFilterMode_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuTexRefGetMipmapFilterMode_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuTexRefGetMipmapFilterMode_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cuTexRefGetMipmapFilterMode_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuTexRefGetMipmapFilterMode_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuTexRefGetMipmapFilterMode_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfm) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefGetMipmapFilterMode_params_st),
            "::",
            stringify!(pfm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hTexRef) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefGetMipmapFilterMode_params_st),
            "::",
            stringify!(hTexRef)
        )
    );
}
impl Default for cuTexRefGetMipmapFilterMode_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuTexRefGetMipmapFilterMode_params = cuTexRefGetMipmapFilterMode_params_st;
#[repr(C)]
pub struct cuTexRefGetMipmapLevelBias_params_st {
    pub pbias: *mut f32,
    pub hTexRef: CUtexref,
}
#[test]
fn bindgen_test_layout_cuTexRefGetMipmapLevelBias_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuTexRefGetMipmapLevelBias_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuTexRefGetMipmapLevelBias_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cuTexRefGetMipmapLevelBias_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuTexRefGetMipmapLevelBias_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuTexRefGetMipmapLevelBias_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pbias) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefGetMipmapLevelBias_params_st),
            "::",
            stringify!(pbias)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hTexRef) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefGetMipmapLevelBias_params_st),
            "::",
            stringify!(hTexRef)
        )
    );
}
impl Default for cuTexRefGetMipmapLevelBias_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuTexRefGetMipmapLevelBias_params = cuTexRefGetMipmapLevelBias_params_st;
#[repr(C)]
pub struct cuTexRefGetMipmapLevelClamp_params_st {
    pub pminMipmapLevelClamp: *mut f32,
    pub pmaxMipmapLevelClamp: *mut f32,
    pub hTexRef: CUtexref,
}
#[test]
fn bindgen_test_layout_cuTexRefGetMipmapLevelClamp_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuTexRefGetMipmapLevelClamp_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuTexRefGetMipmapLevelClamp_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cuTexRefGetMipmapLevelClamp_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuTexRefGetMipmapLevelClamp_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuTexRefGetMipmapLevelClamp_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pminMipmapLevelClamp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefGetMipmapLevelClamp_params_st),
            "::",
            stringify!(pminMipmapLevelClamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmaxMipmapLevelClamp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefGetMipmapLevelClamp_params_st),
            "::",
            stringify!(pmaxMipmapLevelClamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hTexRef) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefGetMipmapLevelClamp_params_st),
            "::",
            stringify!(hTexRef)
        )
    );
}
impl Default for cuTexRefGetMipmapLevelClamp_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuTexRefGetMipmapLevelClamp_params = cuTexRefGetMipmapLevelClamp_params_st;
#[repr(C)]
pub struct cuTexRefGetMaxAnisotropy_params_st {
    pub pmaxAniso: *mut ::std::os::raw::c_int,
    pub hTexRef: CUtexref,
}
#[test]
fn bindgen_test_layout_cuTexRefGetMaxAnisotropy_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuTexRefGetMaxAnisotropy_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuTexRefGetMaxAnisotropy_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuTexRefGetMaxAnisotropy_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuTexRefGetMaxAnisotropy_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuTexRefGetMaxAnisotropy_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pmaxAniso) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefGetMaxAnisotropy_params_st),
            "::",
            stringify!(pmaxAniso)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hTexRef) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefGetMaxAnisotropy_params_st),
            "::",
            stringify!(hTexRef)
        )
    );
}
impl Default for cuTexRefGetMaxAnisotropy_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuTexRefGetMaxAnisotropy_params = cuTexRefGetMaxAnisotropy_params_st;
#[repr(C)]
pub struct cuTexRefGetBorderColor_params_st {
    pub pBorderColor: *mut f32,
    pub hTexRef: CUtexref,
}
#[test]
fn bindgen_test_layout_cuTexRefGetBorderColor_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuTexRefGetBorderColor_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuTexRefGetBorderColor_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuTexRefGetBorderColor_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuTexRefGetBorderColor_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuTexRefGetBorderColor_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pBorderColor) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefGetBorderColor_params_st),
            "::",
            stringify!(pBorderColor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hTexRef) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefGetBorderColor_params_st),
            "::",
            stringify!(hTexRef)
        )
    );
}
impl Default for cuTexRefGetBorderColor_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuTexRefGetBorderColor_params = cuTexRefGetBorderColor_params_st;
#[repr(C)]
pub struct cuTexRefGetFlags_params_st {
    pub pFlags: *mut ::std::os::raw::c_uint,
    pub hTexRef: CUtexref,
}
#[test]
fn bindgen_test_layout_cuTexRefGetFlags_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuTexRefGetFlags_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuTexRefGetFlags_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuTexRefGetFlags_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuTexRefGetFlags_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuTexRefGetFlags_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pFlags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefGetFlags_params_st),
            "::",
            stringify!(pFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hTexRef) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefGetFlags_params_st),
            "::",
            stringify!(hTexRef)
        )
    );
}
impl Default for cuTexRefGetFlags_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuTexRefGetFlags_params = cuTexRefGetFlags_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuTexRefCreate_params_st {
    pub pTexRef: *mut CUtexref,
}
#[test]
fn bindgen_test_layout_cuTexRefCreate_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuTexRefCreate_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuTexRefCreate_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cuTexRefCreate_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuTexRefCreate_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuTexRefCreate_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pTexRef) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefCreate_params_st),
            "::",
            stringify!(pTexRef)
        )
    );
}
impl Default for cuTexRefCreate_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuTexRefCreate_params = cuTexRefCreate_params_st;
#[repr(C)]
pub struct cuTexRefDestroy_params_st {
    pub hTexRef: CUtexref,
}
#[test]
fn bindgen_test_layout_cuTexRefDestroy_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuTexRefDestroy_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuTexRefDestroy_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cuTexRefDestroy_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuTexRefDestroy_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuTexRefDestroy_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hTexRef) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefDestroy_params_st),
            "::",
            stringify!(hTexRef)
        )
    );
}
impl Default for cuTexRefDestroy_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuTexRefDestroy_params = cuTexRefDestroy_params_st;
#[repr(C)]
pub struct cuSurfRefSetArray_params_st {
    pub hSurfRef: CUsurfref,
    pub hArray: CUarray,
    pub Flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuSurfRefSetArray_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuSurfRefSetArray_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuSurfRefSetArray_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuSurfRefSetArray_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuSurfRefSetArray_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuSurfRefSetArray_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hSurfRef) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuSurfRefSetArray_params_st),
            "::",
            stringify!(hSurfRef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hArray) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuSurfRefSetArray_params_st),
            "::",
            stringify!(hArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuSurfRefSetArray_params_st),
            "::",
            stringify!(Flags)
        )
    );
}
impl Default for cuSurfRefSetArray_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuSurfRefSetArray_params = cuSurfRefSetArray_params_st;
#[repr(C)]
pub struct cuSurfRefGetArray_params_st {
    pub phArray: *mut CUarray,
    pub hSurfRef: CUsurfref,
}
#[test]
fn bindgen_test_layout_cuSurfRefGetArray_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuSurfRefGetArray_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuSurfRefGetArray_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuSurfRefGetArray_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuSurfRefGetArray_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuSurfRefGetArray_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phArray) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuSurfRefGetArray_params_st),
            "::",
            stringify!(phArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hSurfRef) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuSurfRefGetArray_params_st),
            "::",
            stringify!(hSurfRef)
        )
    );
}
impl Default for cuSurfRefGetArray_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuSurfRefGetArray_params = cuSurfRefGetArray_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuTexObjectCreate_params_st {
    pub pTexObject: *mut CUtexObject,
    pub pResDesc: *const CUDA_RESOURCE_DESC,
    pub pTexDesc: *const CUDA_TEXTURE_DESC,
    pub pResViewDesc: *const CUDA_RESOURCE_VIEW_DESC,
}
#[test]
fn bindgen_test_layout_cuTexObjectCreate_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuTexObjectCreate_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuTexObjectCreate_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuTexObjectCreate_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuTexObjectCreate_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuTexObjectCreate_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pTexObject) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexObjectCreate_params_st),
            "::",
            stringify!(pTexObject)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pResDesc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexObjectCreate_params_st),
            "::",
            stringify!(pResDesc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pTexDesc) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexObjectCreate_params_st),
            "::",
            stringify!(pTexDesc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pResViewDesc) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexObjectCreate_params_st),
            "::",
            stringify!(pResViewDesc)
        )
    );
}
impl Default for cuTexObjectCreate_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuTexObjectCreate_params = cuTexObjectCreate_params_st;
#[repr(C)]
pub struct cuTexObjectDestroy_params_st {
    pub texObject: CUtexObject,
}
#[test]
fn bindgen_test_layout_cuTexObjectDestroy_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuTexObjectDestroy_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuTexObjectDestroy_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cuTexObjectDestroy_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuTexObjectDestroy_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuTexObjectDestroy_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).texObject) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexObjectDestroy_params_st),
            "::",
            stringify!(texObject)
        )
    );
}
impl Default for cuTexObjectDestroy_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuTexObjectDestroy_params = cuTexObjectDestroy_params_st;
#[repr(C)]
pub struct cuTexObjectGetResourceDesc_params_st {
    pub pResDesc: *mut CUDA_RESOURCE_DESC,
    pub texObject: CUtexObject,
}
#[test]
fn bindgen_test_layout_cuTexObjectGetResourceDesc_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuTexObjectGetResourceDesc_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuTexObjectGetResourceDesc_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cuTexObjectGetResourceDesc_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuTexObjectGetResourceDesc_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuTexObjectGetResourceDesc_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pResDesc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexObjectGetResourceDesc_params_st),
            "::",
            stringify!(pResDesc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).texObject) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexObjectGetResourceDesc_params_st),
            "::",
            stringify!(texObject)
        )
    );
}
impl Default for cuTexObjectGetResourceDesc_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuTexObjectGetResourceDesc_params = cuTexObjectGetResourceDesc_params_st;
#[repr(C)]
pub struct cuTexObjectGetTextureDesc_params_st {
    pub pTexDesc: *mut CUDA_TEXTURE_DESC,
    pub texObject: CUtexObject,
}
#[test]
fn bindgen_test_layout_cuTexObjectGetTextureDesc_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuTexObjectGetTextureDesc_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuTexObjectGetTextureDesc_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuTexObjectGetTextureDesc_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuTexObjectGetTextureDesc_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuTexObjectGetTextureDesc_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pTexDesc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexObjectGetTextureDesc_params_st),
            "::",
            stringify!(pTexDesc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).texObject) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexObjectGetTextureDesc_params_st),
            "::",
            stringify!(texObject)
        )
    );
}
impl Default for cuTexObjectGetTextureDesc_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuTexObjectGetTextureDesc_params = cuTexObjectGetTextureDesc_params_st;
#[repr(C)]
pub struct cuTexObjectGetResourceViewDesc_params_st {
    pub pResViewDesc: *mut CUDA_RESOURCE_VIEW_DESC,
    pub texObject: CUtexObject,
}
#[test]
fn bindgen_test_layout_cuTexObjectGetResourceViewDesc_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuTexObjectGetResourceViewDesc_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuTexObjectGetResourceViewDesc_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cuTexObjectGetResourceViewDesc_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuTexObjectGetResourceViewDesc_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuTexObjectGetResourceViewDesc_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pResViewDesc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexObjectGetResourceViewDesc_params_st),
            "::",
            stringify!(pResViewDesc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).texObject) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexObjectGetResourceViewDesc_params_st),
            "::",
            stringify!(texObject)
        )
    );
}
impl Default for cuTexObjectGetResourceViewDesc_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuTexObjectGetResourceViewDesc_params = cuTexObjectGetResourceViewDesc_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuSurfObjectCreate_params_st {
    pub pSurfObject: *mut CUsurfObject,
    pub pResDesc: *const CUDA_RESOURCE_DESC,
}
#[test]
fn bindgen_test_layout_cuSurfObjectCreate_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuSurfObjectCreate_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuSurfObjectCreate_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuSurfObjectCreate_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuSurfObjectCreate_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuSurfObjectCreate_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pSurfObject) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuSurfObjectCreate_params_st),
            "::",
            stringify!(pSurfObject)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pResDesc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuSurfObjectCreate_params_st),
            "::",
            stringify!(pResDesc)
        )
    );
}
impl Default for cuSurfObjectCreate_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuSurfObjectCreate_params = cuSurfObjectCreate_params_st;
#[repr(C)]
pub struct cuSurfObjectDestroy_params_st {
    pub surfObject: CUsurfObject,
}
#[test]
fn bindgen_test_layout_cuSurfObjectDestroy_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuSurfObjectDestroy_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuSurfObjectDestroy_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cuSurfObjectDestroy_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuSurfObjectDestroy_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuSurfObjectDestroy_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).surfObject) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuSurfObjectDestroy_params_st),
            "::",
            stringify!(surfObject)
        )
    );
}
impl Default for cuSurfObjectDestroy_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuSurfObjectDestroy_params = cuSurfObjectDestroy_params_st;
#[repr(C)]
pub struct cuSurfObjectGetResourceDesc_params_st {
    pub pResDesc: *mut CUDA_RESOURCE_DESC,
    pub surfObject: CUsurfObject,
}
#[test]
fn bindgen_test_layout_cuSurfObjectGetResourceDesc_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuSurfObjectGetResourceDesc_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuSurfObjectGetResourceDesc_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cuSurfObjectGetResourceDesc_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuSurfObjectGetResourceDesc_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuSurfObjectGetResourceDesc_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pResDesc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuSurfObjectGetResourceDesc_params_st),
            "::",
            stringify!(pResDesc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).surfObject) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuSurfObjectGetResourceDesc_params_st),
            "::",
            stringify!(surfObject)
        )
    );
}
impl Default for cuSurfObjectGetResourceDesc_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuSurfObjectGetResourceDesc_params = cuSurfObjectGetResourceDesc_params_st;
#[repr(C)]
pub struct cuTensorMapEncodeTiled_params_st {
    pub tensorMap: *mut CUtensorMap,
    pub tensorDataType: CUtensorMapDataType,
    pub tensorRank: cuuint32_t,
    pub globalAddress: *mut ::std::os::raw::c_void,
    pub globalDim: *const cuuint64_t,
    pub globalStrides: *const cuuint64_t,
    pub boxDim: *const cuuint32_t,
    pub elementStrides: *const cuuint32_t,
    pub interleave: CUtensorMapInterleave,
    pub swizzle: CUtensorMapSwizzle,
    pub l2Promotion: CUtensorMapL2promotion,
    pub oobFill: CUtensorMapFloatOOBfill,
}
#[test]
fn bindgen_test_layout_cuTensorMapEncodeTiled_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuTensorMapEncodeTiled_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuTensorMapEncodeTiled_params_st>(),
        72usize,
        concat!("Size of: ", stringify!(cuTensorMapEncodeTiled_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuTensorMapEncodeTiled_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuTensorMapEncodeTiled_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tensorMap) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTensorMapEncodeTiled_params_st),
            "::",
            stringify!(tensorMap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tensorDataType) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTensorMapEncodeTiled_params_st),
            "::",
            stringify!(tensorDataType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tensorRank) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTensorMapEncodeTiled_params_st),
            "::",
            stringify!(tensorRank)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).globalAddress) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTensorMapEncodeTiled_params_st),
            "::",
            stringify!(globalAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).globalDim) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTensorMapEncodeTiled_params_st),
            "::",
            stringify!(globalDim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).globalStrides) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTensorMapEncodeTiled_params_st),
            "::",
            stringify!(globalStrides)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).boxDim) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTensorMapEncodeTiled_params_st),
            "::",
            stringify!(boxDim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elementStrides) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTensorMapEncodeTiled_params_st),
            "::",
            stringify!(elementStrides)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interleave) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTensorMapEncodeTiled_params_st),
            "::",
            stringify!(interleave)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).swizzle) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTensorMapEncodeTiled_params_st),
            "::",
            stringify!(swizzle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l2Promotion) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTensorMapEncodeTiled_params_st),
            "::",
            stringify!(l2Promotion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oobFill) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTensorMapEncodeTiled_params_st),
            "::",
            stringify!(oobFill)
        )
    );
}
impl Default for cuTensorMapEncodeTiled_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuTensorMapEncodeTiled_params = cuTensorMapEncodeTiled_params_st;
#[repr(C)]
pub struct cuTensorMapEncodeIm2col_params_st {
    pub tensorMap: *mut CUtensorMap,
    pub tensorDataType: CUtensorMapDataType,
    pub tensorRank: cuuint32_t,
    pub globalAddress: *mut ::std::os::raw::c_void,
    pub globalDim: *const cuuint64_t,
    pub globalStrides: *const cuuint64_t,
    pub pixelBoxLowerCorner: *const ::std::os::raw::c_int,
    pub pixelBoxUpperCorner: *const ::std::os::raw::c_int,
    pub channelsPerPixel: cuuint32_t,
    pub pixelsPerColumn: cuuint32_t,
    pub elementStrides: *const cuuint32_t,
    pub interleave: CUtensorMapInterleave,
    pub swizzle: CUtensorMapSwizzle,
    pub l2Promotion: CUtensorMapL2promotion,
    pub oobFill: CUtensorMapFloatOOBfill,
}
#[test]
fn bindgen_test_layout_cuTensorMapEncodeIm2col_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuTensorMapEncodeIm2col_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuTensorMapEncodeIm2col_params_st>(),
        88usize,
        concat!("Size of: ", stringify!(cuTensorMapEncodeIm2col_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuTensorMapEncodeIm2col_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuTensorMapEncodeIm2col_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tensorMap) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTensorMapEncodeIm2col_params_st),
            "::",
            stringify!(tensorMap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tensorDataType) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTensorMapEncodeIm2col_params_st),
            "::",
            stringify!(tensorDataType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tensorRank) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTensorMapEncodeIm2col_params_st),
            "::",
            stringify!(tensorRank)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).globalAddress) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTensorMapEncodeIm2col_params_st),
            "::",
            stringify!(globalAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).globalDim) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTensorMapEncodeIm2col_params_st),
            "::",
            stringify!(globalDim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).globalStrides) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTensorMapEncodeIm2col_params_st),
            "::",
            stringify!(globalStrides)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pixelBoxLowerCorner) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTensorMapEncodeIm2col_params_st),
            "::",
            stringify!(pixelBoxLowerCorner)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pixelBoxUpperCorner) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTensorMapEncodeIm2col_params_st),
            "::",
            stringify!(pixelBoxUpperCorner)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channelsPerPixel) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTensorMapEncodeIm2col_params_st),
            "::",
            stringify!(channelsPerPixel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pixelsPerColumn) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTensorMapEncodeIm2col_params_st),
            "::",
            stringify!(pixelsPerColumn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elementStrides) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTensorMapEncodeIm2col_params_st),
            "::",
            stringify!(elementStrides)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interleave) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTensorMapEncodeIm2col_params_st),
            "::",
            stringify!(interleave)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).swizzle) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTensorMapEncodeIm2col_params_st),
            "::",
            stringify!(swizzle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l2Promotion) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTensorMapEncodeIm2col_params_st),
            "::",
            stringify!(l2Promotion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oobFill) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTensorMapEncodeIm2col_params_st),
            "::",
            stringify!(oobFill)
        )
    );
}
impl Default for cuTensorMapEncodeIm2col_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuTensorMapEncodeIm2col_params = cuTensorMapEncodeIm2col_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuTensorMapReplaceAddress_params_st {
    pub tensorMap: *mut CUtensorMap,
    pub globalAddress: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_cuTensorMapReplaceAddress_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuTensorMapReplaceAddress_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuTensorMapReplaceAddress_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuTensorMapReplaceAddress_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuTensorMapReplaceAddress_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuTensorMapReplaceAddress_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tensorMap) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTensorMapReplaceAddress_params_st),
            "::",
            stringify!(tensorMap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).globalAddress) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTensorMapReplaceAddress_params_st),
            "::",
            stringify!(globalAddress)
        )
    );
}
impl Default for cuTensorMapReplaceAddress_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuTensorMapReplaceAddress_params = cuTensorMapReplaceAddress_params_st;
#[repr(C)]
pub struct cuDeviceCanAccessPeer_params_st {
    pub canAccessPeer: *mut ::std::os::raw::c_int,
    pub dev: CUdevice,
    pub peerDev: CUdevice,
}
#[test]
fn bindgen_test_layout_cuDeviceCanAccessPeer_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuDeviceCanAccessPeer_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuDeviceCanAccessPeer_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuDeviceCanAccessPeer_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuDeviceCanAccessPeer_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuDeviceCanAccessPeer_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).canAccessPeer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDeviceCanAccessPeer_params_st),
            "::",
            stringify!(canAccessPeer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDeviceCanAccessPeer_params_st),
            "::",
            stringify!(dev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).peerDev) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDeviceCanAccessPeer_params_st),
            "::",
            stringify!(peerDev)
        )
    );
}
impl Default for cuDeviceCanAccessPeer_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuDeviceCanAccessPeer_params = cuDeviceCanAccessPeer_params_st;
#[repr(C)]
pub struct cuCtxEnablePeerAccess_params_st {
    pub peerContext: CUcontext,
    pub Flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuCtxEnablePeerAccess_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuCtxEnablePeerAccess_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuCtxEnablePeerAccess_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuCtxEnablePeerAccess_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuCtxEnablePeerAccess_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuCtxEnablePeerAccess_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).peerContext) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuCtxEnablePeerAccess_params_st),
            "::",
            stringify!(peerContext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuCtxEnablePeerAccess_params_st),
            "::",
            stringify!(Flags)
        )
    );
}
impl Default for cuCtxEnablePeerAccess_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuCtxEnablePeerAccess_params = cuCtxEnablePeerAccess_params_st;
#[repr(C)]
pub struct cuCtxDisablePeerAccess_params_st {
    pub peerContext: CUcontext,
}
#[test]
fn bindgen_test_layout_cuCtxDisablePeerAccess_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuCtxDisablePeerAccess_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuCtxDisablePeerAccess_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cuCtxDisablePeerAccess_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuCtxDisablePeerAccess_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuCtxDisablePeerAccess_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).peerContext) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuCtxDisablePeerAccess_params_st),
            "::",
            stringify!(peerContext)
        )
    );
}
impl Default for cuCtxDisablePeerAccess_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuCtxDisablePeerAccess_params = cuCtxDisablePeerAccess_params_st;
#[repr(C)]
pub struct cuDeviceGetP2PAttribute_params_st {
    pub value: *mut ::std::os::raw::c_int,
    pub attrib: CUdevice_P2PAttribute,
    pub srcDevice: CUdevice,
    pub dstDevice: CUdevice,
}
#[test]
fn bindgen_test_layout_cuDeviceGetP2PAttribute_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuDeviceGetP2PAttribute_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuDeviceGetP2PAttribute_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuDeviceGetP2PAttribute_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuDeviceGetP2PAttribute_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuDeviceGetP2PAttribute_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDeviceGetP2PAttribute_params_st),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attrib) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDeviceGetP2PAttribute_params_st),
            "::",
            stringify!(attrib)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcDevice) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDeviceGetP2PAttribute_params_st),
            "::",
            stringify!(srcDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstDevice) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDeviceGetP2PAttribute_params_st),
            "::",
            stringify!(dstDevice)
        )
    );
}
impl Default for cuDeviceGetP2PAttribute_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuDeviceGetP2PAttribute_params = cuDeviceGetP2PAttribute_params_st;
#[repr(C)]
pub struct cuGraphicsUnregisterResource_params_st {
    pub resource: CUgraphicsResource,
}
#[test]
fn bindgen_test_layout_cuGraphicsUnregisterResource_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphicsUnregisterResource_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphicsUnregisterResource_params_st>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(cuGraphicsUnregisterResource_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphicsUnregisterResource_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuGraphicsUnregisterResource_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resource) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphicsUnregisterResource_params_st),
            "::",
            stringify!(resource)
        )
    );
}
impl Default for cuGraphicsUnregisterResource_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphicsUnregisterResource_params = cuGraphicsUnregisterResource_params_st;
#[repr(C)]
pub struct cuGraphicsSubResourceGetMappedArray_params_st {
    pub pArray: *mut CUarray,
    pub resource: CUgraphicsResource,
    pub arrayIndex: ::std::os::raw::c_uint,
    pub mipLevel: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuGraphicsSubResourceGetMappedArray_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphicsSubResourceGetMappedArray_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphicsSubResourceGetMappedArray_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cuGraphicsSubResourceGetMappedArray_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphicsSubResourceGetMappedArray_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuGraphicsSubResourceGetMappedArray_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pArray) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphicsSubResourceGetMappedArray_params_st),
            "::",
            stringify!(pArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resource) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphicsSubResourceGetMappedArray_params_st),
            "::",
            stringify!(resource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arrayIndex) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphicsSubResourceGetMappedArray_params_st),
            "::",
            stringify!(arrayIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mipLevel) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphicsSubResourceGetMappedArray_params_st),
            "::",
            stringify!(mipLevel)
        )
    );
}
impl Default for cuGraphicsSubResourceGetMappedArray_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphicsSubResourceGetMappedArray_params = cuGraphicsSubResourceGetMappedArray_params_st;
#[repr(C)]
pub struct cuGraphicsResourceGetMappedMipmappedArray_params_st {
    pub pMipmappedArray: *mut CUmipmappedArray,
    pub resource: CUgraphicsResource,
}
#[test]
fn bindgen_test_layout_cuGraphicsResourceGetMappedMipmappedArray_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphicsResourceGetMappedMipmappedArray_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphicsResourceGetMappedMipmappedArray_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cuGraphicsResourceGetMappedMipmappedArray_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphicsResourceGetMappedMipmappedArray_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuGraphicsResourceGetMappedMipmappedArray_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pMipmappedArray) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphicsResourceGetMappedMipmappedArray_params_st),
            "::",
            stringify!(pMipmappedArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resource) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphicsResourceGetMappedMipmappedArray_params_st),
            "::",
            stringify!(resource)
        )
    );
}
impl Default for cuGraphicsResourceGetMappedMipmappedArray_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphicsResourceGetMappedMipmappedArray_params =
    cuGraphicsResourceGetMappedMipmappedArray_params_st;
#[repr(C)]
pub struct cuGraphicsResourceGetMappedPointer_v2_params_st {
    pub pDevPtr: *mut CUdeviceptr,
    pub pSize: *mut usize,
    pub resource: CUgraphicsResource,
}
#[test]
fn bindgen_test_layout_cuGraphicsResourceGetMappedPointer_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphicsResourceGetMappedPointer_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphicsResourceGetMappedPointer_v2_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cuGraphicsResourceGetMappedPointer_v2_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphicsResourceGetMappedPointer_v2_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuGraphicsResourceGetMappedPointer_v2_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDevPtr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphicsResourceGetMappedPointer_v2_params_st),
            "::",
            stringify!(pDevPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pSize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphicsResourceGetMappedPointer_v2_params_st),
            "::",
            stringify!(pSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resource) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphicsResourceGetMappedPointer_v2_params_st),
            "::",
            stringify!(resource)
        )
    );
}
impl Default for cuGraphicsResourceGetMappedPointer_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphicsResourceGetMappedPointer_v2_params =
    cuGraphicsResourceGetMappedPointer_v2_params_st;
#[repr(C)]
pub struct cuGraphicsResourceSetMapFlags_v2_params_st {
    pub resource: CUgraphicsResource,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuGraphicsResourceSetMapFlags_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphicsResourceSetMapFlags_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphicsResourceSetMapFlags_v2_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cuGraphicsResourceSetMapFlags_v2_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphicsResourceSetMapFlags_v2_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuGraphicsResourceSetMapFlags_v2_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resource) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphicsResourceSetMapFlags_v2_params_st),
            "::",
            stringify!(resource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphicsResourceSetMapFlags_v2_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cuGraphicsResourceSetMapFlags_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphicsResourceSetMapFlags_v2_params = cuGraphicsResourceSetMapFlags_v2_params_st;
#[repr(C)]
pub struct cuGraphicsMapResources_ptsz_params_st {
    pub count: ::std::os::raw::c_uint,
    pub resources: *mut CUgraphicsResource,
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuGraphicsMapResources_ptsz_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphicsMapResources_ptsz_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphicsMapResources_ptsz_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cuGraphicsMapResources_ptsz_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphicsMapResources_ptsz_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuGraphicsMapResources_ptsz_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphicsMapResources_ptsz_params_st),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resources) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphicsMapResources_ptsz_params_st),
            "::",
            stringify!(resources)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphicsMapResources_ptsz_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuGraphicsMapResources_ptsz_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphicsMapResources_ptsz_params = cuGraphicsMapResources_ptsz_params_st;
#[repr(C)]
pub struct cuGraphicsUnmapResources_ptsz_params_st {
    pub count: ::std::os::raw::c_uint,
    pub resources: *mut CUgraphicsResource,
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuGraphicsUnmapResources_ptsz_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphicsUnmapResources_ptsz_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphicsUnmapResources_ptsz_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cuGraphicsUnmapResources_ptsz_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphicsUnmapResources_ptsz_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuGraphicsUnmapResources_ptsz_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphicsUnmapResources_ptsz_params_st),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resources) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphicsUnmapResources_ptsz_params_st),
            "::",
            stringify!(resources)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphicsUnmapResources_ptsz_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuGraphicsUnmapResources_ptsz_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphicsUnmapResources_ptsz_params = cuGraphicsUnmapResources_ptsz_params_st;
#[repr(C)]
pub struct cuGetProcAddress_v2_params_st {
    pub symbol: *const ::std::os::raw::c_char,
    pub pfn: *mut *mut ::std::os::raw::c_void,
    pub cudaVersion: ::std::os::raw::c_int,
    pub flags: cuuint64_t,
    pub symbolStatus: *mut CUdriverProcAddressQueryResult,
}
#[test]
fn bindgen_test_layout_cuGetProcAddress_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGetProcAddress_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGetProcAddress_v2_params_st>(),
        40usize,
        concat!("Size of: ", stringify!(cuGetProcAddress_v2_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuGetProcAddress_v2_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuGetProcAddress_v2_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).symbol) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGetProcAddress_v2_params_st),
            "::",
            stringify!(symbol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfn) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGetProcAddress_v2_params_st),
            "::",
            stringify!(pfn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cudaVersion) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGetProcAddress_v2_params_st),
            "::",
            stringify!(cudaVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGetProcAddress_v2_params_st),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).symbolStatus) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGetProcAddress_v2_params_st),
            "::",
            stringify!(symbolStatus)
        )
    );
}
impl Default for cuGetProcAddress_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGetProcAddress_v2_params = cuGetProcAddress_v2_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuGetExportTable_params_st {
    pub ppExportTable: *mut *const ::std::os::raw::c_void,
    pub pExportTableId: *const CUuuid,
}
#[test]
fn bindgen_test_layout_cuGetExportTable_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGetExportTable_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGetExportTable_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuGetExportTable_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuGetExportTable_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuGetExportTable_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppExportTable) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGetExportTable_params_st),
            "::",
            stringify!(ppExportTable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pExportTableId) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGetExportTable_params_st),
            "::",
            stringify!(pExportTableId)
        )
    );
}
impl Default for cuGetExportTable_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGetExportTable_params = cuGetExportTable_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuMemHostRegister_params_st {
    pub p: *mut ::std::os::raw::c_void,
    pub bytesize: usize,
    pub Flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuMemHostRegister_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemHostRegister_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemHostRegister_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuMemHostRegister_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemHostRegister_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemHostRegister_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemHostRegister_params_st),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytesize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemHostRegister_params_st),
            "::",
            stringify!(bytesize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemHostRegister_params_st),
            "::",
            stringify!(Flags)
        )
    );
}
impl Default for cuMemHostRegister_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemHostRegister_params = cuMemHostRegister_params_st;
#[repr(C)]
pub struct cuGraphicsResourceSetMapFlags_params_st {
    pub resource: CUgraphicsResource,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuGraphicsResourceSetMapFlags_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphicsResourceSetMapFlags_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphicsResourceSetMapFlags_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cuGraphicsResourceSetMapFlags_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphicsResourceSetMapFlags_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuGraphicsResourceSetMapFlags_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resource) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphicsResourceSetMapFlags_params_st),
            "::",
            stringify!(resource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphicsResourceSetMapFlags_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cuGraphicsResourceSetMapFlags_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphicsResourceSetMapFlags_params = cuGraphicsResourceSetMapFlags_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuLinkCreate_params_st {
    pub numOptions: ::std::os::raw::c_uint,
    pub options: *mut CUjit_option,
    pub optionValues: *mut *mut ::std::os::raw::c_void,
    pub stateOut: *mut CUlinkState,
}
#[test]
fn bindgen_test_layout_cuLinkCreate_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuLinkCreate_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuLinkCreate_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuLinkCreate_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuLinkCreate_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuLinkCreate_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numOptions) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLinkCreate_params_st),
            "::",
            stringify!(numOptions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).options) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLinkCreate_params_st),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).optionValues) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLinkCreate_params_st),
            "::",
            stringify!(optionValues)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stateOut) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLinkCreate_params_st),
            "::",
            stringify!(stateOut)
        )
    );
}
impl Default for cuLinkCreate_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuLinkCreate_params = cuLinkCreate_params_st;
#[repr(C)]
pub struct cuLinkAddData_params_st {
    pub state: CUlinkState,
    pub type_: CUjitInputType,
    pub data: *mut ::std::os::raw::c_void,
    pub size: usize,
    pub name: *const ::std::os::raw::c_char,
    pub numOptions: ::std::os::raw::c_uint,
    pub options: *mut CUjit_option,
    pub optionValues: *mut *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_cuLinkAddData_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuLinkAddData_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuLinkAddData_params_st>(),
        64usize,
        concat!("Size of: ", stringify!(cuLinkAddData_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuLinkAddData_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuLinkAddData_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLinkAddData_params_st),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLinkAddData_params_st),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLinkAddData_params_st),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLinkAddData_params_st),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLinkAddData_params_st),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numOptions) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLinkAddData_params_st),
            "::",
            stringify!(numOptions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).options) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLinkAddData_params_st),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).optionValues) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLinkAddData_params_st),
            "::",
            stringify!(optionValues)
        )
    );
}
impl Default for cuLinkAddData_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuLinkAddData_params = cuLinkAddData_params_st;
#[repr(C)]
pub struct cuLinkAddFile_params_st {
    pub state: CUlinkState,
    pub type_: CUjitInputType,
    pub path: *const ::std::os::raw::c_char,
    pub numOptions: ::std::os::raw::c_uint,
    pub options: *mut CUjit_option,
    pub optionValues: *mut *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_cuLinkAddFile_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuLinkAddFile_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuLinkAddFile_params_st>(),
        48usize,
        concat!("Size of: ", stringify!(cuLinkAddFile_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuLinkAddFile_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuLinkAddFile_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLinkAddFile_params_st),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLinkAddFile_params_st),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLinkAddFile_params_st),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numOptions) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLinkAddFile_params_st),
            "::",
            stringify!(numOptions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).options) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLinkAddFile_params_st),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).optionValues) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLinkAddFile_params_st),
            "::",
            stringify!(optionValues)
        )
    );
}
impl Default for cuLinkAddFile_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuLinkAddFile_params = cuLinkAddFile_params_st;
#[repr(C)]
pub struct cuTexRefSetAddress2D_v2_params_st {
    pub hTexRef: CUtexref,
    pub desc: *const CUDA_ARRAY_DESCRIPTOR,
    pub dptr: CUdeviceptr,
    pub Pitch: usize,
}
#[test]
fn bindgen_test_layout_cuTexRefSetAddress2D_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuTexRefSetAddress2D_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuTexRefSetAddress2D_v2_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuTexRefSetAddress2D_v2_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuTexRefSetAddress2D_v2_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuTexRefSetAddress2D_v2_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hTexRef) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefSetAddress2D_v2_params_st),
            "::",
            stringify!(hTexRef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).desc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefSetAddress2D_v2_params_st),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dptr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefSetAddress2D_v2_params_st),
            "::",
            stringify!(dptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Pitch) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefSetAddress2D_v2_params_st),
            "::",
            stringify!(Pitch)
        )
    );
}
impl Default for cuTexRefSetAddress2D_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuTexRefSetAddress2D_v2_params = cuTexRefSetAddress2D_v2_params_st;
#[repr(C)]
pub struct cuDeviceTotalMem_params_st {
    pub bytes: *mut ::std::os::raw::c_uint,
    pub dev: CUdevice,
}
#[test]
fn bindgen_test_layout_cuDeviceTotalMem_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuDeviceTotalMem_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuDeviceTotalMem_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuDeviceTotalMem_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuDeviceTotalMem_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuDeviceTotalMem_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytes) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDeviceTotalMem_params_st),
            "::",
            stringify!(bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDeviceTotalMem_params_st),
            "::",
            stringify!(dev)
        )
    );
}
impl Default for cuDeviceTotalMem_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuDeviceTotalMem_params = cuDeviceTotalMem_params_st;
#[repr(C)]
pub struct cuCtxCreate_params_st {
    pub pctx: *mut CUcontext,
    pub flags: ::std::os::raw::c_uint,
    pub dev: CUdevice,
}
#[test]
fn bindgen_test_layout_cuCtxCreate_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuCtxCreate_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuCtxCreate_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuCtxCreate_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuCtxCreate_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuCtxCreate_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pctx) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuCtxCreate_params_st),
            "::",
            stringify!(pctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuCtxCreate_params_st),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cuCtxCreate_params_st),
            "::",
            stringify!(dev)
        )
    );
}
impl Default for cuCtxCreate_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuCtxCreate_params = cuCtxCreate_params_st;
#[repr(C)]
pub struct cuModuleGetGlobal_params_st {
    pub dptr: *mut CUdeviceptr_v1,
    pub bytes: *mut ::std::os::raw::c_uint,
    pub hmod: CUmodule,
    pub name: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_cuModuleGetGlobal_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuModuleGetGlobal_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuModuleGetGlobal_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuModuleGetGlobal_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuModuleGetGlobal_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuModuleGetGlobal_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuModuleGetGlobal_params_st),
            "::",
            stringify!(dptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytes) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuModuleGetGlobal_params_st),
            "::",
            stringify!(bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hmod) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuModuleGetGlobal_params_st),
            "::",
            stringify!(hmod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuModuleGetGlobal_params_st),
            "::",
            stringify!(name)
        )
    );
}
impl Default for cuModuleGetGlobal_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuModuleGetGlobal_params = cuModuleGetGlobal_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuMemGetInfo_params_st {
    pub free: *mut ::std::os::raw::c_uint,
    pub total: *mut ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuMemGetInfo_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemGetInfo_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemGetInfo_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuMemGetInfo_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemGetInfo_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemGetInfo_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemGetInfo_params_st),
            "::",
            stringify!(free)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemGetInfo_params_st),
            "::",
            stringify!(total)
        )
    );
}
impl Default for cuMemGetInfo_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemGetInfo_params = cuMemGetInfo_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuMemAlloc_params_st {
    pub dptr: *mut CUdeviceptr_v1,
    pub bytesize: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuMemAlloc_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemAlloc_params_st> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemAlloc_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuMemAlloc_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemAlloc_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemAlloc_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemAlloc_params_st),
            "::",
            stringify!(dptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytesize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemAlloc_params_st),
            "::",
            stringify!(bytesize)
        )
    );
}
impl Default for cuMemAlloc_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemAlloc_params = cuMemAlloc_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuMemAllocPitch_params_st {
    pub dptr: *mut CUdeviceptr_v1,
    pub pPitch: *mut ::std::os::raw::c_uint,
    pub WidthInBytes: ::std::os::raw::c_uint,
    pub Height: ::std::os::raw::c_uint,
    pub ElementSizeBytes: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuMemAllocPitch_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemAllocPitch_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemAllocPitch_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuMemAllocPitch_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemAllocPitch_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemAllocPitch_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemAllocPitch_params_st),
            "::",
            stringify!(dptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPitch) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemAllocPitch_params_st),
            "::",
            stringify!(pPitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WidthInBytes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemAllocPitch_params_st),
            "::",
            stringify!(WidthInBytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Height) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemAllocPitch_params_st),
            "::",
            stringify!(Height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ElementSizeBytes) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemAllocPitch_params_st),
            "::",
            stringify!(ElementSizeBytes)
        )
    );
}
impl Default for cuMemAllocPitch_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemAllocPitch_params = cuMemAllocPitch_params_st;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuMemFree_params_st {
    pub dptr: CUdeviceptr_v1,
}
#[test]
fn bindgen_test_layout_cuMemFree_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemFree_params_st> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemFree_params_st>(),
        4usize,
        concat!("Size of: ", stringify!(cuMemFree_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemFree_params_st>(),
        4usize,
        concat!("Alignment of ", stringify!(cuMemFree_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemFree_params_st),
            "::",
            stringify!(dptr)
        )
    );
}
pub type cuMemFree_params = cuMemFree_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuMemGetAddressRange_params_st {
    pub pbase: *mut CUdeviceptr_v1,
    pub psize: *mut ::std::os::raw::c_uint,
    pub dptr: CUdeviceptr_v1,
}
#[test]
fn bindgen_test_layout_cuMemGetAddressRange_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemGetAddressRange_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemGetAddressRange_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuMemGetAddressRange_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemGetAddressRange_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemGetAddressRange_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pbase) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemGetAddressRange_params_st),
            "::",
            stringify!(pbase)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).psize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemGetAddressRange_params_st),
            "::",
            stringify!(psize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dptr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemGetAddressRange_params_st),
            "::",
            stringify!(dptr)
        )
    );
}
impl Default for cuMemGetAddressRange_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemGetAddressRange_params = cuMemGetAddressRange_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuMemAllocHost_params_st {
    pub pp: *mut *mut ::std::os::raw::c_void,
    pub bytesize: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuMemAllocHost_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemAllocHost_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemAllocHost_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuMemAllocHost_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemAllocHost_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemAllocHost_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemAllocHost_params_st),
            "::",
            stringify!(pp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytesize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemAllocHost_params_st),
            "::",
            stringify!(bytesize)
        )
    );
}
impl Default for cuMemAllocHost_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemAllocHost_params = cuMemAllocHost_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuMemHostGetDevicePointer_params_st {
    pub pdptr: *mut CUdeviceptr_v1,
    pub p: *mut ::std::os::raw::c_void,
    pub Flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuMemHostGetDevicePointer_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemHostGetDevicePointer_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemHostGetDevicePointer_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuMemHostGetDevicePointer_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemHostGetDevicePointer_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuMemHostGetDevicePointer_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemHostGetDevicePointer_params_st),
            "::",
            stringify!(pdptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemHostGetDevicePointer_params_st),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemHostGetDevicePointer_params_st),
            "::",
            stringify!(Flags)
        )
    );
}
impl Default for cuMemHostGetDevicePointer_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemHostGetDevicePointer_params = cuMemHostGetDevicePointer_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuMemcpyHtoD_params_st {
    pub dstDevice: CUdeviceptr_v1,
    pub srcHost: *const ::std::os::raw::c_void,
    pub ByteCount: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuMemcpyHtoD_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemcpyHtoD_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemcpyHtoD_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuMemcpyHtoD_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemcpyHtoD_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemcpyHtoD_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyHtoD_params_st),
            "::",
            stringify!(dstDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcHost) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyHtoD_params_st),
            "::",
            stringify!(srcHost)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ByteCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyHtoD_params_st),
            "::",
            stringify!(ByteCount)
        )
    );
}
impl Default for cuMemcpyHtoD_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemcpyHtoD_params = cuMemcpyHtoD_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuMemcpyDtoH_params_st {
    pub dstHost: *mut ::std::os::raw::c_void,
    pub srcDevice: CUdeviceptr_v1,
    pub ByteCount: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuMemcpyDtoH_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemcpyDtoH_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemcpyDtoH_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuMemcpyDtoH_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemcpyDtoH_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemcpyDtoH_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstHost) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyDtoH_params_st),
            "::",
            stringify!(dstHost)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcDevice) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyDtoH_params_st),
            "::",
            stringify!(srcDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ByteCount) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyDtoH_params_st),
            "::",
            stringify!(ByteCount)
        )
    );
}
impl Default for cuMemcpyDtoH_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemcpyDtoH_params = cuMemcpyDtoH_params_st;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuMemcpyDtoD_params_st {
    pub dstDevice: CUdeviceptr_v1,
    pub srcDevice: CUdeviceptr_v1,
    pub ByteCount: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuMemcpyDtoD_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemcpyDtoD_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemcpyDtoD_params_st>(),
        12usize,
        concat!("Size of: ", stringify!(cuMemcpyDtoD_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemcpyDtoD_params_st>(),
        4usize,
        concat!("Alignment of ", stringify!(cuMemcpyDtoD_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyDtoD_params_st),
            "::",
            stringify!(dstDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcDevice) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyDtoD_params_st),
            "::",
            stringify!(srcDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ByteCount) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyDtoD_params_st),
            "::",
            stringify!(ByteCount)
        )
    );
}
pub type cuMemcpyDtoD_params = cuMemcpyDtoD_params_st;
#[repr(C)]
pub struct cuMemcpyDtoA_params_st {
    pub dstArray: CUarray,
    pub dstOffset: ::std::os::raw::c_uint,
    pub srcDevice: CUdeviceptr_v1,
    pub ByteCount: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuMemcpyDtoA_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemcpyDtoA_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemcpyDtoA_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuMemcpyDtoA_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemcpyDtoA_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemcpyDtoA_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstArray) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyDtoA_params_st),
            "::",
            stringify!(dstArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstOffset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyDtoA_params_st),
            "::",
            stringify!(dstOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcDevice) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyDtoA_params_st),
            "::",
            stringify!(srcDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ByteCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyDtoA_params_st),
            "::",
            stringify!(ByteCount)
        )
    );
}
impl Default for cuMemcpyDtoA_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemcpyDtoA_params = cuMemcpyDtoA_params_st;
#[repr(C)]
pub struct cuMemcpyAtoD_params_st {
    pub dstDevice: CUdeviceptr_v1,
    pub srcArray: CUarray,
    pub srcOffset: ::std::os::raw::c_uint,
    pub ByteCount: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuMemcpyAtoD_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemcpyAtoD_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemcpyAtoD_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuMemcpyAtoD_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemcpyAtoD_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemcpyAtoD_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyAtoD_params_st),
            "::",
            stringify!(dstDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcArray) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyAtoD_params_st),
            "::",
            stringify!(srcArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcOffset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyAtoD_params_st),
            "::",
            stringify!(srcOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ByteCount) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyAtoD_params_st),
            "::",
            stringify!(ByteCount)
        )
    );
}
impl Default for cuMemcpyAtoD_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemcpyAtoD_params = cuMemcpyAtoD_params_st;
#[repr(C)]
pub struct cuMemcpyHtoA_params_st {
    pub dstArray: CUarray,
    pub dstOffset: ::std::os::raw::c_uint,
    pub srcHost: *const ::std::os::raw::c_void,
    pub ByteCount: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuMemcpyHtoA_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemcpyHtoA_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemcpyHtoA_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuMemcpyHtoA_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemcpyHtoA_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemcpyHtoA_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstArray) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyHtoA_params_st),
            "::",
            stringify!(dstArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstOffset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyHtoA_params_st),
            "::",
            stringify!(dstOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcHost) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyHtoA_params_st),
            "::",
            stringify!(srcHost)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ByteCount) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyHtoA_params_st),
            "::",
            stringify!(ByteCount)
        )
    );
}
impl Default for cuMemcpyHtoA_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemcpyHtoA_params = cuMemcpyHtoA_params_st;
#[repr(C)]
pub struct cuMemcpyAtoH_params_st {
    pub dstHost: *mut ::std::os::raw::c_void,
    pub srcArray: CUarray,
    pub srcOffset: ::std::os::raw::c_uint,
    pub ByteCount: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuMemcpyAtoH_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemcpyAtoH_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemcpyAtoH_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuMemcpyAtoH_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemcpyAtoH_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemcpyAtoH_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstHost) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyAtoH_params_st),
            "::",
            stringify!(dstHost)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcArray) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyAtoH_params_st),
            "::",
            stringify!(srcArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcOffset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyAtoH_params_st),
            "::",
            stringify!(srcOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ByteCount) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyAtoH_params_st),
            "::",
            stringify!(ByteCount)
        )
    );
}
impl Default for cuMemcpyAtoH_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemcpyAtoH_params = cuMemcpyAtoH_params_st;
#[repr(C)]
pub struct cuMemcpyAtoA_params_st {
    pub dstArray: CUarray,
    pub dstOffset: ::std::os::raw::c_uint,
    pub srcArray: CUarray,
    pub srcOffset: ::std::os::raw::c_uint,
    pub ByteCount: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuMemcpyAtoA_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemcpyAtoA_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemcpyAtoA_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuMemcpyAtoA_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemcpyAtoA_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemcpyAtoA_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstArray) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyAtoA_params_st),
            "::",
            stringify!(dstArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstOffset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyAtoA_params_st),
            "::",
            stringify!(dstOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcArray) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyAtoA_params_st),
            "::",
            stringify!(srcArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcOffset) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyAtoA_params_st),
            "::",
            stringify!(srcOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ByteCount) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyAtoA_params_st),
            "::",
            stringify!(ByteCount)
        )
    );
}
impl Default for cuMemcpyAtoA_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemcpyAtoA_params = cuMemcpyAtoA_params_st;
#[repr(C)]
pub struct cuMemcpyHtoAAsync_params_st {
    pub dstArray: CUarray,
    pub dstOffset: ::std::os::raw::c_uint,
    pub srcHost: *const ::std::os::raw::c_void,
    pub ByteCount: ::std::os::raw::c_uint,
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuMemcpyHtoAAsync_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemcpyHtoAAsync_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemcpyHtoAAsync_params_st>(),
        40usize,
        concat!("Size of: ", stringify!(cuMemcpyHtoAAsync_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemcpyHtoAAsync_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemcpyHtoAAsync_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstArray) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyHtoAAsync_params_st),
            "::",
            stringify!(dstArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstOffset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyHtoAAsync_params_st),
            "::",
            stringify!(dstOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcHost) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyHtoAAsync_params_st),
            "::",
            stringify!(srcHost)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ByteCount) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyHtoAAsync_params_st),
            "::",
            stringify!(ByteCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyHtoAAsync_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuMemcpyHtoAAsync_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemcpyHtoAAsync_params = cuMemcpyHtoAAsync_params_st;
#[repr(C)]
pub struct cuMemcpyAtoHAsync_params_st {
    pub dstHost: *mut ::std::os::raw::c_void,
    pub srcArray: CUarray,
    pub srcOffset: ::std::os::raw::c_uint,
    pub ByteCount: ::std::os::raw::c_uint,
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuMemcpyAtoHAsync_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemcpyAtoHAsync_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemcpyAtoHAsync_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuMemcpyAtoHAsync_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemcpyAtoHAsync_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemcpyAtoHAsync_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstHost) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyAtoHAsync_params_st),
            "::",
            stringify!(dstHost)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcArray) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyAtoHAsync_params_st),
            "::",
            stringify!(srcArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcOffset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyAtoHAsync_params_st),
            "::",
            stringify!(srcOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ByteCount) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyAtoHAsync_params_st),
            "::",
            stringify!(ByteCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyAtoHAsync_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuMemcpyAtoHAsync_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemcpyAtoHAsync_params = cuMemcpyAtoHAsync_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuMemcpy2D_params_st {
    pub pCopy: *const CUDA_MEMCPY2D_v1,
}
#[test]
fn bindgen_test_layout_cuMemcpy2D_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemcpy2D_params_st> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemcpy2D_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cuMemcpy2D_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemcpy2D_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemcpy2D_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCopy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpy2D_params_st),
            "::",
            stringify!(pCopy)
        )
    );
}
impl Default for cuMemcpy2D_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemcpy2D_params = cuMemcpy2D_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuMemcpy2DUnaligned_params_st {
    pub pCopy: *const CUDA_MEMCPY2D_v1,
}
#[test]
fn bindgen_test_layout_cuMemcpy2DUnaligned_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemcpy2DUnaligned_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemcpy2DUnaligned_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cuMemcpy2DUnaligned_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemcpy2DUnaligned_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemcpy2DUnaligned_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCopy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpy2DUnaligned_params_st),
            "::",
            stringify!(pCopy)
        )
    );
}
impl Default for cuMemcpy2DUnaligned_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemcpy2DUnaligned_params = cuMemcpy2DUnaligned_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuMemcpy3D_params_st {
    pub pCopy: *const CUDA_MEMCPY3D_v1,
}
#[test]
fn bindgen_test_layout_cuMemcpy3D_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemcpy3D_params_st> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemcpy3D_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cuMemcpy3D_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemcpy3D_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemcpy3D_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCopy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpy3D_params_st),
            "::",
            stringify!(pCopy)
        )
    );
}
impl Default for cuMemcpy3D_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemcpy3D_params = cuMemcpy3D_params_st;
#[repr(C)]
pub struct cuMemcpyHtoDAsync_params_st {
    pub dstDevice: CUdeviceptr_v1,
    pub srcHost: *const ::std::os::raw::c_void,
    pub ByteCount: ::std::os::raw::c_uint,
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuMemcpyHtoDAsync_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemcpyHtoDAsync_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemcpyHtoDAsync_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuMemcpyHtoDAsync_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemcpyHtoDAsync_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemcpyHtoDAsync_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyHtoDAsync_params_st),
            "::",
            stringify!(dstDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcHost) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyHtoDAsync_params_st),
            "::",
            stringify!(srcHost)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ByteCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyHtoDAsync_params_st),
            "::",
            stringify!(ByteCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyHtoDAsync_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuMemcpyHtoDAsync_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemcpyHtoDAsync_params = cuMemcpyHtoDAsync_params_st;
#[repr(C)]
pub struct cuMemcpyDtoHAsync_params_st {
    pub dstHost: *mut ::std::os::raw::c_void,
    pub srcDevice: CUdeviceptr_v1,
    pub ByteCount: ::std::os::raw::c_uint,
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuMemcpyDtoHAsync_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemcpyDtoHAsync_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemcpyDtoHAsync_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuMemcpyDtoHAsync_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemcpyDtoHAsync_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemcpyDtoHAsync_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstHost) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyDtoHAsync_params_st),
            "::",
            stringify!(dstHost)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcDevice) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyDtoHAsync_params_st),
            "::",
            stringify!(srcDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ByteCount) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyDtoHAsync_params_st),
            "::",
            stringify!(ByteCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyDtoHAsync_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuMemcpyDtoHAsync_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemcpyDtoHAsync_params = cuMemcpyDtoHAsync_params_st;
#[repr(C)]
pub struct cuMemcpyDtoDAsync_params_st {
    pub dstDevice: CUdeviceptr_v1,
    pub srcDevice: CUdeviceptr_v1,
    pub ByteCount: ::std::os::raw::c_uint,
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuMemcpyDtoDAsync_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemcpyDtoDAsync_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemcpyDtoDAsync_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuMemcpyDtoDAsync_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemcpyDtoDAsync_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemcpyDtoDAsync_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyDtoDAsync_params_st),
            "::",
            stringify!(dstDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcDevice) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyDtoDAsync_params_st),
            "::",
            stringify!(srcDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ByteCount) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyDtoDAsync_params_st),
            "::",
            stringify!(ByteCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyDtoDAsync_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuMemcpyDtoDAsync_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemcpyDtoDAsync_params = cuMemcpyDtoDAsync_params_st;
#[repr(C)]
pub struct cuMemcpy2DAsync_params_st {
    pub pCopy: *const CUDA_MEMCPY2D_v1,
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuMemcpy2DAsync_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemcpy2DAsync_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemcpy2DAsync_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuMemcpy2DAsync_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemcpy2DAsync_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemcpy2DAsync_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCopy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpy2DAsync_params_st),
            "::",
            stringify!(pCopy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpy2DAsync_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuMemcpy2DAsync_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemcpy2DAsync_params = cuMemcpy2DAsync_params_st;
#[repr(C)]
pub struct cuMemcpy3DAsync_params_st {
    pub pCopy: *const CUDA_MEMCPY3D_v1,
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuMemcpy3DAsync_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemcpy3DAsync_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemcpy3DAsync_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuMemcpy3DAsync_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemcpy3DAsync_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemcpy3DAsync_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCopy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpy3DAsync_params_st),
            "::",
            stringify!(pCopy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpy3DAsync_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuMemcpy3DAsync_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemcpy3DAsync_params = cuMemcpy3DAsync_params_st;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuMemsetD8_params_st {
    pub dstDevice: CUdeviceptr_v1,
    pub uc: ::std::os::raw::c_uchar,
    pub N: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuMemsetD8_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemsetD8_params_st> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemsetD8_params_st>(),
        12usize,
        concat!("Size of: ", stringify!(cuMemsetD8_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemsetD8_params_st>(),
        4usize,
        concat!("Alignment of ", stringify!(cuMemsetD8_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD8_params_st),
            "::",
            stringify!(dstDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uc) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD8_params_st),
            "::",
            stringify!(uc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).N) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD8_params_st),
            "::",
            stringify!(N)
        )
    );
}
pub type cuMemsetD8_params = cuMemsetD8_params_st;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuMemsetD16_params_st {
    pub dstDevice: CUdeviceptr_v1,
    pub us: ::std::os::raw::c_ushort,
    pub N: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuMemsetD16_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemsetD16_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemsetD16_params_st>(),
        12usize,
        concat!("Size of: ", stringify!(cuMemsetD16_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemsetD16_params_st>(),
        4usize,
        concat!("Alignment of ", stringify!(cuMemsetD16_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD16_params_st),
            "::",
            stringify!(dstDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).us) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD16_params_st),
            "::",
            stringify!(us)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).N) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD16_params_st),
            "::",
            stringify!(N)
        )
    );
}
pub type cuMemsetD16_params = cuMemsetD16_params_st;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuMemsetD32_params_st {
    pub dstDevice: CUdeviceptr_v1,
    pub ui: ::std::os::raw::c_uint,
    pub N: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuMemsetD32_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemsetD32_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemsetD32_params_st>(),
        12usize,
        concat!("Size of: ", stringify!(cuMemsetD32_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemsetD32_params_st>(),
        4usize,
        concat!("Alignment of ", stringify!(cuMemsetD32_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD32_params_st),
            "::",
            stringify!(dstDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ui) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD32_params_st),
            "::",
            stringify!(ui)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).N) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD32_params_st),
            "::",
            stringify!(N)
        )
    );
}
pub type cuMemsetD32_params = cuMemsetD32_params_st;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuMemsetD2D8_params_st {
    pub dstDevice: CUdeviceptr_v1,
    pub dstPitch: ::std::os::raw::c_uint,
    pub uc: ::std::os::raw::c_uchar,
    pub Width: ::std::os::raw::c_uint,
    pub Height: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuMemsetD2D8_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemsetD2D8_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemsetD2D8_params_st>(),
        20usize,
        concat!("Size of: ", stringify!(cuMemsetD2D8_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemsetD2D8_params_st>(),
        4usize,
        concat!("Alignment of ", stringify!(cuMemsetD2D8_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D8_params_st),
            "::",
            stringify!(dstDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstPitch) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D8_params_st),
            "::",
            stringify!(dstPitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D8_params_st),
            "::",
            stringify!(uc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Width) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D8_params_st),
            "::",
            stringify!(Width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Height) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D8_params_st),
            "::",
            stringify!(Height)
        )
    );
}
pub type cuMemsetD2D8_params = cuMemsetD2D8_params_st;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuMemsetD2D16_params_st {
    pub dstDevice: CUdeviceptr_v1,
    pub dstPitch: ::std::os::raw::c_uint,
    pub us: ::std::os::raw::c_ushort,
    pub Width: ::std::os::raw::c_uint,
    pub Height: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuMemsetD2D16_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemsetD2D16_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemsetD2D16_params_st>(),
        20usize,
        concat!("Size of: ", stringify!(cuMemsetD2D16_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemsetD2D16_params_st>(),
        4usize,
        concat!("Alignment of ", stringify!(cuMemsetD2D16_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D16_params_st),
            "::",
            stringify!(dstDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstPitch) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D16_params_st),
            "::",
            stringify!(dstPitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).us) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D16_params_st),
            "::",
            stringify!(us)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Width) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D16_params_st),
            "::",
            stringify!(Width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Height) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D16_params_st),
            "::",
            stringify!(Height)
        )
    );
}
pub type cuMemsetD2D16_params = cuMemsetD2D16_params_st;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuMemsetD2D32_params_st {
    pub dstDevice: CUdeviceptr_v1,
    pub dstPitch: ::std::os::raw::c_uint,
    pub ui: ::std::os::raw::c_uint,
    pub Width: ::std::os::raw::c_uint,
    pub Height: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuMemsetD2D32_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemsetD2D32_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemsetD2D32_params_st>(),
        20usize,
        concat!("Size of: ", stringify!(cuMemsetD2D32_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemsetD2D32_params_st>(),
        4usize,
        concat!("Alignment of ", stringify!(cuMemsetD2D32_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D32_params_st),
            "::",
            stringify!(dstDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstPitch) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D32_params_st),
            "::",
            stringify!(dstPitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ui) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D32_params_st),
            "::",
            stringify!(ui)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Width) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D32_params_st),
            "::",
            stringify!(Width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Height) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D32_params_st),
            "::",
            stringify!(Height)
        )
    );
}
pub type cuMemsetD2D32_params = cuMemsetD2D32_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuArrayCreate_params_st {
    pub pHandle: *mut CUarray,
    pub pAllocateArray: *const CUDA_ARRAY_DESCRIPTOR_v1,
}
#[test]
fn bindgen_test_layout_cuArrayCreate_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuArrayCreate_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuArrayCreate_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuArrayCreate_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuArrayCreate_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuArrayCreate_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pHandle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuArrayCreate_params_st),
            "::",
            stringify!(pHandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pAllocateArray) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuArrayCreate_params_st),
            "::",
            stringify!(pAllocateArray)
        )
    );
}
impl Default for cuArrayCreate_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuArrayCreate_params = cuArrayCreate_params_st;
#[repr(C)]
pub struct cuArrayGetDescriptor_params_st {
    pub pArrayDescriptor: *mut CUDA_ARRAY_DESCRIPTOR_v1,
    pub hArray: CUarray,
}
#[test]
fn bindgen_test_layout_cuArrayGetDescriptor_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuArrayGetDescriptor_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuArrayGetDescriptor_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuArrayGetDescriptor_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuArrayGetDescriptor_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuArrayGetDescriptor_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pArrayDescriptor) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuArrayGetDescriptor_params_st),
            "::",
            stringify!(pArrayDescriptor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hArray) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuArrayGetDescriptor_params_st),
            "::",
            stringify!(hArray)
        )
    );
}
impl Default for cuArrayGetDescriptor_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuArrayGetDescriptor_params = cuArrayGetDescriptor_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuArray3DCreate_params_st {
    pub pHandle: *mut CUarray,
    pub pAllocateArray: *const CUDA_ARRAY3D_DESCRIPTOR_v1,
}
#[test]
fn bindgen_test_layout_cuArray3DCreate_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuArray3DCreate_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuArray3DCreate_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuArray3DCreate_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuArray3DCreate_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuArray3DCreate_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pHandle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuArray3DCreate_params_st),
            "::",
            stringify!(pHandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pAllocateArray) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuArray3DCreate_params_st),
            "::",
            stringify!(pAllocateArray)
        )
    );
}
impl Default for cuArray3DCreate_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuArray3DCreate_params = cuArray3DCreate_params_st;
#[repr(C)]
pub struct cuArray3DGetDescriptor_params_st {
    pub pArrayDescriptor: *mut CUDA_ARRAY3D_DESCRIPTOR_v1,
    pub hArray: CUarray,
}
#[test]
fn bindgen_test_layout_cuArray3DGetDescriptor_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuArray3DGetDescriptor_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuArray3DGetDescriptor_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuArray3DGetDescriptor_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuArray3DGetDescriptor_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuArray3DGetDescriptor_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pArrayDescriptor) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuArray3DGetDescriptor_params_st),
            "::",
            stringify!(pArrayDescriptor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hArray) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuArray3DGetDescriptor_params_st),
            "::",
            stringify!(hArray)
        )
    );
}
impl Default for cuArray3DGetDescriptor_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuArray3DGetDescriptor_params = cuArray3DGetDescriptor_params_st;
#[repr(C)]
pub struct cuTexRefSetAddress_params_st {
    pub ByteOffset: *mut ::std::os::raw::c_uint,
    pub hTexRef: CUtexref,
    pub dptr: CUdeviceptr_v1,
    pub bytes: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuTexRefSetAddress_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuTexRefSetAddress_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuTexRefSetAddress_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuTexRefSetAddress_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuTexRefSetAddress_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuTexRefSetAddress_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ByteOffset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefSetAddress_params_st),
            "::",
            stringify!(ByteOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hTexRef) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefSetAddress_params_st),
            "::",
            stringify!(hTexRef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dptr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefSetAddress_params_st),
            "::",
            stringify!(dptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytes) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefSetAddress_params_st),
            "::",
            stringify!(bytes)
        )
    );
}
impl Default for cuTexRefSetAddress_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuTexRefSetAddress_params = cuTexRefSetAddress_params_st;
#[repr(C)]
pub struct cuTexRefSetAddress2D_params_st {
    pub hTexRef: CUtexref,
    pub desc: *const CUDA_ARRAY_DESCRIPTOR_v1,
    pub dptr: CUdeviceptr_v1,
    pub Pitch: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuTexRefSetAddress2D_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuTexRefSetAddress2D_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuTexRefSetAddress2D_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuTexRefSetAddress2D_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuTexRefSetAddress2D_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuTexRefSetAddress2D_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hTexRef) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefSetAddress2D_params_st),
            "::",
            stringify!(hTexRef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).desc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefSetAddress2D_params_st),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dptr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefSetAddress2D_params_st),
            "::",
            stringify!(dptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Pitch) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefSetAddress2D_params_st),
            "::",
            stringify!(Pitch)
        )
    );
}
impl Default for cuTexRefSetAddress2D_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuTexRefSetAddress2D_params = cuTexRefSetAddress2D_params_st;
#[repr(C)]
pub struct cuTexRefGetAddress_params_st {
    pub pdptr: *mut CUdeviceptr_v1,
    pub hTexRef: CUtexref,
}
#[test]
fn bindgen_test_layout_cuTexRefGetAddress_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuTexRefGetAddress_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuTexRefGetAddress_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuTexRefGetAddress_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuTexRefGetAddress_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuTexRefGetAddress_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefGetAddress_params_st),
            "::",
            stringify!(pdptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hTexRef) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuTexRefGetAddress_params_st),
            "::",
            stringify!(hTexRef)
        )
    );
}
impl Default for cuTexRefGetAddress_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuTexRefGetAddress_params = cuTexRefGetAddress_params_st;
#[repr(C)]
pub struct cuGraphicsResourceGetMappedPointer_params_st {
    pub pDevPtr: *mut CUdeviceptr_v1,
    pub pSize: *mut ::std::os::raw::c_uint,
    pub resource: CUgraphicsResource,
}
#[test]
fn bindgen_test_layout_cuGraphicsResourceGetMappedPointer_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphicsResourceGetMappedPointer_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphicsResourceGetMappedPointer_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cuGraphicsResourceGetMappedPointer_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphicsResourceGetMappedPointer_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuGraphicsResourceGetMappedPointer_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDevPtr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphicsResourceGetMappedPointer_params_st),
            "::",
            stringify!(pDevPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pSize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphicsResourceGetMappedPointer_params_st),
            "::",
            stringify!(pSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resource) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphicsResourceGetMappedPointer_params_st),
            "::",
            stringify!(resource)
        )
    );
}
impl Default for cuGraphicsResourceGetMappedPointer_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphicsResourceGetMappedPointer_params = cuGraphicsResourceGetMappedPointer_params_st;
#[repr(C)]
pub struct cuCtxDestroy_params_st {
    pub ctx: CUcontext,
}
#[test]
fn bindgen_test_layout_cuCtxDestroy_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuCtxDestroy_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuCtxDestroy_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cuCtxDestroy_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuCtxDestroy_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuCtxDestroy_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuCtxDestroy_params_st),
            "::",
            stringify!(ctx)
        )
    );
}
impl Default for cuCtxDestroy_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuCtxDestroy_params = cuCtxDestroy_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuCtxPopCurrent_params_st {
    pub pctx: *mut CUcontext,
}
#[test]
fn bindgen_test_layout_cuCtxPopCurrent_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuCtxPopCurrent_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuCtxPopCurrent_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cuCtxPopCurrent_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuCtxPopCurrent_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuCtxPopCurrent_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pctx) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuCtxPopCurrent_params_st),
            "::",
            stringify!(pctx)
        )
    );
}
impl Default for cuCtxPopCurrent_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuCtxPopCurrent_params = cuCtxPopCurrent_params_st;
#[repr(C)]
pub struct cuCtxPushCurrent_params_st {
    pub ctx: CUcontext,
}
#[test]
fn bindgen_test_layout_cuCtxPushCurrent_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuCtxPushCurrent_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuCtxPushCurrent_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cuCtxPushCurrent_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuCtxPushCurrent_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuCtxPushCurrent_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuCtxPushCurrent_params_st),
            "::",
            stringify!(ctx)
        )
    );
}
impl Default for cuCtxPushCurrent_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuCtxPushCurrent_params = cuCtxPushCurrent_params_st;
#[repr(C)]
pub struct cuStreamDestroy_params_st {
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuStreamDestroy_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuStreamDestroy_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuStreamDestroy_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cuStreamDestroy_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuStreamDestroy_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuStreamDestroy_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamDestroy_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuStreamDestroy_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuStreamDestroy_params = cuStreamDestroy_params_st;
#[repr(C)]
pub struct cuEventDestroy_params_st {
    pub hEvent: CUevent,
}
#[test]
fn bindgen_test_layout_cuEventDestroy_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuEventDestroy_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuEventDestroy_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cuEventDestroy_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuEventDestroy_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuEventDestroy_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hEvent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuEventDestroy_params_st),
            "::",
            stringify!(hEvent)
        )
    );
}
impl Default for cuEventDestroy_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuEventDestroy_params = cuEventDestroy_params_st;
#[repr(C)]
pub struct cuDevicePrimaryCtxRelease_params_st {
    pub dev: CUdevice,
}
#[test]
fn bindgen_test_layout_cuDevicePrimaryCtxRelease_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuDevicePrimaryCtxRelease_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuDevicePrimaryCtxRelease_params_st>(),
        4usize,
        concat!("Size of: ", stringify!(cuDevicePrimaryCtxRelease_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuDevicePrimaryCtxRelease_params_st>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(cuDevicePrimaryCtxRelease_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDevicePrimaryCtxRelease_params_st),
            "::",
            stringify!(dev)
        )
    );
}
impl Default for cuDevicePrimaryCtxRelease_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuDevicePrimaryCtxRelease_params = cuDevicePrimaryCtxRelease_params_st;
#[repr(C)]
pub struct cuDevicePrimaryCtxReset_params_st {
    pub dev: CUdevice,
}
#[test]
fn bindgen_test_layout_cuDevicePrimaryCtxReset_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuDevicePrimaryCtxReset_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuDevicePrimaryCtxReset_params_st>(),
        4usize,
        concat!("Size of: ", stringify!(cuDevicePrimaryCtxReset_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuDevicePrimaryCtxReset_params_st>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(cuDevicePrimaryCtxReset_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDevicePrimaryCtxReset_params_st),
            "::",
            stringify!(dev)
        )
    );
}
impl Default for cuDevicePrimaryCtxReset_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuDevicePrimaryCtxReset_params = cuDevicePrimaryCtxReset_params_st;
#[repr(C)]
pub struct cuDevicePrimaryCtxSetFlags_params_st {
    pub dev: CUdevice,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuDevicePrimaryCtxSetFlags_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuDevicePrimaryCtxSetFlags_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuDevicePrimaryCtxSetFlags_params_st>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(cuDevicePrimaryCtxSetFlags_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuDevicePrimaryCtxSetFlags_params_st>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(cuDevicePrimaryCtxSetFlags_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDevicePrimaryCtxSetFlags_params_st),
            "::",
            stringify!(dev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cuDevicePrimaryCtxSetFlags_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cuDevicePrimaryCtxSetFlags_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuDevicePrimaryCtxSetFlags_params = cuDevicePrimaryCtxSetFlags_params_st;
#[repr(C)]
pub struct cuMemcpyHtoD_v2_params_st {
    pub dstDevice: CUdeviceptr,
    pub srcHost: *const ::std::os::raw::c_void,
    pub ByteCount: usize,
}
#[test]
fn bindgen_test_layout_cuMemcpyHtoD_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemcpyHtoD_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemcpyHtoD_v2_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuMemcpyHtoD_v2_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemcpyHtoD_v2_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemcpyHtoD_v2_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyHtoD_v2_params_st),
            "::",
            stringify!(dstDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcHost) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyHtoD_v2_params_st),
            "::",
            stringify!(srcHost)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ByteCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyHtoD_v2_params_st),
            "::",
            stringify!(ByteCount)
        )
    );
}
impl Default for cuMemcpyHtoD_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemcpyHtoD_v2_params = cuMemcpyHtoD_v2_params_st;
#[repr(C)]
pub struct cuMemcpyDtoH_v2_params_st {
    pub dstHost: *mut ::std::os::raw::c_void,
    pub srcDevice: CUdeviceptr,
    pub ByteCount: usize,
}
#[test]
fn bindgen_test_layout_cuMemcpyDtoH_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemcpyDtoH_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemcpyDtoH_v2_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuMemcpyDtoH_v2_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemcpyDtoH_v2_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemcpyDtoH_v2_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstHost) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyDtoH_v2_params_st),
            "::",
            stringify!(dstHost)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcDevice) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyDtoH_v2_params_st),
            "::",
            stringify!(srcDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ByteCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyDtoH_v2_params_st),
            "::",
            stringify!(ByteCount)
        )
    );
}
impl Default for cuMemcpyDtoH_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemcpyDtoH_v2_params = cuMemcpyDtoH_v2_params_st;
#[repr(C)]
pub struct cuMemcpyDtoD_v2_params_st {
    pub dstDevice: CUdeviceptr,
    pub srcDevice: CUdeviceptr,
    pub ByteCount: usize,
}
#[test]
fn bindgen_test_layout_cuMemcpyDtoD_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemcpyDtoD_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemcpyDtoD_v2_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuMemcpyDtoD_v2_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemcpyDtoD_v2_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemcpyDtoD_v2_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyDtoD_v2_params_st),
            "::",
            stringify!(dstDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcDevice) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyDtoD_v2_params_st),
            "::",
            stringify!(srcDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ByteCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyDtoD_v2_params_st),
            "::",
            stringify!(ByteCount)
        )
    );
}
impl Default for cuMemcpyDtoD_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemcpyDtoD_v2_params = cuMemcpyDtoD_v2_params_st;
#[repr(C)]
pub struct cuMemcpyDtoA_v2_params_st {
    pub dstArray: CUarray,
    pub dstOffset: usize,
    pub srcDevice: CUdeviceptr,
    pub ByteCount: usize,
}
#[test]
fn bindgen_test_layout_cuMemcpyDtoA_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemcpyDtoA_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemcpyDtoA_v2_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuMemcpyDtoA_v2_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemcpyDtoA_v2_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemcpyDtoA_v2_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstArray) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyDtoA_v2_params_st),
            "::",
            stringify!(dstArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstOffset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyDtoA_v2_params_st),
            "::",
            stringify!(dstOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcDevice) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyDtoA_v2_params_st),
            "::",
            stringify!(srcDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ByteCount) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyDtoA_v2_params_st),
            "::",
            stringify!(ByteCount)
        )
    );
}
impl Default for cuMemcpyDtoA_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemcpyDtoA_v2_params = cuMemcpyDtoA_v2_params_st;
#[repr(C)]
pub struct cuMemcpyAtoD_v2_params_st {
    pub dstDevice: CUdeviceptr,
    pub srcArray: CUarray,
    pub srcOffset: usize,
    pub ByteCount: usize,
}
#[test]
fn bindgen_test_layout_cuMemcpyAtoD_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemcpyAtoD_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemcpyAtoD_v2_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuMemcpyAtoD_v2_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemcpyAtoD_v2_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemcpyAtoD_v2_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyAtoD_v2_params_st),
            "::",
            stringify!(dstDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcArray) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyAtoD_v2_params_st),
            "::",
            stringify!(srcArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcOffset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyAtoD_v2_params_st),
            "::",
            stringify!(srcOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ByteCount) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyAtoD_v2_params_st),
            "::",
            stringify!(ByteCount)
        )
    );
}
impl Default for cuMemcpyAtoD_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemcpyAtoD_v2_params = cuMemcpyAtoD_v2_params_st;
#[repr(C)]
pub struct cuMemcpyHtoA_v2_params_st {
    pub dstArray: CUarray,
    pub dstOffset: usize,
    pub srcHost: *const ::std::os::raw::c_void,
    pub ByteCount: usize,
}
#[test]
fn bindgen_test_layout_cuMemcpyHtoA_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemcpyHtoA_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemcpyHtoA_v2_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuMemcpyHtoA_v2_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemcpyHtoA_v2_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemcpyHtoA_v2_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstArray) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyHtoA_v2_params_st),
            "::",
            stringify!(dstArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstOffset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyHtoA_v2_params_st),
            "::",
            stringify!(dstOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcHost) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyHtoA_v2_params_st),
            "::",
            stringify!(srcHost)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ByteCount) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyHtoA_v2_params_st),
            "::",
            stringify!(ByteCount)
        )
    );
}
impl Default for cuMemcpyHtoA_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemcpyHtoA_v2_params = cuMemcpyHtoA_v2_params_st;
#[repr(C)]
pub struct cuMemcpyAtoH_v2_params_st {
    pub dstHost: *mut ::std::os::raw::c_void,
    pub srcArray: CUarray,
    pub srcOffset: usize,
    pub ByteCount: usize,
}
#[test]
fn bindgen_test_layout_cuMemcpyAtoH_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemcpyAtoH_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemcpyAtoH_v2_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuMemcpyAtoH_v2_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemcpyAtoH_v2_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemcpyAtoH_v2_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstHost) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyAtoH_v2_params_st),
            "::",
            stringify!(dstHost)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcArray) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyAtoH_v2_params_st),
            "::",
            stringify!(srcArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcOffset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyAtoH_v2_params_st),
            "::",
            stringify!(srcOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ByteCount) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyAtoH_v2_params_st),
            "::",
            stringify!(ByteCount)
        )
    );
}
impl Default for cuMemcpyAtoH_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemcpyAtoH_v2_params = cuMemcpyAtoH_v2_params_st;
#[repr(C)]
pub struct cuMemcpyAtoA_v2_params_st {
    pub dstArray: CUarray,
    pub dstOffset: usize,
    pub srcArray: CUarray,
    pub srcOffset: usize,
    pub ByteCount: usize,
}
#[test]
fn bindgen_test_layout_cuMemcpyAtoA_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemcpyAtoA_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemcpyAtoA_v2_params_st>(),
        40usize,
        concat!("Size of: ", stringify!(cuMemcpyAtoA_v2_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemcpyAtoA_v2_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemcpyAtoA_v2_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstArray) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyAtoA_v2_params_st),
            "::",
            stringify!(dstArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstOffset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyAtoA_v2_params_st),
            "::",
            stringify!(dstOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcArray) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyAtoA_v2_params_st),
            "::",
            stringify!(srcArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcOffset) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyAtoA_v2_params_st),
            "::",
            stringify!(srcOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ByteCount) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyAtoA_v2_params_st),
            "::",
            stringify!(ByteCount)
        )
    );
}
impl Default for cuMemcpyAtoA_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemcpyAtoA_v2_params = cuMemcpyAtoA_v2_params_st;
#[repr(C)]
pub struct cuMemcpyHtoAAsync_v2_params_st {
    pub dstArray: CUarray,
    pub dstOffset: usize,
    pub srcHost: *const ::std::os::raw::c_void,
    pub ByteCount: usize,
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuMemcpyHtoAAsync_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemcpyHtoAAsync_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemcpyHtoAAsync_v2_params_st>(),
        40usize,
        concat!("Size of: ", stringify!(cuMemcpyHtoAAsync_v2_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemcpyHtoAAsync_v2_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemcpyHtoAAsync_v2_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstArray) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyHtoAAsync_v2_params_st),
            "::",
            stringify!(dstArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstOffset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyHtoAAsync_v2_params_st),
            "::",
            stringify!(dstOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcHost) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyHtoAAsync_v2_params_st),
            "::",
            stringify!(srcHost)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ByteCount) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyHtoAAsync_v2_params_st),
            "::",
            stringify!(ByteCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyHtoAAsync_v2_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuMemcpyHtoAAsync_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemcpyHtoAAsync_v2_params = cuMemcpyHtoAAsync_v2_params_st;
#[repr(C)]
pub struct cuMemcpyAtoHAsync_v2_params_st {
    pub dstHost: *mut ::std::os::raw::c_void,
    pub srcArray: CUarray,
    pub srcOffset: usize,
    pub ByteCount: usize,
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuMemcpyAtoHAsync_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemcpyAtoHAsync_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemcpyAtoHAsync_v2_params_st>(),
        40usize,
        concat!("Size of: ", stringify!(cuMemcpyAtoHAsync_v2_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemcpyAtoHAsync_v2_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemcpyAtoHAsync_v2_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstHost) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyAtoHAsync_v2_params_st),
            "::",
            stringify!(dstHost)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcArray) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyAtoHAsync_v2_params_st),
            "::",
            stringify!(srcArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcOffset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyAtoHAsync_v2_params_st),
            "::",
            stringify!(srcOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ByteCount) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyAtoHAsync_v2_params_st),
            "::",
            stringify!(ByteCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyAtoHAsync_v2_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuMemcpyAtoHAsync_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemcpyAtoHAsync_v2_params = cuMemcpyAtoHAsync_v2_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuMemcpy2D_v2_params_st {
    pub pCopy: *const CUDA_MEMCPY2D,
}
#[test]
fn bindgen_test_layout_cuMemcpy2D_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemcpy2D_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemcpy2D_v2_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cuMemcpy2D_v2_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemcpy2D_v2_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemcpy2D_v2_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCopy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpy2D_v2_params_st),
            "::",
            stringify!(pCopy)
        )
    );
}
impl Default for cuMemcpy2D_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemcpy2D_v2_params = cuMemcpy2D_v2_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuMemcpy2DUnaligned_v2_params_st {
    pub pCopy: *const CUDA_MEMCPY2D,
}
#[test]
fn bindgen_test_layout_cuMemcpy2DUnaligned_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemcpy2DUnaligned_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemcpy2DUnaligned_v2_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cuMemcpy2DUnaligned_v2_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemcpy2DUnaligned_v2_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuMemcpy2DUnaligned_v2_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCopy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpy2DUnaligned_v2_params_st),
            "::",
            stringify!(pCopy)
        )
    );
}
impl Default for cuMemcpy2DUnaligned_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemcpy2DUnaligned_v2_params = cuMemcpy2DUnaligned_v2_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuMemcpy3D_v2_params_st {
    pub pCopy: *const CUDA_MEMCPY3D,
}
#[test]
fn bindgen_test_layout_cuMemcpy3D_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemcpy3D_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemcpy3D_v2_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cuMemcpy3D_v2_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemcpy3D_v2_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemcpy3D_v2_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCopy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpy3D_v2_params_st),
            "::",
            stringify!(pCopy)
        )
    );
}
impl Default for cuMemcpy3D_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemcpy3D_v2_params = cuMemcpy3D_v2_params_st;
#[repr(C)]
pub struct cuMemcpyHtoDAsync_v2_params_st {
    pub dstDevice: CUdeviceptr,
    pub srcHost: *const ::std::os::raw::c_void,
    pub ByteCount: usize,
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuMemcpyHtoDAsync_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemcpyHtoDAsync_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemcpyHtoDAsync_v2_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuMemcpyHtoDAsync_v2_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemcpyHtoDAsync_v2_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemcpyHtoDAsync_v2_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyHtoDAsync_v2_params_st),
            "::",
            stringify!(dstDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcHost) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyHtoDAsync_v2_params_st),
            "::",
            stringify!(srcHost)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ByteCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyHtoDAsync_v2_params_st),
            "::",
            stringify!(ByteCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyHtoDAsync_v2_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuMemcpyHtoDAsync_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemcpyHtoDAsync_v2_params = cuMemcpyHtoDAsync_v2_params_st;
#[repr(C)]
pub struct cuMemcpyDtoHAsync_v2_params_st {
    pub dstHost: *mut ::std::os::raw::c_void,
    pub srcDevice: CUdeviceptr,
    pub ByteCount: usize,
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuMemcpyDtoHAsync_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemcpyDtoHAsync_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemcpyDtoHAsync_v2_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuMemcpyDtoHAsync_v2_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemcpyDtoHAsync_v2_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemcpyDtoHAsync_v2_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstHost) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyDtoHAsync_v2_params_st),
            "::",
            stringify!(dstHost)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcDevice) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyDtoHAsync_v2_params_st),
            "::",
            stringify!(srcDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ByteCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyDtoHAsync_v2_params_st),
            "::",
            stringify!(ByteCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyDtoHAsync_v2_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuMemcpyDtoHAsync_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemcpyDtoHAsync_v2_params = cuMemcpyDtoHAsync_v2_params_st;
#[repr(C)]
pub struct cuMemcpyDtoDAsync_v2_params_st {
    pub dstDevice: CUdeviceptr,
    pub srcDevice: CUdeviceptr,
    pub ByteCount: usize,
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuMemcpyDtoDAsync_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemcpyDtoDAsync_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemcpyDtoDAsync_v2_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuMemcpyDtoDAsync_v2_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemcpyDtoDAsync_v2_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemcpyDtoDAsync_v2_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyDtoDAsync_v2_params_st),
            "::",
            stringify!(dstDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcDevice) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyDtoDAsync_v2_params_st),
            "::",
            stringify!(srcDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ByteCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyDtoDAsync_v2_params_st),
            "::",
            stringify!(ByteCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyDtoDAsync_v2_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuMemcpyDtoDAsync_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemcpyDtoDAsync_v2_params = cuMemcpyDtoDAsync_v2_params_st;
#[repr(C)]
pub struct cuMemcpy2DAsync_v2_params_st {
    pub pCopy: *const CUDA_MEMCPY2D,
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuMemcpy2DAsync_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemcpy2DAsync_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemcpy2DAsync_v2_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuMemcpy2DAsync_v2_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemcpy2DAsync_v2_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemcpy2DAsync_v2_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCopy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpy2DAsync_v2_params_st),
            "::",
            stringify!(pCopy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpy2DAsync_v2_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuMemcpy2DAsync_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemcpy2DAsync_v2_params = cuMemcpy2DAsync_v2_params_st;
#[repr(C)]
pub struct cuMemcpy3DAsync_v2_params_st {
    pub pCopy: *const CUDA_MEMCPY3D,
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuMemcpy3DAsync_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemcpy3DAsync_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemcpy3DAsync_v2_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuMemcpy3DAsync_v2_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemcpy3DAsync_v2_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemcpy3DAsync_v2_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCopy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpy3DAsync_v2_params_st),
            "::",
            stringify!(pCopy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpy3DAsync_v2_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuMemcpy3DAsync_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemcpy3DAsync_v2_params = cuMemcpy3DAsync_v2_params_st;
#[repr(C)]
pub struct cuMemsetD8_v2_params_st {
    pub dstDevice: CUdeviceptr,
    pub uc: ::std::os::raw::c_uchar,
    pub N: usize,
}
#[test]
fn bindgen_test_layout_cuMemsetD8_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemsetD8_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemsetD8_v2_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuMemsetD8_v2_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemsetD8_v2_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemsetD8_v2_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD8_v2_params_st),
            "::",
            stringify!(dstDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD8_v2_params_st),
            "::",
            stringify!(uc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).N) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD8_v2_params_st),
            "::",
            stringify!(N)
        )
    );
}
impl Default for cuMemsetD8_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemsetD8_v2_params = cuMemsetD8_v2_params_st;
#[repr(C)]
pub struct cuMemsetD16_v2_params_st {
    pub dstDevice: CUdeviceptr,
    pub us: ::std::os::raw::c_ushort,
    pub N: usize,
}
#[test]
fn bindgen_test_layout_cuMemsetD16_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemsetD16_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemsetD16_v2_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuMemsetD16_v2_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemsetD16_v2_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemsetD16_v2_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD16_v2_params_st),
            "::",
            stringify!(dstDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).us) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD16_v2_params_st),
            "::",
            stringify!(us)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).N) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD16_v2_params_st),
            "::",
            stringify!(N)
        )
    );
}
impl Default for cuMemsetD16_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemsetD16_v2_params = cuMemsetD16_v2_params_st;
#[repr(C)]
pub struct cuMemsetD32_v2_params_st {
    pub dstDevice: CUdeviceptr,
    pub ui: ::std::os::raw::c_uint,
    pub N: usize,
}
#[test]
fn bindgen_test_layout_cuMemsetD32_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemsetD32_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemsetD32_v2_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuMemsetD32_v2_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemsetD32_v2_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemsetD32_v2_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD32_v2_params_st),
            "::",
            stringify!(dstDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ui) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD32_v2_params_st),
            "::",
            stringify!(ui)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).N) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD32_v2_params_st),
            "::",
            stringify!(N)
        )
    );
}
impl Default for cuMemsetD32_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemsetD32_v2_params = cuMemsetD32_v2_params_st;
#[repr(C)]
pub struct cuMemsetD2D8_v2_params_st {
    pub dstDevice: CUdeviceptr,
    pub dstPitch: usize,
    pub uc: ::std::os::raw::c_uchar,
    pub Width: usize,
    pub Height: usize,
}
#[test]
fn bindgen_test_layout_cuMemsetD2D8_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemsetD2D8_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemsetD2D8_v2_params_st>(),
        40usize,
        concat!("Size of: ", stringify!(cuMemsetD2D8_v2_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemsetD2D8_v2_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemsetD2D8_v2_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D8_v2_params_st),
            "::",
            stringify!(dstDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstPitch) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D8_v2_params_st),
            "::",
            stringify!(dstPitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uc) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D8_v2_params_st),
            "::",
            stringify!(uc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Width) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D8_v2_params_st),
            "::",
            stringify!(Width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Height) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D8_v2_params_st),
            "::",
            stringify!(Height)
        )
    );
}
impl Default for cuMemsetD2D8_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemsetD2D8_v2_params = cuMemsetD2D8_v2_params_st;
#[repr(C)]
pub struct cuMemsetD2D16_v2_params_st {
    pub dstDevice: CUdeviceptr,
    pub dstPitch: usize,
    pub us: ::std::os::raw::c_ushort,
    pub Width: usize,
    pub Height: usize,
}
#[test]
fn bindgen_test_layout_cuMemsetD2D16_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemsetD2D16_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemsetD2D16_v2_params_st>(),
        40usize,
        concat!("Size of: ", stringify!(cuMemsetD2D16_v2_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemsetD2D16_v2_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemsetD2D16_v2_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D16_v2_params_st),
            "::",
            stringify!(dstDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstPitch) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D16_v2_params_st),
            "::",
            stringify!(dstPitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).us) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D16_v2_params_st),
            "::",
            stringify!(us)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Width) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D16_v2_params_st),
            "::",
            stringify!(Width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Height) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D16_v2_params_st),
            "::",
            stringify!(Height)
        )
    );
}
impl Default for cuMemsetD2D16_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemsetD2D16_v2_params = cuMemsetD2D16_v2_params_st;
#[repr(C)]
pub struct cuMemsetD2D32_v2_params_st {
    pub dstDevice: CUdeviceptr,
    pub dstPitch: usize,
    pub ui: ::std::os::raw::c_uint,
    pub Width: usize,
    pub Height: usize,
}
#[test]
fn bindgen_test_layout_cuMemsetD2D32_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemsetD2D32_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemsetD2D32_v2_params_st>(),
        40usize,
        concat!("Size of: ", stringify!(cuMemsetD2D32_v2_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemsetD2D32_v2_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemsetD2D32_v2_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D32_v2_params_st),
            "::",
            stringify!(dstDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstPitch) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D32_v2_params_st),
            "::",
            stringify!(dstPitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ui) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D32_v2_params_st),
            "::",
            stringify!(ui)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Width) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D32_v2_params_st),
            "::",
            stringify!(Width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Height) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D32_v2_params_st),
            "::",
            stringify!(Height)
        )
    );
}
impl Default for cuMemsetD2D32_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemsetD2D32_v2_params = cuMemsetD2D32_v2_params_st;
#[repr(C)]
pub struct cuMemcpy_params_st {
    pub dst: CUdeviceptr,
    pub src: CUdeviceptr,
    pub ByteCount: usize,
}
#[test]
fn bindgen_test_layout_cuMemcpy_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemcpy_params_st> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemcpy_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuMemcpy_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemcpy_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemcpy_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpy_params_st),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpy_params_st),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ByteCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpy_params_st),
            "::",
            stringify!(ByteCount)
        )
    );
}
impl Default for cuMemcpy_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemcpy_params = cuMemcpy_params_st;
#[repr(C)]
pub struct cuMemcpyAsync_params_st {
    pub dst: CUdeviceptr,
    pub src: CUdeviceptr,
    pub ByteCount: usize,
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuMemcpyAsync_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemcpyAsync_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemcpyAsync_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuMemcpyAsync_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemcpyAsync_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemcpyAsync_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyAsync_params_st),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyAsync_params_st),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ByteCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyAsync_params_st),
            "::",
            stringify!(ByteCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyAsync_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuMemcpyAsync_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemcpyAsync_params = cuMemcpyAsync_params_st;
#[repr(C)]
pub struct cuMemcpyPeer_params_st {
    pub dstDevice: CUdeviceptr,
    pub dstContext: CUcontext,
    pub srcDevice: CUdeviceptr,
    pub srcContext: CUcontext,
    pub ByteCount: usize,
}
#[test]
fn bindgen_test_layout_cuMemcpyPeer_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemcpyPeer_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemcpyPeer_params_st>(),
        40usize,
        concat!("Size of: ", stringify!(cuMemcpyPeer_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemcpyPeer_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemcpyPeer_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyPeer_params_st),
            "::",
            stringify!(dstDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstContext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyPeer_params_st),
            "::",
            stringify!(dstContext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcDevice) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyPeer_params_st),
            "::",
            stringify!(srcDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcContext) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyPeer_params_st),
            "::",
            stringify!(srcContext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ByteCount) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyPeer_params_st),
            "::",
            stringify!(ByteCount)
        )
    );
}
impl Default for cuMemcpyPeer_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemcpyPeer_params = cuMemcpyPeer_params_st;
#[repr(C)]
pub struct cuMemcpyPeerAsync_params_st {
    pub dstDevice: CUdeviceptr,
    pub dstContext: CUcontext,
    pub srcDevice: CUdeviceptr,
    pub srcContext: CUcontext,
    pub ByteCount: usize,
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuMemcpyPeerAsync_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemcpyPeerAsync_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemcpyPeerAsync_params_st>(),
        48usize,
        concat!("Size of: ", stringify!(cuMemcpyPeerAsync_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemcpyPeerAsync_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemcpyPeerAsync_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyPeerAsync_params_st),
            "::",
            stringify!(dstDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstContext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyPeerAsync_params_st),
            "::",
            stringify!(dstContext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcDevice) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyPeerAsync_params_st),
            "::",
            stringify!(srcDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcContext) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyPeerAsync_params_st),
            "::",
            stringify!(srcContext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ByteCount) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyPeerAsync_params_st),
            "::",
            stringify!(ByteCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpyPeerAsync_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuMemcpyPeerAsync_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemcpyPeerAsync_params = cuMemcpyPeerAsync_params_st;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct cuMemcpy3DPeer_params_st {
    pub pCopy: *const CUDA_MEMCPY3D_PEER,
}
#[test]
fn bindgen_test_layout_cuMemcpy3DPeer_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemcpy3DPeer_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemcpy3DPeer_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cuMemcpy3DPeer_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemcpy3DPeer_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemcpy3DPeer_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCopy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpy3DPeer_params_st),
            "::",
            stringify!(pCopy)
        )
    );
}
impl Default for cuMemcpy3DPeer_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemcpy3DPeer_params = cuMemcpy3DPeer_params_st;
#[repr(C)]
pub struct cuMemcpy3DPeerAsync_params_st {
    pub pCopy: *const CUDA_MEMCPY3D_PEER,
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuMemcpy3DPeerAsync_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemcpy3DPeerAsync_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemcpy3DPeerAsync_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuMemcpy3DPeerAsync_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemcpy3DPeerAsync_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemcpy3DPeerAsync_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCopy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpy3DPeerAsync_params_st),
            "::",
            stringify!(pCopy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemcpy3DPeerAsync_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuMemcpy3DPeerAsync_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemcpy3DPeerAsync_params = cuMemcpy3DPeerAsync_params_st;
#[repr(C)]
pub struct cuMemsetD8Async_params_st {
    pub dstDevice: CUdeviceptr,
    pub uc: ::std::os::raw::c_uchar,
    pub N: usize,
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuMemsetD8Async_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemsetD8Async_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemsetD8Async_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuMemsetD8Async_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemsetD8Async_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemsetD8Async_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD8Async_params_st),
            "::",
            stringify!(dstDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD8Async_params_st),
            "::",
            stringify!(uc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).N) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD8Async_params_st),
            "::",
            stringify!(N)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD8Async_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuMemsetD8Async_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemsetD8Async_params = cuMemsetD8Async_params_st;
#[repr(C)]
pub struct cuMemsetD16Async_params_st {
    pub dstDevice: CUdeviceptr,
    pub us: ::std::os::raw::c_ushort,
    pub N: usize,
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuMemsetD16Async_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemsetD16Async_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemsetD16Async_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuMemsetD16Async_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemsetD16Async_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemsetD16Async_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD16Async_params_st),
            "::",
            stringify!(dstDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).us) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD16Async_params_st),
            "::",
            stringify!(us)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).N) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD16Async_params_st),
            "::",
            stringify!(N)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD16Async_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuMemsetD16Async_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemsetD16Async_params = cuMemsetD16Async_params_st;
#[repr(C)]
pub struct cuMemsetD32Async_params_st {
    pub dstDevice: CUdeviceptr,
    pub ui: ::std::os::raw::c_uint,
    pub N: usize,
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuMemsetD32Async_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemsetD32Async_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemsetD32Async_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuMemsetD32Async_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemsetD32Async_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemsetD32Async_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD32Async_params_st),
            "::",
            stringify!(dstDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ui) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD32Async_params_st),
            "::",
            stringify!(ui)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).N) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD32Async_params_st),
            "::",
            stringify!(N)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD32Async_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuMemsetD32Async_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemsetD32Async_params = cuMemsetD32Async_params_st;
#[repr(C)]
pub struct cuMemsetD2D8Async_params_st {
    pub dstDevice: CUdeviceptr,
    pub dstPitch: usize,
    pub uc: ::std::os::raw::c_uchar,
    pub Width: usize,
    pub Height: usize,
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuMemsetD2D8Async_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemsetD2D8Async_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemsetD2D8Async_params_st>(),
        48usize,
        concat!("Size of: ", stringify!(cuMemsetD2D8Async_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemsetD2D8Async_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemsetD2D8Async_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D8Async_params_st),
            "::",
            stringify!(dstDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstPitch) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D8Async_params_st),
            "::",
            stringify!(dstPitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uc) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D8Async_params_st),
            "::",
            stringify!(uc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Width) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D8Async_params_st),
            "::",
            stringify!(Width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Height) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D8Async_params_st),
            "::",
            stringify!(Height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D8Async_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuMemsetD2D8Async_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemsetD2D8Async_params = cuMemsetD2D8Async_params_st;
#[repr(C)]
pub struct cuMemsetD2D16Async_params_st {
    pub dstDevice: CUdeviceptr,
    pub dstPitch: usize,
    pub us: ::std::os::raw::c_ushort,
    pub Width: usize,
    pub Height: usize,
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuMemsetD2D16Async_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemsetD2D16Async_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemsetD2D16Async_params_st>(),
        48usize,
        concat!("Size of: ", stringify!(cuMemsetD2D16Async_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemsetD2D16Async_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemsetD2D16Async_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D16Async_params_st),
            "::",
            stringify!(dstDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstPitch) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D16Async_params_st),
            "::",
            stringify!(dstPitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).us) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D16Async_params_st),
            "::",
            stringify!(us)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Width) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D16Async_params_st),
            "::",
            stringify!(Width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Height) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D16Async_params_st),
            "::",
            stringify!(Height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D16Async_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuMemsetD2D16Async_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemsetD2D16Async_params = cuMemsetD2D16Async_params_st;
#[repr(C)]
pub struct cuMemsetD2D32Async_params_st {
    pub dstDevice: CUdeviceptr,
    pub dstPitch: usize,
    pub ui: ::std::os::raw::c_uint,
    pub Width: usize,
    pub Height: usize,
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuMemsetD2D32Async_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemsetD2D32Async_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemsetD2D32Async_params_st>(),
        48usize,
        concat!("Size of: ", stringify!(cuMemsetD2D32Async_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemsetD2D32Async_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemsetD2D32Async_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D32Async_params_st),
            "::",
            stringify!(dstDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstPitch) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D32Async_params_st),
            "::",
            stringify!(dstPitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ui) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D32Async_params_st),
            "::",
            stringify!(ui)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Width) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D32Async_params_st),
            "::",
            stringify!(Width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Height) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D32Async_params_st),
            "::",
            stringify!(Height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemsetD2D32Async_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuMemsetD2D32Async_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemsetD2D32Async_params = cuMemsetD2D32Async_params_st;
#[repr(C)]
pub struct cuStreamGetPriority_params_st {
    pub hStream: CUstream,
    pub priority: *mut ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cuStreamGetPriority_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuStreamGetPriority_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuStreamGetPriority_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuStreamGetPriority_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuStreamGetPriority_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuStreamGetPriority_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamGetPriority_params_st),
            "::",
            stringify!(hStream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priority) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamGetPriority_params_st),
            "::",
            stringify!(priority)
        )
    );
}
impl Default for cuStreamGetPriority_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuStreamGetPriority_params = cuStreamGetPriority_params_st;
#[repr(C)]
pub struct cuStreamGetId_params_st {
    pub hStream: CUstream,
    pub streamId: *mut ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_cuStreamGetId_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuStreamGetId_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuStreamGetId_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuStreamGetId_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuStreamGetId_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuStreamGetId_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamGetId_params_st),
            "::",
            stringify!(hStream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).streamId) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamGetId_params_st),
            "::",
            stringify!(streamId)
        )
    );
}
impl Default for cuStreamGetId_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuStreamGetId_params = cuStreamGetId_params_st;
#[repr(C)]
pub struct cuStreamGetFlags_params_st {
    pub hStream: CUstream,
    pub flags: *mut ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuStreamGetFlags_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuStreamGetFlags_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuStreamGetFlags_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuStreamGetFlags_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuStreamGetFlags_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuStreamGetFlags_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamGetFlags_params_st),
            "::",
            stringify!(hStream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamGetFlags_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cuStreamGetFlags_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuStreamGetFlags_params = cuStreamGetFlags_params_st;
#[repr(C)]
pub struct cuStreamGetCtx_params_st {
    pub hStream: CUstream,
    pub pctx: *mut CUcontext,
}
#[test]
fn bindgen_test_layout_cuStreamGetCtx_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuStreamGetCtx_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuStreamGetCtx_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuStreamGetCtx_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuStreamGetCtx_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuStreamGetCtx_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamGetCtx_params_st),
            "::",
            stringify!(hStream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pctx) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamGetCtx_params_st),
            "::",
            stringify!(pctx)
        )
    );
}
impl Default for cuStreamGetCtx_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuStreamGetCtx_params = cuStreamGetCtx_params_st;
#[repr(C)]
pub struct cuStreamWaitEvent_params_st {
    pub hStream: CUstream,
    pub hEvent: CUevent,
    pub Flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuStreamWaitEvent_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuStreamWaitEvent_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuStreamWaitEvent_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuStreamWaitEvent_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuStreamWaitEvent_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuStreamWaitEvent_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWaitEvent_params_st),
            "::",
            stringify!(hStream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hEvent) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWaitEvent_params_st),
            "::",
            stringify!(hEvent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWaitEvent_params_st),
            "::",
            stringify!(Flags)
        )
    );
}
impl Default for cuStreamWaitEvent_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuStreamWaitEvent_params = cuStreamWaitEvent_params_st;
#[repr(C)]
pub struct cuStreamAddCallback_params_st {
    pub hStream: CUstream,
    pub callback: CUstreamCallback,
    pub userData: *mut ::std::os::raw::c_void,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuStreamAddCallback_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuStreamAddCallback_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuStreamAddCallback_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuStreamAddCallback_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuStreamAddCallback_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuStreamAddCallback_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamAddCallback_params_st),
            "::",
            stringify!(hStream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).callback) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamAddCallback_params_st),
            "::",
            stringify!(callback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).userData) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamAddCallback_params_st),
            "::",
            stringify!(userData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamAddCallback_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cuStreamAddCallback_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuStreamAddCallback_params = cuStreamAddCallback_params_st;
#[repr(C)]
pub struct cuStreamAttachMemAsync_params_st {
    pub hStream: CUstream,
    pub dptr: CUdeviceptr,
    pub length: usize,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuStreamAttachMemAsync_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuStreamAttachMemAsync_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuStreamAttachMemAsync_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuStreamAttachMemAsync_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuStreamAttachMemAsync_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuStreamAttachMemAsync_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamAttachMemAsync_params_st),
            "::",
            stringify!(hStream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamAttachMemAsync_params_st),
            "::",
            stringify!(dptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamAttachMemAsync_params_st),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamAttachMemAsync_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cuStreamAttachMemAsync_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuStreamAttachMemAsync_params = cuStreamAttachMemAsync_params_st;
#[repr(C)]
pub struct cuStreamQuery_params_st {
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuStreamQuery_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuStreamQuery_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuStreamQuery_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cuStreamQuery_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuStreamQuery_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuStreamQuery_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamQuery_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuStreamQuery_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuStreamQuery_params = cuStreamQuery_params_st;
#[repr(C)]
pub struct cuStreamSynchronize_params_st {
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuStreamSynchronize_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuStreamSynchronize_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuStreamSynchronize_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cuStreamSynchronize_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuStreamSynchronize_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuStreamSynchronize_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamSynchronize_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuStreamSynchronize_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuStreamSynchronize_params = cuStreamSynchronize_params_st;
#[repr(C)]
pub struct cuEventRecord_params_st {
    pub hEvent: CUevent,
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuEventRecord_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuEventRecord_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuEventRecord_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuEventRecord_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuEventRecord_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuEventRecord_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hEvent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuEventRecord_params_st),
            "::",
            stringify!(hEvent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuEventRecord_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuEventRecord_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuEventRecord_params = cuEventRecord_params_st;
#[repr(C)]
pub struct cuEventRecordWithFlags_params_st {
    pub hEvent: CUevent,
    pub hStream: CUstream,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuEventRecordWithFlags_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuEventRecordWithFlags_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuEventRecordWithFlags_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuEventRecordWithFlags_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuEventRecordWithFlags_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuEventRecordWithFlags_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hEvent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuEventRecordWithFlags_params_st),
            "::",
            stringify!(hEvent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuEventRecordWithFlags_params_st),
            "::",
            stringify!(hStream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuEventRecordWithFlags_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cuEventRecordWithFlags_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuEventRecordWithFlags_params = cuEventRecordWithFlags_params_st;
#[repr(C)]
pub struct cuLaunchKernel_params_st {
    pub f: CUfunction,
    pub gridDimX: ::std::os::raw::c_uint,
    pub gridDimY: ::std::os::raw::c_uint,
    pub gridDimZ: ::std::os::raw::c_uint,
    pub blockDimX: ::std::os::raw::c_uint,
    pub blockDimY: ::std::os::raw::c_uint,
    pub blockDimZ: ::std::os::raw::c_uint,
    pub sharedMemBytes: ::std::os::raw::c_uint,
    pub hStream: CUstream,
    pub kernelParams: *mut *mut ::std::os::raw::c_void,
    pub extra: *mut *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_cuLaunchKernel_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuLaunchKernel_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuLaunchKernel_params_st>(),
        64usize,
        concat!("Size of: ", stringify!(cuLaunchKernel_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuLaunchKernel_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuLaunchKernel_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunchKernel_params_st),
            "::",
            stringify!(f)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gridDimX) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunchKernel_params_st),
            "::",
            stringify!(gridDimX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gridDimY) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunchKernel_params_st),
            "::",
            stringify!(gridDimY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gridDimZ) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunchKernel_params_st),
            "::",
            stringify!(gridDimZ)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blockDimX) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunchKernel_params_st),
            "::",
            stringify!(blockDimX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blockDimY) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunchKernel_params_st),
            "::",
            stringify!(blockDimY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blockDimZ) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunchKernel_params_st),
            "::",
            stringify!(blockDimZ)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sharedMemBytes) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunchKernel_params_st),
            "::",
            stringify!(sharedMemBytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunchKernel_params_st),
            "::",
            stringify!(hStream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kernelParams) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunchKernel_params_st),
            "::",
            stringify!(kernelParams)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extra) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunchKernel_params_st),
            "::",
            stringify!(extra)
        )
    );
}
impl Default for cuLaunchKernel_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuLaunchKernel_params = cuLaunchKernel_params_st;
#[repr(C)]
pub struct cuLaunchKernelEx_params_st {
    pub config: *const CUlaunchConfig,
    pub f: CUfunction,
    pub kernelParams: *mut *mut ::std::os::raw::c_void,
    pub extra: *mut *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_cuLaunchKernelEx_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuLaunchKernelEx_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuLaunchKernelEx_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuLaunchKernelEx_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuLaunchKernelEx_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuLaunchKernelEx_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).config) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunchKernelEx_params_st),
            "::",
            stringify!(config)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunchKernelEx_params_st),
            "::",
            stringify!(f)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kernelParams) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunchKernelEx_params_st),
            "::",
            stringify!(kernelParams)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extra) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunchKernelEx_params_st),
            "::",
            stringify!(extra)
        )
    );
}
impl Default for cuLaunchKernelEx_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuLaunchKernelEx_params = cuLaunchKernelEx_params_st;
#[repr(C)]
pub struct cuLaunchHostFunc_params_st {
    pub hStream: CUstream,
    pub fn_: CUhostFn,
    pub userData: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_cuLaunchHostFunc_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuLaunchHostFunc_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuLaunchHostFunc_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuLaunchHostFunc_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuLaunchHostFunc_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuLaunchHostFunc_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunchHostFunc_params_st),
            "::",
            stringify!(hStream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fn_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunchHostFunc_params_st),
            "::",
            stringify!(fn_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).userData) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunchHostFunc_params_st),
            "::",
            stringify!(userData)
        )
    );
}
impl Default for cuLaunchHostFunc_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuLaunchHostFunc_params = cuLaunchHostFunc_params_st;
#[repr(C)]
pub struct cuGraphicsMapResources_params_st {
    pub count: ::std::os::raw::c_uint,
    pub resources: *mut CUgraphicsResource,
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuGraphicsMapResources_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphicsMapResources_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphicsMapResources_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuGraphicsMapResources_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphicsMapResources_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuGraphicsMapResources_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphicsMapResources_params_st),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resources) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphicsMapResources_params_st),
            "::",
            stringify!(resources)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphicsMapResources_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuGraphicsMapResources_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphicsMapResources_params = cuGraphicsMapResources_params_st;
#[repr(C)]
pub struct cuGraphicsUnmapResources_params_st {
    pub count: ::std::os::raw::c_uint,
    pub resources: *mut CUgraphicsResource,
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuGraphicsUnmapResources_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphicsUnmapResources_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphicsUnmapResources_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuGraphicsUnmapResources_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphicsUnmapResources_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuGraphicsUnmapResources_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphicsUnmapResources_params_st),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resources) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphicsUnmapResources_params_st),
            "::",
            stringify!(resources)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphicsUnmapResources_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuGraphicsUnmapResources_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphicsUnmapResources_params = cuGraphicsUnmapResources_params_st;
#[repr(C)]
pub struct cuStreamWriteValue32_params_st {
    pub stream: CUstream,
    pub addr: CUdeviceptr,
    pub value: cuuint32_t,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuStreamWriteValue32_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuStreamWriteValue32_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuStreamWriteValue32_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuStreamWriteValue32_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuStreamWriteValue32_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuStreamWriteValue32_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWriteValue32_params_st),
            "::",
            stringify!(stream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWriteValue32_params_st),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWriteValue32_params_st),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWriteValue32_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cuStreamWriteValue32_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuStreamWriteValue32_params = cuStreamWriteValue32_params_st;
#[repr(C)]
pub struct cuStreamWaitValue32_params_st {
    pub stream: CUstream,
    pub addr: CUdeviceptr,
    pub value: cuuint32_t,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuStreamWaitValue32_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuStreamWaitValue32_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuStreamWaitValue32_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuStreamWaitValue32_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuStreamWaitValue32_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuStreamWaitValue32_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWaitValue32_params_st),
            "::",
            stringify!(stream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWaitValue32_params_st),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWaitValue32_params_st),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWaitValue32_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cuStreamWaitValue32_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuStreamWaitValue32_params = cuStreamWaitValue32_params_st;
#[repr(C)]
pub struct cuStreamWriteValue64_params_st {
    pub stream: CUstream,
    pub addr: CUdeviceptr,
    pub value: cuuint64_t,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuStreamWriteValue64_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuStreamWriteValue64_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuStreamWriteValue64_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuStreamWriteValue64_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuStreamWriteValue64_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuStreamWriteValue64_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWriteValue64_params_st),
            "::",
            stringify!(stream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWriteValue64_params_st),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWriteValue64_params_st),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWriteValue64_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cuStreamWriteValue64_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuStreamWriteValue64_params = cuStreamWriteValue64_params_st;
#[repr(C)]
pub struct cuStreamWaitValue64_params_st {
    pub stream: CUstream,
    pub addr: CUdeviceptr,
    pub value: cuuint64_t,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuStreamWaitValue64_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuStreamWaitValue64_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuStreamWaitValue64_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuStreamWaitValue64_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuStreamWaitValue64_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuStreamWaitValue64_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWaitValue64_params_st),
            "::",
            stringify!(stream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWaitValue64_params_st),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWaitValue64_params_st),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWaitValue64_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cuStreamWaitValue64_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuStreamWaitValue64_params = cuStreamWaitValue64_params_st;
#[repr(C)]
pub struct cuStreamBatchMemOp_params_st {
    pub stream: CUstream,
    pub count: ::std::os::raw::c_uint,
    pub paramArray: *mut CUstreamBatchMemOpParams,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuStreamBatchMemOp_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuStreamBatchMemOp_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuStreamBatchMemOp_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuStreamBatchMemOp_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuStreamBatchMemOp_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuStreamBatchMemOp_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamBatchMemOp_params_st),
            "::",
            stringify!(stream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamBatchMemOp_params_st),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paramArray) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamBatchMemOp_params_st),
            "::",
            stringify!(paramArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamBatchMemOp_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cuStreamBatchMemOp_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuStreamBatchMemOp_params = cuStreamBatchMemOp_params_st;
#[repr(C)]
pub struct cuStreamWriteValue32_ptsz_params_st {
    pub stream: CUstream,
    pub addr: CUdeviceptr,
    pub value: cuuint32_t,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuStreamWriteValue32_ptsz_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuStreamWriteValue32_ptsz_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuStreamWriteValue32_ptsz_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuStreamWriteValue32_ptsz_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuStreamWriteValue32_ptsz_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuStreamWriteValue32_ptsz_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWriteValue32_ptsz_params_st),
            "::",
            stringify!(stream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWriteValue32_ptsz_params_st),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWriteValue32_ptsz_params_st),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWriteValue32_ptsz_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cuStreamWriteValue32_ptsz_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuStreamWriteValue32_ptsz_params = cuStreamWriteValue32_ptsz_params_st;
#[repr(C)]
pub struct cuStreamWaitValue32_ptsz_params_st {
    pub stream: CUstream,
    pub addr: CUdeviceptr,
    pub value: cuuint32_t,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuStreamWaitValue32_ptsz_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuStreamWaitValue32_ptsz_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuStreamWaitValue32_ptsz_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuStreamWaitValue32_ptsz_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuStreamWaitValue32_ptsz_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuStreamWaitValue32_ptsz_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWaitValue32_ptsz_params_st),
            "::",
            stringify!(stream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWaitValue32_ptsz_params_st),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWaitValue32_ptsz_params_st),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWaitValue32_ptsz_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cuStreamWaitValue32_ptsz_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuStreamWaitValue32_ptsz_params = cuStreamWaitValue32_ptsz_params_st;
#[repr(C)]
pub struct cuStreamWriteValue64_ptsz_params_st {
    pub stream: CUstream,
    pub addr: CUdeviceptr,
    pub value: cuuint64_t,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuStreamWriteValue64_ptsz_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuStreamWriteValue64_ptsz_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuStreamWriteValue64_ptsz_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuStreamWriteValue64_ptsz_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuStreamWriteValue64_ptsz_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuStreamWriteValue64_ptsz_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWriteValue64_ptsz_params_st),
            "::",
            stringify!(stream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWriteValue64_ptsz_params_st),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWriteValue64_ptsz_params_st),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWriteValue64_ptsz_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cuStreamWriteValue64_ptsz_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuStreamWriteValue64_ptsz_params = cuStreamWriteValue64_ptsz_params_st;
#[repr(C)]
pub struct cuStreamWaitValue64_ptsz_params_st {
    pub stream: CUstream,
    pub addr: CUdeviceptr,
    pub value: cuuint64_t,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuStreamWaitValue64_ptsz_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuStreamWaitValue64_ptsz_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuStreamWaitValue64_ptsz_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuStreamWaitValue64_ptsz_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuStreamWaitValue64_ptsz_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuStreamWaitValue64_ptsz_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWaitValue64_ptsz_params_st),
            "::",
            stringify!(stream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWaitValue64_ptsz_params_st),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWaitValue64_ptsz_params_st),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWaitValue64_ptsz_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cuStreamWaitValue64_ptsz_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuStreamWaitValue64_ptsz_params = cuStreamWaitValue64_ptsz_params_st;
#[repr(C)]
pub struct cuStreamBatchMemOp_ptsz_params_st {
    pub stream: CUstream,
    pub count: ::std::os::raw::c_uint,
    pub paramArray: *mut CUstreamBatchMemOpParams,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuStreamBatchMemOp_ptsz_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuStreamBatchMemOp_ptsz_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuStreamBatchMemOp_ptsz_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuStreamBatchMemOp_ptsz_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuStreamBatchMemOp_ptsz_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuStreamBatchMemOp_ptsz_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamBatchMemOp_ptsz_params_st),
            "::",
            stringify!(stream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamBatchMemOp_ptsz_params_st),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paramArray) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamBatchMemOp_ptsz_params_st),
            "::",
            stringify!(paramArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamBatchMemOp_ptsz_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cuStreamBatchMemOp_ptsz_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuStreamBatchMemOp_ptsz_params = cuStreamBatchMemOp_ptsz_params_st;
#[repr(C)]
pub struct cuStreamWriteValue32_v2_params_st {
    pub stream: CUstream,
    pub addr: CUdeviceptr,
    pub value: cuuint32_t,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuStreamWriteValue32_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuStreamWriteValue32_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuStreamWriteValue32_v2_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuStreamWriteValue32_v2_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuStreamWriteValue32_v2_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuStreamWriteValue32_v2_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWriteValue32_v2_params_st),
            "::",
            stringify!(stream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWriteValue32_v2_params_st),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWriteValue32_v2_params_st),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWriteValue32_v2_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cuStreamWriteValue32_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuStreamWriteValue32_v2_params = cuStreamWriteValue32_v2_params_st;
#[repr(C)]
pub struct cuStreamWaitValue32_v2_params_st {
    pub stream: CUstream,
    pub addr: CUdeviceptr,
    pub value: cuuint32_t,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuStreamWaitValue32_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuStreamWaitValue32_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuStreamWaitValue32_v2_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuStreamWaitValue32_v2_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuStreamWaitValue32_v2_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuStreamWaitValue32_v2_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWaitValue32_v2_params_st),
            "::",
            stringify!(stream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWaitValue32_v2_params_st),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWaitValue32_v2_params_st),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWaitValue32_v2_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cuStreamWaitValue32_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuStreamWaitValue32_v2_params = cuStreamWaitValue32_v2_params_st;
#[repr(C)]
pub struct cuStreamWriteValue64_v2_params_st {
    pub stream: CUstream,
    pub addr: CUdeviceptr,
    pub value: cuuint64_t,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuStreamWriteValue64_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuStreamWriteValue64_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuStreamWriteValue64_v2_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuStreamWriteValue64_v2_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuStreamWriteValue64_v2_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuStreamWriteValue64_v2_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWriteValue64_v2_params_st),
            "::",
            stringify!(stream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWriteValue64_v2_params_st),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWriteValue64_v2_params_st),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWriteValue64_v2_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cuStreamWriteValue64_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuStreamWriteValue64_v2_params = cuStreamWriteValue64_v2_params_st;
#[repr(C)]
pub struct cuStreamWaitValue64_v2_params_st {
    pub stream: CUstream,
    pub addr: CUdeviceptr,
    pub value: cuuint64_t,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuStreamWaitValue64_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuStreamWaitValue64_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuStreamWaitValue64_v2_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuStreamWaitValue64_v2_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuStreamWaitValue64_v2_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuStreamWaitValue64_v2_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWaitValue64_v2_params_st),
            "::",
            stringify!(stream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWaitValue64_v2_params_st),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWaitValue64_v2_params_st),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamWaitValue64_v2_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cuStreamWaitValue64_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuStreamWaitValue64_v2_params = cuStreamWaitValue64_v2_params_st;
#[repr(C)]
pub struct cuStreamBatchMemOp_v2_params_st {
    pub stream: CUstream,
    pub count: ::std::os::raw::c_uint,
    pub paramArray: *mut CUstreamBatchMemOpParams,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuStreamBatchMemOp_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuStreamBatchMemOp_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuStreamBatchMemOp_v2_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuStreamBatchMemOp_v2_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuStreamBatchMemOp_v2_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuStreamBatchMemOp_v2_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamBatchMemOp_v2_params_st),
            "::",
            stringify!(stream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamBatchMemOp_v2_params_st),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paramArray) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamBatchMemOp_v2_params_st),
            "::",
            stringify!(paramArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamBatchMemOp_v2_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cuStreamBatchMemOp_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuStreamBatchMemOp_v2_params = cuStreamBatchMemOp_v2_params_st;
#[repr(C)]
pub struct cuMemPrefetchAsync_params_st {
    pub devPtr: CUdeviceptr,
    pub count: usize,
    pub dstDevice: CUdevice,
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuMemPrefetchAsync_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemPrefetchAsync_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemPrefetchAsync_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuMemPrefetchAsync_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemPrefetchAsync_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemPrefetchAsync_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).devPtr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemPrefetchAsync_params_st),
            "::",
            stringify!(devPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemPrefetchAsync_params_st),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstDevice) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemPrefetchAsync_params_st),
            "::",
            stringify!(dstDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemPrefetchAsync_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuMemPrefetchAsync_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemPrefetchAsync_params = cuMemPrefetchAsync_params_st;
#[repr(C)]
pub struct cuLaunchCooperativeKernel_params_st {
    pub f: CUfunction,
    pub gridDimX: ::std::os::raw::c_uint,
    pub gridDimY: ::std::os::raw::c_uint,
    pub gridDimZ: ::std::os::raw::c_uint,
    pub blockDimX: ::std::os::raw::c_uint,
    pub blockDimY: ::std::os::raw::c_uint,
    pub blockDimZ: ::std::os::raw::c_uint,
    pub sharedMemBytes: ::std::os::raw::c_uint,
    pub hStream: CUstream,
    pub kernelParams: *mut *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_cuLaunchCooperativeKernel_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuLaunchCooperativeKernel_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuLaunchCooperativeKernel_params_st>(),
        56usize,
        concat!("Size of: ", stringify!(cuLaunchCooperativeKernel_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuLaunchCooperativeKernel_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuLaunchCooperativeKernel_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunchCooperativeKernel_params_st),
            "::",
            stringify!(f)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gridDimX) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunchCooperativeKernel_params_st),
            "::",
            stringify!(gridDimX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gridDimY) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunchCooperativeKernel_params_st),
            "::",
            stringify!(gridDimY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gridDimZ) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunchCooperativeKernel_params_st),
            "::",
            stringify!(gridDimZ)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blockDimX) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunchCooperativeKernel_params_st),
            "::",
            stringify!(blockDimX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blockDimY) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunchCooperativeKernel_params_st),
            "::",
            stringify!(blockDimY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blockDimZ) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunchCooperativeKernel_params_st),
            "::",
            stringify!(blockDimZ)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sharedMemBytes) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunchCooperativeKernel_params_st),
            "::",
            stringify!(sharedMemBytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunchCooperativeKernel_params_st),
            "::",
            stringify!(hStream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kernelParams) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cuLaunchCooperativeKernel_params_st),
            "::",
            stringify!(kernelParams)
        )
    );
}
impl Default for cuLaunchCooperativeKernel_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuLaunchCooperativeKernel_params = cuLaunchCooperativeKernel_params_st;
#[repr(C)]
pub struct cuSignalExternalSemaphoresAsync_params_st {
    pub extSemArray: *const CUexternalSemaphore,
    pub paramsArray: *const CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS,
    pub numExtSems: ::std::os::raw::c_uint,
    pub stream: CUstream,
}
#[test]
fn bindgen_test_layout_cuSignalExternalSemaphoresAsync_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuSignalExternalSemaphoresAsync_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuSignalExternalSemaphoresAsync_params_st>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(cuSignalExternalSemaphoresAsync_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuSignalExternalSemaphoresAsync_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuSignalExternalSemaphoresAsync_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extSemArray) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuSignalExternalSemaphoresAsync_params_st),
            "::",
            stringify!(extSemArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paramsArray) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuSignalExternalSemaphoresAsync_params_st),
            "::",
            stringify!(paramsArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numExtSems) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuSignalExternalSemaphoresAsync_params_st),
            "::",
            stringify!(numExtSems)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuSignalExternalSemaphoresAsync_params_st),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for cuSignalExternalSemaphoresAsync_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuSignalExternalSemaphoresAsync_params = cuSignalExternalSemaphoresAsync_params_st;
#[repr(C)]
pub struct cuWaitExternalSemaphoresAsync_params_st {
    pub extSemArray: *const CUexternalSemaphore,
    pub paramsArray: *const CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS,
    pub numExtSems: ::std::os::raw::c_uint,
    pub stream: CUstream,
}
#[test]
fn bindgen_test_layout_cuWaitExternalSemaphoresAsync_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuWaitExternalSemaphoresAsync_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuWaitExternalSemaphoresAsync_params_st>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(cuWaitExternalSemaphoresAsync_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuWaitExternalSemaphoresAsync_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuWaitExternalSemaphoresAsync_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extSemArray) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuWaitExternalSemaphoresAsync_params_st),
            "::",
            stringify!(extSemArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paramsArray) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuWaitExternalSemaphoresAsync_params_st),
            "::",
            stringify!(paramsArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numExtSems) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuWaitExternalSemaphoresAsync_params_st),
            "::",
            stringify!(numExtSems)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuWaitExternalSemaphoresAsync_params_st),
            "::",
            stringify!(stream)
        )
    );
}
impl Default for cuWaitExternalSemaphoresAsync_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuWaitExternalSemaphoresAsync_params = cuWaitExternalSemaphoresAsync_params_st;
#[repr(C)]
pub struct cuStreamBeginCapture_params_st {
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuStreamBeginCapture_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuStreamBeginCapture_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuStreamBeginCapture_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cuStreamBeginCapture_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuStreamBeginCapture_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuStreamBeginCapture_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamBeginCapture_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuStreamBeginCapture_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuStreamBeginCapture_params = cuStreamBeginCapture_params_st;
#[repr(C)]
pub struct cuStreamBeginCapture_ptsz_params_st {
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuStreamBeginCapture_ptsz_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuStreamBeginCapture_ptsz_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuStreamBeginCapture_ptsz_params_st>(),
        8usize,
        concat!("Size of: ", stringify!(cuStreamBeginCapture_ptsz_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuStreamBeginCapture_ptsz_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuStreamBeginCapture_ptsz_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamBeginCapture_ptsz_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuStreamBeginCapture_ptsz_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuStreamBeginCapture_ptsz_params = cuStreamBeginCapture_ptsz_params_st;
#[repr(C)]
pub struct cuStreamBeginCapture_v2_params_st {
    pub hStream: CUstream,
    pub mode: CUstreamCaptureMode,
}
#[test]
fn bindgen_test_layout_cuStreamBeginCapture_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuStreamBeginCapture_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuStreamBeginCapture_v2_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuStreamBeginCapture_v2_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuStreamBeginCapture_v2_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuStreamBeginCapture_v2_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamBeginCapture_v2_params_st),
            "::",
            stringify!(hStream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamBeginCapture_v2_params_st),
            "::",
            stringify!(mode)
        )
    );
}
impl Default for cuStreamBeginCapture_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuStreamBeginCapture_v2_params = cuStreamBeginCapture_v2_params_st;
#[repr(C)]
pub struct cuStreamEndCapture_params_st {
    pub hStream: CUstream,
    pub phGraph: *mut CUgraph,
}
#[test]
fn bindgen_test_layout_cuStreamEndCapture_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuStreamEndCapture_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuStreamEndCapture_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuStreamEndCapture_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuStreamEndCapture_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuStreamEndCapture_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamEndCapture_params_st),
            "::",
            stringify!(hStream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phGraph) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamEndCapture_params_st),
            "::",
            stringify!(phGraph)
        )
    );
}
impl Default for cuStreamEndCapture_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuStreamEndCapture_params = cuStreamEndCapture_params_st;
#[repr(C)]
pub struct cuStreamIsCapturing_params_st {
    pub hStream: CUstream,
    pub captureStatus: *mut CUstreamCaptureStatus,
}
#[test]
fn bindgen_test_layout_cuStreamIsCapturing_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuStreamIsCapturing_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuStreamIsCapturing_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuStreamIsCapturing_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuStreamIsCapturing_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuStreamIsCapturing_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamIsCapturing_params_st),
            "::",
            stringify!(hStream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).captureStatus) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamIsCapturing_params_st),
            "::",
            stringify!(captureStatus)
        )
    );
}
impl Default for cuStreamIsCapturing_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuStreamIsCapturing_params = cuStreamIsCapturing_params_st;
#[repr(C)]
pub struct cuStreamGetCaptureInfo_params_st {
    pub hStream: CUstream,
    pub captureStatus_out: *mut CUstreamCaptureStatus,
    pub id_out: *mut cuuint64_t,
}
#[test]
fn bindgen_test_layout_cuStreamGetCaptureInfo_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuStreamGetCaptureInfo_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuStreamGetCaptureInfo_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuStreamGetCaptureInfo_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuStreamGetCaptureInfo_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuStreamGetCaptureInfo_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamGetCaptureInfo_params_st),
            "::",
            stringify!(hStream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).captureStatus_out) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamGetCaptureInfo_params_st),
            "::",
            stringify!(captureStatus_out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id_out) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamGetCaptureInfo_params_st),
            "::",
            stringify!(id_out)
        )
    );
}
impl Default for cuStreamGetCaptureInfo_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuStreamGetCaptureInfo_params = cuStreamGetCaptureInfo_params_st;
#[repr(C)]
pub struct cuStreamGetCaptureInfo_ptsz_params_st {
    pub hStream: CUstream,
    pub captureStatus_out: *mut CUstreamCaptureStatus,
    pub id_out: *mut cuuint64_t,
}
#[test]
fn bindgen_test_layout_cuStreamGetCaptureInfo_ptsz_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuStreamGetCaptureInfo_ptsz_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuStreamGetCaptureInfo_ptsz_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cuStreamGetCaptureInfo_ptsz_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuStreamGetCaptureInfo_ptsz_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuStreamGetCaptureInfo_ptsz_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamGetCaptureInfo_ptsz_params_st),
            "::",
            stringify!(hStream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).captureStatus_out) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamGetCaptureInfo_ptsz_params_st),
            "::",
            stringify!(captureStatus_out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id_out) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamGetCaptureInfo_ptsz_params_st),
            "::",
            stringify!(id_out)
        )
    );
}
impl Default for cuStreamGetCaptureInfo_ptsz_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuStreamGetCaptureInfo_ptsz_params = cuStreamGetCaptureInfo_ptsz_params_st;
#[repr(C)]
pub struct cuStreamGetCaptureInfo_v2_params_st {
    pub hStream: CUstream,
    pub captureStatus_out: *mut CUstreamCaptureStatus,
    pub id_out: *mut cuuint64_t,
    pub graph_out: *mut CUgraph,
    pub dependencies_out: *mut *const CUgraphNode,
    pub numDependencies_out: *mut usize,
}
#[test]
fn bindgen_test_layout_cuStreamGetCaptureInfo_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuStreamGetCaptureInfo_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuStreamGetCaptureInfo_v2_params_st>(),
        48usize,
        concat!("Size of: ", stringify!(cuStreamGetCaptureInfo_v2_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuStreamGetCaptureInfo_v2_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuStreamGetCaptureInfo_v2_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamGetCaptureInfo_v2_params_st),
            "::",
            stringify!(hStream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).captureStatus_out) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamGetCaptureInfo_v2_params_st),
            "::",
            stringify!(captureStatus_out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id_out) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamGetCaptureInfo_v2_params_st),
            "::",
            stringify!(id_out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graph_out) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamGetCaptureInfo_v2_params_st),
            "::",
            stringify!(graph_out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dependencies_out) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamGetCaptureInfo_v2_params_st),
            "::",
            stringify!(dependencies_out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numDependencies_out) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamGetCaptureInfo_v2_params_st),
            "::",
            stringify!(numDependencies_out)
        )
    );
}
impl Default for cuStreamGetCaptureInfo_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuStreamGetCaptureInfo_v2_params = cuStreamGetCaptureInfo_v2_params_st;
#[repr(C)]
pub struct cuGraphAddKernelNode_params_st {
    pub phGraphNode: *mut CUgraphNode,
    pub hGraph: CUgraph,
    pub dependencies: *const CUgraphNode,
    pub numDependencies: usize,
    pub nodeParams: *const CUDA_KERNEL_NODE_PARAMS_v1,
}
#[test]
fn bindgen_test_layout_cuGraphAddKernelNode_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphAddKernelNode_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphAddKernelNode_params_st>(),
        40usize,
        concat!("Size of: ", stringify!(cuGraphAddKernelNode_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphAddKernelNode_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuGraphAddKernelNode_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phGraphNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddKernelNode_params_st),
            "::",
            stringify!(phGraphNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hGraph) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddKernelNode_params_st),
            "::",
            stringify!(hGraph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dependencies) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddKernelNode_params_st),
            "::",
            stringify!(dependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numDependencies) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddKernelNode_params_st),
            "::",
            stringify!(numDependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeParams) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphAddKernelNode_params_st),
            "::",
            stringify!(nodeParams)
        )
    );
}
impl Default for cuGraphAddKernelNode_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphAddKernelNode_params = cuGraphAddKernelNode_params_st;
#[repr(C)]
pub struct cuGraphKernelNodeGetParams_params_st {
    pub hNode: CUgraphNode,
    pub nodeParams: *mut CUDA_KERNEL_NODE_PARAMS_v1,
}
#[test]
fn bindgen_test_layout_cuGraphKernelNodeGetParams_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphKernelNodeGetParams_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphKernelNodeGetParams_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cuGraphKernelNodeGetParams_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphKernelNodeGetParams_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuGraphKernelNodeGetParams_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphKernelNodeGetParams_params_st),
            "::",
            stringify!(hNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeParams) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphKernelNodeGetParams_params_st),
            "::",
            stringify!(nodeParams)
        )
    );
}
impl Default for cuGraphKernelNodeGetParams_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphKernelNodeGetParams_params = cuGraphKernelNodeGetParams_params_st;
#[repr(C)]
pub struct cuGraphKernelNodeSetParams_params_st {
    pub hNode: CUgraphNode,
    pub nodeParams: *const CUDA_KERNEL_NODE_PARAMS_v1,
}
#[test]
fn bindgen_test_layout_cuGraphKernelNodeSetParams_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphKernelNodeSetParams_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphKernelNodeSetParams_params_st>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cuGraphKernelNodeSetParams_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphKernelNodeSetParams_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuGraphKernelNodeSetParams_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hNode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphKernelNodeSetParams_params_st),
            "::",
            stringify!(hNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeParams) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphKernelNodeSetParams_params_st),
            "::",
            stringify!(nodeParams)
        )
    );
}
impl Default for cuGraphKernelNodeSetParams_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphKernelNodeSetParams_params = cuGraphKernelNodeSetParams_params_st;
#[repr(C)]
pub struct cuGraphExecKernelNodeSetParams_params_st {
    pub hGraphExec: CUgraphExec,
    pub hNode: CUgraphNode,
    pub nodeParams: *const CUDA_KERNEL_NODE_PARAMS_v1,
}
#[test]
fn bindgen_test_layout_cuGraphExecKernelNodeSetParams_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphExecKernelNodeSetParams_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphExecKernelNodeSetParams_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cuGraphExecKernelNodeSetParams_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphExecKernelNodeSetParams_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuGraphExecKernelNodeSetParams_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hGraphExec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphExecKernelNodeSetParams_params_st),
            "::",
            stringify!(hGraphExec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hNode) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphExecKernelNodeSetParams_params_st),
            "::",
            stringify!(hNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeParams) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphExecKernelNodeSetParams_params_st),
            "::",
            stringify!(nodeParams)
        )
    );
}
impl Default for cuGraphExecKernelNodeSetParams_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphExecKernelNodeSetParams_params = cuGraphExecKernelNodeSetParams_params_st;
#[repr(C)]
pub struct cuGraphInstantiateWithParams_params_st {
    pub phGraphExec: *mut CUgraphExec,
    pub hGraph: CUgraph,
    pub instantiateParams: *mut CUDA_GRAPH_INSTANTIATE_PARAMS,
}
#[test]
fn bindgen_test_layout_cuGraphInstantiateWithParams_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphInstantiateWithParams_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphInstantiateWithParams_params_st>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(cuGraphInstantiateWithParams_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphInstantiateWithParams_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuGraphInstantiateWithParams_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phGraphExec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphInstantiateWithParams_params_st),
            "::",
            stringify!(phGraphExec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hGraph) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphInstantiateWithParams_params_st),
            "::",
            stringify!(hGraph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).instantiateParams) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphInstantiateWithParams_params_st),
            "::",
            stringify!(instantiateParams)
        )
    );
}
impl Default for cuGraphInstantiateWithParams_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphInstantiateWithParams_params = cuGraphInstantiateWithParams_params_st;
#[repr(C)]
pub struct cuGraphExecUpdate_params_st {
    pub hGraphExec: CUgraphExec,
    pub hGraph: CUgraph,
    pub hErrorNode_out: *mut CUgraphNode,
    pub updateResult_out: *mut CUgraphExecUpdateResult,
}
#[test]
fn bindgen_test_layout_cuGraphExecUpdate_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphExecUpdate_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphExecUpdate_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuGraphExecUpdate_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphExecUpdate_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuGraphExecUpdate_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hGraphExec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphExecUpdate_params_st),
            "::",
            stringify!(hGraphExec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hGraph) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphExecUpdate_params_st),
            "::",
            stringify!(hGraph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hErrorNode_out) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphExecUpdate_params_st),
            "::",
            stringify!(hErrorNode_out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).updateResult_out) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphExecUpdate_params_st),
            "::",
            stringify!(updateResult_out)
        )
    );
}
impl Default for cuGraphExecUpdate_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphExecUpdate_params = cuGraphExecUpdate_params_st;
#[repr(C)]
pub struct cuGraphUpload_params_st {
    pub hGraph: CUgraphExec,
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuGraphUpload_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphUpload_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphUpload_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuGraphUpload_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphUpload_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuGraphUpload_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hGraph) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphUpload_params_st),
            "::",
            stringify!(hGraph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphUpload_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuGraphUpload_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphUpload_params = cuGraphUpload_params_st;
#[repr(C)]
pub struct cuGraphLaunch_params_st {
    pub hGraph: CUgraphExec,
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuGraphLaunch_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphLaunch_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphLaunch_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuGraphLaunch_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphLaunch_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuGraphLaunch_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hGraph) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphLaunch_params_st),
            "::",
            stringify!(hGraph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphLaunch_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuGraphLaunch_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphLaunch_params = cuGraphLaunch_params_st;
#[repr(C)]
pub struct cuStreamCopyAttributes_params_st {
    pub dstStream: CUstream,
    pub srcStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuStreamCopyAttributes_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuStreamCopyAttributes_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuStreamCopyAttributes_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuStreamCopyAttributes_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuStreamCopyAttributes_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuStreamCopyAttributes_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstStream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamCopyAttributes_params_st),
            "::",
            stringify!(dstStream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcStream) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamCopyAttributes_params_st),
            "::",
            stringify!(srcStream)
        )
    );
}
impl Default for cuStreamCopyAttributes_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuStreamCopyAttributes_params = cuStreamCopyAttributes_params_st;
#[repr(C)]
pub struct cuStreamGetAttribute_params_st {
    pub hStream: CUstream,
    pub attr: CUstreamAttrID,
    pub value: *mut CUstreamAttrValue,
}
#[test]
fn bindgen_test_layout_cuStreamGetAttribute_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuStreamGetAttribute_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuStreamGetAttribute_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuStreamGetAttribute_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuStreamGetAttribute_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuStreamGetAttribute_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamGetAttribute_params_st),
            "::",
            stringify!(hStream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamGetAttribute_params_st),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamGetAttribute_params_st),
            "::",
            stringify!(value)
        )
    );
}
impl Default for cuStreamGetAttribute_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuStreamGetAttribute_params = cuStreamGetAttribute_params_st;
#[repr(C)]
pub struct cuStreamSetAttribute_params_st {
    pub hStream: CUstream,
    pub attr: CUstreamAttrID,
    pub param: *const CUstreamAttrValue,
}
#[test]
fn bindgen_test_layout_cuStreamSetAttribute_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuStreamSetAttribute_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuStreamSetAttribute_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuStreamSetAttribute_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuStreamSetAttribute_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuStreamSetAttribute_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamSetAttribute_params_st),
            "::",
            stringify!(hStream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamSetAttribute_params_st),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamSetAttribute_params_st),
            "::",
            stringify!(param)
        )
    );
}
impl Default for cuStreamSetAttribute_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuStreamSetAttribute_params = cuStreamSetAttribute_params_st;
#[repr(C)]
pub struct cuIpcOpenMemHandle_params_st {
    pub pdptr: *mut CUdeviceptr,
    pub handle: CUipcMemHandle,
    pub Flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuIpcOpenMemHandle_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuIpcOpenMemHandle_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuIpcOpenMemHandle_params_st>(),
        80usize,
        concat!("Size of: ", stringify!(cuIpcOpenMemHandle_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuIpcOpenMemHandle_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuIpcOpenMemHandle_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuIpcOpenMemHandle_params_st),
            "::",
            stringify!(pdptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuIpcOpenMemHandle_params_st),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(cuIpcOpenMemHandle_params_st),
            "::",
            stringify!(Flags)
        )
    );
}
impl Default for cuIpcOpenMemHandle_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuIpcOpenMemHandle_params = cuIpcOpenMemHandle_params_st;
#[repr(C)]
pub struct cuGraphInstantiate_params_st {
    pub phGraphExec: *mut CUgraphExec,
    pub hGraph: CUgraph,
    pub phErrorNode: *mut CUgraphNode,
    pub logBuffer: *mut ::std::os::raw::c_char,
    pub bufferSize: usize,
}
#[test]
fn bindgen_test_layout_cuGraphInstantiate_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphInstantiate_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphInstantiate_params_st>(),
        40usize,
        concat!("Size of: ", stringify!(cuGraphInstantiate_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphInstantiate_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuGraphInstantiate_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phGraphExec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphInstantiate_params_st),
            "::",
            stringify!(phGraphExec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hGraph) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphInstantiate_params_st),
            "::",
            stringify!(hGraph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phErrorNode) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphInstantiate_params_st),
            "::",
            stringify!(phErrorNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).logBuffer) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphInstantiate_params_st),
            "::",
            stringify!(logBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufferSize) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphInstantiate_params_st),
            "::",
            stringify!(bufferSize)
        )
    );
}
impl Default for cuGraphInstantiate_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphInstantiate_params = cuGraphInstantiate_params_st;
#[repr(C)]
pub struct cuGraphInstantiate_v2_params_st {
    pub phGraphExec: *mut CUgraphExec,
    pub hGraph: CUgraph,
    pub phErrorNode: *mut CUgraphNode,
    pub logBuffer: *mut ::std::os::raw::c_char,
    pub bufferSize: usize,
}
#[test]
fn bindgen_test_layout_cuGraphInstantiate_v2_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGraphInstantiate_v2_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGraphInstantiate_v2_params_st>(),
        40usize,
        concat!("Size of: ", stringify!(cuGraphInstantiate_v2_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuGraphInstantiate_v2_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuGraphInstantiate_v2_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phGraphExec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphInstantiate_v2_params_st),
            "::",
            stringify!(phGraphExec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hGraph) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphInstantiate_v2_params_st),
            "::",
            stringify!(hGraph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phErrorNode) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphInstantiate_v2_params_st),
            "::",
            stringify!(phErrorNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).logBuffer) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphInstantiate_v2_params_st),
            "::",
            stringify!(logBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufferSize) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGraphInstantiate_v2_params_st),
            "::",
            stringify!(bufferSize)
        )
    );
}
impl Default for cuGraphInstantiate_v2_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGraphInstantiate_v2_params = cuGraphInstantiate_v2_params_st;
#[repr(C)]
pub struct cuMemMapArrayAsync_params_st {
    pub mapInfoList: *mut CUarrayMapInfo,
    pub count: ::std::os::raw::c_uint,
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuMemMapArrayAsync_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemMapArrayAsync_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemMapArrayAsync_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuMemMapArrayAsync_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemMapArrayAsync_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemMapArrayAsync_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mapInfoList) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemMapArrayAsync_params_st),
            "::",
            stringify!(mapInfoList)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemMapArrayAsync_params_st),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemMapArrayAsync_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuMemMapArrayAsync_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemMapArrayAsync_params = cuMemMapArrayAsync_params_st;
#[repr(C)]
pub struct cuMemFreeAsync_params_st {
    pub dptr: CUdeviceptr,
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuMemFreeAsync_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemFreeAsync_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemFreeAsync_params_st>(),
        16usize,
        concat!("Size of: ", stringify!(cuMemFreeAsync_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemFreeAsync_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemFreeAsync_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemFreeAsync_params_st),
            "::",
            stringify!(dptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemFreeAsync_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuMemFreeAsync_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemFreeAsync_params = cuMemFreeAsync_params_st;
#[repr(C)]
pub struct cuMemAllocAsync_params_st {
    pub dptr: *mut CUdeviceptr,
    pub bytesize: usize,
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuMemAllocAsync_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemAllocAsync_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemAllocAsync_params_st>(),
        24usize,
        concat!("Size of: ", stringify!(cuMemAllocAsync_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemAllocAsync_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuMemAllocAsync_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemAllocAsync_params_st),
            "::",
            stringify!(dptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytesize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemAllocAsync_params_st),
            "::",
            stringify!(bytesize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemAllocAsync_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuMemAllocAsync_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemAllocAsync_params = cuMemAllocAsync_params_st;
#[repr(C)]
pub struct cuMemAllocFromPoolAsync_params_st {
    pub dptr: *mut CUdeviceptr,
    pub bytesize: usize,
    pub pool: CUmemoryPool,
    pub hStream: CUstream,
}
#[test]
fn bindgen_test_layout_cuMemAllocFromPoolAsync_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuMemAllocFromPoolAsync_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuMemAllocFromPoolAsync_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuMemAllocFromPoolAsync_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuMemAllocFromPoolAsync_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuMemAllocFromPoolAsync_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemAllocFromPoolAsync_params_st),
            "::",
            stringify!(dptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytesize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemAllocFromPoolAsync_params_st),
            "::",
            stringify!(bytesize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pool) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemAllocFromPoolAsync_params_st),
            "::",
            stringify!(pool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuMemAllocFromPoolAsync_params_st),
            "::",
            stringify!(hStream)
        )
    );
}
impl Default for cuMemAllocFromPoolAsync_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuMemAllocFromPoolAsync_params = cuMemAllocFromPoolAsync_params_st;
#[repr(C)]
pub struct cuStreamUpdateCaptureDependencies_params_st {
    pub hStream: CUstream,
    pub dependencies: *mut CUgraphNode,
    pub numDependencies: usize,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cuStreamUpdateCaptureDependencies_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuStreamUpdateCaptureDependencies_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuStreamUpdateCaptureDependencies_params_st>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(cuStreamUpdateCaptureDependencies_params_st)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cuStreamUpdateCaptureDependencies_params_st>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(cuStreamUpdateCaptureDependencies_params_st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hStream) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamUpdateCaptureDependencies_params_st),
            "::",
            stringify!(hStream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dependencies) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamUpdateCaptureDependencies_params_st),
            "::",
            stringify!(dependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numDependencies) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamUpdateCaptureDependencies_params_st),
            "::",
            stringify!(numDependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuStreamUpdateCaptureDependencies_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cuStreamUpdateCaptureDependencies_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuStreamUpdateCaptureDependencies_params = cuStreamUpdateCaptureDependencies_params_st;
#[repr(C)]
pub struct cuGetProcAddress_params_st {
    pub symbol: *const ::std::os::raw::c_char,
    pub pfn: *mut *mut ::std::os::raw::c_void,
    pub cudaVersion: ::std::os::raw::c_int,
    pub flags: cuuint64_t,
}
#[test]
fn bindgen_test_layout_cuGetProcAddress_params_st() {
    const UNINIT: ::std::mem::MaybeUninit<cuGetProcAddress_params_st> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuGetProcAddress_params_st>(),
        32usize,
        concat!("Size of: ", stringify!(cuGetProcAddress_params_st))
    );
    assert_eq!(
        ::std::mem::align_of::<cuGetProcAddress_params_st>(),
        8usize,
        concat!("Alignment of ", stringify!(cuGetProcAddress_params_st))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).symbol) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGetProcAddress_params_st),
            "::",
            stringify!(symbol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfn) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGetProcAddress_params_st),
            "::",
            stringify!(pfn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cudaVersion) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGetProcAddress_params_st),
            "::",
            stringify!(cudaVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuGetProcAddress_params_st),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for cuGetProcAddress_params_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cuGetProcAddress_params = cuGetProcAddress_params_st;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_ProfilerRange {
    CUPTI_Range_INVALID = 0,
    CUPTI_AutoRange = 1,
    CUPTI_UserRange = 2,
    CUPTI_Range_COUNT = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_ProfilerReplayMode {
    CUPTI_Replay_INVALID = 0,
    CUPTI_ApplicationReplay = 1,
    CUPTI_KernelReplay = 2,
    CUPTI_UserReplay = 3,
    CUPTI_Replay_COUNT = 4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct CUpti_Profiler_Initialize_Params {
    pub structSize: usize,
    pub pPriv: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_CUpti_Profiler_Initialize_Params() {
    const UNINIT: ::std::mem::MaybeUninit<CUpti_Profiler_Initialize_Params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CUpti_Profiler_Initialize_Params>(),
        16usize,
        concat!("Size of: ", stringify!(CUpti_Profiler_Initialize_Params))
    );
    assert_eq!(
        ::std::mem::align_of::<CUpti_Profiler_Initialize_Params>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CUpti_Profiler_Initialize_Params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).structSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_Initialize_Params),
            "::",
            stringify!(structSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPriv) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_Initialize_Params),
            "::",
            stringify!(pPriv)
        )
    );
}
impl Default for CUpti_Profiler_Initialize_Params {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct CUpti_Profiler_DeInitialize_Params {
    pub structSize: usize,
    pub pPriv: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_CUpti_Profiler_DeInitialize_Params() {
    const UNINIT: ::std::mem::MaybeUninit<CUpti_Profiler_DeInitialize_Params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CUpti_Profiler_DeInitialize_Params>(),
        16usize,
        concat!("Size of: ", stringify!(CUpti_Profiler_DeInitialize_Params))
    );
    assert_eq!(
        ::std::mem::align_of::<CUpti_Profiler_DeInitialize_Params>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CUpti_Profiler_DeInitialize_Params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).structSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_DeInitialize_Params),
            "::",
            stringify!(structSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPriv) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_DeInitialize_Params),
            "::",
            stringify!(pPriv)
        )
    );
}
impl Default for CUpti_Profiler_DeInitialize_Params {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn cuptiProfilerInitialize(pParams: *mut CUpti_Profiler_Initialize_Params) -> CUptiResult;
}
extern "C" {
    pub fn cuptiProfilerDeInitialize(
        pParams: *mut CUpti_Profiler_DeInitialize_Params,
    ) -> CUptiResult;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct CUpti_Profiler_CounterDataImageOptions {
    pub structSize: usize,
    pub pPriv: *mut ::std::os::raw::c_void,
    pub pCounterDataPrefix: *const u8,
    pub counterDataPrefixSize: usize,
    pub maxNumRanges: u32,
    pub maxNumRangeTreeNodes: u32,
    pub maxRangeNameLength: u32,
}
#[test]
fn bindgen_test_layout_CUpti_Profiler_CounterDataImageOptions() {
    const UNINIT: ::std::mem::MaybeUninit<CUpti_Profiler_CounterDataImageOptions> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CUpti_Profiler_CounterDataImageOptions>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(CUpti_Profiler_CounterDataImageOptions)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CUpti_Profiler_CounterDataImageOptions>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CUpti_Profiler_CounterDataImageOptions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).structSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_CounterDataImageOptions),
            "::",
            stringify!(structSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPriv) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_CounterDataImageOptions),
            "::",
            stringify!(pPriv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCounterDataPrefix) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_CounterDataImageOptions),
            "::",
            stringify!(pCounterDataPrefix)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).counterDataPrefixSize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_CounterDataImageOptions),
            "::",
            stringify!(counterDataPrefixSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxNumRanges) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_CounterDataImageOptions),
            "::",
            stringify!(maxNumRanges)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxNumRangeTreeNodes) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_CounterDataImageOptions),
            "::",
            stringify!(maxNumRangeTreeNodes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxRangeNameLength) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_CounterDataImageOptions),
            "::",
            stringify!(maxRangeNameLength)
        )
    );
}
impl Default for CUpti_Profiler_CounterDataImageOptions {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct CUpti_Profiler_CounterDataImage_CalculateSize_Params {
    pub structSize: usize,
    pub pPriv: *mut ::std::os::raw::c_void,
    pub sizeofCounterDataImageOptions: usize,
    pub pOptions: *const CUpti_Profiler_CounterDataImageOptions,
    pub counterDataImageSize: usize,
}
#[test]
fn bindgen_test_layout_CUpti_Profiler_CounterDataImage_CalculateSize_Params() {
    const UNINIT: ::std::mem::MaybeUninit<CUpti_Profiler_CounterDataImage_CalculateSize_Params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CUpti_Profiler_CounterDataImage_CalculateSize_Params>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(CUpti_Profiler_CounterDataImage_CalculateSize_Params)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CUpti_Profiler_CounterDataImage_CalculateSize_Params>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CUpti_Profiler_CounterDataImage_CalculateSize_Params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).structSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_CounterDataImage_CalculateSize_Params),
            "::",
            stringify!(structSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPriv) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_CounterDataImage_CalculateSize_Params),
            "::",
            stringify!(pPriv)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).sizeofCounterDataImageOptions) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_CounterDataImage_CalculateSize_Params),
            "::",
            stringify!(sizeofCounterDataImageOptions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pOptions) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_CounterDataImage_CalculateSize_Params),
            "::",
            stringify!(pOptions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).counterDataImageSize) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_CounterDataImage_CalculateSize_Params),
            "::",
            stringify!(counterDataImageSize)
        )
    );
}
impl Default for CUpti_Profiler_CounterDataImage_CalculateSize_Params {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct CUpti_Profiler_CounterDataImage_Initialize_Params {
    pub structSize: usize,
    pub pPriv: *mut ::std::os::raw::c_void,
    pub sizeofCounterDataImageOptions: usize,
    pub pOptions: *const CUpti_Profiler_CounterDataImageOptions,
    pub counterDataImageSize: usize,
    pub pCounterDataImage: *mut u8,
}
#[test]
fn bindgen_test_layout_CUpti_Profiler_CounterDataImage_Initialize_Params() {
    const UNINIT: ::std::mem::MaybeUninit<CUpti_Profiler_CounterDataImage_Initialize_Params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CUpti_Profiler_CounterDataImage_Initialize_Params>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(CUpti_Profiler_CounterDataImage_Initialize_Params)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CUpti_Profiler_CounterDataImage_Initialize_Params>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CUpti_Profiler_CounterDataImage_Initialize_Params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).structSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_CounterDataImage_Initialize_Params),
            "::",
            stringify!(structSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPriv) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_CounterDataImage_Initialize_Params),
            "::",
            stringify!(pPriv)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).sizeofCounterDataImageOptions) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_CounterDataImage_Initialize_Params),
            "::",
            stringify!(sizeofCounterDataImageOptions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pOptions) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_CounterDataImage_Initialize_Params),
            "::",
            stringify!(pOptions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).counterDataImageSize) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_CounterDataImage_Initialize_Params),
            "::",
            stringify!(counterDataImageSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCounterDataImage) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_CounterDataImage_Initialize_Params),
            "::",
            stringify!(pCounterDataImage)
        )
    );
}
impl Default for CUpti_Profiler_CounterDataImage_Initialize_Params {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn cuptiProfilerCounterDataImageCalculateSize(
        pParams: *mut CUpti_Profiler_CounterDataImage_CalculateSize_Params,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiProfilerCounterDataImageInitialize(
        pParams: *mut CUpti_Profiler_CounterDataImage_Initialize_Params,
    ) -> CUptiResult;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct CUpti_Profiler_CounterDataImage_CalculateScratchBufferSize_Params {
    pub structSize: usize,
    pub pPriv: *mut ::std::os::raw::c_void,
    pub counterDataImageSize: usize,
    pub pCounterDataImage: *mut u8,
    pub counterDataScratchBufferSize: usize,
}
#[test]
fn bindgen_test_layout_CUpti_Profiler_CounterDataImage_CalculateScratchBufferSize_Params() {
    const UNINIT: ::std::mem::MaybeUninit<
        CUpti_Profiler_CounterDataImage_CalculateScratchBufferSize_Params,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CUpti_Profiler_CounterDataImage_CalculateScratchBufferSize_Params>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(CUpti_Profiler_CounterDataImage_CalculateScratchBufferSize_Params)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CUpti_Profiler_CounterDataImage_CalculateScratchBufferSize_Params>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CUpti_Profiler_CounterDataImage_CalculateScratchBufferSize_Params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).structSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_CounterDataImage_CalculateScratchBufferSize_Params),
            "::",
            stringify!(structSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPriv) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_CounterDataImage_CalculateScratchBufferSize_Params),
            "::",
            stringify!(pPriv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).counterDataImageSize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_CounterDataImage_CalculateScratchBufferSize_Params),
            "::",
            stringify!(counterDataImageSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCounterDataImage) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_CounterDataImage_CalculateScratchBufferSize_Params),
            "::",
            stringify!(pCounterDataImage)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).counterDataScratchBufferSize) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_CounterDataImage_CalculateScratchBufferSize_Params),
            "::",
            stringify!(counterDataScratchBufferSize)
        )
    );
}
impl Default for CUpti_Profiler_CounterDataImage_CalculateScratchBufferSize_Params {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct CUpti_Profiler_CounterDataImage_InitializeScratchBuffer_Params {
    pub structSize: usize,
    pub pPriv: *mut ::std::os::raw::c_void,
    pub counterDataImageSize: usize,
    pub pCounterDataImage: *mut u8,
    pub counterDataScratchBufferSize: usize,
    pub pCounterDataScratchBuffer: *mut u8,
}
#[test]
fn bindgen_test_layout_CUpti_Profiler_CounterDataImage_InitializeScratchBuffer_Params() {
    const UNINIT: ::std::mem::MaybeUninit<
        CUpti_Profiler_CounterDataImage_InitializeScratchBuffer_Params,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CUpti_Profiler_CounterDataImage_InitializeScratchBuffer_Params>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(CUpti_Profiler_CounterDataImage_InitializeScratchBuffer_Params)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CUpti_Profiler_CounterDataImage_InitializeScratchBuffer_Params>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CUpti_Profiler_CounterDataImage_InitializeScratchBuffer_Params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).structSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_CounterDataImage_InitializeScratchBuffer_Params),
            "::",
            stringify!(structSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPriv) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_CounterDataImage_InitializeScratchBuffer_Params),
            "::",
            stringify!(pPriv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).counterDataImageSize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_CounterDataImage_InitializeScratchBuffer_Params),
            "::",
            stringify!(counterDataImageSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCounterDataImage) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_CounterDataImage_InitializeScratchBuffer_Params),
            "::",
            stringify!(pCounterDataImage)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).counterDataScratchBufferSize) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_CounterDataImage_InitializeScratchBuffer_Params),
            "::",
            stringify!(counterDataScratchBufferSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCounterDataScratchBuffer) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_CounterDataImage_InitializeScratchBuffer_Params),
            "::",
            stringify!(pCounterDataScratchBuffer)
        )
    );
}
impl Default for CUpti_Profiler_CounterDataImage_InitializeScratchBuffer_Params {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn cuptiProfilerCounterDataImageCalculateScratchBufferSize(
        pParams: *mut CUpti_Profiler_CounterDataImage_CalculateScratchBufferSize_Params,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiProfilerCounterDataImageInitializeScratchBuffer(
        pParams: *mut CUpti_Profiler_CounterDataImage_InitializeScratchBuffer_Params,
    ) -> CUptiResult;
}
#[repr(C)]
pub struct CUpti_Profiler_BeginSession_Params {
    pub structSize: usize,
    pub pPriv: *mut ::std::os::raw::c_void,
    pub ctx: CUcontext,
    pub counterDataImageSize: usize,
    pub pCounterDataImage: *mut u8,
    pub counterDataScratchBufferSize: usize,
    pub pCounterDataScratchBuffer: *mut u8,
    pub bDumpCounterDataInFile: u8,
    pub pCounterDataFilePath: *const ::std::os::raw::c_char,
    pub range: CUpti_ProfilerRange,
    pub replayMode: CUpti_ProfilerReplayMode,
    pub maxRangesPerPass: usize,
    pub maxLaunchesPerPass: usize,
}
#[test]
fn bindgen_test_layout_CUpti_Profiler_BeginSession_Params() {
    const UNINIT: ::std::mem::MaybeUninit<CUpti_Profiler_BeginSession_Params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CUpti_Profiler_BeginSession_Params>(),
        96usize,
        concat!("Size of: ", stringify!(CUpti_Profiler_BeginSession_Params))
    );
    assert_eq!(
        ::std::mem::align_of::<CUpti_Profiler_BeginSession_Params>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CUpti_Profiler_BeginSession_Params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).structSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_BeginSession_Params),
            "::",
            stringify!(structSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPriv) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_BeginSession_Params),
            "::",
            stringify!(pPriv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_BeginSession_Params),
            "::",
            stringify!(ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).counterDataImageSize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_BeginSession_Params),
            "::",
            stringify!(counterDataImageSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCounterDataImage) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_BeginSession_Params),
            "::",
            stringify!(pCounterDataImage)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).counterDataScratchBufferSize) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_BeginSession_Params),
            "::",
            stringify!(counterDataScratchBufferSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCounterDataScratchBuffer) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_BeginSession_Params),
            "::",
            stringify!(pCounterDataScratchBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDumpCounterDataInFile) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_BeginSession_Params),
            "::",
            stringify!(bDumpCounterDataInFile)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCounterDataFilePath) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_BeginSession_Params),
            "::",
            stringify!(pCounterDataFilePath)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).range) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_BeginSession_Params),
            "::",
            stringify!(range)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).replayMode) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_BeginSession_Params),
            "::",
            stringify!(replayMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxRangesPerPass) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_BeginSession_Params),
            "::",
            stringify!(maxRangesPerPass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxLaunchesPerPass) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_BeginSession_Params),
            "::",
            stringify!(maxLaunchesPerPass)
        )
    );
}
impl Default for CUpti_Profiler_BeginSession_Params {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct CUpti_Profiler_EndSession_Params {
    pub structSize: usize,
    pub pPriv: *mut ::std::os::raw::c_void,
    pub ctx: CUcontext,
}
#[test]
fn bindgen_test_layout_CUpti_Profiler_EndSession_Params() {
    const UNINIT: ::std::mem::MaybeUninit<CUpti_Profiler_EndSession_Params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CUpti_Profiler_EndSession_Params>(),
        24usize,
        concat!("Size of: ", stringify!(CUpti_Profiler_EndSession_Params))
    );
    assert_eq!(
        ::std::mem::align_of::<CUpti_Profiler_EndSession_Params>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CUpti_Profiler_EndSession_Params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).structSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_EndSession_Params),
            "::",
            stringify!(structSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPriv) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_EndSession_Params),
            "::",
            stringify!(pPriv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_EndSession_Params),
            "::",
            stringify!(ctx)
        )
    );
}
impl Default for CUpti_Profiler_EndSession_Params {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn cuptiProfilerBeginSession(
        pParams: *mut CUpti_Profiler_BeginSession_Params,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiProfilerEndSession(pParams: *mut CUpti_Profiler_EndSession_Params) -> CUptiResult;
}
#[repr(C)]
pub struct CUpti_Profiler_SetConfig_Params {
    pub structSize: usize,
    pub pPriv: *mut ::std::os::raw::c_void,
    pub ctx: CUcontext,
    pub pConfig: *const u8,
    pub configSize: usize,
    pub minNestingLevel: u16,
    pub numNestingLevels: u16,
    pub passIndex: usize,
    pub targetNestingLevel: u16,
}
#[test]
fn bindgen_test_layout_CUpti_Profiler_SetConfig_Params() {
    const UNINIT: ::std::mem::MaybeUninit<CUpti_Profiler_SetConfig_Params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CUpti_Profiler_SetConfig_Params>(),
        64usize,
        concat!("Size of: ", stringify!(CUpti_Profiler_SetConfig_Params))
    );
    assert_eq!(
        ::std::mem::align_of::<CUpti_Profiler_SetConfig_Params>(),
        8usize,
        concat!("Alignment of ", stringify!(CUpti_Profiler_SetConfig_Params))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).structSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_SetConfig_Params),
            "::",
            stringify!(structSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPriv) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_SetConfig_Params),
            "::",
            stringify!(pPriv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_SetConfig_Params),
            "::",
            stringify!(ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pConfig) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_SetConfig_Params),
            "::",
            stringify!(pConfig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).configSize) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_SetConfig_Params),
            "::",
            stringify!(configSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minNestingLevel) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_SetConfig_Params),
            "::",
            stringify!(minNestingLevel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numNestingLevels) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_SetConfig_Params),
            "::",
            stringify!(numNestingLevels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).passIndex) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_SetConfig_Params),
            "::",
            stringify!(passIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).targetNestingLevel) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_SetConfig_Params),
            "::",
            stringify!(targetNestingLevel)
        )
    );
}
impl Default for CUpti_Profiler_SetConfig_Params {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct CUpti_Profiler_UnsetConfig_Params {
    pub structSize: usize,
    pub pPriv: *mut ::std::os::raw::c_void,
    pub ctx: CUcontext,
}
#[test]
fn bindgen_test_layout_CUpti_Profiler_UnsetConfig_Params() {
    const UNINIT: ::std::mem::MaybeUninit<CUpti_Profiler_UnsetConfig_Params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CUpti_Profiler_UnsetConfig_Params>(),
        24usize,
        concat!("Size of: ", stringify!(CUpti_Profiler_UnsetConfig_Params))
    );
    assert_eq!(
        ::std::mem::align_of::<CUpti_Profiler_UnsetConfig_Params>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CUpti_Profiler_UnsetConfig_Params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).structSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_UnsetConfig_Params),
            "::",
            stringify!(structSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPriv) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_UnsetConfig_Params),
            "::",
            stringify!(pPriv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_UnsetConfig_Params),
            "::",
            stringify!(ctx)
        )
    );
}
impl Default for CUpti_Profiler_UnsetConfig_Params {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn cuptiProfilerSetConfig(pParams: *mut CUpti_Profiler_SetConfig_Params) -> CUptiResult;
}
extern "C" {
    pub fn cuptiProfilerUnsetConfig(pParams: *mut CUpti_Profiler_UnsetConfig_Params)
        -> CUptiResult;
}
#[repr(C)]
pub struct CUpti_Profiler_BeginPass_Params {
    pub structSize: usize,
    pub pPriv: *mut ::std::os::raw::c_void,
    pub ctx: CUcontext,
}
#[test]
fn bindgen_test_layout_CUpti_Profiler_BeginPass_Params() {
    const UNINIT: ::std::mem::MaybeUninit<CUpti_Profiler_BeginPass_Params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CUpti_Profiler_BeginPass_Params>(),
        24usize,
        concat!("Size of: ", stringify!(CUpti_Profiler_BeginPass_Params))
    );
    assert_eq!(
        ::std::mem::align_of::<CUpti_Profiler_BeginPass_Params>(),
        8usize,
        concat!("Alignment of ", stringify!(CUpti_Profiler_BeginPass_Params))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).structSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_BeginPass_Params),
            "::",
            stringify!(structSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPriv) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_BeginPass_Params),
            "::",
            stringify!(pPriv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_BeginPass_Params),
            "::",
            stringify!(ctx)
        )
    );
}
impl Default for CUpti_Profiler_BeginPass_Params {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct CUpti_Profiler_EndPass_Params {
    pub structSize: usize,
    pub pPriv: *mut ::std::os::raw::c_void,
    pub ctx: CUcontext,
    pub targetNestingLevel: u16,
    pub passIndex: usize,
    pub allPassesSubmitted: u8,
}
#[test]
fn bindgen_test_layout_CUpti_Profiler_EndPass_Params() {
    const UNINIT: ::std::mem::MaybeUninit<CUpti_Profiler_EndPass_Params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CUpti_Profiler_EndPass_Params>(),
        48usize,
        concat!("Size of: ", stringify!(CUpti_Profiler_EndPass_Params))
    );
    assert_eq!(
        ::std::mem::align_of::<CUpti_Profiler_EndPass_Params>(),
        8usize,
        concat!("Alignment of ", stringify!(CUpti_Profiler_EndPass_Params))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).structSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_EndPass_Params),
            "::",
            stringify!(structSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPriv) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_EndPass_Params),
            "::",
            stringify!(pPriv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_EndPass_Params),
            "::",
            stringify!(ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).targetNestingLevel) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_EndPass_Params),
            "::",
            stringify!(targetNestingLevel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).passIndex) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_EndPass_Params),
            "::",
            stringify!(passIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allPassesSubmitted) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_EndPass_Params),
            "::",
            stringify!(allPassesSubmitted)
        )
    );
}
impl Default for CUpti_Profiler_EndPass_Params {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn cuptiProfilerBeginPass(pParams: *mut CUpti_Profiler_BeginPass_Params) -> CUptiResult;
}
extern "C" {
    pub fn cuptiProfilerEndPass(pParams: *mut CUpti_Profiler_EndPass_Params) -> CUptiResult;
}
#[repr(C)]
pub struct CUpti_Profiler_EnableProfiling_Params {
    pub structSize: usize,
    pub pPriv: *mut ::std::os::raw::c_void,
    pub ctx: CUcontext,
}
#[test]
fn bindgen_test_layout_CUpti_Profiler_EnableProfiling_Params() {
    const UNINIT: ::std::mem::MaybeUninit<CUpti_Profiler_EnableProfiling_Params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CUpti_Profiler_EnableProfiling_Params>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(CUpti_Profiler_EnableProfiling_Params)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CUpti_Profiler_EnableProfiling_Params>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CUpti_Profiler_EnableProfiling_Params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).structSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_EnableProfiling_Params),
            "::",
            stringify!(structSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPriv) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_EnableProfiling_Params),
            "::",
            stringify!(pPriv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_EnableProfiling_Params),
            "::",
            stringify!(ctx)
        )
    );
}
impl Default for CUpti_Profiler_EnableProfiling_Params {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct CUpti_Profiler_DisableProfiling_Params {
    pub structSize: usize,
    pub pPriv: *mut ::std::os::raw::c_void,
    pub ctx: CUcontext,
}
#[test]
fn bindgen_test_layout_CUpti_Profiler_DisableProfiling_Params() {
    const UNINIT: ::std::mem::MaybeUninit<CUpti_Profiler_DisableProfiling_Params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CUpti_Profiler_DisableProfiling_Params>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(CUpti_Profiler_DisableProfiling_Params)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CUpti_Profiler_DisableProfiling_Params>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CUpti_Profiler_DisableProfiling_Params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).structSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_DisableProfiling_Params),
            "::",
            stringify!(structSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPriv) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_DisableProfiling_Params),
            "::",
            stringify!(pPriv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_DisableProfiling_Params),
            "::",
            stringify!(ctx)
        )
    );
}
impl Default for CUpti_Profiler_DisableProfiling_Params {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn cuptiProfilerEnableProfiling(
        pParams: *mut CUpti_Profiler_EnableProfiling_Params,
    ) -> CUptiResult;
}
extern "C" {
    pub fn cuptiProfilerDisableProfiling(
        pParams: *mut CUpti_Profiler_DisableProfiling_Params,
    ) -> CUptiResult;
}
#[repr(C)]
pub struct CUpti_Profiler_IsPassCollected_Params {
    pub structSize: usize,
    pub pPriv: *mut ::std::os::raw::c_void,
    pub ctx: CUcontext,
    pub numRangesDropped: usize,
    pub numTraceBytesDropped: usize,
    pub onePassCollected: u8,
    pub allPassesCollected: u8,
}
#[test]
fn bindgen_test_layout_CUpti_Profiler_IsPassCollected_Params() {
    const UNINIT: ::std::mem::MaybeUninit<CUpti_Profiler_IsPassCollected_Params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CUpti_Profiler_IsPassCollected_Params>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(CUpti_Profiler_IsPassCollected_Params)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CUpti_Profiler_IsPassCollected_Params>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CUpti_Profiler_IsPassCollected_Params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).structSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_IsPassCollected_Params),
            "::",
            stringify!(structSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPriv) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_IsPassCollected_Params),
            "::",
            stringify!(pPriv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_IsPassCollected_Params),
            "::",
            stringify!(ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numRangesDropped) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_IsPassCollected_Params),
            "::",
            stringify!(numRangesDropped)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numTraceBytesDropped) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_IsPassCollected_Params),
            "::",
            stringify!(numTraceBytesDropped)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onePassCollected) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_IsPassCollected_Params),
            "::",
            stringify!(onePassCollected)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allPassesCollected) as usize - ptr as usize },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_IsPassCollected_Params),
            "::",
            stringify!(allPassesCollected)
        )
    );
}
impl Default for CUpti_Profiler_IsPassCollected_Params {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn cuptiProfilerIsPassCollected(
        pParams: *mut CUpti_Profiler_IsPassCollected_Params,
    ) -> CUptiResult;
}
#[repr(C)]
pub struct CUpti_Profiler_FlushCounterData_Params {
    pub structSize: usize,
    pub pPriv: *mut ::std::os::raw::c_void,
    pub ctx: CUcontext,
    pub numRangesDropped: usize,
    pub numTraceBytesDropped: usize,
}
#[test]
fn bindgen_test_layout_CUpti_Profiler_FlushCounterData_Params() {
    const UNINIT: ::std::mem::MaybeUninit<CUpti_Profiler_FlushCounterData_Params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CUpti_Profiler_FlushCounterData_Params>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(CUpti_Profiler_FlushCounterData_Params)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CUpti_Profiler_FlushCounterData_Params>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CUpti_Profiler_FlushCounterData_Params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).structSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_FlushCounterData_Params),
            "::",
            stringify!(structSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPriv) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_FlushCounterData_Params),
            "::",
            stringify!(pPriv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_FlushCounterData_Params),
            "::",
            stringify!(ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numRangesDropped) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_FlushCounterData_Params),
            "::",
            stringify!(numRangesDropped)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numTraceBytesDropped) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_FlushCounterData_Params),
            "::",
            stringify!(numTraceBytesDropped)
        )
    );
}
impl Default for CUpti_Profiler_FlushCounterData_Params {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn cuptiProfilerFlushCounterData(
        pParams: *mut CUpti_Profiler_FlushCounterData_Params,
    ) -> CUptiResult;
}
#[repr(C)]
pub struct CUpti_Profiler_PushRange_Params {
    pub structSize: usize,
    pub pPriv: *mut ::std::os::raw::c_void,
    pub ctx: CUcontext,
    pub pRangeName: *const ::std::os::raw::c_char,
    pub rangeNameLength: usize,
}
#[test]
fn bindgen_test_layout_CUpti_Profiler_PushRange_Params() {
    const UNINIT: ::std::mem::MaybeUninit<CUpti_Profiler_PushRange_Params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CUpti_Profiler_PushRange_Params>(),
        40usize,
        concat!("Size of: ", stringify!(CUpti_Profiler_PushRange_Params))
    );
    assert_eq!(
        ::std::mem::align_of::<CUpti_Profiler_PushRange_Params>(),
        8usize,
        concat!("Alignment of ", stringify!(CUpti_Profiler_PushRange_Params))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).structSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_PushRange_Params),
            "::",
            stringify!(structSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPriv) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_PushRange_Params),
            "::",
            stringify!(pPriv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_PushRange_Params),
            "::",
            stringify!(ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pRangeName) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_PushRange_Params),
            "::",
            stringify!(pRangeName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rangeNameLength) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_PushRange_Params),
            "::",
            stringify!(rangeNameLength)
        )
    );
}
impl Default for CUpti_Profiler_PushRange_Params {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct CUpti_Profiler_PopRange_Params {
    pub structSize: usize,
    pub pPriv: *mut ::std::os::raw::c_void,
    pub ctx: CUcontext,
}
#[test]
fn bindgen_test_layout_CUpti_Profiler_PopRange_Params() {
    const UNINIT: ::std::mem::MaybeUninit<CUpti_Profiler_PopRange_Params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CUpti_Profiler_PopRange_Params>(),
        24usize,
        concat!("Size of: ", stringify!(CUpti_Profiler_PopRange_Params))
    );
    assert_eq!(
        ::std::mem::align_of::<CUpti_Profiler_PopRange_Params>(),
        8usize,
        concat!("Alignment of ", stringify!(CUpti_Profiler_PopRange_Params))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).structSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_PopRange_Params),
            "::",
            stringify!(structSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPriv) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_PopRange_Params),
            "::",
            stringify!(pPriv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_PopRange_Params),
            "::",
            stringify!(ctx)
        )
    );
}
impl Default for CUpti_Profiler_PopRange_Params {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn cuptiProfilerPushRange(pParams: *mut CUpti_Profiler_PushRange_Params) -> CUptiResult;
}
extern "C" {
    pub fn cuptiProfilerPopRange(pParams: *mut CUpti_Profiler_PopRange_Params) -> CUptiResult;
}
#[repr(C)]
pub struct CUpti_Profiler_GetCounterAvailability_Params {
    pub structSize: usize,
    pub pPriv: *mut ::std::os::raw::c_void,
    pub ctx: CUcontext,
    pub counterAvailabilityImageSize: usize,
    pub pCounterAvailabilityImage: *mut u8,
}
#[test]
fn bindgen_test_layout_CUpti_Profiler_GetCounterAvailability_Params() {
    const UNINIT: ::std::mem::MaybeUninit<CUpti_Profiler_GetCounterAvailability_Params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CUpti_Profiler_GetCounterAvailability_Params>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(CUpti_Profiler_GetCounterAvailability_Params)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CUpti_Profiler_GetCounterAvailability_Params>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CUpti_Profiler_GetCounterAvailability_Params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).structSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_GetCounterAvailability_Params),
            "::",
            stringify!(structSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPriv) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_GetCounterAvailability_Params),
            "::",
            stringify!(pPriv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_GetCounterAvailability_Params),
            "::",
            stringify!(ctx)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).counterAvailabilityImageSize) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_GetCounterAvailability_Params),
            "::",
            stringify!(counterAvailabilityImageSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCounterAvailabilityImage) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_GetCounterAvailability_Params),
            "::",
            stringify!(pCounterAvailabilityImage)
        )
    );
}
impl Default for CUpti_Profiler_GetCounterAvailability_Params {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn cuptiProfilerGetCounterAvailability(
        pParams: *mut CUpti_Profiler_GetCounterAvailability_Params,
    ) -> CUptiResult;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum CUpti_Profiler_Support_Level {
    CUPTI_PROFILER_CONFIGURATION_UNKNOWN = 0,
    CUPTI_PROFILER_CONFIGURATION_UNSUPPORTED = 1,
    CUPTI_PROFILER_CONFIGURATION_DISABLED = 2,
    CUPTI_PROFILER_CONFIGURATION_SUPPORTED = 3,
}
#[repr(C)]
pub struct CUpti_Profiler_DeviceSupported_Params {
    pub structSize: usize,
    pub pPriv: *mut ::std::os::raw::c_void,
    pub cuDevice: CUdevice,
    pub isSupported: CUpti_Profiler_Support_Level,
    pub architecture: CUpti_Profiler_Support_Level,
    pub sli: CUpti_Profiler_Support_Level,
    pub vGpu: CUpti_Profiler_Support_Level,
    pub confidentialCompute: CUpti_Profiler_Support_Level,
    pub cmp: CUpti_Profiler_Support_Level,
}
#[test]
fn bindgen_test_layout_CUpti_Profiler_DeviceSupported_Params() {
    const UNINIT: ::std::mem::MaybeUninit<CUpti_Profiler_DeviceSupported_Params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CUpti_Profiler_DeviceSupported_Params>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(CUpti_Profiler_DeviceSupported_Params)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CUpti_Profiler_DeviceSupported_Params>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CUpti_Profiler_DeviceSupported_Params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).structSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_DeviceSupported_Params),
            "::",
            stringify!(structSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPriv) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_DeviceSupported_Params),
            "::",
            stringify!(pPriv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cuDevice) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_DeviceSupported_Params),
            "::",
            stringify!(cuDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isSupported) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_DeviceSupported_Params),
            "::",
            stringify!(isSupported)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).architecture) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_DeviceSupported_Params),
            "::",
            stringify!(architecture)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sli) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_DeviceSupported_Params),
            "::",
            stringify!(sli)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vGpu) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_DeviceSupported_Params),
            "::",
            stringify!(vGpu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).confidentialCompute) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_DeviceSupported_Params),
            "::",
            stringify!(confidentialCompute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmp) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CUpti_Profiler_DeviceSupported_Params),
            "::",
            stringify!(cmp)
        )
    );
}
impl Default for CUpti_Profiler_DeviceSupported_Params {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn cuptiProfilerDeviceSupported(
        pParams: *mut CUpti_Profiler_DeviceSupported_Params,
    ) -> CUptiResult;
}
